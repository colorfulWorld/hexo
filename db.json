{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/android-chrome-192x192.png","path":"android-chrome-192x192.png","modified":0,"renderable":0},{"_id":"source/android-chrome-192x192.webp","path":"android-chrome-192x192.webp","modified":0,"renderable":0},{"_id":"source/android-chrome-256x256.png","path":"android-chrome-256x256.png","modified":0,"renderable":0},{"_id":"source/android-chrome-256x256.webp","path":"android-chrome-256x256.webp","modified":0,"renderable":0},{"_id":"source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":0},{"_id":"source/apple-touch-icon.webp","path":"apple-touch-icon.webp","modified":0,"renderable":0},{"_id":"source/browserconfig.xml","path":"browserconfig.xml","modified":0,"renderable":0},{"_id":"source/failure.ico","path":"failure.ico","modified":0,"renderable":0},{"_id":"source/favico.ico","path":"favico.ico","modified":0,"renderable":0},{"_id":"source/favicon-16x16.png","path":"favicon-16x16.png","modified":0,"renderable":0},{"_id":"source/favicon-16x16.webp","path":"favicon-16x16.webp","modified":0,"renderable":0},{"_id":"source/favicon-32x32.png","path":"favicon-32x32.png","modified":0,"renderable":0},{"_id":"source/favicon-32x32.webp","path":"favicon-32x32.webp","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/mstile-150x150.png","path":"mstile-150x150.png","modified":0,"renderable":0},{"_id":"source/mstile-150x150.webp","path":"mstile-150x150.webp","modified":0,"renderable":0},{"_id":"source/safari-pinned-tab.svg","path":"safari-pinned-tab.svg","modified":0,"renderable":0},{"_id":"source/images/1000.jpg","path":"images/1000.jpg","modified":0,"renderable":0},{"_id":"source/images/1000.webp","path":"images/1000.webp","modified":0,"renderable":0},{"_id":"source/images/2016-08-25_wxd.png","path":"images/2016-08-25_wxd.png","modified":0,"renderable":0},{"_id":"source/images/2016-08-25_zfbd.png","path":"images/2016-08-25_zfbd.png","modified":0,"renderable":0},{"_id":"source/images/2016-08-25_wxd.webp","path":"images/2016-08-25_wxd.webp","modified":0,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"source/images/2016-08-25_zfbd.webp","path":"images/2016-08-25_zfbd.webp","modified":0,"renderable":0},{"_id":"source/images/wxwlive1.jpg","path":"images/wxwlive1.jpg","modified":0,"renderable":0},{"_id":"source/images/wxwlive1.webp","path":"images/wxwlive1.webp","modified":0,"renderable":0},{"_id":"source/images/cli/第三方库支持.png","path":"images/cli/第三方库支持.png","modified":0,"renderable":0},{"_id":"source/images/cli/脚手架构建流程.png","path":"images/cli/脚手架构建流程.png","modified":0,"renderable":0},{"_id":"source/images/common/http2_1.jpg","path":"images/common/http2_1.jpg","modified":0,"renderable":0},{"_id":"source/images/common/kuaipai.png","path":"images/common/kuaipai.png","modified":0,"renderable":0},{"_id":"source/images/problem/2.png","path":"images/problem/2.png","modified":0,"renderable":0},{"_id":"source/images/problem/1.png","path":"images/problem/1.png","modified":0,"renderable":0},{"_id":"source/images/prototype/1.png","path":"images/prototype/1.png","modified":0,"renderable":0},{"_id":"source/images/prototype/2.png","path":"images/prototype/2.png","modified":0,"renderable":0},{"_id":"themes/sagiri/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/sagiri/source/fonts/Candyshop.otf","path":"fonts/Candyshop.otf","modified":0,"renderable":1},{"_id":"themes/sagiri/source/fonts/sigmarone1.woff2","path":"fonts/sigmarone1.woff2","modified":0,"renderable":1},{"_id":"themes/sagiri/source/fonts/sigmarone2.woff2","path":"fonts/sigmarone2.woff2","modified":0,"renderable":1},{"_id":"themes/sagiri/source/fonts/sigmarone3.woff2","path":"fonts/sigmarone3.woff2","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/DIYgod-avatar.jpg","path":"images/DIYgod-avatar.jpg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/DIYgod.webp","path":"images/DIYgod.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/DIYgod-avatar.webp","path":"images/DIYgod-avatar.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/DIYgod.jpg","path":"images/DIYgod.jpg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/alipay.webp","path":"images/alipay.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/alipay.png","path":"images/alipay.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/apple-touch-icon-next.webp","path":"images/apple-touch-icon-next.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/card-avatar.jpg","path":"images/card-avatar.jpg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/card-avatar.webp","path":"images/card-avatar.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/card.jpg","path":"images/card.jpg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/card.webp","path":"images/card.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cc-by-nc-nd.png","path":"images/cc-by-nc-nd.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cc-by-nc-nd.webp","path":"images/cc-by-nc-nd.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cc-by-nc-sa.png","path":"images/cc-by-nc-sa.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cc-by-nc-sa.webp","path":"images/cc-by-nc-sa.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cc-by-nc.png","path":"images/cc-by-nc.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cc-by-nc.webp","path":"images/cc-by-nc.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cc-by-nd.png","path":"images/cc-by-nd.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cc-by-nd.webp","path":"images/cc-by-nd.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cc-by-sa.png","path":"images/cc-by-sa.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cc-by-sa.webp","path":"images/cc-by-sa.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cc-by.png","path":"images/cc-by.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cc-by.webp","path":"images/cc-by.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cc-zero.png","path":"images/cc-zero.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cc-zero.webp","path":"images/cc-zero.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/cursor.ico","path":"images/cursor.ico","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/footer.png","path":"images/footer.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/footer.webp","path":"images/footer.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-darling.jpg","path":"images/header-darling.jpg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-darling.webp","path":"images/header-darling.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-darling2.jpg","path":"images/header-darling2.jpg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-darling2.webp","path":"images/header-darling2.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-darling3.jpg","path":"images/header-darling3.jpg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-darling3.webp","path":"images/header-darling3.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-darling4.jpg","path":"images/header-darling4.jpg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-darling4.webp","path":"images/header-darling4.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-darlings.jpg","path":"images/header-darlings.jpg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-darlings.webp","path":"images/header-darlings.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-gyx-s.png","path":"images/header-gyx-s.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-gyx-s.webp","path":"images/header-gyx-s.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-gyx.png","path":"images/header-gyx.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-gyx.webp","path":"images/header-gyx.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-leg.jpg","path":"images/header-leg.jpg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-mai.jpg","path":"images/header-mai.jpg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-mai.webp","path":"images/header-mai.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-sagiri.jpg","path":"images/header-sagiri.jpg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-leg.webp","path":"images/header-leg.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header-sagiri.webp","path":"images/header-sagiri.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header.jpg","path":"images/header.jpg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/header.webp","path":"images/header.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/scroll.png","path":"images/scroll.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/scroll.webp","path":"images/scroll.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/searchicon.webp","path":"images/searchicon.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/wechatpay.png","path":"images/wechatpay.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/wechatpay.webp","path":"images/wechatpay.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/js/sagiri.min.js","path":"js/sagiri.min.js","modified":0,"renderable":1},{"_id":"themes/sagiri/source/js/sagiri.min.js.LICENSE.txt","path":"js/sagiri.min.js.LICENSE.txt","modified":0,"renderable":1},{"_id":"themes/sagiri/source/js/sagiri.min.js.map","path":"js/sagiri.min.js.map","modified":0,"renderable":1},{"_id":"themes/sagiri/source/js/video-report.html","path":"js/video-report.html","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/sw-toolbox/sw-toolbox.js","path":"lib/sw-toolbox/sw-toolbox.js","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/velocity-animate/LICENSE.md","path":"lib/velocity-animate/LICENSE.md","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/velocity-animate/README.md","path":"lib/velocity-animate/README.md","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/velocity-animate/velocity.min.js","path":"lib/velocity-animate/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/velocity-animate/package.json","path":"lib/velocity-animate/package.json","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/velocity-animate/velocity.js","path":"lib/velocity-animate/velocity.js","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/velocity-animate/velocity.ui.js","path":"lib/velocity-animate/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/velocity-animate/velocity.ui.min.js","path":"lib/velocity-animate/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/live2d/22/22.moc","path":"images/live2d/22/22.moc","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/live2d/22/22.model.json","path":"images/live2d/22/22.model.json","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/live2d/33/33.moc","path":"images/live2d/33/33.moc","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/live2d/33/33.model.json","path":"images/live2d/33/33.model.json","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/social-share.js/css/share.min.css","path":"lib/social-share.js/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/social-share.js/fonts/iconfont.eot","path":"lib/social-share.js/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/social-share.js/fonts/iconfont.svg","path":"lib/social-share.js/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/social-share.js/fonts/iconfont.ttf","path":"lib/social-share.js/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/social-share.js/fonts/iconfont.woff","path":"lib/social-share.js/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/social-share.js/js/jquery.share.min.js","path":"lib/social-share.js/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/social-share.js/js/social-share.min.js","path":"lib/social-share.js/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/sagiri/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/live2d/22/22.2048/texture_00.png","path":"images/live2d/22/22.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/live2d/22/22.2048/texture_00.webp","path":"images/live2d/22/22.2048/texture_00.webp","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/live2d/33/33.2048/texture_00.png","path":"images/live2d/33/33.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/sagiri/source/images/live2d/33/33.2048/texture_00.webp","path":"images/live2d/33/33.2048/texture_00.webp","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"1f2b8e1d37bc03c80a3d53a586651e71ef38f19d","modified":1614737137086},{"_id":"source/android-chrome-192x192.png","hash":"271e0371f46fbd5720d8761e1d68253a91fa1c95","modified":1614131863110},{"_id":"source/android-chrome-192x192.webp","hash":"f61b1615c82acf52aacac07038ecc4fbf130fc9f","modified":1614131863110},{"_id":"source/android-chrome-256x256.webp","hash":"1f05572eb58ddd35c0b3885f3e906c523c886df3","modified":1614131863112},{"_id":"source/android-chrome-256x256.png","hash":"f20d08929cb840cb5148227cdbe9c219b887d95f","modified":1614131863112},{"_id":"source/apple-touch-icon.png","hash":"6e89a84032262cbf1ebe5aee23edccf29081d1f2","modified":1614131863113},{"_id":"source/apple-touch-icon.webp","hash":"ee326b691b0b2c7997d75cb7caa6487f6d2828bf","modified":1614131863114},{"_id":"source/browserconfig.xml","hash":"83699de65898612182974bc15e01756432fb5cf9","modified":1614131863115},{"_id":"source/failure.ico","hash":"5eec5c163400d8ece74286da49130da1ead3f6f6","modified":1614570446035},{"_id":"source/favicon-16x16.png","hash":"20b70672bc4a70231e68fb24b9cf7a55b4e684a5","modified":1614131863116},{"_id":"source/favico.ico","hash":"2d7ec086b029d8a224a4dae1a428c6a3f6209d92","modified":1614131863115},{"_id":"source/favicon-16x16.webp","hash":"df3f7e40344a5b37e73e8783c6a9caa2d2c01acf","modified":1614131863116},{"_id":"source/favicon-32x32.png","hash":"c1d0ec90c13b3cacc1e75d71658111e0af178912","modified":1614131863117},{"_id":"source/favicon-32x32.webp","hash":"078619032ccb0894c9828659216e039b44d2c1de","modified":1614131863117},{"_id":"source/favicon.ico","hash":"2d7ec086b029d8a224a4dae1a428c6a3f6209d92","modified":1614131863118},{"_id":"source/manifest.json","hash":"e7de9feae36ac761f51185058f4e7aced4025b55","modified":1614131863310},{"_id":"source/mstile-150x150.png","hash":"f632b2a90a15c0024db2fd912010e87f210b5669","modified":1614131863311},{"_id":"source/mstile-150x150.webp","hash":"81b89e1acbf4c35f220289bb507e13353a28d4de","modified":1614131863311},{"_id":"source/safari-pinned-tab.svg","hash":"7b1a41c816227fabedd525f65714451a56e3870a","modified":1614131863312},{"_id":"source/sw.js","hash":"122837554a0c66883ad249e7015e2f85eea3220f","modified":1614674631399},{"_id":"source/404/index.md","hash":"0170e3385c01abde6b35b22dd395c7c94a8d38c1","modified":1614674722752},{"_id":"source/_posts/Event-loop-JS.md","hash":"437320d57d7006ef660bc35ff93c2d76e4ebcaca","modified":1563417381442},{"_id":"source/_posts/HTTP2.md","hash":"40979bb836562e2d59d4b6a01b8a0795b0205d83","modified":1614824657483},{"_id":"source/_posts/HTTPS.md","hash":"8efdfeaec914a4d2fff4ff36a99e0435829b80d2","modified":1614570446017},{"_id":"source/_posts/JS代码片段.md","hash":"c8511671c0e48659f3fc935a124ea965cda6f018","modified":1614824901313},{"_id":"source/_posts/JS原生-ES6.md","hash":"56936daa574f80ce65b6438fea41e2e83439b46a","modified":1617075428672},{"_id":"source/_posts/JS基础-ES5.md","hash":"add3c41cf704be8e2351f18ecfebd0c506f62efa","modified":1617075369975},{"_id":"source/_posts/JS的number类型最大值.md","hash":"8d2f2bbe119e142b06e89cb02d45cc20025c275f","modified":1568101452909},{"_id":"source/_posts/JavaScript动态规划和贪心算法.md","hash":"89ada82321e025f6c6636b4474b97f6391b87a84","modified":1563950460035},{"_id":"source/_posts/Jenkins对前端应用做自动化构建.md","hash":"5016cd07219ec27f64ebaa8bc5bec09d43c5d141","modified":1617009563052},{"_id":"source/_posts/Object-defineProperty.md","hash":"8d6d7d50e0bb838196e1af51486c47fe608cb1ff","modified":1617070101030},{"_id":"source/_posts/Observable.md","hash":"50aeecfde3d75cdd3571719e286b50e0e08bb085","modified":1614570446020},{"_id":"source/_posts/PWA-offline.md","hash":"281a2a00bbd8e39812c3b71d21dbbf11e8776e0d","modified":1614570446022},{"_id":"source/_posts/PWA-pushMessage.md","hash":"b94f777e1e69764bfe04c165630da7cb2ae79759","modified":1614570446024},{"_id":"source/_posts/Vue-js内部运行机制.md","hash":"ce88ea434358776ef14b40cbe487ca76c4f2c41f","modified":1577328018803},{"_id":"source/_posts/angular基础.md","hash":"730862ffb5e03894de604c0c0e7f8731da4bd927","modified":1614570446025},{"_id":"source/_posts/Vue小知识点运用.md","hash":"809a12089abbe1205b08ba7b392354fdccd39f75","modified":1583751676011},{"_id":"source/_posts/call、applay、bind.md","hash":"9a5fb924b269cfbcc99e47d32deab8dd1294999c","modified":1558321358446},{"_id":"source/_posts/css-小知识.md","hash":"5884896994fd0caa501e13aba97040871be5d4aa","modified":1614824639184},{"_id":"source/_posts/innerHTML与createElement.md","hash":"feb9d2712196dd6c7b67425c929903774fba568f","modified":1562655587281},{"_id":"source/_posts/jQuery-源码学习（一）.md","hash":"6d7785e3c6c711b54e5c7f42a37e1cef7e91f248","modified":1577328007293},{"_id":"source/_posts/jQuery-组件封装.md","hash":"04da48ed2282a5ccb1f6bdb26f848de9560ec599","modified":1558321358450},{"_id":"source/_posts/keep-alive小知识.md","hash":"e78135a4fc6c6e33c89a1b5fb43692f49caaf681","modified":1584068952812},{"_id":"source/_posts/require与import-的区别.md","hash":"1ee0fdca216a38b850f602797179d156507c2ae1","modified":1562655720046},{"_id":"source/_posts/this指向.md","hash":"51bbe00c1b986aad78dd3c6981aaacab2ddbbcaa","modified":1562655723309},{"_id":"source/_posts/vue懒加载与分组打包.md","hash":"f30384a6c4021dc92229115eacb9c1e8016e2bf8","modified":1585737341117},{"_id":"source/_posts/webpack优化之preload和prefetch.md","hash":"09a4751e34d3034b251387e72204eba25a71146d","modified":1614824688139},{"_id":"source/_posts/webpack打包优化.md","hash":"e08bdf50269285f6550bbb5927331b80ac828595","modified":1617008966390},{"_id":"source/_posts/webpack项目配置.md","hash":"431045194d58c8586872b426680894371305d947","modified":1616666456599},{"_id":"source/_posts/优化.md","hash":"9fe023f54fbad88f3f7c9e2a986e81c909cbfced","modified":1562655757063},{"_id":"source/_posts/作用域.md","hash":"49de88cb69dbfa1a673765736623413bc8c676a4","modified":1562655772809},{"_id":"source/_posts/你不知道的JavaScript.md","hash":"ed385fc9729ac686b098189c16825810142a44a6","modified":1562655783238},{"_id":"source/_posts/写给大家看的色彩书-读书笔记.md","hash":"2e4ecd9a4eb3da947f4b002a8e9cd8ec0ca0e8a0","modified":1612250285338},{"_id":"source/_posts/函数柯里化.md","hash":"3009bdb1db6d7a92405e639a2a41b9a3f7149311","modified":1562655790522},{"_id":"source/_posts/字符串操作方法.md","hash":"e09c0c6f839c180cad87eb200034190d9e65c5ef","modified":1562655812301},{"_id":"source/_posts/如何实现双向数据绑定-mvvm.md","hash":"2ad3e0fedf7f470e63c797e309e191bbb98ee013","modified":1614570446027},{"_id":"source/_posts/小程序-起步.md","hash":"1e4158e5d90ae17cbb89827cdc13f2a4f445606d","modified":1558321358458},{"_id":"source/_posts/工作中所遇到的问题.md","hash":"6fd01ea2250c82bb05bdc1521e3fd71d1ab44d5e","modified":1614131863100},{"_id":"source/_posts/常见的四种post方式.md","hash":"a9d830c253a933d0214a6ddb6f2197b47ef67354","modified":1614570446028},{"_id":"source/_posts/摄影常识一.md","hash":"8e7b9a730dcfe651a8c1937ba7d5dcf1ea5d364f","modified":1612250285343},{"_id":"source/_posts/数组操作方法.md","hash":"032cc93628ad999c7756b1a168e51e6b63c2e9f8","modified":1614570446029},{"_id":"source/_posts/有趣JS题.md","hash":"20089413b54ac223d05537ae020220152b88735a","modified":1614570446030},{"_id":"source/_posts/正则表达式.md","hash":"df02e0e27b63db9617350a9723d799b75c3fbb57","modified":1614570446031},{"_id":"source/_posts/浏览器存储机制.md","hash":"39043890d18120b1a4256d98514699e367700b28","modified":1614570446032},{"_id":"source/_posts/浏览器渲染与解析.md","hash":"d323465394719023d6f091fe06e465b63a7d33a1","modified":1614824626784},{"_id":"source/_posts/疑难杂问整理（原生JS）.md","hash":"7d0faa6c43ae0720a2e8c4c1b6b92f28e0459ca6","modified":1562655871463},{"_id":"source/_posts/脚手架集成.md","hash":"281dfd21cbfb5b982a4dc8fc6ed5dc2cec735c93","modified":1614570446033},{"_id":"source/_posts/跨域-解决方案.md","hash":"d585408ae096c6c85bd27f37e85e98bced5d0039","modified":1564050103246},{"_id":"source/_posts/闭包.md","hash":"a8513b9612a50ba47bec15d576c2357922d99bdb","modified":1564026854147},{"_id":"source/_posts/面试积累.md","hash":"1e396be746444c08dabf9b415e4c790f0c33af6d","modified":1612250285346},{"_id":"source/archives/index.md","hash":"3330af7e75c10ddfa266cca76be5d2e7aee43fab","modified":1614131863114},{"_id":"source/categories/index.md","hash":"1bd4bb9b63c655b4633c628c7f4e0d8fec921e47","modified":1558321358464},{"_id":"source/donate/index.md","hash":"5cd55b496f7f855f3f200cc3f02232085d3f6298","modified":1614570446034},{"_id":"source/images/1000.webp","hash":"5cc5f6f4d35bbfed3dec56621e253af380523668","modified":1614570446037},{"_id":"source/images/2016-08-25_wxd.png","hash":"0c730f3963f3042d0dfcc78837d9a4cf2f05f8fc","modified":1614570446038},{"_id":"source/images/2016-08-25_zfbd.png","hash":"bc3750d18e6bf1d5f1e24c25455b00d26c3ff447","modified":1614570446039},{"_id":"source/images/2016-08-25_wxd.webp","hash":"d69056969d3e7101ebb9f4d3a382722093fff86c","modified":1614570446038},{"_id":"source/images/avatar.jpg","hash":"663809c02cd10187b8903189eb4c6aed35e61a90","modified":1558321358472},{"_id":"source/images/2016-08-25_zfbd.webp","hash":"e4b890a58f4fa1448a0a2d5c9a6c9a747ab5cae5","modified":1614570446040},{"_id":"source/images/wxwlive1.jpg","hash":"2eb21b491632f9d5b548c21efdffc6ef70e0c48b","modified":1614570446047},{"_id":"source/images/wxwlive1.webp","hash":"b70192112f45b5fd5ad3cb0dcb872284a3776479","modified":1614570446048},{"_id":"source/message/index.md","hash":"b75b15980ae4856c9a0455fd89f7e28a1c447eb5","modified":1614570446048},{"_id":"source/tags/index.md","hash":"e1df010c282c83700587c671cad3d3b4c146dbb4","modified":1562656064745},{"_id":"source/amp-dist/sample/DIYgod.jpg","hash":"81d0b371df55b5a1bb0c9b258046754dd2c0729d","modified":1614131863103},{"_id":"source/amp-dist/sample/DIYgod.webp","hash":"a7200fad65f069ca3f3256b4dd573d9d2e36c829","modified":1614131863103},{"_id":"source/amp-dist/sample/sample-avator.png","hash":"0c9e74f8207353ace09090a7d17def59ab9b98c8","modified":1614131863106},{"_id":"source/amp-dist/sample/header-sagiri.webp","hash":"8ffc6ce60e2171c0528bef7a2a5692fd873f9a42","modified":1614131863105},{"_id":"source/amp-dist/sample/sample-logo.png","hash":"9dad0e8cc4d48c6e550820e91377e2028a344176","modified":1614131863107},{"_id":"source/amp-dist/sample/sample-logo.webp","hash":"2a85d7a5cc42b72df3279c5b1c099213b7a9511b","modified":1614131863107},{"_id":"source/amp-dist/sample/sample-avator.webp","hash":"04f7ff75cef2347851ae37483b21c6b487405ceb","modified":1614131863106},{"_id":"source/amp-dist/sample/sample-placeholder.png","hash":"beacd5efe796a2956255bcb854a83155a3577949","modified":1614131863107},{"_id":"source/amp-dist/sample/sample-placeholder.webp","hash":"b4bb4b73625dcc052570e1b019251c02e5b297e0","modified":1614131863108},{"_id":"source/amp-dist/sample/sample-substituteTitleImage.png","hash":"f7d5b269516ed2ef4c855466b5d78d4ca136445c","modified":1614131863108},{"_id":"source/amp-dist/sample/sample-substituteTitleImage.webp","hash":"24bdbe645262f45c174b1ce79e8c50b38b26c48e","modified":1614131863109},{"_id":"source/images/cli/第三方库支持.png","hash":"fdb3b347aadd4e71d0397eed3cfa1509b3ad507c","modified":1614570446044},{"_id":"source/images/cli/脚手架构建流程.png","hash":"58a1fcb2b0a77810a9ee4749cc543f80f4917c43","modified":1614570446046},{"_id":"source/images/common/http2_1.jpg","hash":"8d8a0845f7cac1afc7aeafb7b3d47b86be6a6bc3","modified":1558321358473},{"_id":"source/images/problem/2.png","hash":"37ce91da9e0bf6fd101d1025be458d3ca9f09da7","modified":1614824864746},{"_id":"source/images/problem/1.png","hash":"a566f9497bb5755ded08e82a615eabba2b2b668b","modified":1614824860937},{"_id":"source/images/prototype/1.png","hash":"b56d7ed5068f6f314ba1d48a694f3917111fa659","modified":1614824870767},{"_id":"source/images/prototype/2.png","hash":"fc3a6c80a4d80fb8b5889c506e2ad7592b544134","modified":1614824875996},{"_id":"source/images/1000.jpg","hash":"0076f1999f8d448e3afbca0bda5ed4638b4888b6","modified":1614570446036},{"_id":"source/amp-dist/sample/header-sagiri.jpg","hash":"abe0402f182eb0580a284924cb0b738ab644a0d3","modified":1614131863104},{"_id":"source/images/common/kuaipai.png","hash":"84a90e636ed5bbb0f93aca7834426987e65bf438","modified":1558321358474},{"_id":"themes/sagiri/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614131863459},{"_id":"themes/sagiri/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614131863349},{"_id":"themes/sagiri/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614131863349},{"_id":"themes/sagiri/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614131863435},{"_id":"themes/sagiri/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614131863435},{"_id":"themes/sagiri/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614131863436},{"_id":"themes/sagiri/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614131863456},{"_id":"themes/sagiri/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614131863457},{"_id":"themes/sagiri/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1614131863314},{"_id":"themes/sagiri/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1614131863313},{"_id":"themes/sagiri/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1614131863314},{"_id":"themes/sagiri/.gitignore","hash":"aacec766c7c47f83f5dc0dba1b5d330e7299957d","modified":1614131863315},{"_id":"themes/sagiri/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1614131863315},{"_id":"themes/sagiri/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1614131863316},{"_id":"themes/sagiri/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1614131863316},{"_id":"themes/sagiri/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1614131863317},{"_id":"themes/sagiri/LICENSE","hash":"59c9ba55a87ff36cef60087e88bd4ecb6c2fa656","modified":1614131863317},{"_id":"themes/sagiri/_config.yml","hash":"b5cf0b34ef263473db7c7f20ff2a4e4b6db12f25","modified":1615367213701},{"_id":"themes/sagiri/README.md","hash":"69e1bccf354a3f9e7f5da847c5b03fe12f8322c7","modified":1614824710127},{"_id":"themes/sagiri/package.json","hash":"837847a509d450f4dfd6537761c1f6858aa102de","modified":1616051208110},{"_id":"themes/sagiri/webpack.config.js","hash":"77fe4f14155d5864836242a109b32560fad101ba","modified":1614131863607},{"_id":"themes/sagiri/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1614131863320},{"_id":"themes/sagiri/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1614131863319},{"_id":"themes/sagiri/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1614131863320},{"_id":"themes/sagiri/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1614131863321},{"_id":"themes/sagiri/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1614131863321},{"_id":"themes/sagiri/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1614131863322},{"_id":"themes/sagiri/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1614131863322},{"_id":"themes/sagiri/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1614131863323},{"_id":"themes/sagiri/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1614131863323},{"_id":"themes/sagiri/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1614131863324},{"_id":"themes/sagiri/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1614131863324},{"_id":"themes/sagiri/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1614131863325},{"_id":"themes/sagiri/languages/zh-Hans.yml","hash":"3149e52e6cfcef0d49950d0b6fe8aefe97dead15","modified":1614131863325},{"_id":"themes/sagiri/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1614131863326},{"_id":"themes/sagiri/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1614131863327},{"_id":"themes/sagiri/layout/_layout.swig","hash":"e9fd2e119f704e772e46bf4ddb3f8322dd2b1354","modified":1615950240611},{"_id":"themes/sagiri/layout/archive.swig","hash":"0d66294ad7c8eac9106afe60dc23b82a8bcac1f7","modified":1614131863373},{"_id":"themes/sagiri/layout/category.swig","hash":"d8a8fff8a88048e9f22e16cccd0ad9f4616dc45a","modified":1614131863374},{"_id":"themes/sagiri/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1614131863374},{"_id":"themes/sagiri/layout/page.swig","hash":"88aab03cf8eae38723e9dbb577b7d3c5a4e30d7b","modified":1614131863375},{"_id":"themes/sagiri/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1614131863375},{"_id":"themes/sagiri/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1614131863376},{"_id":"themes/sagiri/layout/tag.swig","hash":"4c45c8fb1223c803ad6810ef7f1e59037ca44dfb","modified":1614131863377},{"_id":"themes/sagiri/scripts/img.js","hash":"d05bcc84e1f86fadc4e50a49575cf084d76f8999","modified":1614570446062},{"_id":"themes/sagiri/scripts/merge-configs.js","hash":"5758f8f3f12d17bc80da65bb808a20b3a8aae186","modified":1614131863380},{"_id":"themes/sagiri/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1614131863593},{"_id":"themes/sagiri/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1614131863594},{"_id":"themes/sagiri/src/clipboard.js","hash":"4baacf61c835fdf5a5655f1c2da893ead22901c5","modified":1614131863596},{"_id":"themes/sagiri/src/bootstrap.js","hash":"ec8b018eabcc176c873344d1fd5cbaff16740db1","modified":1614131863594},{"_id":"themes/sagiri/src/cursor-effects.js","hash":"a11acc813a04f7910670206307be16a0fe713115","modified":1614131863596},{"_id":"themes/sagiri/src/evanyou.js","hash":"6c96bbc6b2f667fef833492a5c4aca14aed9c721","modified":1614131863597},{"_id":"themes/sagiri/src/index.js","hash":"f84c36e3f1ba8759fb22ab03e02fe396e80c9757","modified":1616050955331},{"_id":"themes/sagiri/src/leancloud.js","hash":"3d999332b54ef80c83e5baacda2c2a9eef0d04f5","modified":1614131863599},{"_id":"themes/sagiri/src/kanban.js","hash":"4bbec857c26eddf005ac4171d85b7747902afbe3","modified":1614131863598},{"_id":"themes/sagiri/src/mix.js","hash":"4c19936cd810154424928a0bd78b11e5857af29a","modified":1614131863601},{"_id":"themes/sagiri/src/motion.js","hash":"a25ff81d7c7797de62c68b3b1d2c378714bb8564","modified":1614131863601},{"_id":"themes/sagiri/src/pjax.js","hash":"cda08a4e4fa7fe15f15e9045740c9b66e50c580b","modified":1616049201118},{"_id":"themes/sagiri/src/pisces.js","hash":"5435227d07e0b68956434059331e3b1e0ca27cb1","modified":1614131863602},{"_id":"themes/sagiri/src/post-details.js","hash":"d47606954d3f7260780e9697b61b98913cc88416","modified":1614131863603},{"_id":"themes/sagiri/src/scroll.js","hash":"e8247a81985cfe433b58a4fe97e4f0647643b93c","modified":1614131863603},{"_id":"themes/sagiri/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1614131863604},{"_id":"themes/sagiri/src/share.js","hash":"65723b7da17d8e9149ce2f4bcaae60e7d1c81354","modified":1614131863605},{"_id":"themes/sagiri/src/search.js","hash":"639e5887e7b6a1911fd634cb6c8ce69b5d4e4488","modified":1614131863604},{"_id":"themes/sagiri/src/since.js","hash":"b302b356980f6ffb05d5b0c35fdb2a87b26764a1","modified":1614131863605},{"_id":"themes/sagiri/src/title.js","hash":"9bd4a96c4bae595a060d1510d252939699559fc1","modified":1614131863605},{"_id":"themes/sagiri/src/type.js","hash":"ba1b2eac5891319a77417f27681b77c9b3c4d3e9","modified":1614131863606},{"_id":"themes/sagiri/src/utils.js","hash":"b126b12570ce2111d96ebbca6f1f9c8c100df2fe","modified":1614665373085},{"_id":"themes/sagiri/src/zoom.js","hash":"d54bdda5f6108855e89c35fdd6684cb9308e233c","modified":1614131863607},{"_id":"themes/sagiri/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1614131863328},{"_id":"themes/sagiri/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1614131863329},{"_id":"themes/sagiri/layout/_partials/footer.swig","hash":"61f137f84ac0237d9a163f39f36fa32eb7bd22e4","modified":1614570446059},{"_id":"themes/sagiri/layout/_partials/comments.swig","hash":"8c09a6eb22a3c663ec9d7dfdcd40299729f9031c","modified":1614131863335},{"_id":"themes/sagiri/layout/_partials/head.swig","hash":"cf95bfc5aedb3b8294ba4bf001248593d7d313e3","modified":1615949915221},{"_id":"themes/sagiri/layout/_partials/header.swig","hash":"f734c1df2d20ff996ad5c3b32c37b42bbbe133d0","modified":1614762129040},{"_id":"themes/sagiri/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1614131863339},{"_id":"themes/sagiri/layout/_partials/pagination.swig","hash":"359971397fd42138ae8fd04adf852f82a81d73b3","modified":1614131863339},{"_id":"themes/sagiri/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1614131863340},{"_id":"themes/sagiri/layout/_macro/post-collapse.swig","hash":"3afe74eb3ae25fa127d9dd63e5390edde5c69185","modified":1614131863331},{"_id":"themes/sagiri/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1614131863332},{"_id":"themes/sagiri/layout/_macro/post.swig","hash":"09faabf67872379fc614b0efbd51608f8c6cec62","modified":1614570446053},{"_id":"themes/sagiri/layout/_macro/reward.swig","hash":"e0a322bbd035db700d156e81c44396209d18858d","modified":1614570446055},{"_id":"themes/sagiri/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1614131863334},{"_id":"themes/sagiri/layout/_macro/sidebar.swig","hash":"0314f810e87fde031f00c90dd876d6cb4718df22","modified":1614654043494},{"_id":"themes/sagiri/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1614131863346},{"_id":"themes/sagiri/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1614131863346},{"_id":"themes/sagiri/layout/_scripts/vendors.swig","hash":"6c0697b604c602a7cefdca4b25a1873b9d629e7c","modified":1614131863351},{"_id":"themes/sagiri/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1614131863365},{"_id":"themes/sagiri/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1614131863366},{"_id":"themes/sagiri/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1614131863366},{"_id":"themes/sagiri/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1614131863367},{"_id":"themes/sagiri/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1614131863368},{"_id":"themes/sagiri/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1614131863367},{"_id":"themes/sagiri/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1614131863369},{"_id":"themes/sagiri/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1614131863382},{"_id":"themes/sagiri/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1614131863382},{"_id":"themes/sagiri/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1614131863383},{"_id":"themes/sagiri/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1614131863383},{"_id":"themes/sagiri/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1614131863384},{"_id":"themes/sagiri/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1614131863385},{"_id":"themes/sagiri/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1614131863385},{"_id":"themes/sagiri/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1614131863386},{"_id":"themes/sagiri/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1614131863386},{"_id":"themes/sagiri/source/fonts/Candyshop.otf","hash":"2d4fffc6d278cc8010f75422246bf368a764c125","modified":1614131863459},{"_id":"themes/sagiri/source/fonts/sigmarone1.woff2","hash":"35d4f8be95cbf9ced2c3eae1bfe63d5ce8ee7214","modified":1614131863460},{"_id":"themes/sagiri/source/fonts/sigmarone2.woff2","hash":"feaa47ccbf19dfb2812fa8306f421b88e90af723","modified":1614131863461},{"_id":"themes/sagiri/source/fonts/sigmarone3.woff2","hash":"5f62e2560d08e71274fac25c49825113a09776c7","modified":1614131863462},{"_id":"themes/sagiri/source/images/DIYgod-avatar.jpg","hash":"81d0b371df55b5a1bb0c9b258046754dd2c0729d","modified":1614131863463},{"_id":"themes/sagiri/source/images/DIYgod.webp","hash":"a7200fad65f069ca3f3256b4dd573d9d2e36c829","modified":1614131863465},{"_id":"themes/sagiri/source/images/DIYgod-avatar.webp","hash":"a7200fad65f069ca3f3256b4dd573d9d2e36c829","modified":1614131863464},{"_id":"themes/sagiri/source/images/DIYgod.jpg","hash":"81d0b371df55b5a1bb0c9b258046754dd2c0729d","modified":1614131863464},{"_id":"themes/sagiri/source/images/alipay.webp","hash":"e4b890a58f4fa1448a0a2d5c9a6c9a747ab5cae5","modified":1614131863466},{"_id":"themes/sagiri/source/images/alipay.png","hash":"bc3750d18e6bf1d5f1e24c25455b00d26c3ff447","modified":1614131863465},{"_id":"themes/sagiri/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1614131863466},{"_id":"themes/sagiri/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1614131863467},{"_id":"themes/sagiri/source/images/apple-touch-icon-next.webp","hash":"a67fcf955e00f160cf687335673a8cbdc587d456","modified":1614131863467},{"_id":"themes/sagiri/source/images/card-avatar.jpg","hash":"f2bb19ea1343999976c0b817c1f35949eac7a709","modified":1614131863468},{"_id":"themes/sagiri/source/images/card-avatar.webp","hash":"980ebd262b2c68baa784a58be7afaa55edd60f28","modified":1614131863469},{"_id":"themes/sagiri/source/images/card.jpg","hash":"f2bb19ea1343999976c0b817c1f35949eac7a709","modified":1614131863470},{"_id":"themes/sagiri/source/images/card.webp","hash":"980ebd262b2c68baa784a58be7afaa55edd60f28","modified":1614131863470},{"_id":"themes/sagiri/source/images/cc-by-nc-nd.png","hash":"f7839bdd799c452a4e807a2365849acc0748b3fd","modified":1614131863471},{"_id":"themes/sagiri/source/images/cc-by-nc-nd.webp","hash":"a9da48b761a7586f899f826170bc86d26c2ec08a","modified":1614131863471},{"_id":"themes/sagiri/source/images/cc-by-nc-sa.png","hash":"cb36e36c3e3959a54ac289e309a4a89a016107bc","modified":1614131863472},{"_id":"themes/sagiri/source/images/cc-by-nc-sa.webp","hash":"5fde7a2f79adc7d200cac995df45a84d64b2494c","modified":1614131863472},{"_id":"themes/sagiri/source/images/cc-by-nc.png","hash":"eaf656bdd1ff61c345a7d42b94ac6f25435f5c42","modified":1614131863473},{"_id":"themes/sagiri/source/images/cc-by-nc.webp","hash":"5c8a54299712f843d290fed413925a2c3c3318c4","modified":1614131863473},{"_id":"themes/sagiri/source/images/cc-by-nd.png","hash":"6420f0e99cb3e90d3c37e0e8513d16ada14fed37","modified":1614131863474},{"_id":"themes/sagiri/source/images/cc-by-nd.webp","hash":"2a5cc8580f7aadb947e558360bda5dd663eeecc1","modified":1614131863474},{"_id":"themes/sagiri/source/images/cc-by-sa.png","hash":"d62ae0fd7204bf889b3f2cbe89eae5865a71c056","modified":1614131863475},{"_id":"themes/sagiri/source/images/cc-by-sa.webp","hash":"9afcad8c2cb3f4170b2a8bb5fd6fcc4c34616c19","modified":1614131863475},{"_id":"themes/sagiri/source/images/cc-by.png","hash":"63f01c43cb5d03cb83d3c867c5ecb768cd89d9df","modified":1614131863476},{"_id":"themes/sagiri/source/images/cc-by.webp","hash":"9a364fca486147d5fe120487edbcc5617d4a1759","modified":1614131863476},{"_id":"themes/sagiri/source/images/cc-zero.png","hash":"fd4ce5a5851ef47c3b525652cc3ae8128d405c8f","modified":1614131863477},{"_id":"themes/sagiri/source/images/cc-zero.webp","hash":"bbe5c624b52986f383c0bc0aed4e4c93b1f3b680","modified":1614131863477},{"_id":"themes/sagiri/source/images/cursor.ico","hash":"cd8349fb9cef6c217fc364cf35eae6819cebf5d6","modified":1614131863478},{"_id":"themes/sagiri/source/images/footer.png","hash":"5f27807ccb8beeed9a909571783797901c52c3b7","modified":1614131863479},{"_id":"themes/sagiri/source/images/footer.webp","hash":"d5b03e8d76bcfc4f966ea3408bdc0b90874ca0e8","modified":1614131863480},{"_id":"themes/sagiri/source/images/header-darling.jpg","hash":"428d430fd9086c207a4a18d6c55308a74441bfe5","modified":1614131863481},{"_id":"themes/sagiri/source/images/header-darling.webp","hash":"84ea4042c5e4a57e9b1832fdf4db536aa9d2e040","modified":1614131863482},{"_id":"themes/sagiri/source/images/header-gyx-s.webp","hash":"d16a445dadc05c1976ffbf3ab88de618d1db360a","modified":1614131863505},{"_id":"themes/sagiri/source/images/header-sagiri.webp","hash":"8ffc6ce60e2171c0528bef7a2a5692fd873f9a42","modified":1614131863522},{"_id":"themes/sagiri/source/images/header.webp","hash":"8ffc6ce60e2171c0528bef7a2a5692fd873f9a42","modified":1614131863524},{"_id":"themes/sagiri/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1614131863540},{"_id":"themes/sagiri/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1614131863541},{"_id":"themes/sagiri/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1614131863541},{"_id":"themes/sagiri/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1614131863542},{"_id":"themes/sagiri/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1614131863542},{"_id":"themes/sagiri/source/images/scroll.png","hash":"443930af0ee54778babad7724291bfed9b431dd5","modified":1614131863543},{"_id":"themes/sagiri/source/images/scroll.webp","hash":"f5e9b67b639f03e0a1ccf171b17d1b5ee811765d","modified":1614131863543},{"_id":"themes/sagiri/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1614131863544},{"_id":"themes/sagiri/source/images/searchicon.webp","hash":"4dc91243df4ec53a3a98fd0ec9a4abaa15606dd3","modified":1614131863545},{"_id":"themes/sagiri/source/images/wechatpay.png","hash":"0c730f3963f3042d0dfcc78837d9a4cf2f05f8fc","modified":1614131863546},{"_id":"themes/sagiri/source/images/wechatpay.webp","hash":"d69056969d3e7101ebb9f4d3a382722093fff86c","modified":1614131863546},{"_id":"themes/sagiri/source/js/sagiri.min.js.LICENSE.txt","hash":"8bdbc2c891e7510d120c7c7bbb42623edf9129c6","modified":1616051261518},{"_id":"themes/sagiri/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1614131863337},{"_id":"themes/sagiri/layout/_partials/head/external-fonts.swig","hash":"b3bb94baa38c4406b619b9e12f482991af8c9c6a","modified":1614131863338},{"_id":"themes/sagiri/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1614131863340},{"_id":"themes/sagiri/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1614131863341},{"_id":"themes/sagiri/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1614131863341},{"_id":"themes/sagiri/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1614131863342},{"_id":"themes/sagiri/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1614131863343},{"_id":"themes/sagiri/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1614131863344},{"_id":"themes/sagiri/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1614131863345},{"_id":"themes/sagiri/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1614131863348},{"_id":"themes/sagiri/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1614131863350},{"_id":"themes/sagiri/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1614131863347},{"_id":"themes/sagiri/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1614131863352},{"_id":"themes/sagiri/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1614131863353},{"_id":"themes/sagiri/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1614131863353},{"_id":"themes/sagiri/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1614131863354},{"_id":"themes/sagiri/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1614131863354},{"_id":"themes/sagiri/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1614131863355},{"_id":"themes/sagiri/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1614131863355},{"_id":"themes/sagiri/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1614131863356},{"_id":"themes/sagiri/layout/_third-party/analytics/lean-analytics.swig","hash":"17d29648b8c7ac4a0f1aca9f7d409d7c15cde1c8","modified":1614131863356},{"_id":"themes/sagiri/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1614131863357},{"_id":"themes/sagiri/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1614131863357},{"_id":"themes/sagiri/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1614131863358},{"_id":"themes/sagiri/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1614131863359},{"_id":"themes/sagiri/layout/_third-party/comments/disqus.swig","hash":"44db46b891650375ec1119de667656292441c908","modified":1614131863360},{"_id":"themes/sagiri/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1614131863360},{"_id":"themes/sagiri/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1614131863361},{"_id":"themes/sagiri/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1614131863362},{"_id":"themes/sagiri/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1614131863363},{"_id":"themes/sagiri/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1614131863364},{"_id":"themes/sagiri/layout/_third-party/comments/valine.swig","hash":"1b492d528a7d48216d4548011000fced2f4a538d","modified":1614131863364},{"_id":"themes/sagiri/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1614131863365},{"_id":"themes/sagiri/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1614131863371},{"_id":"themes/sagiri/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1614131863371},{"_id":"themes/sagiri/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1614131863372},{"_id":"themes/sagiri/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1614131863373},{"_id":"themes/sagiri/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1614131863434},{"_id":"themes/sagiri/source/css/_mixins/Pisces.styl","hash":"0fe615385932fa8712513ed2046d72cfe88bd2d7","modified":1614131863436},{"_id":"themes/sagiri/source/css/_mixins/base.styl","hash":"1d4149b6ed63ea352160a73f5c49a699eb363092","modified":1614131863436},{"_id":"themes/sagiri/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1614131863433},{"_id":"themes/sagiri/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1614131863455},{"_id":"themes/sagiri/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1614131863456},{"_id":"themes/sagiri/source/css/_variables/base.styl","hash":"160f18a96f6451ce2f89563efefb41005a42cb55","modified":1614131863457},{"_id":"themes/sagiri/source/css/_variables/Pisces.styl","hash":"9341024f4db35632feeb6822e88afb80f3658564","modified":1614131863457},{"_id":"themes/sagiri/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1614131863565},{"_id":"themes/sagiri/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1614131863568},{"_id":"themes/sagiri/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1614131863569},{"_id":"themes/sagiri/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1614131863570},{"_id":"themes/sagiri/source/lib/sw-toolbox/sw-toolbox.js","hash":"4750ebaf8cc28da8c1a9843ba0ebeca0fd812487","modified":1614131863585},{"_id":"themes/sagiri/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1614131863571},{"_id":"themes/sagiri/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1614131863571},{"_id":"themes/sagiri/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1614131863572},{"_id":"themes/sagiri/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1614131863572},{"_id":"themes/sagiri/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1614131863573},{"_id":"themes/sagiri/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1614131863573},{"_id":"themes/sagiri/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1614131863574},{"_id":"themes/sagiri/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1614131863574},{"_id":"themes/sagiri/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1614131863575},{"_id":"themes/sagiri/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1614131863575},{"_id":"themes/sagiri/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1614131863576},{"_id":"themes/sagiri/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1614131863576},{"_id":"themes/sagiri/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1614131863577},{"_id":"themes/sagiri/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1614131863578},{"_id":"themes/sagiri/source/lib/velocity-animate/LICENSE.md","hash":"15e34f281b5684c052b25312be271735e2030379","modified":1614131863587},{"_id":"themes/sagiri/source/lib/velocity-animate/README.md","hash":"62bf5d569f4f2217a83ebc673d762fc0360cc07d","modified":1614131863588},{"_id":"themes/sagiri/source/lib/velocity-animate/velocity.min.js","hash":"15a9dc404e02f2cd9b46cc71293b65671976567b","modified":1614131863591},{"_id":"themes/sagiri/source/lib/velocity-animate/package.json","hash":"6911ae2c4a3bd5073e74acc935644efccda6f9d0","modified":1614131863588},{"_id":"themes/sagiri/source/lib/velocity-animate/velocity.ui.js","hash":"924f7ccc5d6504bcf581352e410722fbd4ee5051","modified":1614131863592},{"_id":"themes/sagiri/source/lib/velocity-animate/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1614131863592},{"_id":"themes/sagiri/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1614131863370},{"_id":"themes/sagiri/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1614131863370},{"_id":"themes/sagiri/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1614131863389},{"_id":"themes/sagiri/source/css/_common/components/back-to-top.styl","hash":"5d39998b755152cfb9e48a0c7e87dfdec9f185f9","modified":1614131863389},{"_id":"themes/sagiri/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1614131863388},{"_id":"themes/sagiri/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1614131863390},{"_id":"themes/sagiri/source/css/_common/components/pagination.styl","hash":"39970bedf79ea1c6c6b2669acb21f0fea32a93d1","modified":1614131863400},{"_id":"themes/sagiri/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1614131863390},{"_id":"themes/sagiri/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1614131863416},{"_id":"themes/sagiri/source/css/_common/outline/outline.styl","hash":"287296c977dddcf8196e10255235d016b6abcf68","modified":1614131863429},{"_id":"themes/sagiri/source/css/_common/scaffolding/base.styl","hash":"a1ed967f7b9cd33d18fb9fe831cc0b0284ebd8c2","modified":1614570446064},{"_id":"themes/sagiri/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1614131863430},{"_id":"themes/sagiri/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1616050922013},{"_id":"themes/sagiri/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1614131863432},{"_id":"themes/sagiri/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1614131863432},{"_id":"themes/sagiri/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1614131863432},{"_id":"themes/sagiri/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1614131863438},{"_id":"themes/sagiri/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1614131863445},{"_id":"themes/sagiri/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1614131863444},{"_id":"themes/sagiri/source/css/_schemes/Muse/_menu.styl","hash":"a98ad885ee4f48d85b2578a0b9c2bbf166e96733","modified":1614131863446},{"_id":"themes/sagiri/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1614131863447},{"_id":"themes/sagiri/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1614131863447},{"_id":"themes/sagiri/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1614131863439},{"_id":"themes/sagiri/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1614131863439},{"_id":"themes/sagiri/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1614131863440},{"_id":"themes/sagiri/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1614131863441},{"_id":"themes/sagiri/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1614131863440},{"_id":"themes/sagiri/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1614131863441},{"_id":"themes/sagiri/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1614131863442},{"_id":"themes/sagiri/source/css/_schemes/Pisces/_archive.styl","hash":"5fc138c64c3935448f7ff09eeb95d7d29b1cdeb9","modified":1614131863449},{"_id":"themes/sagiri/source/css/_schemes/Pisces/_brand.styl","hash":"cce23b39042bb77bc09b0d3cca0281a77e202621","modified":1614762985257},{"_id":"themes/sagiri/source/css/_schemes/Pisces/_darling.styl","hash":"dcf18c2edff6f63504d2e38c686eab8001bf5b95","modified":1614131863450},{"_id":"themes/sagiri/source/css/_schemes/Pisces/_footer.styl","hash":"26d3d42157d4074db4da2268f081d425d3699281","modified":1614665095679},{"_id":"themes/sagiri/source/css/_schemes/Pisces/_layout.styl","hash":"b211d2976b25e4abbb3b9d48b733ab79b3a2cb89","modified":1616051079302},{"_id":"themes/sagiri/source/css/_schemes/Pisces/_links.styl","hash":"a4593517234513ef939a66b49e7cab9374a5f861","modified":1614131863452},{"_id":"themes/sagiri/source/css/_schemes/Pisces/_mai.styl","hash":"042ec4dfc3672d01447876323b7ac3dc41fa766f","modified":1614131863452},{"_id":"themes/sagiri/source/css/_schemes/Pisces/_menu.styl","hash":"e24493d10b0b8cd44af2578b9f3cf0975db74f6f","modified":1615949582298},{"_id":"themes/sagiri/source/css/_schemes/Pisces/_posts.styl","hash":"0399d3112ed99074df61f7b6e994dd2284d9e39f","modified":1614131863453},{"_id":"themes/sagiri/source/css/_schemes/Pisces/_sidebar.styl","hash":"d5a32c78226c4b252c322ad940b0cdbdb9476412","modified":1615949582300},{"_id":"themes/sagiri/source/css/_schemes/Pisces/index.styl","hash":"dd4475245862d4478d7da83f47f988b2ca57e1e9","modified":1614131863454},{"_id":"themes/sagiri/source/images/live2d/22/22.model.json","hash":"bdbd71cb422fc16192d7bee838d099e68d41fec0","modified":1614131863531},{"_id":"themes/sagiri/source/images/live2d/33/33.model.json","hash":"be96f72ae0f7fc77bfb6661caecd7a819c23611d","modified":1614131863539},{"_id":"themes/sagiri/source/lib/social-share.js/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1614131863579},{"_id":"themes/sagiri/source/lib/social-share.js/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1614131863580},{"_id":"themes/sagiri/source/lib/social-share.js/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1614131863581},{"_id":"themes/sagiri/source/lib/social-share.js/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1614131863581},{"_id":"themes/sagiri/source/lib/social-share.js/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1614131863582},{"_id":"themes/sagiri/source/lib/social-share.js/js/jquery.share.min.js","hash":"7d3a7135cee30a5ccc38e2818a5bf8c03f7028a0","modified":1614131863583},{"_id":"themes/sagiri/source/lib/social-share.js/js/social-share.min.js","hash":"4798c0fe6c75506eebbbb3cab8cf01dcb7f59908","modified":1614131863584},{"_id":"themes/sagiri/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1614131863586},{"_id":"themes/sagiri/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1614131863587},{"_id":"themes/sagiri/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1614131863391},{"_id":"themes/sagiri/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1614131863392},{"_id":"themes/sagiri/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1614131863393},{"_id":"themes/sagiri/source/css/_common/components/header/menu.styl","hash":"edc7952499d96fe73cddaf15450a7b416ddf0175","modified":1614131863393},{"_id":"themes/sagiri/source/css/_common/components/header/site-meta.styl","hash":"325d9fbca3bea9cbdc5141e46dbbc07cade733bc","modified":1614131863394},{"_id":"themes/sagiri/source/css/_common/components/header/site-nav.styl","hash":"8f746dcf0f12852884c2409af68ccadd17434dff","modified":1614131863395},{"_id":"themes/sagiri/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1614131863396},{"_id":"themes/sagiri/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1614131863396},{"_id":"themes/sagiri/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1614131863397},{"_id":"themes/sagiri/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1614131863398},{"_id":"themes/sagiri/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1614131863398},{"_id":"themes/sagiri/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1614131863399},{"_id":"themes/sagiri/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1614131863399},{"_id":"themes/sagiri/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1614131863400},{"_id":"themes/sagiri/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1614131863401},{"_id":"themes/sagiri/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1614131863402},{"_id":"themes/sagiri/source/css/_common/components/post/post-collapse.styl","hash":"deb446c348fc423d3406945088f0f8f9cbbc06ab","modified":1614131863402},{"_id":"themes/sagiri/source/css/_common/components/post/post-expand.styl","hash":"73d256984b2e31c53ee47c808227b11b61d9d40e","modified":1617010471958},{"_id":"themes/sagiri/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1614131863403},{"_id":"themes/sagiri/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1614131863404},{"_id":"themes/sagiri/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1614131863404},{"_id":"themes/sagiri/source/css/_common/components/post/post-nav.styl","hash":"0e281f7a5456cb0829a704eb8ea3e42540aefe76","modified":1614131863405},{"_id":"themes/sagiri/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1614131863405},{"_id":"themes/sagiri/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1614131863406},{"_id":"themes/sagiri/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1614131863406},{"_id":"themes/sagiri/source/css/_common/components/post/post-title.styl","hash":"63ceb42f7d4a162c1e277bd1db1dd50371b79490","modified":1614131863407},{"_id":"themes/sagiri/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1614131863407},{"_id":"themes/sagiri/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1614131863408},{"_id":"themes/sagiri/source/css/_common/components/post/post.styl","hash":"6711a9fe08c33578a3aa22a6d9f1f1ee4e26db74","modified":1614131863408},{"_id":"themes/sagiri/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1614131863409},{"_id":"themes/sagiri/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1614131863410},{"_id":"themes/sagiri/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1614131863411},{"_id":"themes/sagiri/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1614131863411},{"_id":"themes/sagiri/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"115be924fecaee8072c2f3be068b5e4717d3c2a9","modified":1614131863412},{"_id":"themes/sagiri/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"332a98c13976b464310125fb4c992b03997670ca","modified":1614131863413},{"_id":"themes/sagiri/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"28a8737c090fbffd188d73a00b42e90b9ee57df2","modified":1614131863413},{"_id":"themes/sagiri/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1614131863414},{"_id":"themes/sagiri/source/css/_common/components/sidebar/sidebar.styl","hash":"cb2f63fb091ec0793af307b2a8133c031c18f986","modified":1614654043496},{"_id":"themes/sagiri/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1614131863415},{"_id":"themes/sagiri/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1614131863416},{"_id":"themes/sagiri/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1614131863417},{"_id":"themes/sagiri/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1614131863417},{"_id":"themes/sagiri/source/css/_common/components/tags/group-pictures.styl","hash":"f37c7598c03d2dd28925711b1176cb424fae7268","modified":1614131863418},{"_id":"themes/sagiri/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1614131863419},{"_id":"themes/sagiri/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1614131863419},{"_id":"themes/sagiri/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1614131863420},{"_id":"themes/sagiri/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1614131863420},{"_id":"themes/sagiri/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1614131863421},{"_id":"themes/sagiri/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1614131863422},{"_id":"themes/sagiri/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1614131863422},{"_id":"themes/sagiri/source/css/_common/components/third-party/balloon.styl","hash":"6bbf6ec67610ee80e1178a59234050ac2d085837","modified":1614131863423},{"_id":"themes/sagiri/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1614131863424},{"_id":"themes/sagiri/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1614131863424},{"_id":"themes/sagiri/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1614131863425},{"_id":"themes/sagiri/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1614131863425},{"_id":"themes/sagiri/source/css/_common/components/third-party/headroom.styl","hash":"8618c8805fcfb06659f8f83976529dfc4c3d5d0b","modified":1614131863426},{"_id":"themes/sagiri/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1614131863426},{"_id":"themes/sagiri/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1614131863427},{"_id":"themes/sagiri/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1614131863428},{"_id":"themes/sagiri/source/css/_common/components/third-party/third-party.styl","hash":"34c6e5aa49b0221f3ceac323a979a51d3b7d0506","modified":1614131863428},{"_id":"themes/sagiri/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1614131863448},{"_id":"themes/sagiri/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1614131863442},{"_id":"themes/sagiri/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1614131863443},{"_id":"themes/sagiri/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1614131863381},{"_id":"themes/sagiri/source/css/main.styl","hash":"dde852d47be9c3bd6c67158ba362da7c73290b1e","modified":1616049008467},{"_id":"themes/sagiri/source/images/header-darling2.webp","hash":"9f283b3656471833c7f768e97852140dfe12742f","modified":1614131863484},{"_id":"themes/sagiri/source/images/header-sagiri.jpg","hash":"abe0402f182eb0580a284924cb0b738ab644a0d3","modified":1614131863522},{"_id":"themes/sagiri/source/images/header.jpg","hash":"abe0402f182eb0580a284924cb0b738ab644a0d3","modified":1614131863523},{"_id":"themes/sagiri/source/images/live2d/22/22.2048/texture_00.webp","hash":"e5dafe1d0eb1859c5be3643fc0723e4d0b10f7f8","modified":1614131863528},{"_id":"themes/sagiri/source/images/live2d/33/33.2048/texture_00.webp","hash":"ea15326bcbb692a272dbd793163e55c030fedda8","modified":1614131863537},{"_id":"themes/sagiri/yarn.lock","hash":"7bd6bfc0bec743e806fad85ba15ea8556fe1c356","modified":1614131863609},{"_id":"themes/sagiri/src/live2d.js","hash":"81846d8c45195df78620b46f200b74f1243b297b","modified":1614131863600},{"_id":"themes/sagiri/source/images/header-gyx.webp","hash":"194c54813297f72538dd2ae62ae538ce9ba4245d","modified":1614131863510},{"_id":"themes/sagiri/source/images/header-mai.webp","hash":"a5aa4f650bf5a998fd792d035b76171e908d9c32","modified":1614131863521},{"_id":"themes/sagiri/source/images/live2d/22/22.moc","hash":"63a7992de8c4658ee432822b5710565481610f0e","modified":1614131863530},{"_id":"themes/sagiri/source/images/live2d/33/33.moc","hash":"80a030342ac1b6a7cd8acb441bcb207d8803b76b","modified":1614131863539},{"_id":"themes/sagiri/source/images/live2d/22/22.2048/texture_00.png","hash":"b002297b31421137a64fad594f7593133cea3cbf","modified":1614131863527},{"_id":"themes/sagiri/source/images/header-darling2.jpg","hash":"e2ae6c5df17411838955d231e9a76321b2001c5c","modified":1614131863484},{"_id":"themes/sagiri/source/images/header-gyx-s.png","hash":"2b6b2f9904f0bbd35715adae276e7d8fc20572f2","modified":1614131863504},{"_id":"themes/sagiri/source/images/header-mai.jpg","hash":"b9890a3d76f62437462475a2c51c6b8442898379","modified":1614131863520},{"_id":"themes/sagiri/source/lib/velocity-animate/velocity.js","hash":"4241265a2c7755b42d5aa478b46e77efd8093c23","modified":1614131863590},{"_id":"themes/sagiri/source/images/header-darlings.webp","hash":"0d3e794a5a402d615ec4a36fb525fedc3487a026","modified":1614131863502},{"_id":"themes/sagiri/source/js/video-report.html","hash":"73e3a9b3a8f63536d77bbb952f9c36e981200006","modified":1616051262237},{"_id":"themes/sagiri/source/images/header-darlings.jpg","hash":"20156313f1e9b02f28da3f5ca7b7ac607c6ea4f0","modified":1614131863501},{"_id":"themes/sagiri/source/images/header-darling4.webp","hash":"cd9c479ef8c5d0e1d5d6d77259ca5e1522db9b8f","modified":1614131863498},{"_id":"themes/sagiri/source/js/sagiri.min.js","hash":"074197c73194e503f1d173e27b042dc79cbd91a2","modified":1616051261518},{"_id":"themes/sagiri/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1614131863567},{"_id":"themes/sagiri/source/images/header-darling3.webp","hash":"d8cdee7124b0a0e21fa9cc82bbb64134d3778061","modified":1614131863489},{"_id":"themes/sagiri/source/images/header-leg.webp","hash":"fd1692cd000bc739cc478785f2fbb2daa759ca5f","modified":1614131863518},{"_id":"themes/sagiri/source/images/header-darling3.jpg","hash":"da8965efff676a86af6ed61451c3c13fe8a30bf3","modified":1614131863487},{"_id":"themes/sagiri/source/images/header-leg.jpg","hash":"426445281820258e0859b78e3b5e8279546dc3f5","modified":1614131863515},{"_id":"themes/sagiri/source/images/live2d/33/33.2048/texture_00.png","hash":"6d710da6056de69bfe0c33ac1b9e837b327b2f7b","modified":1614131863536},{"_id":"themes/sagiri/source/images/header-darling4.jpg","hash":"e64b1131d266f98e81d68ca36dcf5324cb901e50","modified":1614131863496},{"_id":"themes/sagiri/source/images/header-gyx.png","hash":"c72a623d4407c90df6cfb6ca22b1337ded8d831f","modified":1614131863509},{"_id":"themes/sagiri/source/js/sagiri.min.js.map","hash":"7b45a4d64e093a54775c99411e708349904f29dc","modified":1616051261519},{"_id":"public/manifest.json","hash":"d2076ca47934539b6d09ef0c8de71bfdfb967928","modified":1616051417183},{"_id":"public/sw.js","hash":"9423166a79e026790476725c797809d1a54d6589","modified":1616051417183},{"_id":"public/atom.xml","hash":"047b2e527570595803cf62306d5889436161c7b9","modified":1616051417183},{"_id":"public/sitemap.xml","hash":"be9539513f433a147e0e3974bd032458e16e34e7","modified":1616051417183},{"_id":"public/404.html","hash":"2f2f1f73b9059b264e2414b5eff6b51eed09ba5f","modified":1616051417183},{"_id":"public/categories/index.html","hash":"08a7f9175b788f51f74e4c61aa27a25d95e9c2e5","modified":1616051417183},{"_id":"public/archives/index.html","hash":"25fbc540ae96b43c08e7013c239ba1e6873bacc5","modified":1616051417183},{"_id":"public/donate/index.html","hash":"7aadfb3c55644d7c0a4b53421cd70114f7cef2e7","modified":1616051417183},{"_id":"public/message/index.html","hash":"41a4f4ea88209b7672970b33897aea3c47c83124","modified":1616051417183},{"_id":"public/tags/index.html","hash":"4e6225ef592c77a57c87ea46a20a08e55dd15a3f","modified":1616051417183},{"_id":"public/vue懒加载与分组打包/index.html","hash":"c3b83cac14610c5926dfefaf9870e23f60fd194c","modified":1616051417183},{"_id":"public/keep-alive小知识/index.html","hash":"7c03aae8ef3df93a76fc596969412c7c248bb74d","modified":1616051417183},{"_id":"public/Jenkins对前端应用做自动化构建/index.html","hash":"53315a203b796c2e05b3f1565ad1103fe6528d0d","modified":1616051417183},{"_id":"public/写给大家看的色彩书-读书笔记/index.html","hash":"8a89d050892a23e51e1b225c6dfc51728d3e8ad9","modified":1616051417183},{"_id":"public/摄影常识一/index.html","hash":"8a654a2fd37108a36846354772703cee89eeec62","modified":1616051417183},{"_id":"public/JS的number类型最大值/index.html","hash":"a436367dd8328ecb8fcbf44469297466f035b025","modified":1616051417183},{"_id":"public/webpack优化之preload和prefetch/index.html","hash":"fdf6e52581b891f21f6e70eb666d74fb7a907a82","modified":1616051417183},{"_id":"public/正则表达式/index.html","hash":"ce520322e5ba71a2f13c5bc0afa5f9e12d35de74","modified":1616051417183},{"_id":"public/脚手架集成/index.html","hash":"d4d29fff3349b1b559666dbc5c986f19261325c8","modified":1616051417183},{"_id":"public/JavaScript动态规划和贪心算法/index.html","hash":"310edd862b9b0e794514b4da32969e2aa8e1db7b","modified":1616051417183},{"_id":"public/webpack打包优化/index.html","hash":"442eed6eaba5e47e97b677ac2f31ce91611178b6","modified":1616051417183},{"_id":"public/常见的四种post方式/index.html","hash":"1c7acd9981255a6d6179da5c848594d1bdffbb88","modified":1616051417183},{"_id":"public/Vue小知识点运用/index.html","hash":"2063274c4fd54d0027c49215f5cad09475d942a3","modified":1616051417183},{"_id":"public/jQuery-组件封装/index.html","hash":"79eef5d4078540a57a79450190434618f61fd93b","modified":1616051417183},{"_id":"public/call、applay、bind/index.html","hash":"a2a0a3c7ff1ec16b6b7892ab85165182e57d5675","modified":1616051417183},{"_id":"public/闭包/index.html","hash":"75d77c227f4d79dd84835494028a5b81100fb7f1","modified":1616051417183},{"_id":"public/css-小知识/index.html","hash":"496dea9189a7bcf7927e8bba02cb020ddb3b238d","modified":1616051417183},{"_id":"public/工作中所遇到的问题/index.html","hash":"62af9b86f46c584599911d6918ed651dd3d41310","modified":1616051417183},{"_id":"public/Vue-js内部运行机制/index.html","hash":"3f8a377a525b49c14215e2fbee4eabb1b34755e6","modified":1616051417183},{"_id":"public/jQuery-源码学习（一）/index.html","hash":"fb0da9e4790c2f609e777b0cc89d665f9f197023","modified":1616051417183},{"_id":"public/函数柯里化/index.html","hash":"1d904bf70fb4599d4aabce2035db9afd7ffac1aa","modified":1616051417183},{"_id":"public/浏览器渲染与解析/index.html","hash":"f6f8b3cb17637bac858e8fadc438b3119938dc65","modified":1616051417183},{"_id":"public/innerHTML与createElement/index.html","hash":"b2846a2c8bfabaf3fe1ea956df2cb9eee214fce2","modified":1616051417183},{"_id":"public/Event-loop-JS/index.html","hash":"76b1f14669eb434327b8ab8fa95184bb3caa2027","modified":1616051417183},{"_id":"public/浏览器存储机制/index.html","hash":"3a15de5a3248f501443e1537e72b2930331db289","modified":1616051417183},{"_id":"public/跨域-解决方案/index.html","hash":"c1fd35a6a1ea2a286bb42e9bb2f6b0486d51cdf1","modified":1616051417183},{"_id":"public/require与import-的区别/index.html","hash":"9520274ce0da853f5bf61de43e93a4e29a61e153","modified":1616051417183},{"_id":"public/小程序-起步/index.html","hash":"2a603f7ef522e9dc9c591d894bd7d6cd81425207","modified":1616051417183},{"_id":"public/HTTP2/index.html","hash":"1fa62e26cb47751a39fffcf7fbe6b864b7fe75f2","modified":1616051417183},{"_id":"public/面试积累/index.html","hash":"46c6d1144eedb528f6e0a9ede756075b664676c4","modified":1616051417183},{"_id":"public/优化/index.html","hash":"9d9ab1e5a257c232a15be316ca8ac107d67ebac4","modified":1616051417183},{"_id":"public/有趣JS题/index.html","hash":"a67e6102b740b48c959672eec42daa178fbe4e31","modified":1616051417183},{"_id":"public/webpack项目配置/index.html","hash":"ced877b2882b5453db0f8e7b89a75f132b9009e4","modified":1616051417183},{"_id":"public/JS原生-ES6/index.html","hash":"87dd6497bdfc9d06173f5d78802b0afaecff69de","modified":1616051417183},{"_id":"public/this指向/index.html","hash":"653762846c6ca11f5ebcb97dcbe52466ea62d080","modified":1616051417183},{"_id":"public/作用域/index.html","hash":"7969c716bcec1a68a7dcc9ebf8bfd20557fe523a","modified":1616051417183},{"_id":"public/疑难杂问整理（原生JS）/index.html","hash":"85a30ebe93ce4d779402fd30a706d06e72e3c1a4","modified":1616051417183},{"_id":"public/JS基础-ES5/index.html","hash":"2e9e6e52462ba0f7f1cecf98e30e3a6b1ac2a2dd","modified":1616051417183},{"_id":"public/字符串操作方法/index.html","hash":"e5d9183ac1c0ee8c44b74298132cfa02ea0ef49e","modified":1616051417183},{"_id":"public/你不知道的JavaScript/index.html","hash":"3f2b322208cdc85a0d1f08c028dbcfaa684300ab","modified":1616051417183},{"_id":"public/JS代码片段/index.html","hash":"29ce559f9b24c7b9534f42e4d43b38dc861250c6","modified":1616051417183},{"_id":"public/如何实现双向数据绑定-mvvm/index.html","hash":"30bd492afb90200dc9f5eb8ffc664e0724c843b3","modified":1616051417183},{"_id":"public/Object-defineProperty/index.html","hash":"274a5169ec1402cfc5a17a69779d3f7ff858bf1f","modified":1616051417183},{"_id":"public/数组操作方法/index.html","hash":"f12f90ce334ab4daabc02163e048bf3bf4a23181","modified":1616051417183},{"_id":"public/PWA-offline/index.html","hash":"a05b343b25cd9ee9a777dd398923d3f48c16bf21","modified":1616051417183},{"_id":"public/Observable/index.html","hash":"8ee6692edae7358b5775cc245cc77ccbb5e190f4","modified":1616051417183},{"_id":"public/angular基础/index.html","hash":"b79f14e76e2ed82dbf55c45c8cfc92bd22c8ae14","modified":1616051417183},{"_id":"public/PWA-pushMessage/index.html","hash":"631aaba0a3e49ad2b5a91382ea0f573817975a08","modified":1616051417183},{"_id":"public/HTTPS/index.html","hash":"afdc215aa33e1160b1f32b62002bfb69ff7d791b","modified":1616051417183},{"_id":"public/archives/2017/index.html","hash":"1574c00c3f8baa2f0bd1d4b57da0d94a35d195a6","modified":1616051417183},{"_id":"public/archives/2017/07/index.html","hash":"440971b2d1fbf0b161a32eff433b85fe2b8b37e5","modified":1616051417183},{"_id":"public/archives/2017/09/index.html","hash":"6ca680201fedc38e5d18e305b4de445bb2c79487","modified":1616051417183},{"_id":"public/archives/2017/11/index.html","hash":"908659d872f92c392383f96bd8724a7762423b14","modified":1616051417183},{"_id":"public/archives/2018/index.html","hash":"33a9fb965101d1f1b8f32461a872c0614144088a","modified":1616051417183},{"_id":"public/archives/2018/01/index.html","hash":"7afc6e283f59424b6471126f6c7e0e2840c9d32c","modified":1616051417183},{"_id":"public/archives/2018/03/index.html","hash":"2e607a89c44cf25919d3a13ccc46aaf6b9fa8cb5","modified":1616051417183},{"_id":"public/archives/2018/04/index.html","hash":"1550070858c9eb4d971a98485d3fc16d7141dade","modified":1616051417183},{"_id":"public/archives/2018/05/index.html","hash":"5a2f8e9f9ff4610dc45c6219b36622d39a24c197","modified":1616051417183},{"_id":"public/archives/2018/06/index.html","hash":"fb2994422b416c8541f57cb22635f486d44bf7c2","modified":1616051417183},{"_id":"public/archives/2018/11/index.html","hash":"0105c2f3e296b5b22dc5fbb2a3f7cd211318f684","modified":1616051417183},{"_id":"public/archives/2019/index.html","hash":"1648af2441db0882d7132f41f4957f76232f527c","modified":1616051417183},{"_id":"public/archives/2019/03/index.html","hash":"c1599b923fbb95e8fd890795bf4e9e3e913b0a7c","modified":1616051417183},{"_id":"public/archives/2019/04/index.html","hash":"3d7b0e77798de37eae714b6c0ee5ea5509a2534c","modified":1616051417183},{"_id":"public/archives/2019/07/index.html","hash":"3592a72e646651f1dc74715be2c4201d17086cc5","modified":1616051417183},{"_id":"public/archives/2019/08/index.html","hash":"b695a0c68f30b1136945a6849a37ef7b77c940dc","modified":1616051417183},{"_id":"public/archives/2019/09/index.html","hash":"9062da70ada7fdffcc955233771423503141305d","modified":1616051417183},{"_id":"public/archives/2019/10/index.html","hash":"24db158262114cb563099283168451a2adc84708","modified":1616051417183},{"_id":"public/archives/2019/11/index.html","hash":"e43ae0c01a6cd3a174abc10fbcb653adfd7be186","modified":1616051417183},{"_id":"public/archives/2019/12/index.html","hash":"4b7d355e4aed7eeaaeed347201d65892073bb534","modified":1616051417183},{"_id":"public/archives/2020/index.html","hash":"c14bd2e3c3d82fed85a1253987f7fe474cd1ffc9","modified":1616051417183},{"_id":"public/archives/2020/03/index.html","hash":"d91d5ee7477324efc8a2746427c5ed8a283f9b67","modified":1616051417183},{"_id":"public/archives/2020/04/index.html","hash":"6c65b5042f64308c0005742319537fea5f601257","modified":1616051417183},{"_id":"public/categories/JavaScript/index.html","hash":"2db52c06887886248fd321af82dfdff58a8e99ac","modified":1616051417183},{"_id":"public/categories/WEB/index.html","hash":"adc364088fcf5bb0d041375fd94e456a82a455fb","modified":1616051417183},{"_id":"public/categories/JavaScrpt/index.html","hash":"55cbe2b54540b6dc9f16aa4a1c10e983156b515c","modified":1616051417183},{"_id":"public/categories/rx-js/index.html","hash":"71035be56bd48be3937caba703c8df76a06f62e2","modified":1616051417183},{"_id":"public/categories/angular/index.html","hash":"d163c251a5e0b43666abd792104414274482f092","modified":1616051417183},{"_id":"public/categories/Vue/index.html","hash":"221a5411fc738144801718df0cf2174a96222dae","modified":1616051417183},{"_id":"public/categories/原生JS/index.html","hash":"78594ce6bca5d87b0a5296d885754781ab20c414","modified":1616051417183},{"_id":"public/categories/css/index.html","hash":"2d3db10158ad6935c93d567c44d7cc7f1ce16f33","modified":1616051417183},{"_id":"public/categories/vue/index.html","hash":"cb4f0232dbc93df0c3909aad274c58bf25a0f8d4","modified":1616051417183},{"_id":"public/categories/jQuery/index.html","hash":"8965baef5365ffde0e9880679723bd75c0fdd3ff","modified":1616051417183},{"_id":"public/categories/HTML5/index.html","hash":"1bde1ae95f28e83514649caf8b13db7fb39ea8d9","modified":1616051417183},{"_id":"public/categories/webpack/index.html","hash":"cf47efa6b775f2b181e7b13af0bab60546a8f4c0","modified":1616051417183},{"_id":"public/categories/微信小程序/index.html","hash":"fb5b7c0830d7195d70460d3d8d9585210d3e114c","modified":1616051417183},{"_id":"public/categories/摄影/index.html","hash":"d7161be698854f33086401ea96cd9c2f9390182b","modified":1616051417183},{"_id":"public/categories/工具/index.html","hash":"ed1c91e86a9490061f7edafa184a9f13e5ee2281","modified":1616051417183},{"_id":"public/index.html","hash":"372904168a5a4b0c55e88892b3bf3c37830f8e3d","modified":1616051417183},{"_id":"public/page/2/index.html","hash":"da1482b1672bb44a7bf12b3aaa3875879097494b","modified":1616051417183},{"_id":"public/page/3/index.html","hash":"45573e8bad05c9bd3cde742dfbee422150b4137a","modified":1616051417183},{"_id":"public/page/4/index.html","hash":"7b7ef6c8c7ad413258281eaf6ec5ec793a7d80e8","modified":1616051417183},{"_id":"public/page/5/index.html","hash":"2f2ad62adfbf29f5f4ec6c3a6fe1573f4c58b8f2","modified":1616051417183},{"_id":"public/tags/Vue/index.html","hash":"de0ea7334b615173274f1b46dc827244f776057d","modified":1616051417183},{"_id":"public/tags/设计/index.html","hash":"ab52ca3f87038ea6c71dc257f04a5ba15d5e5c13","modified":1616051417183},{"_id":"public/CNAME","hash":"1f2b8e1d37bc03c80a3d53a586651e71ef38f19d","modified":1616051417183},{"_id":"public/android-chrome-192x192.png","hash":"271e0371f46fbd5720d8761e1d68253a91fa1c95","modified":1616051417183},{"_id":"public/android-chrome-192x192.webp","hash":"f61b1615c82acf52aacac07038ecc4fbf130fc9f","modified":1616051417183},{"_id":"public/android-chrome-256x256.webp","hash":"1f05572eb58ddd35c0b3885f3e906c523c886df3","modified":1616051417183},{"_id":"public/apple-touch-icon.png","hash":"6e89a84032262cbf1ebe5aee23edccf29081d1f2","modified":1616051417183},{"_id":"public/apple-touch-icon.webp","hash":"ee326b691b0b2c7997d75cb7caa6487f6d2828bf","modified":1616051417183},{"_id":"public/browserconfig.xml","hash":"83699de65898612182974bc15e01756432fb5cf9","modified":1616051417183},{"_id":"public/failure.ico","hash":"5eec5c163400d8ece74286da49130da1ead3f6f6","modified":1616051417183},{"_id":"public/favico.ico","hash":"2d7ec086b029d8a224a4dae1a428c6a3f6209d92","modified":1616051417183},{"_id":"public/favicon-16x16.png","hash":"20b70672bc4a70231e68fb24b9cf7a55b4e684a5","modified":1616051417183},{"_id":"public/favicon-16x16.webp","hash":"df3f7e40344a5b37e73e8783c6a9caa2d2c01acf","modified":1616051417183},{"_id":"public/favicon-32x32.png","hash":"c1d0ec90c13b3cacc1e75d71658111e0af178912","modified":1616051417183},{"_id":"public/favicon-32x32.webp","hash":"078619032ccb0894c9828659216e039b44d2c1de","modified":1616051417183},{"_id":"public/favicon.ico","hash":"2d7ec086b029d8a224a4dae1a428c6a3f6209d92","modified":1616051417183},{"_id":"public/mstile-150x150.webp","hash":"81b89e1acbf4c35f220289bb507e13353a28d4de","modified":1616051417183},{"_id":"public/mstile-150x150.png","hash":"f632b2a90a15c0024db2fd912010e87f210b5669","modified":1616051417183},{"_id":"public/safari-pinned-tab.svg","hash":"7b1a41c816227fabedd525f65714451a56e3870a","modified":1616051417183},{"_id":"public/images/1000.webp","hash":"5cc5f6f4d35bbfed3dec56621e253af380523668","modified":1616051417183},{"_id":"public/images/2016-08-25_wxd.png","hash":"0c730f3963f3042d0dfcc78837d9a4cf2f05f8fc","modified":1616051417183},{"_id":"public/images/2016-08-25_zfbd.png","hash":"bc3750d18e6bf1d5f1e24c25455b00d26c3ff447","modified":1616051417183},{"_id":"public/images/2016-08-25_wxd.webp","hash":"d69056969d3e7101ebb9f4d3a382722093fff86c","modified":1616051417183},{"_id":"public/images/avatar.jpg","hash":"663809c02cd10187b8903189eb4c6aed35e61a90","modified":1616051417183},{"_id":"public/images/2016-08-25_zfbd.webp","hash":"e4b890a58f4fa1448a0a2d5c9a6c9a747ab5cae5","modified":1616051417183},{"_id":"public/images/wxwlive1.jpg","hash":"2eb21b491632f9d5b548c21efdffc6ef70e0c48b","modified":1616051417183},{"_id":"public/amp-dist/sample/DIYgod.webp","hash":"a7200fad65f069ca3f3256b4dd573d9d2e36c829","modified":1616051417183},{"_id":"public/amp-dist/sample/DIYgod.jpg","hash":"81d0b371df55b5a1bb0c9b258046754dd2c0729d","modified":1616051417183},{"_id":"public/images/wxwlive1.webp","hash":"b70192112f45b5fd5ad3cb0dcb872284a3776479","modified":1616051417183},{"_id":"public/amp-dist/sample/sample-avator.png","hash":"0c9e74f8207353ace09090a7d17def59ab9b98c8","modified":1616051417183},{"_id":"public/amp-dist/sample/header-sagiri.webp","hash":"8ffc6ce60e2171c0528bef7a2a5692fd873f9a42","modified":1616051417183},{"_id":"public/amp-dist/sample/sample-logo.png","hash":"9dad0e8cc4d48c6e550820e91377e2028a344176","modified":1616051417183},{"_id":"public/amp-dist/sample/sample-logo.webp","hash":"2a85d7a5cc42b72df3279c5b1c099213b7a9511b","modified":1616051417183},{"_id":"public/amp-dist/sample/sample-avator.webp","hash":"04f7ff75cef2347851ae37483b21c6b487405ceb","modified":1616051417183},{"_id":"public/amp-dist/sample/sample-placeholder.png","hash":"beacd5efe796a2956255bcb854a83155a3577949","modified":1616051417183},{"_id":"public/amp-dist/sample/sample-placeholder.webp","hash":"b4bb4b73625dcc052570e1b019251c02e5b297e0","modified":1616051417183},{"_id":"public/amp-dist/sample/sample-substituteTitleImage.png","hash":"f7d5b269516ed2ef4c855466b5d78d4ca136445c","modified":1616051417183},{"_id":"public/amp-dist/sample/sample-substituteTitleImage.webp","hash":"24bdbe645262f45c174b1ce79e8c50b38b26c48e","modified":1616051417183},{"_id":"public/images/cli/第三方库支持.png","hash":"fdb3b347aadd4e71d0397eed3cfa1509b3ad507c","modified":1616051417183},{"_id":"public/images/cli/脚手架构建流程.png","hash":"58a1fcb2b0a77810a9ee4749cc543f80f4917c43","modified":1616051417183},{"_id":"public/images/common/http2_1.jpg","hash":"8d8a0845f7cac1afc7aeafb7b3d47b86be6a6bc3","modified":1616051417183},{"_id":"public/images/problem/1.png","hash":"a566f9497bb5755ded08e82a615eabba2b2b668b","modified":1616051417183},{"_id":"public/images/problem/2.png","hash":"37ce91da9e0bf6fd101d1025be458d3ca9f09da7","modified":1616051417183},{"_id":"public/images/prototype/1.png","hash":"b56d7ed5068f6f314ba1d48a694f3917111fa659","modified":1616051417183},{"_id":"public/images/prototype/2.png","hash":"fc3a6c80a4d80fb8b5889c506e2ad7592b544134","modified":1616051417183},{"_id":"public/fonts/Candyshop.otf","hash":"2d4fffc6d278cc8010f75422246bf368a764c125","modified":1616051417183},{"_id":"public/fonts/sigmarone1.woff2","hash":"35d4f8be95cbf9ced2c3eae1bfe63d5ce8ee7214","modified":1616051417183},{"_id":"public/fonts/sigmarone2.woff2","hash":"feaa47ccbf19dfb2812fa8306f421b88e90af723","modified":1616051417183},{"_id":"public/fonts/sigmarone3.woff2","hash":"5f62e2560d08e71274fac25c49825113a09776c7","modified":1616051417183},{"_id":"public/images/DIYgod-avatar.jpg","hash":"81d0b371df55b5a1bb0c9b258046754dd2c0729d","modified":1616051417183},{"_id":"public/images/DIYgod.webp","hash":"a7200fad65f069ca3f3256b4dd573d9d2e36c829","modified":1616051417183},{"_id":"public/images/DIYgod-avatar.webp","hash":"a7200fad65f069ca3f3256b4dd573d9d2e36c829","modified":1616051417183},{"_id":"public/images/DIYgod.jpg","hash":"81d0b371df55b5a1bb0c9b258046754dd2c0729d","modified":1616051417183},{"_id":"public/images/alipay.webp","hash":"e4b890a58f4fa1448a0a2d5c9a6c9a747ab5cae5","modified":1616051417183},{"_id":"public/images/alipay.png","hash":"bc3750d18e6bf1d5f1e24c25455b00d26c3ff447","modified":1616051417183},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1616051417183},{"_id":"public/images/apple-touch-icon-next.webp","hash":"a67fcf955e00f160cf687335673a8cbdc587d456","modified":1616051417183},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1616051417183},{"_id":"public/images/card-avatar.webp","hash":"980ebd262b2c68baa784a58be7afaa55edd60f28","modified":1616051417183},{"_id":"public/images/card.jpg","hash":"f2bb19ea1343999976c0b817c1f35949eac7a709","modified":1616051417183},{"_id":"public/images/card.webp","hash":"980ebd262b2c68baa784a58be7afaa55edd60f28","modified":1616051417183},{"_id":"public/images/cc-by-nc-nd.png","hash":"f7839bdd799c452a4e807a2365849acc0748b3fd","modified":1616051417183},{"_id":"public/images/cc-by-nc-nd.webp","hash":"a9da48b761a7586f899f826170bc86d26c2ec08a","modified":1616051417183},{"_id":"public/images/cc-by-nc-sa.png","hash":"cb36e36c3e3959a54ac289e309a4a89a016107bc","modified":1616051417183},{"_id":"public/images/cc-by-nc-sa.webp","hash":"5fde7a2f79adc7d200cac995df45a84d64b2494c","modified":1616051417183},{"_id":"public/images/cc-by-nc.png","hash":"eaf656bdd1ff61c345a7d42b94ac6f25435f5c42","modified":1616051417183},{"_id":"public/images/cc-by-nc.webp","hash":"5c8a54299712f843d290fed413925a2c3c3318c4","modified":1616051417183},{"_id":"public/images/cc-by-nd.png","hash":"6420f0e99cb3e90d3c37e0e8513d16ada14fed37","modified":1616051417183},{"_id":"public/images/cc-by-nd.webp","hash":"2a5cc8580f7aadb947e558360bda5dd663eeecc1","modified":1616051417183},{"_id":"public/images/cc-by-sa.png","hash":"d62ae0fd7204bf889b3f2cbe89eae5865a71c056","modified":1616051417183},{"_id":"public/images/cc-by-sa.webp","hash":"9afcad8c2cb3f4170b2a8bb5fd6fcc4c34616c19","modified":1616051417183},{"_id":"public/images/cc-by.png","hash":"63f01c43cb5d03cb83d3c867c5ecb768cd89d9df","modified":1616051417183},{"_id":"public/images/cc-by.webp","hash":"9a364fca486147d5fe120487edbcc5617d4a1759","modified":1616051417183},{"_id":"public/images/cc-zero.png","hash":"fd4ce5a5851ef47c3b525652cc3ae8128d405c8f","modified":1616051417183},{"_id":"public/images/cc-zero.webp","hash":"bbe5c624b52986f383c0bc0aed4e4c93b1f3b680","modified":1616051417183},{"_id":"public/images/cursor.ico","hash":"cd8349fb9cef6c217fc364cf35eae6819cebf5d6","modified":1616051417183},{"_id":"public/images/footer.png","hash":"5f27807ccb8beeed9a909571783797901c52c3b7","modified":1616051417183},{"_id":"public/images/footer.webp","hash":"d5b03e8d76bcfc4f966ea3408bdc0b90874ca0e8","modified":1616051417183},{"_id":"public/images/header-darling.webp","hash":"84ea4042c5e4a57e9b1832fdf4db536aa9d2e040","modified":1616051417183},{"_id":"public/images/header-gyx-s.webp","hash":"d16a445dadc05c1976ffbf3ab88de618d1db360a","modified":1616051417183},{"_id":"public/images/header-sagiri.webp","hash":"8ffc6ce60e2171c0528bef7a2a5692fd873f9a42","modified":1616051417183},{"_id":"public/images/header.webp","hash":"8ffc6ce60e2171c0528bef7a2a5692fd873f9a42","modified":1616051417183},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1616051417183},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1616051417183},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1616051417183},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1616051417183},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1616051417183},{"_id":"public/images/scroll.png","hash":"443930af0ee54778babad7724291bfed9b431dd5","modified":1616051417183},{"_id":"public/images/scroll.webp","hash":"f5e9b67b639f03e0a1ccf171b17d1b5ee811765d","modified":1616051417183},{"_id":"public/images/searchicon.webp","hash":"4dc91243df4ec53a3a98fd0ec9a4abaa15606dd3","modified":1616051417183},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1616051417183},{"_id":"public/images/wechatpay.png","hash":"0c730f3963f3042d0dfcc78837d9a4cf2f05f8fc","modified":1616051417183},{"_id":"public/images/wechatpay.webp","hash":"d69056969d3e7101ebb9f4d3a382722093fff86c","modified":1616051417183},{"_id":"public/js/sagiri.min.js.LICENSE.txt","hash":"8bdbc2c891e7510d120c7c7bbb42623edf9129c6","modified":1616051417183},{"_id":"public/lib/social-share.js/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1616051417183},{"_id":"public/lib/social-share.js/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1616051417183},{"_id":"public/lib/social-share.js/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1616051417183},{"_id":"public/lib/social-share.js/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1616051417183},{"_id":"public/android-chrome-256x256.png","hash":"f20d08929cb840cb5148227cdbe9c219b887d95f","modified":1616051417183},{"_id":"public/images/1000.jpg","hash":"0076f1999f8d448e3afbca0bda5ed4638b4888b6","modified":1616051417183},{"_id":"public/amp-dist/sample/header-sagiri.jpg","hash":"abe0402f182eb0580a284924cb0b738ab644a0d3","modified":1616051417183},{"_id":"public/images/card-avatar.jpg","hash":"f2bb19ea1343999976c0b817c1f35949eac7a709","modified":1616051417183},{"_id":"public/images/header-darling.jpg","hash":"428d430fd9086c207a4a18d6c55308a74441bfe5","modified":1616051417183},{"_id":"public/images/header-darling2.webp","hash":"9f283b3656471833c7f768e97852140dfe12742f","modified":1616051417183},{"_id":"public/images/header-sagiri.jpg","hash":"abe0402f182eb0580a284924cb0b738ab644a0d3","modified":1616051417183},{"_id":"public/images/header.jpg","hash":"abe0402f182eb0580a284924cb0b738ab644a0d3","modified":1616051417183},{"_id":"public/images/live2d/33/33.2048/texture_00.webp","hash":"ea15326bcbb692a272dbd793163e55c030fedda8","modified":1616051417183},{"_id":"public/images/header-mai.webp","hash":"a5aa4f650bf5a998fd792d035b76171e908d9c32","modified":1616051417183},{"_id":"public/images/live2d/22/22.moc","hash":"63a7992de8c4658ee432822b5710565481610f0e","modified":1616051417183},{"_id":"public/images/live2d/33/33.moc","hash":"80a030342ac1b6a7cd8acb441bcb207d8803b76b","modified":1616051417183},{"_id":"public/images/live2d/22/22.2048/texture_00.webp","hash":"e5dafe1d0eb1859c5be3643fc0723e4d0b10f7f8","modified":1616051417183},{"_id":"public/css/main.css","hash":"2a17a6e6ec236b9db0124821b5ce94d4020e3e84","modified":1616051417183},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1616051417183},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1616051417183},{"_id":"public/lib/sw-toolbox/sw-toolbox.js","hash":"7e2fd42a8ddb17450970c30a9bc5274f720e602c","modified":1616051417183},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1616051417183},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1616051417183},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1616051417183},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1616051417183},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1616051417183},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1616051417183},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1616051417183},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1616051417183},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1616051417183},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1616051417183},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1616051417183},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1616051417183},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1616051417183},{"_id":"public/lib/velocity-animate/LICENSE.html","hash":"516383f7a076681d4d3a0e8e67e09c76059a75b8","modified":1616051417183},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1616051417183},{"_id":"public/lib/velocity-animate/README.html","hash":"e06a59498dab29f89a37c399b36a26658a2c3ce3","modified":1616051417183},{"_id":"public/lib/velocity-animate/package.json","hash":"9bc53f857417d3e025f784f408a6472065c4d139","modified":1616051417183},{"_id":"public/lib/velocity-animate/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1616051417183},{"_id":"public/images/live2d/22/22.model.json","hash":"c16b957438809a40df4c187ac285aaee0671e816","modified":1616051417183},{"_id":"public/images/live2d/33/33.model.json","hash":"1927910d9b88eff5d6ab1c6a604374efe8aed88e","modified":1616051417183},{"_id":"public/lib/social-share.js/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1616051417183},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1616051417183},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1616051417183},{"_id":"public/images/common/kuaipai.png","hash":"84a90e636ed5bbb0f93aca7834426987e65bf438","modified":1616051417183},{"_id":"public/images/header-darling2.jpg","hash":"e2ae6c5df17411838955d231e9a76321b2001c5c","modified":1616051417183},{"_id":"public/images/header-gyx-s.png","hash":"2b6b2f9904f0bbd35715adae276e7d8fc20572f2","modified":1616051417183},{"_id":"public/images/header-gyx.webp","hash":"194c54813297f72538dd2ae62ae538ce9ba4245d","modified":1616051417183},{"_id":"public/images/header-mai.jpg","hash":"b9890a3d76f62437462475a2c51c6b8442898379","modified":1616051417183},{"_id":"public/images/live2d/22/22.2048/texture_00.png","hash":"b002297b31421137a64fad594f7593133cea3cbf","modified":1616051417183},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1616051417183},{"_id":"public/lib/velocity-animate/velocity.ui.js","hash":"7731c1bc444855b9b18bfb265cd1c4a169e6be37","modified":1616051417183},{"_id":"public/lib/social-share.js/js/jquery.share.min.js","hash":"7d3a7135cee30a5ccc38e2818a5bf8c03f7028a0","modified":1616051417183},{"_id":"public/lib/social-share.js/js/social-share.min.js","hash":"4798c0fe6c75506eebbbb3cab8cf01dcb7f59908","modified":1616051417183},{"_id":"public/images/header-darlings.webp","hash":"0d3e794a5a402d615ec4a36fb525fedc3487a026","modified":1616051417183},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1616051417183},{"_id":"public/lib/velocity-animate/velocity.min.js","hash":"69c85b9d6a931a7d3a5b0657e60112c31fb3b286","modified":1616051417183},{"_id":"public/images/header-darlings.jpg","hash":"20156313f1e9b02f28da3f5ca7b7ac607c6ea4f0","modified":1616051417183},{"_id":"public/images/header-darling4.webp","hash":"cd9c479ef8c5d0e1d5d6d77259ca5e1522db9b8f","modified":1616051417183},{"_id":"public/images/header-darling3.webp","hash":"d8cdee7124b0a0e21fa9cc82bbb64134d3778061","modified":1616051417183},{"_id":"public/images/header-leg.jpg","hash":"426445281820258e0859b78e3b5e8279546dc3f5","modified":1616051417183},{"_id":"public/images/header-leg.webp","hash":"fd1692cd000bc739cc478785f2fbb2daa759ca5f","modified":1616051417183},{"_id":"public/images/header-darling3.jpg","hash":"da8965efff676a86af6ed61451c3c13fe8a30bf3","modified":1616051417183},{"_id":"public/images/live2d/33/33.2048/texture_00.png","hash":"6d710da6056de69bfe0c33ac1b9e837b327b2f7b","modified":1616051417183},{"_id":"public/images/header-darling4.jpg","hash":"e64b1131d266f98e81d68ca36dcf5324cb901e50","modified":1616051417183},{"_id":"public/lib/velocity-animate/velocity.js","hash":"44ae2520aa8ad47cf56b67bdba64e18d542c8618","modified":1616051417183},{"_id":"public/js/video-report.html","hash":"73e3a9b3a8f63536d77bbb952f9c36e981200006","modified":1616051417183},{"_id":"public/images/header-gyx.png","hash":"c72a623d4407c90df6cfb6ca22b1337ded8d831f","modified":1616051417183},{"_id":"public/js/sagiri.min.js","hash":"074197c73194e503f1d173e27b042dc79cbd91a2","modified":1616051417183},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1616051417183},{"_id":"public/js/sagiri.min.js.map","hash":"7b45a4d64e093a54775c99411e708349904f29dc","modified":1616051417183}],"Category":[{"name":"JavaScript","_id":"ckmejaerg0004xcvrayv8hq44"},{"name":"WEB","_id":"ckmejaerl000bxcvr1ggw65pa"},{"name":"JavaScrpt","_id":"ckmejaert000nxcvr5thmecu3"},{"name":"rx.js","_id":"ckmejaerv000txcvrf76o0l3u"},{"name":"angular","_id":"ckmejaes20012xcvr83pb99h6"},{"name":"Vue","_id":"ckmejaes60019xcvr76sucrht"},{"name":"原生JS","_id":"ckmejaes7001excvrd5v8a1de"},{"name":"css","_id":"ckmejaesa001jxcvrebajgga5"},{"name":"jQuery","_id":"ckmejaesc001nxcvr4rlp1jyn"},{"name":"vue","_id":"ckmejaesh001yxcvrhs845wky"},{"name":"HTML5","_id":"ckmejaesj0024xcvr3wow40ql"},{"name":"webpack","_id":"ckmejaesl0029xcvrcdiafs67"},{"name":"微信小程序","_id":"ckmejaesn002fxcvrf22820mz"},{"name":"摄影","_id":"ckmejaesp002mxcvr554ydq74"},{"name":"工具","_id":"ckmejaety003fxcvr4m0t7mis"}],"Data":[],"Page":[{"title":"404 — 你似乎来到了没有知识存在的荒原...","date":"2017-11-25T19:36:02.000Z","comments":0,"_content":"\n你可能需要：\n\n- [返回首页](https://colorfulworld.github.io/)\n\n- [所有文章](https://colorfulworld.github.io/archives/)\n\n- [分类](https://colorfulworld.github.io/categories/)\n\n- 搜索文章：右上角","source":"404/index.md","raw":"---\ntitle: 404 — 你似乎来到了没有知识存在的荒原...\ndate: 2017-11-26 03:36:02\npermalink: '404'\ncomments: false\n---\n\n你可能需要：\n\n- [返回首页](https://colorfulworld.github.io/)\n\n- [所有文章](https://colorfulworld.github.io/archives/)\n\n- [分类](https://colorfulworld.github.io/categories/)\n\n- 搜索文章：右上角","updated":"2021-03-02T08:45:22.752Z","path":"404.html","layout":"page","_id":"ckmejaer90000xcvr3v9ucyqn","content":"<p>你可能需要：</p>\n<ul>\n<li><p><a href=\"https://colorfulworld.github.io/\">返回首页</a></p>\n</li>\n<li><p><a href=\"https://colorfulworld.github.io/archives/\">所有文章</a></p>\n</li>\n<li><p><a href=\"https://colorfulworld.github.io/categories/\">分类</a></p>\n</li>\n<li><p>搜索文章：右上角</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>你可能需要：</p>\n<ul>\n<li><p><a href=\"https://colorfulworld.github.io/\">返回首页</a></p>\n</li>\n<li><p><a href=\"https://colorfulworld.github.io/archives/\">所有文章</a></p>\n</li>\n<li><p><a href=\"https://colorfulworld.github.io/categories/\">分类</a></p>\n</li>\n<li><p>搜索文章：右上角</p>\n</li>\n</ul>\n"},{"_content":"{\n    \"name\": \"Hi, colorfulWorld\",\n    \"short_name\": \"Hi, colorfulWorld\",\n    \"icons\": [\n        {\n            \"src\": \"/android-chrome-192x192.png\",\n            \"sizes\": \"192x192\",\n            \"type\": \"image/png\"\n        },\n        {\n            \"src\": \"/android-chrome-256x256.png\",\n            \"sizes\": \"256x256\",\n            \"type\": \"image/png\"\n        }\n    ],\n    \"theme_color\": \"#fff\",\n    \"background_color\": \"#fff\",\n    \"display\": \"standalone\",\n    \"start_url\": \"/\"\n}\n","source":"manifest.json","raw":"{\n    \"name\": \"Hi, colorfulWorld\",\n    \"short_name\": \"Hi, colorfulWorld\",\n    \"icons\": [\n        {\n            \"src\": \"/android-chrome-192x192.png\",\n            \"sizes\": \"192x192\",\n            \"type\": \"image/png\"\n        },\n        {\n            \"src\": \"/android-chrome-256x256.png\",\n            \"sizes\": \"256x256\",\n            \"type\": \"image/png\"\n        }\n    ],\n    \"theme_color\": \"#fff\",\n    \"background_color\": \"#fff\",\n    \"display\": \"standalone\",\n    \"start_url\": \"/\"\n}\n","date":"2021-02-24T01:57:43.310Z","updated":"2021-02-24T01:57:43.310Z","path":"manifest.json","layout":"false","title":"","comments":1,"_id":"ckmejaere0002xcvr6o0de8ma","content":"{\"name\":\"Hi, colorfulWorld\",\"short_name\":\"Hi, colorfulWorld\",\"icons\":[{\"src\":\"/android-chrome-192x192.png\",\"sizes\":\"192x192\",\"type\":\"image/png\"},{\"src\":\"/android-chrome-256x256.png\",\"sizes\":\"256x256\",\"type\":\"image/png\"}],\"theme_color\":\"#fff\",\"background_color\":\"#fff\",\"display\":\"standalone\",\"start_url\":\"/\"}","site":{"data":{}},"excerpt":"","more":"{\"name\":\"Hi, colorfulWorld\",\"short_name\":\"Hi, colorfulWorld\",\"icons\":[{\"src\":\"/android-chrome-192x192.png\",\"sizes\":\"192x192\",\"type\":\"image/png\"},{\"src\":\"/android-chrome-256x256.png\",\"sizes\":\"256x256\",\"type\":\"image/png\"}],\"theme_color\":\"#fff\",\"background_color\":\"#fff\",\"display\":\"standalone\",\"start_url\":\"/\"}"},{"title":"分类","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ntype: \"categories\"\ncomments: false\n---\n","date":"2019-05-20T03:02:38.464Z","updated":"2019-05-20T03:02:38.464Z","path":"categories/index.html","layout":"page","_id":"ckmejaerh0005xcvr7i4j0xjn","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"archives","date":"2017-11-09T15:47:39.000Z","type":"archives","comments":0,"_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2017-11-09 23:47:39\ntype: \"archives\"\ncomments: false\n---\n","updated":"2021-02-24T01:57:43.114Z","path":"archives/index.html","layout":"page","_id":"ckmejaeri0007xcvrgflh0cci","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"// importScripts('https://cdn.jsdelivr.net/npm/workbox-cdn@5.1.3/workbox/workbox-sw.js');\n\n// workbox.setConfig({\n//     modulePathPrefix: 'https://cdn.jsdelivr.net/npm/workbox-cdn@5.1.3/workbox/'\n// });\n\n// const { core, precaching, routing, strategies, expiration, cacheableResponse, backgroundSync } = workbox;\n// const { CacheFirst, NetworkFirst, NetworkOnly, StaleWhileRevalidate } = strategies;\n// const { ExpirationPlugin } = expiration;\n// const { CacheableResponsePlugin } = cacheableResponse;\n\n// const cacheSuffixVersion = '-200629',\n//     // precacheCacheName = core.cacheNames.precache,\n//     // runtimeCacheName = core.cacheNames.runtime,\n//     maxEntries = 100;\n\n// self.addEventListener('activate', (event) => {\n//     event.waitUntil(\n//         caches.keys().then((keys) => {\n//             return Promise.all(keys.map((key) => {\n//                 if (!key.includes(cacheSuffixVersion)) return caches.delete(key);\n//             }));\n//         })\n//     );\n// });\n\n\n// core.setCacheNameDetails({\n//     prefix: 'hidiygod',\n//     suffix: cacheSuffixVersion\n// });\n\n// core.skipWaiting();\n// core.clientsClaim();\n// precaching.cleanupOutdatedCaches();\n\n// /*\n//  * Precache\n//  * - Static Assets\n//  */\n// precaching.precacheAndRoute(\n//     [\n//         { url: 'https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js', revision: null },\n//     ],\n// );\n\n// /*\n//  * Cache File From jsDelivr\n//  * cdn.jsdelivr.net | shadow.elemecdn.com\n//  *\n//  * Method: CacheFirst\n//  * cacheName: static-immutable\n//  * cacheTime: 30d\n//  */\n\n// // cdn.jsdelivr.net - cors enabled\n// routing.registerRoute(\n//     /.*cdn\\.jsdelivr\\.net/,\n//     new CacheFirst({\n//         cacheName: 'static-immutable' + cacheSuffixVersion,\n//         fetchOptions: {\n//             mode: 'cors',\n//             credentials: 'omit'\n//         },\n//         plugins: [\n//             new ExpirationPlugin({\n//                 maxAgeSeconds: 30 * 24 * 60 * 60,\n//                 purgeOnQuotaError: true\n//             })\n//         ]\n//     })\n// );\n\n// /*\n//  * Google Analytics Async - No Cache\n//  *\n//  * Mathod: networkOnly\n//  */\n\n// routing.registerRoute(\n//     /.*\\.google-analytics\\.com/,\n//     new NetworkOnly({\n//         plugins: [\n//             new backgroundSync.BackgroundSyncPlugin('Optical_Collect', {\n//                 maxRetentionTime: 12 * 60 // Retry for max of 12 Hours (specified in minutes)\n//             }),\n//         ]\n//     })\n// );\n\n\n// /*\n//  * API - No Cache\n//  *\n//  * Method: networkOnly\n//  */\n// routing.registerRoute(\n//     new RegExp('https://api\\.i-meto\\.com'),\n//     new NetworkOnly()\n// );\n\n// routing.registerRoute(\n//     new RegExp('https://ip\\.diygod\\.me'),\n//     new NetworkOnly()\n// );\n\n// routing.registerRoute(\n//     new RegExp('https://leancloud\\.diygod\\.me'),\n//     new NetworkFirst({\n//         cacheName: 'api' + cacheSuffixVersion,\n//         fetchOptions: {\n//             mode: 'cors',\n//             credentials: 'omit'\n//         },\n//         networkTimeoutSeconds: 3\n//     })\n// );\n\n// routing.registerRoute(\n//     new RegExp('https://disqus\\.diygod\\.me'),\n//     new NetworkFirst({\n//         cacheName: 'api' + cacheSuffixVersion,\n//         fetchOptions: {\n//             mode: 'cors',\n//             credentials: 'omit'\n//         },\n//         networkTimeoutSeconds: 3\n//     })\n// );\n\n// /*\n//  * Disqus Related - No cache\n//  * disqus.com\n//  * *.disquscdn.com\n//  *\n//  * Method: NetworkOnly\n//  */\n// routing.registerRoute(\n//     new RegExp('^https://(.*)disqus\\.com'),\n//     new NetworkOnly()\n// );\n\n// routing.registerRoute(\n//     new RegExp('^https://(.*)disquscdn\\.com(.*)'),\n//     new NetworkOnly()\n// );\n\n// /*\n//  * Others img\n//  * Method: staleWhileRevalidate\n//  * cacheName: img-cache\n//  */\n// routing.registerRoute(\n//     // Cache image files\n//     /.*\\.(?:png|jpg|jpeg|svg|gif|webp)/,\n//     new StaleWhileRevalidate()\n// );\n\n// /*\n//  * Static Assets\n//  * Method: staleWhileRevalidate\n//  * cacheName: static-assets-cache\n//  */\n// routing.registerRoute(\n//     // Cache CSS files\n//     /.*\\.(css|js)/,\n//     // Use cache but update in the background ASAP\n//     new StaleWhileRevalidate()\n// );\n\n// /*\n//  * sw.js - Revalidate every time\n//  * staleWhileRevalidate\n//  */\n// routing.registerRoute(\n//     '/js/sw.js',\n//     new StaleWhileRevalidate()\n// );\n\n// /*\n//  * Default - Serve as it is\n//  * networkFirst\n//  */\n// routing.setDefaultHandler(\n//     new NetworkFirst({\n//         networkTimeoutSeconds: 3\n//     })\n// );\n","source":"sw.js","raw":"// importScripts('https://cdn.jsdelivr.net/npm/workbox-cdn@5.1.3/workbox/workbox-sw.js');\n\n// workbox.setConfig({\n//     modulePathPrefix: 'https://cdn.jsdelivr.net/npm/workbox-cdn@5.1.3/workbox/'\n// });\n\n// const { core, precaching, routing, strategies, expiration, cacheableResponse, backgroundSync } = workbox;\n// const { CacheFirst, NetworkFirst, NetworkOnly, StaleWhileRevalidate } = strategies;\n// const { ExpirationPlugin } = expiration;\n// const { CacheableResponsePlugin } = cacheableResponse;\n\n// const cacheSuffixVersion = '-200629',\n//     // precacheCacheName = core.cacheNames.precache,\n//     // runtimeCacheName = core.cacheNames.runtime,\n//     maxEntries = 100;\n\n// self.addEventListener('activate', (event) => {\n//     event.waitUntil(\n//         caches.keys().then((keys) => {\n//             return Promise.all(keys.map((key) => {\n//                 if (!key.includes(cacheSuffixVersion)) return caches.delete(key);\n//             }));\n//         })\n//     );\n// });\n\n\n// core.setCacheNameDetails({\n//     prefix: 'hidiygod',\n//     suffix: cacheSuffixVersion\n// });\n\n// core.skipWaiting();\n// core.clientsClaim();\n// precaching.cleanupOutdatedCaches();\n\n// /*\n//  * Precache\n//  * - Static Assets\n//  */\n// precaching.precacheAndRoute(\n//     [\n//         { url: 'https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js', revision: null },\n//     ],\n// );\n\n// /*\n//  * Cache File From jsDelivr\n//  * cdn.jsdelivr.net | shadow.elemecdn.com\n//  *\n//  * Method: CacheFirst\n//  * cacheName: static-immutable\n//  * cacheTime: 30d\n//  */\n\n// // cdn.jsdelivr.net - cors enabled\n// routing.registerRoute(\n//     /.*cdn\\.jsdelivr\\.net/,\n//     new CacheFirst({\n//         cacheName: 'static-immutable' + cacheSuffixVersion,\n//         fetchOptions: {\n//             mode: 'cors',\n//             credentials: 'omit'\n//         },\n//         plugins: [\n//             new ExpirationPlugin({\n//                 maxAgeSeconds: 30 * 24 * 60 * 60,\n//                 purgeOnQuotaError: true\n//             })\n//         ]\n//     })\n// );\n\n// /*\n//  * Google Analytics Async - No Cache\n//  *\n//  * Mathod: networkOnly\n//  */\n\n// routing.registerRoute(\n//     /.*\\.google-analytics\\.com/,\n//     new NetworkOnly({\n//         plugins: [\n//             new backgroundSync.BackgroundSyncPlugin('Optical_Collect', {\n//                 maxRetentionTime: 12 * 60 // Retry for max of 12 Hours (specified in minutes)\n//             }),\n//         ]\n//     })\n// );\n\n\n// /*\n//  * API - No Cache\n//  *\n//  * Method: networkOnly\n//  */\n// routing.registerRoute(\n//     new RegExp('https://api\\.i-meto\\.com'),\n//     new NetworkOnly()\n// );\n\n// routing.registerRoute(\n//     new RegExp('https://ip\\.diygod\\.me'),\n//     new NetworkOnly()\n// );\n\n// routing.registerRoute(\n//     new RegExp('https://leancloud\\.diygod\\.me'),\n//     new NetworkFirst({\n//         cacheName: 'api' + cacheSuffixVersion,\n//         fetchOptions: {\n//             mode: 'cors',\n//             credentials: 'omit'\n//         },\n//         networkTimeoutSeconds: 3\n//     })\n// );\n\n// routing.registerRoute(\n//     new RegExp('https://disqus\\.diygod\\.me'),\n//     new NetworkFirst({\n//         cacheName: 'api' + cacheSuffixVersion,\n//         fetchOptions: {\n//             mode: 'cors',\n//             credentials: 'omit'\n//         },\n//         networkTimeoutSeconds: 3\n//     })\n// );\n\n// /*\n//  * Disqus Related - No cache\n//  * disqus.com\n//  * *.disquscdn.com\n//  *\n//  * Method: NetworkOnly\n//  */\n// routing.registerRoute(\n//     new RegExp('^https://(.*)disqus\\.com'),\n//     new NetworkOnly()\n// );\n\n// routing.registerRoute(\n//     new RegExp('^https://(.*)disquscdn\\.com(.*)'),\n//     new NetworkOnly()\n// );\n\n// /*\n//  * Others img\n//  * Method: staleWhileRevalidate\n//  * cacheName: img-cache\n//  */\n// routing.registerRoute(\n//     // Cache image files\n//     /.*\\.(?:png|jpg|jpeg|svg|gif|webp)/,\n//     new StaleWhileRevalidate()\n// );\n\n// /*\n//  * Static Assets\n//  * Method: staleWhileRevalidate\n//  * cacheName: static-assets-cache\n//  */\n// routing.registerRoute(\n//     // Cache CSS files\n//     /.*\\.(css|js)/,\n//     // Use cache but update in the background ASAP\n//     new StaleWhileRevalidate()\n// );\n\n// /*\n//  * sw.js - Revalidate every time\n//  * staleWhileRevalidate\n//  */\n// routing.registerRoute(\n//     '/js/sw.js',\n//     new StaleWhileRevalidate()\n// );\n\n// /*\n//  * Default - Serve as it is\n//  * networkFirst\n//  */\n// routing.setDefaultHandler(\n//     new NetworkFirst({\n//         networkTimeoutSeconds: 3\n//     })\n// );\n","date":"2021-03-02T08:43:51.399Z","updated":"2021-03-02T08:43:51.399Z","path":"sw.js","layout":"false","title":"","comments":1,"_id":"ckmejaerk0009xcvrf1ex6zb8","content":"// importScripts('https://cdn.jsdelivr.net/npm/workbox-cdn@5.1.3/workbox/workbox-sw.js');\n\n// workbox.setConfig({\n//     modulePathPrefix: 'https://cdn.jsdelivr.net/npm/workbox-cdn@5.1.3/workbox/'\n// });\n\n// const { core, precaching, routing, strategies, expiration, cacheableResponse, backgroundSync } = workbox;\n// const { CacheFirst, NetworkFirst, NetworkOnly, StaleWhileRevalidate } = strategies;\n// const { ExpirationPlugin } = expiration;\n// const { CacheableResponsePlugin } = cacheableResponse;\n\n// const cacheSuffixVersion = '-200629',\n//     // precacheCacheName = core.cacheNames.precache,\n//     // runtimeCacheName = core.cacheNames.runtime,\n//     maxEntries = 100;\n\n// self.addEventListener('activate', (event) => {\n//     event.waitUntil(\n//         caches.keys().then((keys) => {\n//             return Promise.all(keys.map((key) => {\n//                 if (!key.includes(cacheSuffixVersion)) return caches.delete(key);\n//             }));\n//         })\n//     );\n// });\n\n\n// core.setCacheNameDetails({\n//     prefix: 'hidiygod',\n//     suffix: cacheSuffixVersion\n// });\n\n// core.skipWaiting();\n// core.clientsClaim();\n// precaching.cleanupOutdatedCaches();\n\n// /*\n//  * Precache\n//  * - Static Assets\n//  */\n// precaching.precacheAndRoute(\n//     [\n//         { url: 'https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js', revision: null },\n//     ],\n// );\n\n// /*\n//  * Cache File From jsDelivr\n//  * cdn.jsdelivr.net | shadow.elemecdn.com\n//  *\n//  * Method: CacheFirst\n//  * cacheName: static-immutable\n//  * cacheTime: 30d\n//  */\n\n// // cdn.jsdelivr.net - cors enabled\n// routing.registerRoute(\n//     /.*cdn\\.jsdelivr\\.net/,\n//     new CacheFirst({\n//         cacheName: 'static-immutable' + cacheSuffixVersion,\n//         fetchOptions: {\n//             mode: 'cors',\n//             credentials: 'omit'\n//         },\n//         plugins: [\n//             new ExpirationPlugin({\n//                 maxAgeSeconds: 30 * 24 * 60 * 60,\n//                 purgeOnQuotaError: true\n//             })\n//         ]\n//     })\n// );\n\n// /*\n//  * Google Analytics Async - No Cache\n//  *\n//  * Mathod: networkOnly\n//  */\n\n// routing.registerRoute(\n//     /.*\\.google-analytics\\.com/,\n//     new NetworkOnly({\n//         plugins: [\n//             new backgroundSync.BackgroundSyncPlugin('Optical_Collect', {\n//                 maxRetentionTime: 12 * 60 // Retry for max of 12 Hours (specified in minutes)\n//             }),\n//         ]\n//     })\n// );\n\n\n// /*\n//  * API - No Cache\n//  *\n//  * Method: networkOnly\n//  */\n// routing.registerRoute(\n//     new RegExp('https://api\\.i-meto\\.com'),\n//     new NetworkOnly()\n// );\n\n// routing.registerRoute(\n//     new RegExp('https://ip\\.diygod\\.me'),\n//     new NetworkOnly()\n// );\n\n// routing.registerRoute(\n//     new RegExp('https://leancloud\\.diygod\\.me'),\n//     new NetworkFirst({\n//         cacheName: 'api' + cacheSuffixVersion,\n//         fetchOptions: {\n//             mode: 'cors',\n//             credentials: 'omit'\n//         },\n//         networkTimeoutSeconds: 3\n//     })\n// );\n\n// routing.registerRoute(\n//     new RegExp('https://disqus\\.diygod\\.me'),\n//     new NetworkFirst({\n//         cacheName: 'api' + cacheSuffixVersion,\n//         fetchOptions: {\n//             mode: 'cors',\n//             credentials: 'omit'\n//         },\n//         networkTimeoutSeconds: 3\n//     })\n// );\n\n// /*\n//  * Disqus Related - No cache\n//  * disqus.com\n//  * *.disquscdn.com\n//  *\n//  * Method: NetworkOnly\n//  */\n// routing.registerRoute(\n//     new RegExp('^https://(.*)disqus\\.com'),\n//     new NetworkOnly()\n// );\n\n// routing.registerRoute(\n//     new RegExp('^https://(.*)disquscdn\\.com(.*)'),\n//     new NetworkOnly()\n// );\n\n// /*\n//  * Others img\n//  * Method: staleWhileRevalidate\n//  * cacheName: img-cache\n//  */\n// routing.registerRoute(\n//     // Cache image files\n//     /.*\\.(?:png|jpg|jpeg|svg|gif|webp)/,\n//     new StaleWhileRevalidate()\n// );\n\n// /*\n//  * Static Assets\n//  * Method: staleWhileRevalidate\n//  * cacheName: static-assets-cache\n//  */\n// routing.registerRoute(\n//     // Cache CSS files\n//     /.*\\.(css|js)/,\n//     // Use cache but update in the background ASAP\n//     new StaleWhileRevalidate()\n// );\n\n// /*\n//  * sw.js - Revalidate every time\n//  * staleWhileRevalidate\n//  */\n// routing.registerRoute(\n//     '/js/sw.js',\n//     new StaleWhileRevalidate()\n// );\n\n// /*\n//  * Default - Serve as it is\n//  * networkFirst\n//  */\n// routing.setDefaultHandler(\n//     new NetworkFirst({\n//         networkTimeoutSeconds: 3\n//     })\n// );\n","site":{"data":{}},"excerpt":"","more":"// importScripts('https://cdn.jsdelivr.net/npm/workbox-cdn@5.1.3/workbox/workbox-sw.js');\n\n// workbox.setConfig({\n//     modulePathPrefix: 'https://cdn.jsdelivr.net/npm/workbox-cdn@5.1.3/workbox/'\n// });\n\n// const { core, precaching, routing, strategies, expiration, cacheableResponse, backgroundSync } = workbox;\n// const { CacheFirst, NetworkFirst, NetworkOnly, StaleWhileRevalidate } = strategies;\n// const { ExpirationPlugin } = expiration;\n// const { CacheableResponsePlugin } = cacheableResponse;\n\n// const cacheSuffixVersion = '-200629',\n//     // precacheCacheName = core.cacheNames.precache,\n//     // runtimeCacheName = core.cacheNames.runtime,\n//     maxEntries = 100;\n\n// self.addEventListener('activate', (event) => {\n//     event.waitUntil(\n//         caches.keys().then((keys) => {\n//             return Promise.all(keys.map((key) => {\n//                 if (!key.includes(cacheSuffixVersion)) return caches.delete(key);\n//             }));\n//         })\n//     );\n// });\n\n\n// core.setCacheNameDetails({\n//     prefix: 'hidiygod',\n//     suffix: cacheSuffixVersion\n// });\n\n// core.skipWaiting();\n// core.clientsClaim();\n// precaching.cleanupOutdatedCaches();\n\n// /*\n//  * Precache\n//  * - Static Assets\n//  */\n// precaching.precacheAndRoute(\n//     [\n//         { url: 'https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js', revision: null },\n//     ],\n// );\n\n// /*\n//  * Cache File From jsDelivr\n//  * cdn.jsdelivr.net | shadow.elemecdn.com\n//  *\n//  * Method: CacheFirst\n//  * cacheName: static-immutable\n//  * cacheTime: 30d\n//  */\n\n// // cdn.jsdelivr.net - cors enabled\n// routing.registerRoute(\n//     /.*cdn\\.jsdelivr\\.net/,\n//     new CacheFirst({\n//         cacheName: 'static-immutable' + cacheSuffixVersion,\n//         fetchOptions: {\n//             mode: 'cors',\n//             credentials: 'omit'\n//         },\n//         plugins: [\n//             new ExpirationPlugin({\n//                 maxAgeSeconds: 30 * 24 * 60 * 60,\n//                 purgeOnQuotaError: true\n//             })\n//         ]\n//     })\n// );\n\n// /*\n//  * Google Analytics Async - No Cache\n//  *\n//  * Mathod: networkOnly\n//  */\n\n// routing.registerRoute(\n//     /.*\\.google-analytics\\.com/,\n//     new NetworkOnly({\n//         plugins: [\n//             new backgroundSync.BackgroundSyncPlugin('Optical_Collect', {\n//                 maxRetentionTime: 12 * 60 // Retry for max of 12 Hours (specified in minutes)\n//             }),\n//         ]\n//     })\n// );\n\n\n// /*\n//  * API - No Cache\n//  *\n//  * Method: networkOnly\n//  */\n// routing.registerRoute(\n//     new RegExp('https://api\\.i-meto\\.com'),\n//     new NetworkOnly()\n// );\n\n// routing.registerRoute(\n//     new RegExp('https://ip\\.diygod\\.me'),\n//     new NetworkOnly()\n// );\n\n// routing.registerRoute(\n//     new RegExp('https://leancloud\\.diygod\\.me'),\n//     new NetworkFirst({\n//         cacheName: 'api' + cacheSuffixVersion,\n//         fetchOptions: {\n//             mode: 'cors',\n//             credentials: 'omit'\n//         },\n//         networkTimeoutSeconds: 3\n//     })\n// );\n\n// routing.registerRoute(\n//     new RegExp('https://disqus\\.diygod\\.me'),\n//     new NetworkFirst({\n//         cacheName: 'api' + cacheSuffixVersion,\n//         fetchOptions: {\n//             mode: 'cors',\n//             credentials: 'omit'\n//         },\n//         networkTimeoutSeconds: 3\n//     })\n// );\n\n// /*\n//  * Disqus Related - No cache\n//  * disqus.com\n//  * *.disquscdn.com\n//  *\n//  * Method: NetworkOnly\n//  */\n// routing.registerRoute(\n//     new RegExp('^https://(.*)disqus\\.com'),\n//     new NetworkOnly()\n// );\n\n// routing.registerRoute(\n//     new RegExp('^https://(.*)disquscdn\\.com(.*)'),\n//     new NetworkOnly()\n// );\n\n// /*\n//  * Others img\n//  * Method: staleWhileRevalidate\n//  * cacheName: img-cache\n//  */\n// routing.registerRoute(\n//     // Cache image files\n//     /.*\\.(?:png|jpg|jpeg|svg|gif|webp)/,\n//     new StaleWhileRevalidate()\n// );\n\n// /*\n//  * Static Assets\n//  * Method: staleWhileRevalidate\n//  * cacheName: static-assets-cache\n//  */\n// routing.registerRoute(\n//     // Cache CSS files\n//     /.*\\.(css|js)/,\n//     // Use cache but update in the background ASAP\n//     new StaleWhileRevalidate()\n// );\n\n// /*\n//  * sw.js - Revalidate every time\n//  * staleWhileRevalidate\n//  */\n// routing.registerRoute(\n//     '/js/sw.js',\n//     new StaleWhileRevalidate()\n// );\n\n// /*\n//  * Default - Serve as it is\n//  * networkFirst\n//  */\n// routing.setDefaultHandler(\n//     new NetworkFirst({\n//         networkTimeoutSeconds: 3\n//     })\n// );\n"},{"title":"赞赏","id":173,"date":"2014-02-15T15:11:10.000Z","_content":"\n![](/images/donate.jpg)\n\n如果我给你带来过欢乐，或者对你有所帮助，欢迎赞赏支持（/∇＼）\n\n## 周期性赞助\n\n周期性赞助可以获得额外的回报.\n\n-   通过 [Patreon](https://www.patreon.com/DIYgod) 赞助\n-   通过 [爱发电](https://afdian.net/@diygod) 赞助\n-   给我们发邮件联系赞助事宜: i@diygod.me\n\n## 一次性赞助\n\n我们通过以下方式接受赞助:\n\n-   [微信支付](https://diygod.me/images/wx.jpg)\n-   [支付宝](https://diygod.me/images/zfb.jpg)\n-   [Paypal](https://www.paypal.me/DIYgod)\n\n{% raw %}\n<script data-ad-client=\"ca-pub-5433699470727157\" async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 博客投喂页展示demo -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-5433699470727157\"\n     data-ad-slot=\"6239237343\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n     (adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n{% endraw %}","source":"donate/index.md","raw":"---\ntitle: 赞赏\nid: 173\ndate: 2014-02-15 23:11:10\n---\n\n![](/images/donate.jpg)\n\n如果我给你带来过欢乐，或者对你有所帮助，欢迎赞赏支持（/∇＼）\n\n## 周期性赞助\n\n周期性赞助可以获得额外的回报.\n\n-   通过 [Patreon](https://www.patreon.com/DIYgod) 赞助\n-   通过 [爱发电](https://afdian.net/@diygod) 赞助\n-   给我们发邮件联系赞助事宜: i@diygod.me\n\n## 一次性赞助\n\n我们通过以下方式接受赞助:\n\n-   [微信支付](https://diygod.me/images/wx.jpg)\n-   [支付宝](https://diygod.me/images/zfb.jpg)\n-   [Paypal](https://www.paypal.me/DIYgod)\n\n{% raw %}\n<script data-ad-client=\"ca-pub-5433699470727157\" async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 博客投喂页展示demo -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-5433699470727157\"\n     data-ad-slot=\"6239237343\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n     (adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n{% endraw %}","updated":"2021-03-01T03:47:26.034Z","path":"donate/index.html","comments":1,"layout":"page","_id":"ckmejaerl000cxcvr7g559mg4","content":"<p><img src=\"/images/donate.jpg\"></p>\n<p>如果我给你带来过欢乐，或者对你有所帮助，欢迎赞赏支持（/∇＼）</p>\n<h2 id=\"周期性赞助\"><a href=\"#周期性赞助\" class=\"headerlink\" title=\"周期性赞助\"></a>周期性赞助</h2><p>周期性赞助可以获得额外的回报.</p>\n<ul>\n<li>  通过 <a href=\"https://www.patreon.com/DIYgod\">Patreon</a> 赞助</li>\n<li>  通过 <a href=\"https://afdian.net/@diygod\">爱发电</a> 赞助</li>\n<li>  给我们发邮件联系赞助事宜: <a href=\"mailto:&#105;&#x40;&#x64;&#x69;&#x79;&#103;&#111;&#100;&#46;&#109;&#x65;\">&#105;&#x40;&#x64;&#x69;&#x79;&#103;&#111;&#100;&#46;&#109;&#x65;</a></li>\n</ul>\n<h2 id=\"一次性赞助\"><a href=\"#一次性赞助\" class=\"headerlink\" title=\"一次性赞助\"></a>一次性赞助</h2><p>我们通过以下方式接受赞助:</p>\n<ul>\n<li>  <a href=\"https://diygod.me/images/wx.jpg\">微信支付</a></li>\n<li>  <a href=\"https://diygod.me/images/zfb.jpg\">支付宝</a></li>\n<li>  <a href=\"https://www.paypal.me/DIYgod\">Paypal</a></li>\n</ul>\n\n<script data-ad-client=\"ca-pub-5433699470727157\" async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 博客投喂页展示demo -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-5433699470727157\"\n     data-ad-slot=\"6239237343\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n     (adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/donate.jpg\"></p>\n<p>如果我给你带来过欢乐，或者对你有所帮助，欢迎赞赏支持（/∇＼）</p>\n<h2 id=\"周期性赞助\"><a href=\"#周期性赞助\" class=\"headerlink\" title=\"周期性赞助\"></a>周期性赞助</h2><p>周期性赞助可以获得额外的回报.</p>\n<ul>\n<li>  通过 <a href=\"https://www.patreon.com/DIYgod\">Patreon</a> 赞助</li>\n<li>  通过 <a href=\"https://afdian.net/@diygod\">爱发电</a> 赞助</li>\n<li>  给我们发邮件联系赞助事宜: <a href=\"mailto:&#105;&#x40;&#x64;&#x69;&#x79;&#103;&#111;&#100;&#46;&#109;&#x65;\">&#105;&#x40;&#x64;&#x69;&#x79;&#103;&#111;&#100;&#46;&#109;&#x65;</a></li>\n</ul>\n<h2 id=\"一次性赞助\"><a href=\"#一次性赞助\" class=\"headerlink\" title=\"一次性赞助\"></a>一次性赞助</h2><p>我们通过以下方式接受赞助:</p>\n<ul>\n<li>  <a href=\"https://diygod.me/images/wx.jpg\">微信支付</a></li>\n<li>  <a href=\"https://diygod.me/images/zfb.jpg\">支付宝</a></li>\n<li>  <a href=\"https://www.paypal.me/DIYgod\">Paypal</a></li>\n</ul>\n\n<script data-ad-client=\"ca-pub-5433699470727157\" async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<!-- 博客投喂页展示demo -->\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-5433699470727157\"\n     data-ad-slot=\"6239237343\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n     (adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n"},{"title":"留言板","id":84,"date":"2014-02-10T06:49:01.000Z","_content":"\n**有什么话要对我说吗？这里是你畅所欲言的地方，可以咨询，可以交流，可以感叹，可以发飙，但不可以订外卖。**\n\n![](/images/message0.jpg)","source":"message/index.md","raw":"---\ntitle: 留言板\nid: 84\ndate: 2014-02-10 14:49:01\n---\n\n**有什么话要对我说吗？这里是你畅所欲言的地方，可以咨询，可以交流，可以感叹，可以发飙，但不可以订外卖。**\n\n![](/images/message0.jpg)","updated":"2021-03-01T03:47:26.048Z","path":"message/index.html","comments":1,"layout":"page","_id":"ckmejaern000excvr5qml7i1y","content":"<p><strong>有什么话要对我说吗？这里是你畅所欲言的地方，可以咨询，可以交流，可以感叹，可以发飙，但不可以订外卖。</strong></p>\n<p><img src=\"/images/message0.jpg\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>有什么话要对我说吗？这里是你畅所欲言的地方，可以咨询，可以交流，可以感叹，可以发飙，但不可以订外卖。</strong></p>\n<p><img src=\"/images/message0.jpg\"></p>\n"},{"title":"标签","type":"tag","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ntype: \"tag\"\ncomments: false\n---\n","date":"2019-07-09T07:07:44.745Z","updated":"2019-07-09T07:07:44.745Z","path":"tags/index.html","layout":"page","_id":"ckmejaerq000ixcvr2ubwdtmi","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Event loop(JS)","date":"2018-04-28T03:19:52.000Z","_content":"JS是一门非阻塞单线程语言。\n\nJS在执行过程中会产生执行环境，这些执行环境会被顺序的加入到执行栈中。如果遇到异步的代码，会被挂起并加入搭配Task（有多种Task）队列中。一旦执行栈为空，Event Loop就会从Task队列中拿出需要执行的代码放入到执行栈中执行。\n<!--more-->\n```javascript\nconsole.log('script start');\n\nsetTimeout(function() {\n  console.log('setTimeout');\n}, 0);\n\nconsole.log('script end');\n```\n以上代码虽然 setTimeout 延时为 0，其实还是异步。这是因为 HTML5 标准规定这个函数第二个参数不得小于 4 毫秒，不足会自动增加。所以 setTimeout 还是会在 script end 之后打印。\n\n## 任务队列\nJS中有两类任务队列：宏任务队列(macro task) 和 微任务队列(micro task)。宏任务队列可以有多个，微任务队列只有一个。\n不同的任务源会被分配到不同的 Task 队列中，任务源可以分为 微任务（microtask） 和 宏任务（macrotask）。在 ES6 规范中，microtask 称为 jobs，macrotask 称为 task。\n\n- (macro)task宏任务:\n    (macro)task主要包括：script(整体代码)，setTimeout、setInterval、I/O、UI交互事件、setImmediate(Node.js环境)\n- (micro)task微任务：\n    (micro)task主要包括：Promise、MutaionObserver、process.nextTick(Node.js环境)\n\n代码开始执行都是从script（全局任务）开始，所以，一旦我们的全局任务（`<script>`属于宏任务）执行完，就马上执行完整个微任务队列。\n```javascript\nconsole.log('script start');\n\nPromise.resolve().then(() => {\n    console.log('p 1');\n});\n\nsetTimeout(() => {\n    console.log('setTimeout');\n}, 0);\n\nvar s = new Date();\nwhile(new Date() - s < 50); // 阻塞50ms\n\nPromise.resolve().then(() => {\n    console.log('p 2');\n});\n\nconsole.log('script ent');\n\n\n/*** output ***/\n\n// one macro task\nscript start\nscript ent\n\n// all micro tasks\np 1\np 2\n\n// one macro task again\nsetTimeout\n```\n\n```javascript\nconsole.log('script start');\n\nsetTimeout(function() {\n  console.log('setTimeout');\n}, 0);\n\nnew Promise((resolve) => {\n    console.log('Promise')\n    resolve()\n}).then(function() {\n  console.log('promise1');\n}).then(function() {\n  console.log('promise2');\n});\n\nconsole.log('script end');\n// script start => Promise => script end => promise1 => promise2 => setTimeout\n```\n","source":"_posts/Event-loop-JS.md","raw":"---\ntitle: Event loop(JS)\ndate: 2018-04-28 11:19:52\ncategories: JavaScript\n---\nJS是一门非阻塞单线程语言。\n\nJS在执行过程中会产生执行环境，这些执行环境会被顺序的加入到执行栈中。如果遇到异步的代码，会被挂起并加入搭配Task（有多种Task）队列中。一旦执行栈为空，Event Loop就会从Task队列中拿出需要执行的代码放入到执行栈中执行。\n<!--more-->\n```javascript\nconsole.log('script start');\n\nsetTimeout(function() {\n  console.log('setTimeout');\n}, 0);\n\nconsole.log('script end');\n```\n以上代码虽然 setTimeout 延时为 0，其实还是异步。这是因为 HTML5 标准规定这个函数第二个参数不得小于 4 毫秒，不足会自动增加。所以 setTimeout 还是会在 script end 之后打印。\n\n## 任务队列\nJS中有两类任务队列：宏任务队列(macro task) 和 微任务队列(micro task)。宏任务队列可以有多个，微任务队列只有一个。\n不同的任务源会被分配到不同的 Task 队列中，任务源可以分为 微任务（microtask） 和 宏任务（macrotask）。在 ES6 规范中，microtask 称为 jobs，macrotask 称为 task。\n\n- (macro)task宏任务:\n    (macro)task主要包括：script(整体代码)，setTimeout、setInterval、I/O、UI交互事件、setImmediate(Node.js环境)\n- (micro)task微任务：\n    (micro)task主要包括：Promise、MutaionObserver、process.nextTick(Node.js环境)\n\n代码开始执行都是从script（全局任务）开始，所以，一旦我们的全局任务（`<script>`属于宏任务）执行完，就马上执行完整个微任务队列。\n```javascript\nconsole.log('script start');\n\nPromise.resolve().then(() => {\n    console.log('p 1');\n});\n\nsetTimeout(() => {\n    console.log('setTimeout');\n}, 0);\n\nvar s = new Date();\nwhile(new Date() - s < 50); // 阻塞50ms\n\nPromise.resolve().then(() => {\n    console.log('p 2');\n});\n\nconsole.log('script ent');\n\n\n/*** output ***/\n\n// one macro task\nscript start\nscript ent\n\n// all micro tasks\np 1\np 2\n\n// one macro task again\nsetTimeout\n```\n\n```javascript\nconsole.log('script start');\n\nsetTimeout(function() {\n  console.log('setTimeout');\n}, 0);\n\nnew Promise((resolve) => {\n    console.log('Promise')\n    resolve()\n}).then(function() {\n  console.log('promise1');\n}).then(function() {\n  console.log('promise2');\n});\n\nconsole.log('script end');\n// script start => Promise => script end => promise1 => promise2 => setTimeout\n```\n","slug":"Event-loop-JS","published":1,"updated":"2019-07-18T02:36:21.442Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmejaerb0001xcvr8w491h75","content":"<p>JS是一门非阻塞单线程语言。</p>\n<p>JS在执行过程中会产生执行环境，这些执行环境会被顺序的加入到执行栈中。如果遇到异步的代码，会被挂起并加入搭配Task（有多种Task）队列中。一旦执行栈为空，Event Loop就会从Task队列中拿出需要执行的代码放入到执行栈中执行。</p>\n<span id=\"more\"></span>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;script start&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;setTimeout&#x27;</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;script end&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>以上代码虽然 setTimeout 延时为 0，其实还是异步。这是因为 HTML5 标准规定这个函数第二个参数不得小于 4 毫秒，不足会自动增加。所以 setTimeout 还是会在 script end 之后打印。</p>\n<h2 id=\"任务队列\"><a href=\"#任务队列\" class=\"headerlink\" title=\"任务队列\"></a>任务队列</h2><p>JS中有两类任务队列：宏任务队列(macro task) 和 微任务队列(micro task)。宏任务队列可以有多个，微任务队列只有一个。<br>不同的任务源会被分配到不同的 Task 队列中，任务源可以分为 微任务（microtask） 和 宏任务（macrotask）。在 ES6 规范中，microtask 称为 jobs，macrotask 称为 task。</p>\n<ul>\n<li>(macro)task宏任务:<br>  (macro)task主要包括：script(整体代码)，setTimeout、setInterval、I/O、UI交互事件、setImmediate(Node.js环境)</li>\n<li>(micro)task微任务：<br>  (micro)task主要包括：Promise、MutaionObserver、process.nextTick(Node.js环境)</li>\n</ul>\n<p>代码开始执行都是从script（全局任务）开始，所以，一旦我们的全局任务（<code>&lt;script&gt;</code>属于宏任务）执行完，就马上执行完整个微任务队列。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;script start&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;p 1&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;setTimeout&#x27;</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() - s &lt; <span class=\"number\">50</span>); <span class=\"comment\">// 阻塞50ms</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;p 2&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;script ent&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*** output ***/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// one macro task</span></span><br><span class=\"line\">script start</span><br><span class=\"line\">script ent</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// all micro tasks</span></span><br><span class=\"line\">p <span class=\"number\">1</span></span><br><span class=\"line\">p <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// one macro task again</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;script start&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;setTimeout&#x27;</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Promise&#x27;</span>)</span><br><span class=\"line\">    resolve()</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;promise1&#x27;</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;promise2&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;script end&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// script start =&gt; Promise =&gt; script end =&gt; promise1 =&gt; promise2 =&gt; setTimeout</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>JS是一门非阻塞单线程语言。</p>\n<p>JS在执行过程中会产生执行环境，这些执行环境会被顺序的加入到执行栈中。如果遇到异步的代码，会被挂起并加入搭配Task（有多种Task）队列中。一旦执行栈为空，Event Loop就会从Task队列中拿出需要执行的代码放入到执行栈中执行。</p>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;script start&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;setTimeout&#x27;</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;script end&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>以上代码虽然 setTimeout 延时为 0，其实还是异步。这是因为 HTML5 标准规定这个函数第二个参数不得小于 4 毫秒，不足会自动增加。所以 setTimeout 还是会在 script end 之后打印。</p>\n<h2 id=\"任务队列\"><a href=\"#任务队列\" class=\"headerlink\" title=\"任务队列\"></a>任务队列</h2><p>JS中有两类任务队列：宏任务队列(macro task) 和 微任务队列(micro task)。宏任务队列可以有多个，微任务队列只有一个。<br>不同的任务源会被分配到不同的 Task 队列中，任务源可以分为 微任务（microtask） 和 宏任务（macrotask）。在 ES6 规范中，microtask 称为 jobs，macrotask 称为 task。</p>\n<ul>\n<li>(macro)task宏任务:<br>  (macro)task主要包括：script(整体代码)，setTimeout、setInterval、I/O、UI交互事件、setImmediate(Node.js环境)</li>\n<li>(micro)task微任务：<br>  (micro)task主要包括：Promise、MutaionObserver、process.nextTick(Node.js环境)</li>\n</ul>\n<p>代码开始执行都是从script（全局任务）开始，所以，一旦我们的全局任务（<code>&lt;script&gt;</code>属于宏任务）执行完，就马上执行完整个微任务队列。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;script start&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;p 1&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;setTimeout&#x27;</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() - s &lt; <span class=\"number\">50</span>); <span class=\"comment\">// 阻塞50ms</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;p 2&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;script ent&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*** output ***/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// one macro task</span></span><br><span class=\"line\">script start</span><br><span class=\"line\">script ent</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// all micro tasks</span></span><br><span class=\"line\">p <span class=\"number\">1</span></span><br><span class=\"line\">p <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// one macro task again</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;script start&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;setTimeout&#x27;</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Promise&#x27;</span>)</span><br><span class=\"line\">    resolve()</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;promise1&#x27;</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;promise2&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;script end&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// script start =&gt; Promise =&gt; script end =&gt; promise1 =&gt; promise2 =&gt; setTimeout</span></span><br></pre></td></tr></table></figure>"},{"title":"HTTPS","date":"2017-07-17T03:30:11.000Z","_content":"\nhttps 可以理解为 HTTP+TLS，TLS 是传输层加密协议，是 HTTPS 安全的核心，其前身是 SSL。TLS 主要有五部分 : 应用数据层协议，握手协议，报警协议，加密消息确认协议，心跳协议。TLS 协议本身又是由 record 协议传输的。\n\n### 为什么要实现 HTTPS？\n\n为保护用户隐私和网络安全。通过数据加密、校验数据完整性和身份认证三种机制来保障安全。\n\n<!--more-->\n\n### 全站 HTTPS 必须解决的问题\n\n---\n\n**性能**\n\n* HTTPS 需要多次握手，因此网络耗时变长，用户从 HTTP 跳转到 HTTPS 需要一些时间。但是如果使用 SPDY，HTTPS 的速度甚至比 HTTP 快。HTTPS 对速度的影响主要来自两方面 :\n  1. 协议交换所增加的网络 RTT。\n  2. 加解密相关的计算耗时。\n* HTTPS 要做 RSA 校验，这会影响到设备性能。\n* 所有 CDN 节点要支持 HTTPS，而且需要有极其复杂的解决方案来面对 DDoS 的挑战。 ** 其次，兼容性及周边 :**\n* 页面中所有嵌入的资源（图片、附件、js 、视频等）都要改为 HTTPS 的，否者就会报警。\n\n### 基于协议和配置的优化\n\n1.HTTPS 访问速度优化 2.Tcp fast open\n\n#### HTTPS:\n\n网站通常的做法是对 HTTP 的访问服务器端做 302 跳转，跳转到 HTTPS。但是这个 302 跳转存在两个问题 : 1. 使用不安全的 HTTP 协议进行通信。 2. 增加一个 Round-Trip Time。\n\n而 HSTS 是 HTTP Strict Transport Security 的缩写，作用是强制客户端（如浏览器）使用 HTTPS 与服务器创建链接。其实 HSTS 的最大作用是防止 302HTTP 劫持（中间人）HSTS 的缺点是浏览器支持率不高，另外配置 HTST 后 HTTPS 很难实时降级为 HTTP。\n\n采用 HSTS 协议的网站将保证浏览器始终连接到该网站的 HTTPS 加密版本，不需要用户手动在 URL 地址栏中输入加密地址。该协议将帮助网站采用全局加密，用户看到的是该网站的安全版本。\n\n在https://xxx 的响应头中含有 Strict-Transport-Security:max-age=31536000;includeSubDomains 这就意味着两点：\n\n1. 在一年的时间里（31536000 秒）中，浏览器只要向 XXX 或者其子域名发送 HTTP 请求时，必须采用 HTTPS 来发起连接。比如用户在地址栏输入http://xxx 或者点击超链接，浏览器应当自动将 http 转写成 https, 然后直接向https://xxx/ 发起请求。\n2. 在接下来的一年中，如果 xxx 服务器发送的 TLS 证书无效，用户不能忽略浏览器警告继续访问网站。\n\n##### 作用\n\nHTST 可以用来抵御 SSL 剥离攻击。攻击者在用户访问 HTTP 页面时替换所有 https 开头的连接为 http。达到阻止 HTTPS 的目的。但是如果使用了 HTST，一旦服务器发送了 HSTS 字段，用户将不再允许忽略警告。\n\n##### 不足\n\n用户首次访问网站是不受 HSTS 保护的。这是因为首次访问时，浏览器还未收到 HSTS，所以仍有可能明文 HTTP 访问。HTST 会在一段时间后失效（由 max-age 指定 )。所以浏览器是否强制 HSTS 取决于当前系统时间。部分操作系统经常通过网络时间协议更新系统时间。\n\n一旦浏览器接受到 HSTS Header( 假如有效期是 1 年），但是网站的证书出现问题，那么在有效都无法访问网站。\n\n#### Session resume 复用 session\n\n1. 减少 CPU 消耗，因为不需要非对称秘钥交换的计算。\n2. 提升访问速度，不需要进行完全握手阶段二，节省了一个 RTT 和计算耗时。\n\n##### Session cache\n\nSession cache 的原理是使用 client hello 中的 session id 查询服务端的 session cache, 如果服务端有对应的缓存，则直接使用已有的 session 信息提前完成握手，称为简化握手。\n\nSession cache 有两个缺点：\n\n1. 需要消耗服务端内存来存储 session 内容。\n\n2. 目前的开源软件包括 nginx,apache 只支持单机多进程间共享缓存，不支持多机间分布式缓存，对于百度或者其他大型互联网公司而言，单机 session cache 几乎没有作用。\n\nSession cache 也有一个非常大的优点：\n\n1. session id 是 TLS 协议的标准字段，市面上的浏览器全部都支持 session cache。\n\n百度通过对 TLS 握手协议及服务器端实现的优化，已经支持全局的 session cache，能够明显提升用户的访问速度，节省服务器计算资源。\n\n#### 使用 SPDY 或者 HTTP2\n\nSPDY 是 google 推出的优化 HTTP 传输效率的协议（https://www.chromium.org/spdy） 它基本上沿用了 HTTP 协议的语义 , 但是通过使用帧控制实现了多个特性，显著提升了 HTTP 协议的传输效率。SPDY 最大的特性就是多路复用，能将多个 HTTP 请求在同一个连接上一起发出去，不像目前的 HTTP 协议一样，只能串行地逐个发送请求。Pipeline 虽然支持多个请求一起发送，但是接收时依然得按照顺序接收，本质上无法解决并发的问题。\n\nHTTP2 是 IETF 2015 年 2 月份通过的 HTTP 下一代协议，它以 SPDY 为原型，经过两年多的讨论和完善最终确定。\n\n需要说明两点 :\n\n1. SPDY 和 HTTP2 目前的实现默认使用 HTTPS 协议。\n\n2. SPDY 和 HTTP2 都支持现有的 HTTP 语义和 API，对 WEB 应用几乎是透明的。\n\nGoogle 宣布 chrome 浏览器 2016 年将放弃 SPDY 协议，全面支持 HTTP2，但是目前国内部分浏览器厂商进度非常慢，不仅不支持 HTTP2，连 SPDY 都没有支持过。\n\n百度服务端和百度手机浏览器现在都已经支持 SPDY3.1 协议。\n","source":"_posts/HTTPS.md","raw":"---\ntitle: HTTPS\ncategories: WEB\ndate: 2017-07-17 11:30:11\n---\n\nhttps 可以理解为 HTTP+TLS，TLS 是传输层加密协议，是 HTTPS 安全的核心，其前身是 SSL。TLS 主要有五部分 : 应用数据层协议，握手协议，报警协议，加密消息确认协议，心跳协议。TLS 协议本身又是由 record 协议传输的。\n\n### 为什么要实现 HTTPS？\n\n为保护用户隐私和网络安全。通过数据加密、校验数据完整性和身份认证三种机制来保障安全。\n\n<!--more-->\n\n### 全站 HTTPS 必须解决的问题\n\n---\n\n**性能**\n\n* HTTPS 需要多次握手，因此网络耗时变长，用户从 HTTP 跳转到 HTTPS 需要一些时间。但是如果使用 SPDY，HTTPS 的速度甚至比 HTTP 快。HTTPS 对速度的影响主要来自两方面 :\n  1. 协议交换所增加的网络 RTT。\n  2. 加解密相关的计算耗时。\n* HTTPS 要做 RSA 校验，这会影响到设备性能。\n* 所有 CDN 节点要支持 HTTPS，而且需要有极其复杂的解决方案来面对 DDoS 的挑战。 ** 其次，兼容性及周边 :**\n* 页面中所有嵌入的资源（图片、附件、js 、视频等）都要改为 HTTPS 的，否者就会报警。\n\n### 基于协议和配置的优化\n\n1.HTTPS 访问速度优化 2.Tcp fast open\n\n#### HTTPS:\n\n网站通常的做法是对 HTTP 的访问服务器端做 302 跳转，跳转到 HTTPS。但是这个 302 跳转存在两个问题 : 1. 使用不安全的 HTTP 协议进行通信。 2. 增加一个 Round-Trip Time。\n\n而 HSTS 是 HTTP Strict Transport Security 的缩写，作用是强制客户端（如浏览器）使用 HTTPS 与服务器创建链接。其实 HSTS 的最大作用是防止 302HTTP 劫持（中间人）HSTS 的缺点是浏览器支持率不高，另外配置 HTST 后 HTTPS 很难实时降级为 HTTP。\n\n采用 HSTS 协议的网站将保证浏览器始终连接到该网站的 HTTPS 加密版本，不需要用户手动在 URL 地址栏中输入加密地址。该协议将帮助网站采用全局加密，用户看到的是该网站的安全版本。\n\n在https://xxx 的响应头中含有 Strict-Transport-Security:max-age=31536000;includeSubDomains 这就意味着两点：\n\n1. 在一年的时间里（31536000 秒）中，浏览器只要向 XXX 或者其子域名发送 HTTP 请求时，必须采用 HTTPS 来发起连接。比如用户在地址栏输入http://xxx 或者点击超链接，浏览器应当自动将 http 转写成 https, 然后直接向https://xxx/ 发起请求。\n2. 在接下来的一年中，如果 xxx 服务器发送的 TLS 证书无效，用户不能忽略浏览器警告继续访问网站。\n\n##### 作用\n\nHTST 可以用来抵御 SSL 剥离攻击。攻击者在用户访问 HTTP 页面时替换所有 https 开头的连接为 http。达到阻止 HTTPS 的目的。但是如果使用了 HTST，一旦服务器发送了 HSTS 字段，用户将不再允许忽略警告。\n\n##### 不足\n\n用户首次访问网站是不受 HSTS 保护的。这是因为首次访问时，浏览器还未收到 HSTS，所以仍有可能明文 HTTP 访问。HTST 会在一段时间后失效（由 max-age 指定 )。所以浏览器是否强制 HSTS 取决于当前系统时间。部分操作系统经常通过网络时间协议更新系统时间。\n\n一旦浏览器接受到 HSTS Header( 假如有效期是 1 年），但是网站的证书出现问题，那么在有效都无法访问网站。\n\n#### Session resume 复用 session\n\n1. 减少 CPU 消耗，因为不需要非对称秘钥交换的计算。\n2. 提升访问速度，不需要进行完全握手阶段二，节省了一个 RTT 和计算耗时。\n\n##### Session cache\n\nSession cache 的原理是使用 client hello 中的 session id 查询服务端的 session cache, 如果服务端有对应的缓存，则直接使用已有的 session 信息提前完成握手，称为简化握手。\n\nSession cache 有两个缺点：\n\n1. 需要消耗服务端内存来存储 session 内容。\n\n2. 目前的开源软件包括 nginx,apache 只支持单机多进程间共享缓存，不支持多机间分布式缓存，对于百度或者其他大型互联网公司而言，单机 session cache 几乎没有作用。\n\nSession cache 也有一个非常大的优点：\n\n1. session id 是 TLS 协议的标准字段，市面上的浏览器全部都支持 session cache。\n\n百度通过对 TLS 握手协议及服务器端实现的优化，已经支持全局的 session cache，能够明显提升用户的访问速度，节省服务器计算资源。\n\n#### 使用 SPDY 或者 HTTP2\n\nSPDY 是 google 推出的优化 HTTP 传输效率的协议（https://www.chromium.org/spdy） 它基本上沿用了 HTTP 协议的语义 , 但是通过使用帧控制实现了多个特性，显著提升了 HTTP 协议的传输效率。SPDY 最大的特性就是多路复用，能将多个 HTTP 请求在同一个连接上一起发出去，不像目前的 HTTP 协议一样，只能串行地逐个发送请求。Pipeline 虽然支持多个请求一起发送，但是接收时依然得按照顺序接收，本质上无法解决并发的问题。\n\nHTTP2 是 IETF 2015 年 2 月份通过的 HTTP 下一代协议，它以 SPDY 为原型，经过两年多的讨论和完善最终确定。\n\n需要说明两点 :\n\n1. SPDY 和 HTTP2 目前的实现默认使用 HTTPS 协议。\n\n2. SPDY 和 HTTP2 都支持现有的 HTTP 语义和 API，对 WEB 应用几乎是透明的。\n\nGoogle 宣布 chrome 浏览器 2016 年将放弃 SPDY 协议，全面支持 HTTP2，但是目前国内部分浏览器厂商进度非常慢，不仅不支持 HTTP2，连 SPDY 都没有支持过。\n\n百度服务端和百度手机浏览器现在都已经支持 SPDY3.1 协议。\n","slug":"HTTPS","published":1,"updated":"2021-03-01T03:47:26.017Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmejaere0003xcvre17lduv4","content":"<p>https 可以理解为 HTTP+TLS，TLS 是传输层加密协议，是 HTTPS 安全的核心，其前身是 SSL。TLS 主要有五部分 : 应用数据层协议，握手协议，报警协议，加密消息确认协议，心跳协议。TLS 协议本身又是由 record 协议传输的。</p>\n<h3 id=\"为什么要实现-HTTPS？\"><a href=\"#为什么要实现-HTTPS？\" class=\"headerlink\" title=\"为什么要实现 HTTPS？\"></a>为什么要实现 HTTPS？</h3><p>为保护用户隐私和网络安全。通过数据加密、校验数据完整性和身份认证三种机制来保障安全。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"全站-HTTPS-必须解决的问题\"><a href=\"#全站-HTTPS-必须解决的问题\" class=\"headerlink\" title=\"全站 HTTPS 必须解决的问题\"></a>全站 HTTPS 必须解决的问题</h3><hr>\n<p><strong>性能</strong></p>\n<ul>\n<li>HTTPS 需要多次握手，因此网络耗时变长，用户从 HTTP 跳转到 HTTPS 需要一些时间。但是如果使用 SPDY，HTTPS 的速度甚至比 HTTP 快。HTTPS 对速度的影响主要来自两方面 :<ol>\n<li>协议交换所增加的网络 RTT。</li>\n<li>加解密相关的计算耗时。</li>\n</ol>\n</li>\n<li>HTTPS 要做 RSA 校验，这会影响到设备性能。</li>\n<li>所有 CDN 节点要支持 HTTPS，而且需要有极其复杂的解决方案来面对 DDoS 的挑战。 ** 其次，兼容性及周边 :**</li>\n<li>页面中所有嵌入的资源（图片、附件、js 、视频等）都要改为 HTTPS 的，否者就会报警。</li>\n</ul>\n<h3 id=\"基于协议和配置的优化\"><a href=\"#基于协议和配置的优化\" class=\"headerlink\" title=\"基于协议和配置的优化\"></a>基于协议和配置的优化</h3><p>1.HTTPS 访问速度优化 2.Tcp fast open</p>\n<h4 id=\"HTTPS\"><a href=\"#HTTPS\" class=\"headerlink\" title=\"HTTPS:\"></a>HTTPS:</h4><p>网站通常的做法是对 HTTP 的访问服务器端做 302 跳转，跳转到 HTTPS。但是这个 302 跳转存在两个问题 : 1. 使用不安全的 HTTP 协议进行通信。 2. 增加一个 Round-Trip Time。</p>\n<p>而 HSTS 是 HTTP Strict Transport Security 的缩写，作用是强制客户端（如浏览器）使用 HTTPS 与服务器创建链接。其实 HSTS 的最大作用是防止 302HTTP 劫持（中间人）HSTS 的缺点是浏览器支持率不高，另外配置 HTST 后 HTTPS 很难实时降级为 HTTP。</p>\n<p>采用 HSTS 协议的网站将保证浏览器始终连接到该网站的 HTTPS 加密版本，不需要用户手动在 URL 地址栏中输入加密地址。该协议将帮助网站采用全局加密，用户看到的是该网站的安全版本。</p>\n<p>在<a href=\"https://xxx/\">https://xxx</a> 的响应头中含有 Strict-Transport-Security:max-age=31536000;includeSubDomains 这就意味着两点：</p>\n<ol>\n<li>在一年的时间里（31536000 秒）中，浏览器只要向 XXX 或者其子域名发送 HTTP 请求时，必须采用 HTTPS 来发起连接。比如用户在地址栏输入<a href=\"http://xxx/\">http://xxx</a> 或者点击超链接，浏览器应当自动将 http 转写成 https, 然后直接向<a href=\"https://xxx/\">https://xxx/</a> 发起请求。</li>\n<li>在接下来的一年中，如果 xxx 服务器发送的 TLS 证书无效，用户不能忽略浏览器警告继续访问网站。</li>\n</ol>\n<h5 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h5><p>HTST 可以用来抵御 SSL 剥离攻击。攻击者在用户访问 HTTP 页面时替换所有 https 开头的连接为 http。达到阻止 HTTPS 的目的。但是如果使用了 HTST，一旦服务器发送了 HSTS 字段，用户将不再允许忽略警告。</p>\n<h5 id=\"不足\"><a href=\"#不足\" class=\"headerlink\" title=\"不足\"></a>不足</h5><p>用户首次访问网站是不受 HSTS 保护的。这是因为首次访问时，浏览器还未收到 HSTS，所以仍有可能明文 HTTP 访问。HTST 会在一段时间后失效（由 max-age 指定 )。所以浏览器是否强制 HSTS 取决于当前系统时间。部分操作系统经常通过网络时间协议更新系统时间。</p>\n<p>一旦浏览器接受到 HSTS Header( 假如有效期是 1 年），但是网站的证书出现问题，那么在有效都无法访问网站。</p>\n<h4 id=\"Session-resume-复用-session\"><a href=\"#Session-resume-复用-session\" class=\"headerlink\" title=\"Session resume 复用 session\"></a>Session resume 复用 session</h4><ol>\n<li>减少 CPU 消耗，因为不需要非对称秘钥交换的计算。</li>\n<li>提升访问速度，不需要进行完全握手阶段二，节省了一个 RTT 和计算耗时。</li>\n</ol>\n<h5 id=\"Session-cache\"><a href=\"#Session-cache\" class=\"headerlink\" title=\"Session cache\"></a>Session cache</h5><p>Session cache 的原理是使用 client hello 中的 session id 查询服务端的 session cache, 如果服务端有对应的缓存，则直接使用已有的 session 信息提前完成握手，称为简化握手。</p>\n<p>Session cache 有两个缺点：</p>\n<ol>\n<li><p>需要消耗服务端内存来存储 session 内容。</p>\n</li>\n<li><p>目前的开源软件包括 nginx,apache 只支持单机多进程间共享缓存，不支持多机间分布式缓存，对于百度或者其他大型互联网公司而言，单机 session cache 几乎没有作用。</p>\n</li>\n</ol>\n<p>Session cache 也有一个非常大的优点：</p>\n<ol>\n<li>session id 是 TLS 协议的标准字段，市面上的浏览器全部都支持 session cache。</li>\n</ol>\n<p>百度通过对 TLS 握手协议及服务器端实现的优化，已经支持全局的 session cache，能够明显提升用户的访问速度，节省服务器计算资源。</p>\n<h4 id=\"使用-SPDY-或者-HTTP2\"><a href=\"#使用-SPDY-或者-HTTP2\" class=\"headerlink\" title=\"使用 SPDY 或者 HTTP2\"></a>使用 SPDY 或者 HTTP2</h4><p>SPDY 是 google 推出的优化 HTTP 传输效率的协议（<a href=\"https://www.chromium.org/spdy%EF%BC%89\">https://www.chromium.org/spdy）</a> 它基本上沿用了 HTTP 协议的语义 , 但是通过使用帧控制实现了多个特性，显著提升了 HTTP 协议的传输效率。SPDY 最大的特性就是多路复用，能将多个 HTTP 请求在同一个连接上一起发出去，不像目前的 HTTP 协议一样，只能串行地逐个发送请求。Pipeline 虽然支持多个请求一起发送，但是接收时依然得按照顺序接收，本质上无法解决并发的问题。</p>\n<p>HTTP2 是 IETF 2015 年 2 月份通过的 HTTP 下一代协议，它以 SPDY 为原型，经过两年多的讨论和完善最终确定。</p>\n<p>需要说明两点 :</p>\n<ol>\n<li><p>SPDY 和 HTTP2 目前的实现默认使用 HTTPS 协议。</p>\n</li>\n<li><p>SPDY 和 HTTP2 都支持现有的 HTTP 语义和 API，对 WEB 应用几乎是透明的。</p>\n</li>\n</ol>\n<p>Google 宣布 chrome 浏览器 2016 年将放弃 SPDY 协议，全面支持 HTTP2，但是目前国内部分浏览器厂商进度非常慢，不仅不支持 HTTP2，连 SPDY 都没有支持过。</p>\n<p>百度服务端和百度手机浏览器现在都已经支持 SPDY3.1 协议。</p>\n","site":{"data":{}},"excerpt":"<p>https 可以理解为 HTTP+TLS，TLS 是传输层加密协议，是 HTTPS 安全的核心，其前身是 SSL。TLS 主要有五部分 : 应用数据层协议，握手协议，报警协议，加密消息确认协议，心跳协议。TLS 协议本身又是由 record 协议传输的。</p>\n<h3 id=\"为什么要实现-HTTPS？\"><a href=\"#为什么要实现-HTTPS？\" class=\"headerlink\" title=\"为什么要实现 HTTPS？\"></a>为什么要实现 HTTPS？</h3><p>为保护用户隐私和网络安全。通过数据加密、校验数据完整性和身份认证三种机制来保障安全。</p>","more":"<h3 id=\"全站-HTTPS-必须解决的问题\"><a href=\"#全站-HTTPS-必须解决的问题\" class=\"headerlink\" title=\"全站 HTTPS 必须解决的问题\"></a>全站 HTTPS 必须解决的问题</h3><hr>\n<p><strong>性能</strong></p>\n<ul>\n<li>HTTPS 需要多次握手，因此网络耗时变长，用户从 HTTP 跳转到 HTTPS 需要一些时间。但是如果使用 SPDY，HTTPS 的速度甚至比 HTTP 快。HTTPS 对速度的影响主要来自两方面 :<ol>\n<li>协议交换所增加的网络 RTT。</li>\n<li>加解密相关的计算耗时。</li>\n</ol>\n</li>\n<li>HTTPS 要做 RSA 校验，这会影响到设备性能。</li>\n<li>所有 CDN 节点要支持 HTTPS，而且需要有极其复杂的解决方案来面对 DDoS 的挑战。 ** 其次，兼容性及周边 :**</li>\n<li>页面中所有嵌入的资源（图片、附件、js 、视频等）都要改为 HTTPS 的，否者就会报警。</li>\n</ul>\n<h3 id=\"基于协议和配置的优化\"><a href=\"#基于协议和配置的优化\" class=\"headerlink\" title=\"基于协议和配置的优化\"></a>基于协议和配置的优化</h3><p>1.HTTPS 访问速度优化 2.Tcp fast open</p>\n<h4 id=\"HTTPS\"><a href=\"#HTTPS\" class=\"headerlink\" title=\"HTTPS:\"></a>HTTPS:</h4><p>网站通常的做法是对 HTTP 的访问服务器端做 302 跳转，跳转到 HTTPS。但是这个 302 跳转存在两个问题 : 1. 使用不安全的 HTTP 协议进行通信。 2. 增加一个 Round-Trip Time。</p>\n<p>而 HSTS 是 HTTP Strict Transport Security 的缩写，作用是强制客户端（如浏览器）使用 HTTPS 与服务器创建链接。其实 HSTS 的最大作用是防止 302HTTP 劫持（中间人）HSTS 的缺点是浏览器支持率不高，另外配置 HTST 后 HTTPS 很难实时降级为 HTTP。</p>\n<p>采用 HSTS 协议的网站将保证浏览器始终连接到该网站的 HTTPS 加密版本，不需要用户手动在 URL 地址栏中输入加密地址。该协议将帮助网站采用全局加密，用户看到的是该网站的安全版本。</p>\n<p>在<a href=\"https://xxx/\">https://xxx</a> 的响应头中含有 Strict-Transport-Security:max-age=31536000;includeSubDomains 这就意味着两点：</p>\n<ol>\n<li>在一年的时间里（31536000 秒）中，浏览器只要向 XXX 或者其子域名发送 HTTP 请求时，必须采用 HTTPS 来发起连接。比如用户在地址栏输入<a href=\"http://xxx/\">http://xxx</a> 或者点击超链接，浏览器应当自动将 http 转写成 https, 然后直接向<a href=\"https://xxx/\">https://xxx/</a> 发起请求。</li>\n<li>在接下来的一年中，如果 xxx 服务器发送的 TLS 证书无效，用户不能忽略浏览器警告继续访问网站。</li>\n</ol>\n<h5 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h5><p>HTST 可以用来抵御 SSL 剥离攻击。攻击者在用户访问 HTTP 页面时替换所有 https 开头的连接为 http。达到阻止 HTTPS 的目的。但是如果使用了 HTST，一旦服务器发送了 HSTS 字段，用户将不再允许忽略警告。</p>\n<h5 id=\"不足\"><a href=\"#不足\" class=\"headerlink\" title=\"不足\"></a>不足</h5><p>用户首次访问网站是不受 HSTS 保护的。这是因为首次访问时，浏览器还未收到 HSTS，所以仍有可能明文 HTTP 访问。HTST 会在一段时间后失效（由 max-age 指定 )。所以浏览器是否强制 HSTS 取决于当前系统时间。部分操作系统经常通过网络时间协议更新系统时间。</p>\n<p>一旦浏览器接受到 HSTS Header( 假如有效期是 1 年），但是网站的证书出现问题，那么在有效都无法访问网站。</p>\n<h4 id=\"Session-resume-复用-session\"><a href=\"#Session-resume-复用-session\" class=\"headerlink\" title=\"Session resume 复用 session\"></a>Session resume 复用 session</h4><ol>\n<li>减少 CPU 消耗，因为不需要非对称秘钥交换的计算。</li>\n<li>提升访问速度，不需要进行完全握手阶段二，节省了一个 RTT 和计算耗时。</li>\n</ol>\n<h5 id=\"Session-cache\"><a href=\"#Session-cache\" class=\"headerlink\" title=\"Session cache\"></a>Session cache</h5><p>Session cache 的原理是使用 client hello 中的 session id 查询服务端的 session cache, 如果服务端有对应的缓存，则直接使用已有的 session 信息提前完成握手，称为简化握手。</p>\n<p>Session cache 有两个缺点：</p>\n<ol>\n<li><p>需要消耗服务端内存来存储 session 内容。</p>\n</li>\n<li><p>目前的开源软件包括 nginx,apache 只支持单机多进程间共享缓存，不支持多机间分布式缓存，对于百度或者其他大型互联网公司而言，单机 session cache 几乎没有作用。</p>\n</li>\n</ol>\n<p>Session cache 也有一个非常大的优点：</p>\n<ol>\n<li>session id 是 TLS 协议的标准字段，市面上的浏览器全部都支持 session cache。</li>\n</ol>\n<p>百度通过对 TLS 握手协议及服务器端实现的优化，已经支持全局的 session cache，能够明显提升用户的访问速度，节省服务器计算资源。</p>\n<h4 id=\"使用-SPDY-或者-HTTP2\"><a href=\"#使用-SPDY-或者-HTTP2\" class=\"headerlink\" title=\"使用 SPDY 或者 HTTP2\"></a>使用 SPDY 或者 HTTP2</h4><p>SPDY 是 google 推出的优化 HTTP 传输效率的协议（<a href=\"https://www.chromium.org/spdy%EF%BC%89\">https://www.chromium.org/spdy）</a> 它基本上沿用了 HTTP 协议的语义 , 但是通过使用帧控制实现了多个特性，显著提升了 HTTP 协议的传输效率。SPDY 最大的特性就是多路复用，能将多个 HTTP 请求在同一个连接上一起发出去，不像目前的 HTTP 协议一样，只能串行地逐个发送请求。Pipeline 虽然支持多个请求一起发送，但是接收时依然得按照顺序接收，本质上无法解决并发的问题。</p>\n<p>HTTP2 是 IETF 2015 年 2 月份通过的 HTTP 下一代协议，它以 SPDY 为原型，经过两年多的讨论和完善最终确定。</p>\n<p>需要说明两点 :</p>\n<ol>\n<li><p>SPDY 和 HTTP2 目前的实现默认使用 HTTPS 协议。</p>\n</li>\n<li><p>SPDY 和 HTTP2 都支持现有的 HTTP 语义和 API，对 WEB 应用几乎是透明的。</p>\n</li>\n</ol>\n<p>Google 宣布 chrome 浏览器 2016 年将放弃 SPDY 协议，全面支持 HTTP2，但是目前国内部分浏览器厂商进度非常慢，不仅不支持 HTTP2，连 SPDY 都没有支持过。</p>\n<p>百度服务端和百度手机浏览器现在都已经支持 SPDY3.1 协议。</p>"},{"title":"HTTP2","date":"2018-03-22T03:05:35.000Z","_content":"http/2 的前身是由Google 与2009 年发布的实验性协议SPDY，其主要目标是**通过解决HTTP/1.1中广为人知的一些性能限制来减少页面的架子啊延迟**。\n\n<!--more-->\n\n\nHTTP/1.1的主要性能问题：\n- HTTTP/1.x客户端需要使用多个连接才能实现并发和缩短延时。\n- HTTP/1.x不会压缩请求和响应标头，从而导致不必要的网络流量。\n- HTTP/1.x不支持有效的资源优先级，致使底层TCP连接的利用率低下。\n\n这正是HTTP/2要致力于解决的：\nHTTP/2通过支持**标头字段压缩和在同一连接上进行多个并发连接**，让应用更有效低利用网络资源，减少感知的延时时间。具体来说，它可以对同一链接上的请求和响应消息进行交错发送并未HTTP标头字段有效编码。**HTTP/2还允许为请求设置优先级，让更重要的请求更快速地完成**，从而进一步提升性能。\n\n## 多路复用的单一长连接\n\n### 单一长连接\n在HTTP/2中，客户端向某个域名的服务器请求页面的过程中，**只会创建一条TCP连接**，即使这页面可能包含上百个资源。而之前的HTTP/1.x一般会创建6-8条TCP连接来请求这100多个资源。单一的连接应该是HTTP2的主要优势，单一的连接能减少TCP握手带来的延时（如果是建立在SSL、TLS上面，HTTP2能减少很多不必要的SSL握手。）\n\nTCP协议有一个滑动窗口，有慢启动这件事，就是说每次建立连接后，数据先是慢慢的传，然后滑动窗口慢慢变大，才能较高效的传，但是http/1.x 会创建新连接受数据，因此像公交车一样走走停停（向大神致敬）。\n\n### 多路复用\n![network](/images/common/http2_1.jpg)\n\n在http1.x中，在一条TCP连接上，多个请求只能串行执行。HTTP2把要传输的信息分割成一个个二进制帧，首部信息会被封装到HWADER Frame，相应的request body 就会放到 DATA Frame，这样就讲请求和响应区分开来了。进一步HTTP2还能对这些流（车道）制定优先级，优先级能动态的被改变。优先级能动态的被改变，例如把CSS和JavaScript文件设置得比图片的优先级要高，这样代码文件能更快的下载下来并得到执行。\n\n## 头部压缩和二进制格式\n\n因为一些重复东西在每个http请求里面都有，例如method: GET。当一个客户端从同一服务器请求一些资源（例如页面的图片）的时候，这些请求看起来几乎是一致的。而这些大量一致的东西正好值得被压缩。HTTP2使用HPACK 要锁头部，减少报头的大小\n\n## 服务端推送server push\n这个功能通常被称为“缓存推送”。主要思想是：当用户请求资源X，而服务器知道它可能也需要资源Z 的情况下，服务器可以在客户端发送请求之前，主动将资源Z推送给客户端。\n\n这个功能帮组客户端将Z放进缓存以备将来只需。**服务端推送需要客户端显示的允许服务器提供该功能**，但即使如此，客户端依然能自主选择是否需要终端推送的流。如果不需要的话。客户端可以通过发送一个RST_STREAM帧来中止。\n\n","source":"_posts/HTTP2.md","raw":"---\ntitle: HTTP2\ndate: 2018-03-22 11:05:35\ncategories: WEB\n---\nhttp/2 的前身是由Google 与2009 年发布的实验性协议SPDY，其主要目标是**通过解决HTTP/1.1中广为人知的一些性能限制来减少页面的架子啊延迟**。\n\n<!--more-->\n\n\nHTTP/1.1的主要性能问题：\n- HTTTP/1.x客户端需要使用多个连接才能实现并发和缩短延时。\n- HTTP/1.x不会压缩请求和响应标头，从而导致不必要的网络流量。\n- HTTP/1.x不支持有效的资源优先级，致使底层TCP连接的利用率低下。\n\n这正是HTTP/2要致力于解决的：\nHTTP/2通过支持**标头字段压缩和在同一连接上进行多个并发连接**，让应用更有效低利用网络资源，减少感知的延时时间。具体来说，它可以对同一链接上的请求和响应消息进行交错发送并未HTTP标头字段有效编码。**HTTP/2还允许为请求设置优先级，让更重要的请求更快速地完成**，从而进一步提升性能。\n\n## 多路复用的单一长连接\n\n### 单一长连接\n在HTTP/2中，客户端向某个域名的服务器请求页面的过程中，**只会创建一条TCP连接**，即使这页面可能包含上百个资源。而之前的HTTP/1.x一般会创建6-8条TCP连接来请求这100多个资源。单一的连接应该是HTTP2的主要优势，单一的连接能减少TCP握手带来的延时（如果是建立在SSL、TLS上面，HTTP2能减少很多不必要的SSL握手。）\n\nTCP协议有一个滑动窗口，有慢启动这件事，就是说每次建立连接后，数据先是慢慢的传，然后滑动窗口慢慢变大，才能较高效的传，但是http/1.x 会创建新连接受数据，因此像公交车一样走走停停（向大神致敬）。\n\n### 多路复用\n![network](/images/common/http2_1.jpg)\n\n在http1.x中，在一条TCP连接上，多个请求只能串行执行。HTTP2把要传输的信息分割成一个个二进制帧，首部信息会被封装到HWADER Frame，相应的request body 就会放到 DATA Frame，这样就讲请求和响应区分开来了。进一步HTTP2还能对这些流（车道）制定优先级，优先级能动态的被改变。优先级能动态的被改变，例如把CSS和JavaScript文件设置得比图片的优先级要高，这样代码文件能更快的下载下来并得到执行。\n\n## 头部压缩和二进制格式\n\n因为一些重复东西在每个http请求里面都有，例如method: GET。当一个客户端从同一服务器请求一些资源（例如页面的图片）的时候，这些请求看起来几乎是一致的。而这些大量一致的东西正好值得被压缩。HTTP2使用HPACK 要锁头部，减少报头的大小\n\n## 服务端推送server push\n这个功能通常被称为“缓存推送”。主要思想是：当用户请求资源X，而服务器知道它可能也需要资源Z 的情况下，服务器可以在客户端发送请求之前，主动将资源Z推送给客户端。\n\n这个功能帮组客户端将Z放进缓存以备将来只需。**服务端推送需要客户端显示的允许服务器提供该功能**，但即使如此，客户端依然能自主选择是否需要终端推送的流。如果不需要的话。客户端可以通过发送一个RST_STREAM帧来中止。\n\n","slug":"HTTP2","published":1,"updated":"2021-03-04T02:24:17.483Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmejaerh0006xcvr3h017xro","content":"<p>http/2 的前身是由Google 与2009 年发布的实验性协议SPDY，其主要目标是<strong>通过解决HTTP/1.1中广为人知的一些性能限制来减少页面的架子啊延迟</strong>。</p>\n<span id=\"more\"></span>\n\n\n<p>HTTP/1.1的主要性能问题：</p>\n<ul>\n<li>HTTTP/1.x客户端需要使用多个连接才能实现并发和缩短延时。</li>\n<li>HTTP/1.x不会压缩请求和响应标头，从而导致不必要的网络流量。</li>\n<li>HTTP/1.x不支持有效的资源优先级，致使底层TCP连接的利用率低下。</li>\n</ul>\n<p>这正是HTTP/2要致力于解决的：<br>HTTP/2通过支持<strong>标头字段压缩和在同一连接上进行多个并发连接</strong>，让应用更有效低利用网络资源，减少感知的延时时间。具体来说，它可以对同一链接上的请求和响应消息进行交错发送并未HTTP标头字段有效编码。<strong>HTTP/2还允许为请求设置优先级，让更重要的请求更快速地完成</strong>，从而进一步提升性能。</p>\n<h2 id=\"多路复用的单一长连接\"><a href=\"#多路复用的单一长连接\" class=\"headerlink\" title=\"多路复用的单一长连接\"></a>多路复用的单一长连接</h2><h3 id=\"单一长连接\"><a href=\"#单一长连接\" class=\"headerlink\" title=\"单一长连接\"></a>单一长连接</h3><p>在HTTP/2中，客户端向某个域名的服务器请求页面的过程中，<strong>只会创建一条TCP连接</strong>，即使这页面可能包含上百个资源。而之前的HTTP/1.x一般会创建6-8条TCP连接来请求这100多个资源。单一的连接应该是HTTP2的主要优势，单一的连接能减少TCP握手带来的延时（如果是建立在SSL、TLS上面，HTTP2能减少很多不必要的SSL握手。）</p>\n<p>TCP协议有一个滑动窗口，有慢启动这件事，就是说每次建立连接后，数据先是慢慢的传，然后滑动窗口慢慢变大，才能较高效的传，但是http/1.x 会创建新连接受数据，因此像公交车一样走走停停（向大神致敬）。</p>\n<h3 id=\"多路复用\"><a href=\"#多路复用\" class=\"headerlink\" title=\"多路复用\"></a>多路复用</h3><p><img src=\"/images/common/http2_1.jpg\" alt=\"network\"></p>\n<p>在http1.x中，在一条TCP连接上，多个请求只能串行执行。HTTP2把要传输的信息分割成一个个二进制帧，首部信息会被封装到HWADER Frame，相应的request body 就会放到 DATA Frame，这样就讲请求和响应区分开来了。进一步HTTP2还能对这些流（车道）制定优先级，优先级能动态的被改变。优先级能动态的被改变，例如把CSS和JavaScript文件设置得比图片的优先级要高，这样代码文件能更快的下载下来并得到执行。</p>\n<h2 id=\"头部压缩和二进制格式\"><a href=\"#头部压缩和二进制格式\" class=\"headerlink\" title=\"头部压缩和二进制格式\"></a>头部压缩和二进制格式</h2><p>因为一些重复东西在每个http请求里面都有，例如method: GET。当一个客户端从同一服务器请求一些资源（例如页面的图片）的时候，这些请求看起来几乎是一致的。而这些大量一致的东西正好值得被压缩。HTTP2使用HPACK 要锁头部，减少报头的大小</p>\n<h2 id=\"服务端推送server-push\"><a href=\"#服务端推送server-push\" class=\"headerlink\" title=\"服务端推送server push\"></a>服务端推送server push</h2><p>这个功能通常被称为“缓存推送”。主要思想是：当用户请求资源X，而服务器知道它可能也需要资源Z 的情况下，服务器可以在客户端发送请求之前，主动将资源Z推送给客户端。</p>\n<p>这个功能帮组客户端将Z放进缓存以备将来只需。<strong>服务端推送需要客户端显示的允许服务器提供该功能</strong>，但即使如此，客户端依然能自主选择是否需要终端推送的流。如果不需要的话。客户端可以通过发送一个RST_STREAM帧来中止。</p>\n","site":{"data":{}},"excerpt":"<p>http/2 的前身是由Google 与2009 年发布的实验性协议SPDY，其主要目标是<strong>通过解决HTTP/1.1中广为人知的一些性能限制来减少页面的架子啊延迟</strong>。</p>","more":"<p>HTTP/1.1的主要性能问题：</p>\n<ul>\n<li>HTTTP/1.x客户端需要使用多个连接才能实现并发和缩短延时。</li>\n<li>HTTP/1.x不会压缩请求和响应标头，从而导致不必要的网络流量。</li>\n<li>HTTP/1.x不支持有效的资源优先级，致使底层TCP连接的利用率低下。</li>\n</ul>\n<p>这正是HTTP/2要致力于解决的：<br>HTTP/2通过支持<strong>标头字段压缩和在同一连接上进行多个并发连接</strong>，让应用更有效低利用网络资源，减少感知的延时时间。具体来说，它可以对同一链接上的请求和响应消息进行交错发送并未HTTP标头字段有效编码。<strong>HTTP/2还允许为请求设置优先级，让更重要的请求更快速地完成</strong>，从而进一步提升性能。</p>\n<h2 id=\"多路复用的单一长连接\"><a href=\"#多路复用的单一长连接\" class=\"headerlink\" title=\"多路复用的单一长连接\"></a>多路复用的单一长连接</h2><h3 id=\"单一长连接\"><a href=\"#单一长连接\" class=\"headerlink\" title=\"单一长连接\"></a>单一长连接</h3><p>在HTTP/2中，客户端向某个域名的服务器请求页面的过程中，<strong>只会创建一条TCP连接</strong>，即使这页面可能包含上百个资源。而之前的HTTP/1.x一般会创建6-8条TCP连接来请求这100多个资源。单一的连接应该是HTTP2的主要优势，单一的连接能减少TCP握手带来的延时（如果是建立在SSL、TLS上面，HTTP2能减少很多不必要的SSL握手。）</p>\n<p>TCP协议有一个滑动窗口，有慢启动这件事，就是说每次建立连接后，数据先是慢慢的传，然后滑动窗口慢慢变大，才能较高效的传，但是http/1.x 会创建新连接受数据，因此像公交车一样走走停停（向大神致敬）。</p>\n<h3 id=\"多路复用\"><a href=\"#多路复用\" class=\"headerlink\" title=\"多路复用\"></a>多路复用</h3><p><img src=\"/images/common/http2_1.jpg\" alt=\"network\"></p>\n<p>在http1.x中，在一条TCP连接上，多个请求只能串行执行。HTTP2把要传输的信息分割成一个个二进制帧，首部信息会被封装到HWADER Frame，相应的request body 就会放到 DATA Frame，这样就讲请求和响应区分开来了。进一步HTTP2还能对这些流（车道）制定优先级，优先级能动态的被改变。优先级能动态的被改变，例如把CSS和JavaScript文件设置得比图片的优先级要高，这样代码文件能更快的下载下来并得到执行。</p>\n<h2 id=\"头部压缩和二进制格式\"><a href=\"#头部压缩和二进制格式\" class=\"headerlink\" title=\"头部压缩和二进制格式\"></a>头部压缩和二进制格式</h2><p>因为一些重复东西在每个http请求里面都有，例如method: GET。当一个客户端从同一服务器请求一些资源（例如页面的图片）的时候，这些请求看起来几乎是一致的。而这些大量一致的东西正好值得被压缩。HTTP2使用HPACK 要锁头部，减少报头的大小</p>\n<h2 id=\"服务端推送server-push\"><a href=\"#服务端推送server-push\" class=\"headerlink\" title=\"服务端推送server push\"></a>服务端推送server push</h2><p>这个功能通常被称为“缓存推送”。主要思想是：当用户请求资源X，而服务器知道它可能也需要资源Z 的情况下，服务器可以在客户端发送请求之前，主动将资源Z推送给客户端。</p>\n<p>这个功能帮组客户端将Z放进缓存以备将来只需。<strong>服务端推送需要客户端显示的允许服务器提供该功能</strong>，但即使如此，客户端依然能自主选择是否需要终端推送的流。如果不需要的话。客户端可以通过发送一个RST_STREAM帧来中止。</p>"},{"title":"JS代码片段","date":"2018-01-15T08:27:23.000Z","_content":"\n搬砖时的 JS 代码片段整理\n\n<!--more-->\n\n# 将 bytes 格式化\n\n```javascript\nlet total = this.fileSizeFormat(spaceSize, 2, true, false)\n\n fileSizeFormat(bytes, digits, unitFlag, floorFlag) {\n      bytes = parseFloat(bytes)\n      let absBytes = Math.abs(bytes)\n      let humanSize, unit\n\n      if (digits === undefined) {\n        digits = 2\n      }\n      if (unitFlag === undefined) {\n        unitFlag = true\n      }\n\n      if (absBytes < 1024) {\n        digits = 0\n        humanSize = bytes\n        unit = 'B'\n      } else {\n        if (absBytes < 900 * 1024) {\n          humanSize = bytes / 1024\n          unit = 'K'\n        } else {\n          if (absBytes < 900 * 1048576) {\n            humanSize = bytes / 1048576\n            unit = 'M'\n          } else {\n            if (absBytes < 900 * 1073741824 || (digits === 0 && absBytes < 1048576 * 1048576)) {\n              humanSize = bytes / 1073741824\n              unit = 'G'\n            } else {\n              humanSize = bytes / (1048576 * 1048576)\n              unit = 'T'\n            }\n          }\n        }\n        humanSize = Math.round(humanSize * Math.pow(10, digits)) / parseFloat(Math.pow(10, digits))\n        humanSize = humanSize.toFixed(digits)\n\n        let result\n        if (floorFlag && digits > 0) {\n          if (humanSize !== Math.floor(humanSize)) {\n            result = humanSize\n          } else {\n            result = parseInt(Math.floor(humanSize), 10)\n          }\n        } else {\n          result = humanSize\n        }\n        if (unitFlag) {\n          result = result + unit\n        }\n\n        return result\n      }\n    }\n```\n\n## 获取文件扩展名\n\n```javascript\nconst extname = filename => {\n    if (filename.indexOf(\".\") > 0) {\n        var resultArr = filename.split(\".\");\n        var result = \".\" + resultArr[resultArr.length - 1];\n        return result;\n    } else return \"\";\n};\n```\n\n## 冒泡排序\n\n```javascript\nfunction bubbleSort(arr) {\n    var i = arr.length,\n        j;\n    var tempExchangVal;\n    while (i > 0) {\n        for (j = 0; j < i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                tempExchangVal = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = tempExchangVal;\n            }\n        }\n        i--;\n    }\n    return arr;\n}\n\nvar arr = [3, 2, 4, 9, 1, 5, 7, 6, 8];\nvar arrSorted = bubbleSort(arr);\nconsole.log(arrSorted);\nalert(arrSorted);\n```\n\n## 快速排序算法\n\n快速排序是处理大数据急最快的排序算法之一。它是一种分而治之的算法，通过递归的方式将数据一次分解为包含较小元素和较大元素的不同子序列。\n\n![network](/images/common/kuaipai.png)\n\n```javascript\nfunction quickSort(array) {\n    if (array.length == 0) {\n        return [];\n    }\n    var left = [];\n    var right = [];\n    var priot = array[0];\n\n    for (var i = 1; i < array.length; i++) {\n        if (array[i] < privot) {\n            left.push(array[i]);\n        } else {\n            right.push(array[i]);\n        }\n    }\n    return quickSort(left).concat(privot, quickSort(right));\n}\n```\n\n## JS 深度克隆\n\n```javascript\nfunction deepClone(obj) {\n    var _toString = Object.prototype.toString;\n\n    // null, undefined, non-object, function\n    if (!obj || typeof obj !== \"object\") {\n        return obj;\n    }\n\n    // DOM Node\n    if (obj.nodeType && \"cloneNode\" in obj) {\n        return obj.cloneNode(true);\n    }\n\n    // Date\n    if (_toString.call(obj) === \"[object Date]\") {\n        return new Date(obj.getTime());\n    }\n\n    // RegExp\n    if (_toString.call(obj) === \"[object RegExp]\") {\n        var flags = [];\n        if (obj.global) {\n            flags.push(\"g\");\n        }\n        if (obj.multiline) {\n            flags.push(\"m\");\n        }\n        if (obj.ignoreCase) {\n            flags.push(\"i\");\n        }\n\n        return new RegExp(obj.source, flags.join(\"\"));\n    }\n\n    var result = Array.isArray(obj)\n        ? []\n        : obj.constructor\n        ? new obj.constructor()\n        : {};\n\n    for (var key in obj) {\n        result[key] = deepClone(obj[key]);\n    }\n\n    return result;\n}\n\nfunction A() {\n    this.a = a;\n}\n\nvar a = {\n    name: \"qiu\",\n    birth: new Date(),\n    pattern: /qiu/gim,\n    container: document.body,\n    hobbys: [\"book\", new Date(), /aaa/gim, 111]\n};\n\nvar c = new A();\nvar b = deepClone(c);\nconsole.log(c.a === b.a);\nconsole.log(c, b);\n```\n\n## Javascript 的节流和防抖\n\n函数节流和函数防抖，两者都是优化高频率执行 JS 代码的一种手段。\n\n### 函数节流\n\n防抖动和节流本质是不一样的。放\n\n是指一定时间内 js 方法只跑一次。\n\n函数节流应用的实际场景，多数在监听页面元素滚动时间的时候会用到。因为滚动事件，是一个高频触发的事件。以下是监听页面元素滚动的示例代码：\n\n```javascript\n//函数节流\nvar canRun = true;\ndocument.getElementById(\"throttle\").onsroll = function() {\n    if (!canRun) {\n        //判断是否空闲，如果在执行中，则直接return\n        return;\n    }\n    canRun = false;\n    setTimeout(function() {\n        console.log(\"函数节流\");\n        canRun = true;\n    }, 300);\n};\n```\n\n### 函数防抖\n\n函数防抖的应有场景，最常见的就是用户注册的时候的手机号码验证和邮箱验证了。只有等用户输入完毕后，前端才需要检查格式是否正确，如果不正确，在弹出提示语。以下还是以页面元素滚动监听的例子，来解析：\n\n```javascript\n//函数防抖\nvar timer = fasle;\ndocument.getElementById(\"document\").onsrcoll = function() {\n    clearTimeout(timer).timer = setTimeout(function() {\n        //清楚未执行的代码，重置回初始状态\n        console.log(\"函数防抖\");\n    }, 300);\n};\n\n// func是用户传入需要防抖的函数\n// wait是等待时间\nconst debounce = (func, wait = 50) => {\n    // 缓存一个定时器id\n    let timer = 0;\n    // 这里返回的函数是每次用户实际调用的防抖函数\n    // 如果已经设定过定时器了就清空上一次的定时器\n    // 开始一个新的定时器，延迟执行用户传入的方法\n    return function(...args) {\n        if (timer) clearTimeout(timer);\n        timer = setTimeout(() => {\n            func.apply(this, args);\n        }, wait);\n    };\n};\n// 不难看出如果用户调用该函数的间隔小于wait的情况下，上一次的时间还未到就被清除了，并不会执行函数\n```\n\n函数防抖的要点，也是需要一个 setTimeout 来辅助实现。延迟执行需要跑的代码\n\n但是这种简单版的防抖也是缺陷的，这个防抖只能在最后调用。一般的防抖会有 imm 选项，表示是否立即调用。这两者的区别在于：\n\n-   在搜索引擎搜索问题的时候，希望达到用户数万最后一个字才调用查询整个接口，这个时候适用`延迟执行`的防抖函数，它总是在一连串（间隔小于 wait 的）函数出发之后才调用。\n-   例如在用户点击按钮时，是立即调用接口，并且下一次调用时间间隔大于 wait 才会触发。\n\n带有立即执行选项的防抖函数\n\n```javascript\nfunction now() {\n    //获取当前时间戳\n    return new Date();\n}\n/**\n * 防抖函数，返回函数连续调用时，空闲时间必须大于或等于 wait，func 才会执行\n *\n * @param  {function} func        回调函数\n * @param  {number}   wait        表示时间窗口的间隔\n * @param  {boolean}  immediate   设置为ture时，是否立即调用函数\n * @return {function}             返回客户调用函数\n */\n\nfunction debounce(func, wait = 50, immediate = true) {\n    let timer, context, args;\n\n    // 延迟执行函数\n    const later = () =>\n        setTimeout(() => {\n            // 延迟函数执行完毕，清空缓存的定时器序号\n            timer = null;\n            // 延迟执行的情况下，函数会在延迟函数中执行\n            // 使用到之前缓存的参数和上下文\n            if (!immediate) {\n                func.apply(context, args);\n                context = args = null;\n            }\n        }, wait);\n\n    // 这里返回的函数是每次实际调用的函数\n    return function(...params) {\n        // 如果没有创建延迟执行函数（later），就创建一个\n        if (!timer) {\n            timer = later();\n            // 如果是立即执行，调用函数\n            // 否则缓存参数和调用上下文\n            if (immediate) {\n                func.apply(this, params);\n            } else {\n                context = this;\n                args = params;\n            }\n            // 如果已有延迟执行函数（later），调用的时候清除原来的并重新设定一个\n            // 这样做延迟函数会重新计时\n        } else {\n            clearTimeout(timer);\n            timer = later();\n        }\n    };\n}\n```\n\n## FileReader 对象\n\n之前做图片上传预览都是把图片上传到服务器获得线上地址，如今才发现有另一种方法：使用`FildeReader`(但兼容性不是很好，ie10)\n\n`FileReader`允许 Web 应用程序异步读取存储在用户计算机上的文件（或原始数据缓冲区）的内容，使用 File 或 Blob 对象指定要读取的文件或数据。主要用来把文件读入内存，并且读取文件中的数据。通过构造函数创建一个 FileReader 对象。\n\n其中 file 对象可以是来自用户在一个`<input>`元素上悬着文件后返回的 filelist 对象，也可以来自拖放操作生成的`DataTransfer`对象，还可以是来自一个`HTMLCanvasElement`上执行`mozGetAsFile()`方法后返回结果。\n\n`FileReader.readyState`表示 FileReader 状态的数字。取值如下：\n\n-   EMPTY: 0 还没有加载任何数据。\n-   LOADING: 1 数据正在加载。\n-   DONE：2 已经完成全部的读取请求。\n\n`FileReader.result`表示文件内容。该属性仅在读取操作完成后才有效，数据的格式取决于使用哪个方法来启动读取操作。\n\n`FileReader.readAsDataURL()`表示开始读取指定的 Blob 中的内容。一旦完成，result 属性中将包含一个 data:URL 格式的字符串以表示所读取文件的内容。\n\n-   abort：中断读取操作。\n-   readAsArrayBuffer：读取文件内容到 ArrayBuffer 对象中。\n-   readAsBinaryString：将文件读取为二进制数据。\n-   readAsDataURL：将文件读取为 data: URL 格式的字符串。\n-   readAsText：将文件读取为文本。\n\n### 上传图片预览\n\n```html\n<input type=\"file\" id=\"files\" accept=\"image/jpeg,image/jpg,image/png\" />\n<img src=\"blank.gif\" id=\"preview\" />\n<script>\n    var elem = document.getElementById(\"files\"),\n        img = document.getElementById(\"preview\");\n    elem.onchange = function() {\n        var files = elem.files,\n            reader = new FileReader();\n        if (files && files[0]) {\n            reader.onload = function(ev) {\n                img.src = ev.target.result;\n            };\n            reader.readAsDataURL(files[0]);\n        }\n    };\n</script>\n```\n\n### 图片上传 小图片转 base64\n\n```javascript\nlet reader = new FileReader();\nlet imgUrlBase64 = reader.readAsDataURL(file);\nreader.onload = function(e) {\n    reader.result.length; //去判断大小 reader.result就是\n};\n```\n\n## Base64 编码\n\n在 HTML5 中新增了 atob 和 btoa 方法来支持 Base64 编码。它们的命名也很简单，b to a 和 a to b，即代表着编码和解码。\n\n```javascript\nvar a = \"https://lin-xin.github.io\";\nvar b = btoa(a);\nvar c = atob(b);\nconsole.log(a);     // https://lin-xin.github.io\nconsole.log(b);     // aHR0cHM6Ly9saW4teGluLmdpdGh1Yi5pbw==\nconsole.log(c);     // https://lin-xin.github.io复制代码btoa 方法对字符串 a 进行编码，不会改变 a 的值，返回一个编码后的值。atob 方法对编码后的字符串进行解码。\n但是参数中带中文，已经超出了8位ASCII编码的字符范围，浏览器就会报错。所以需要先对中文进行 encodeURIComponent 编码处理。\nvar a = \"哈喽 世界\";\nvar b = btoa(encodeURIComponent(a));\nvar c = decodeURIComponent(atob(b));\n\nconsole.log(b);     // JUU1JTkzJTg4JUU1JTk2JUJEJTIwJUU0JUI4JTk2JUU3JTk1JThD\nconsole.log(c);     // 哈喽 世界\n```\n\n## 查找数组对象里面是否含有某对象\n\n查找 selectedList 里面是否存在 listAppEquipment 数组里面的对象\n\n```javascript\nlet selectedListString = JSON.stringify(that.selectedList);\nthat.listAppEquipment.forEach((item: any) => {\n    let value = JSON.stringify(item.value);\n    if (selectedListString.indexOf(value) != -1) {\n        item.checked = true;\n        item.selected = true;\n    }\n});\n```\n","source":"_posts/JS代码片段.md","raw":"---\ntitle: JS代码片段\ndate: 2018-01-15 16:27:23\ncategories: JavaScript\n---\n\n搬砖时的 JS 代码片段整理\n\n<!--more-->\n\n# 将 bytes 格式化\n\n```javascript\nlet total = this.fileSizeFormat(spaceSize, 2, true, false)\n\n fileSizeFormat(bytes, digits, unitFlag, floorFlag) {\n      bytes = parseFloat(bytes)\n      let absBytes = Math.abs(bytes)\n      let humanSize, unit\n\n      if (digits === undefined) {\n        digits = 2\n      }\n      if (unitFlag === undefined) {\n        unitFlag = true\n      }\n\n      if (absBytes < 1024) {\n        digits = 0\n        humanSize = bytes\n        unit = 'B'\n      } else {\n        if (absBytes < 900 * 1024) {\n          humanSize = bytes / 1024\n          unit = 'K'\n        } else {\n          if (absBytes < 900 * 1048576) {\n            humanSize = bytes / 1048576\n            unit = 'M'\n          } else {\n            if (absBytes < 900 * 1073741824 || (digits === 0 && absBytes < 1048576 * 1048576)) {\n              humanSize = bytes / 1073741824\n              unit = 'G'\n            } else {\n              humanSize = bytes / (1048576 * 1048576)\n              unit = 'T'\n            }\n          }\n        }\n        humanSize = Math.round(humanSize * Math.pow(10, digits)) / parseFloat(Math.pow(10, digits))\n        humanSize = humanSize.toFixed(digits)\n\n        let result\n        if (floorFlag && digits > 0) {\n          if (humanSize !== Math.floor(humanSize)) {\n            result = humanSize\n          } else {\n            result = parseInt(Math.floor(humanSize), 10)\n          }\n        } else {\n          result = humanSize\n        }\n        if (unitFlag) {\n          result = result + unit\n        }\n\n        return result\n      }\n    }\n```\n\n## 获取文件扩展名\n\n```javascript\nconst extname = filename => {\n    if (filename.indexOf(\".\") > 0) {\n        var resultArr = filename.split(\".\");\n        var result = \".\" + resultArr[resultArr.length - 1];\n        return result;\n    } else return \"\";\n};\n```\n\n## 冒泡排序\n\n```javascript\nfunction bubbleSort(arr) {\n    var i = arr.length,\n        j;\n    var tempExchangVal;\n    while (i > 0) {\n        for (j = 0; j < i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                tempExchangVal = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = tempExchangVal;\n            }\n        }\n        i--;\n    }\n    return arr;\n}\n\nvar arr = [3, 2, 4, 9, 1, 5, 7, 6, 8];\nvar arrSorted = bubbleSort(arr);\nconsole.log(arrSorted);\nalert(arrSorted);\n```\n\n## 快速排序算法\n\n快速排序是处理大数据急最快的排序算法之一。它是一种分而治之的算法，通过递归的方式将数据一次分解为包含较小元素和较大元素的不同子序列。\n\n![network](/images/common/kuaipai.png)\n\n```javascript\nfunction quickSort(array) {\n    if (array.length == 0) {\n        return [];\n    }\n    var left = [];\n    var right = [];\n    var priot = array[0];\n\n    for (var i = 1; i < array.length; i++) {\n        if (array[i] < privot) {\n            left.push(array[i]);\n        } else {\n            right.push(array[i]);\n        }\n    }\n    return quickSort(left).concat(privot, quickSort(right));\n}\n```\n\n## JS 深度克隆\n\n```javascript\nfunction deepClone(obj) {\n    var _toString = Object.prototype.toString;\n\n    // null, undefined, non-object, function\n    if (!obj || typeof obj !== \"object\") {\n        return obj;\n    }\n\n    // DOM Node\n    if (obj.nodeType && \"cloneNode\" in obj) {\n        return obj.cloneNode(true);\n    }\n\n    // Date\n    if (_toString.call(obj) === \"[object Date]\") {\n        return new Date(obj.getTime());\n    }\n\n    // RegExp\n    if (_toString.call(obj) === \"[object RegExp]\") {\n        var flags = [];\n        if (obj.global) {\n            flags.push(\"g\");\n        }\n        if (obj.multiline) {\n            flags.push(\"m\");\n        }\n        if (obj.ignoreCase) {\n            flags.push(\"i\");\n        }\n\n        return new RegExp(obj.source, flags.join(\"\"));\n    }\n\n    var result = Array.isArray(obj)\n        ? []\n        : obj.constructor\n        ? new obj.constructor()\n        : {};\n\n    for (var key in obj) {\n        result[key] = deepClone(obj[key]);\n    }\n\n    return result;\n}\n\nfunction A() {\n    this.a = a;\n}\n\nvar a = {\n    name: \"qiu\",\n    birth: new Date(),\n    pattern: /qiu/gim,\n    container: document.body,\n    hobbys: [\"book\", new Date(), /aaa/gim, 111]\n};\n\nvar c = new A();\nvar b = deepClone(c);\nconsole.log(c.a === b.a);\nconsole.log(c, b);\n```\n\n## Javascript 的节流和防抖\n\n函数节流和函数防抖，两者都是优化高频率执行 JS 代码的一种手段。\n\n### 函数节流\n\n防抖动和节流本质是不一样的。放\n\n是指一定时间内 js 方法只跑一次。\n\n函数节流应用的实际场景，多数在监听页面元素滚动时间的时候会用到。因为滚动事件，是一个高频触发的事件。以下是监听页面元素滚动的示例代码：\n\n```javascript\n//函数节流\nvar canRun = true;\ndocument.getElementById(\"throttle\").onsroll = function() {\n    if (!canRun) {\n        //判断是否空闲，如果在执行中，则直接return\n        return;\n    }\n    canRun = false;\n    setTimeout(function() {\n        console.log(\"函数节流\");\n        canRun = true;\n    }, 300);\n};\n```\n\n### 函数防抖\n\n函数防抖的应有场景，最常见的就是用户注册的时候的手机号码验证和邮箱验证了。只有等用户输入完毕后，前端才需要检查格式是否正确，如果不正确，在弹出提示语。以下还是以页面元素滚动监听的例子，来解析：\n\n```javascript\n//函数防抖\nvar timer = fasle;\ndocument.getElementById(\"document\").onsrcoll = function() {\n    clearTimeout(timer).timer = setTimeout(function() {\n        //清楚未执行的代码，重置回初始状态\n        console.log(\"函数防抖\");\n    }, 300);\n};\n\n// func是用户传入需要防抖的函数\n// wait是等待时间\nconst debounce = (func, wait = 50) => {\n    // 缓存一个定时器id\n    let timer = 0;\n    // 这里返回的函数是每次用户实际调用的防抖函数\n    // 如果已经设定过定时器了就清空上一次的定时器\n    // 开始一个新的定时器，延迟执行用户传入的方法\n    return function(...args) {\n        if (timer) clearTimeout(timer);\n        timer = setTimeout(() => {\n            func.apply(this, args);\n        }, wait);\n    };\n};\n// 不难看出如果用户调用该函数的间隔小于wait的情况下，上一次的时间还未到就被清除了，并不会执行函数\n```\n\n函数防抖的要点，也是需要一个 setTimeout 来辅助实现。延迟执行需要跑的代码\n\n但是这种简单版的防抖也是缺陷的，这个防抖只能在最后调用。一般的防抖会有 imm 选项，表示是否立即调用。这两者的区别在于：\n\n-   在搜索引擎搜索问题的时候，希望达到用户数万最后一个字才调用查询整个接口，这个时候适用`延迟执行`的防抖函数，它总是在一连串（间隔小于 wait 的）函数出发之后才调用。\n-   例如在用户点击按钮时，是立即调用接口，并且下一次调用时间间隔大于 wait 才会触发。\n\n带有立即执行选项的防抖函数\n\n```javascript\nfunction now() {\n    //获取当前时间戳\n    return new Date();\n}\n/**\n * 防抖函数，返回函数连续调用时，空闲时间必须大于或等于 wait，func 才会执行\n *\n * @param  {function} func        回调函数\n * @param  {number}   wait        表示时间窗口的间隔\n * @param  {boolean}  immediate   设置为ture时，是否立即调用函数\n * @return {function}             返回客户调用函数\n */\n\nfunction debounce(func, wait = 50, immediate = true) {\n    let timer, context, args;\n\n    // 延迟执行函数\n    const later = () =>\n        setTimeout(() => {\n            // 延迟函数执行完毕，清空缓存的定时器序号\n            timer = null;\n            // 延迟执行的情况下，函数会在延迟函数中执行\n            // 使用到之前缓存的参数和上下文\n            if (!immediate) {\n                func.apply(context, args);\n                context = args = null;\n            }\n        }, wait);\n\n    // 这里返回的函数是每次实际调用的函数\n    return function(...params) {\n        // 如果没有创建延迟执行函数（later），就创建一个\n        if (!timer) {\n            timer = later();\n            // 如果是立即执行，调用函数\n            // 否则缓存参数和调用上下文\n            if (immediate) {\n                func.apply(this, params);\n            } else {\n                context = this;\n                args = params;\n            }\n            // 如果已有延迟执行函数（later），调用的时候清除原来的并重新设定一个\n            // 这样做延迟函数会重新计时\n        } else {\n            clearTimeout(timer);\n            timer = later();\n        }\n    };\n}\n```\n\n## FileReader 对象\n\n之前做图片上传预览都是把图片上传到服务器获得线上地址，如今才发现有另一种方法：使用`FildeReader`(但兼容性不是很好，ie10)\n\n`FileReader`允许 Web 应用程序异步读取存储在用户计算机上的文件（或原始数据缓冲区）的内容，使用 File 或 Blob 对象指定要读取的文件或数据。主要用来把文件读入内存，并且读取文件中的数据。通过构造函数创建一个 FileReader 对象。\n\n其中 file 对象可以是来自用户在一个`<input>`元素上悬着文件后返回的 filelist 对象，也可以来自拖放操作生成的`DataTransfer`对象，还可以是来自一个`HTMLCanvasElement`上执行`mozGetAsFile()`方法后返回结果。\n\n`FileReader.readyState`表示 FileReader 状态的数字。取值如下：\n\n-   EMPTY: 0 还没有加载任何数据。\n-   LOADING: 1 数据正在加载。\n-   DONE：2 已经完成全部的读取请求。\n\n`FileReader.result`表示文件内容。该属性仅在读取操作完成后才有效，数据的格式取决于使用哪个方法来启动读取操作。\n\n`FileReader.readAsDataURL()`表示开始读取指定的 Blob 中的内容。一旦完成，result 属性中将包含一个 data:URL 格式的字符串以表示所读取文件的内容。\n\n-   abort：中断读取操作。\n-   readAsArrayBuffer：读取文件内容到 ArrayBuffer 对象中。\n-   readAsBinaryString：将文件读取为二进制数据。\n-   readAsDataURL：将文件读取为 data: URL 格式的字符串。\n-   readAsText：将文件读取为文本。\n\n### 上传图片预览\n\n```html\n<input type=\"file\" id=\"files\" accept=\"image/jpeg,image/jpg,image/png\" />\n<img src=\"blank.gif\" id=\"preview\" />\n<script>\n    var elem = document.getElementById(\"files\"),\n        img = document.getElementById(\"preview\");\n    elem.onchange = function() {\n        var files = elem.files,\n            reader = new FileReader();\n        if (files && files[0]) {\n            reader.onload = function(ev) {\n                img.src = ev.target.result;\n            };\n            reader.readAsDataURL(files[0]);\n        }\n    };\n</script>\n```\n\n### 图片上传 小图片转 base64\n\n```javascript\nlet reader = new FileReader();\nlet imgUrlBase64 = reader.readAsDataURL(file);\nreader.onload = function(e) {\n    reader.result.length; //去判断大小 reader.result就是\n};\n```\n\n## Base64 编码\n\n在 HTML5 中新增了 atob 和 btoa 方法来支持 Base64 编码。它们的命名也很简单，b to a 和 a to b，即代表着编码和解码。\n\n```javascript\nvar a = \"https://lin-xin.github.io\";\nvar b = btoa(a);\nvar c = atob(b);\nconsole.log(a);     // https://lin-xin.github.io\nconsole.log(b);     // aHR0cHM6Ly9saW4teGluLmdpdGh1Yi5pbw==\nconsole.log(c);     // https://lin-xin.github.io复制代码btoa 方法对字符串 a 进行编码，不会改变 a 的值，返回一个编码后的值。atob 方法对编码后的字符串进行解码。\n但是参数中带中文，已经超出了8位ASCII编码的字符范围，浏览器就会报错。所以需要先对中文进行 encodeURIComponent 编码处理。\nvar a = \"哈喽 世界\";\nvar b = btoa(encodeURIComponent(a));\nvar c = decodeURIComponent(atob(b));\n\nconsole.log(b);     // JUU1JTkzJTg4JUU1JTk2JUJEJTIwJUU0JUI4JTk2JUU3JTk1JThD\nconsole.log(c);     // 哈喽 世界\n```\n\n## 查找数组对象里面是否含有某对象\n\n查找 selectedList 里面是否存在 listAppEquipment 数组里面的对象\n\n```javascript\nlet selectedListString = JSON.stringify(that.selectedList);\nthat.listAppEquipment.forEach((item: any) => {\n    let value = JSON.stringify(item.value);\n    if (selectedListString.indexOf(value) != -1) {\n        item.checked = true;\n        item.selected = true;\n    }\n});\n```\n","slug":"JS代码片段","published":1,"updated":"2021-03-04T02:28:21.313Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmejaerj0008xcvr8adzf51y","content":"<p>搬砖时的 JS 代码片段整理</p>\n<span id=\"more\"></span>\n\n<h1 id=\"将-bytes-格式化\"><a href=\"#将-bytes-格式化\" class=\"headerlink\" title=\"将 bytes 格式化\"></a>将 bytes 格式化</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> total = <span class=\"built_in\">this</span>.fileSizeFormat(spaceSize, <span class=\"number\">2</span>, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"title\">fileSizeFormat</span>(<span class=\"params\">bytes, digits, unitFlag, floorFlag</span>)</span> &#123;</span><br><span class=\"line\">      bytes = <span class=\"built_in\">parseFloat</span>(bytes)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> absBytes = <span class=\"built_in\">Math</span>.abs(bytes)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> humanSize, unit</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (digits === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">        digits = <span class=\"number\">2</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (unitFlag === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">        unitFlag = <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (absBytes &lt; <span class=\"number\">1024</span>) &#123;</span><br><span class=\"line\">        digits = <span class=\"number\">0</span></span><br><span class=\"line\">        humanSize = bytes</span><br><span class=\"line\">        unit = <span class=\"string\">&#x27;B&#x27;</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (absBytes &lt; <span class=\"number\">900</span> * <span class=\"number\">1024</span>) &#123;</span><br><span class=\"line\">          humanSize = bytes / <span class=\"number\">1024</span></span><br><span class=\"line\">          unit = <span class=\"string\">&#x27;K&#x27;</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (absBytes &lt; <span class=\"number\">900</span> * <span class=\"number\">1048576</span>) &#123;</span><br><span class=\"line\">            humanSize = bytes / <span class=\"number\">1048576</span></span><br><span class=\"line\">            unit = <span class=\"string\">&#x27;M&#x27;</span></span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (absBytes &lt; <span class=\"number\">900</span> * <span class=\"number\">1073741824</span> || (digits === <span class=\"number\">0</span> &amp;&amp; absBytes &lt; <span class=\"number\">1048576</span> * <span class=\"number\">1048576</span>)) &#123;</span><br><span class=\"line\">              humanSize = bytes / <span class=\"number\">1073741824</span></span><br><span class=\"line\">              unit = <span class=\"string\">&#x27;G&#x27;</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              humanSize = bytes / (<span class=\"number\">1048576</span> * <span class=\"number\">1048576</span>)</span><br><span class=\"line\">              unit = <span class=\"string\">&#x27;T&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        humanSize = <span class=\"built_in\">Math</span>.round(humanSize * <span class=\"built_in\">Math</span>.pow(<span class=\"number\">10</span>, digits)) / <span class=\"built_in\">parseFloat</span>(<span class=\"built_in\">Math</span>.pow(<span class=\"number\">10</span>, digits))</span><br><span class=\"line\">        humanSize = humanSize.toFixed(digits)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> result</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (floorFlag &amp;&amp; digits &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (humanSize !== <span class=\"built_in\">Math</span>.floor(humanSize)) &#123;</span><br><span class=\"line\">            result = humanSize</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            result = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Math</span>.floor(humanSize), <span class=\"number\">10</span>)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          result = humanSize</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (unitFlag) &#123;</span><br><span class=\"line\">          result = result + unit</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取文件扩展名\"><a href=\"#获取文件扩展名\" class=\"headerlink\" title=\"获取文件扩展名\"></a>获取文件扩展名</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> extname = <span class=\"function\"><span class=\"params\">filename</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (filename.indexOf(<span class=\"string\">&quot;.&quot;</span>) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> resultArr = filename.split(<span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"string\">&quot;.&quot;</span> + resultArr[resultArr.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubbleSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = arr.length,</span><br><span class=\"line\">        j;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tempExchangVal;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; i - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                tempExchangVal = arr[j];</span><br><span class=\"line\">                arr[j] = arr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">                arr[j + <span class=\"number\">1</span>] = tempExchangVal;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arrSorted = bubbleSort(arr);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrSorted);</span><br><span class=\"line\">alert(arrSorted);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"快速排序算法\"><a href=\"#快速排序算法\" class=\"headerlink\" title=\"快速排序算法\"></a>快速排序算法</h2><p>快速排序是处理大数据急最快的排序算法之一。它是一种分而治之的算法，通过递归的方式将数据一次分解为包含较小元素和较大元素的不同子序列。</p>\n<p><img src=\"/images/common/kuaipai.png\" alt=\"network\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> left = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> right = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> priot = array[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (array[i] &lt; privot) &#123;</span><br><span class=\"line\">            left.push(array[i]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            right.push(array[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> quickSort(left).concat(privot, quickSort(right));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JS-深度克隆\"><a href=\"#JS-深度克隆\" class=\"headerlink\" title=\"JS 深度克隆\"></a>JS 深度克隆</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepClone</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _toString = <span class=\"built_in\">Object</span>.prototype.toString;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// null, undefined, non-object, function</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!obj || <span class=\"keyword\">typeof</span> obj !== <span class=\"string\">&quot;object&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// DOM Node</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj.nodeType &amp;&amp; <span class=\"string\">&quot;cloneNode&quot;</span> <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj.cloneNode(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Date</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_toString.call(obj) === <span class=\"string\">&quot;[object Date]&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(obj.getTime());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// RegExp</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_toString.call(obj) === <span class=\"string\">&quot;[object RegExp]&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> flags = [];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (obj.global) &#123;</span><br><span class=\"line\">            flags.push(<span class=\"string\">&quot;g&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (obj.multiline) &#123;</span><br><span class=\"line\">            flags.push(<span class=\"string\">&quot;m&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (obj.ignoreCase) &#123;</span><br><span class=\"line\">            flags.push(<span class=\"string\">&quot;i&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(obj.source, flags.join(<span class=\"string\">&quot;&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"built_in\">Array</span>.isArray(obj)</span><br><span class=\"line\">        ? []</span><br><span class=\"line\">        : obj.constructor</span><br><span class=\"line\">        ? <span class=\"keyword\">new</span> obj.constructor()</span><br><span class=\"line\">        : &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">        result[key] = deepClone(obj[key]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.a = a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&quot;qiu&quot;</span>,</span><br><span class=\"line\">    birth: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</span><br><span class=\"line\">    pattern: <span class=\"regexp\">/qiu/gim</span>,</span><br><span class=\"line\">    container: <span class=\"built_in\">document</span>.body,</span><br><span class=\"line\">    hobbys: [<span class=\"string\">&quot;book&quot;</span>, <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(), <span class=\"regexp\">/aaa/gim</span>, <span class=\"number\">111</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = deepClone(c);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c.a === b.a);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c, b);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Javascript-的节流和防抖\"><a href=\"#Javascript-的节流和防抖\" class=\"headerlink\" title=\"Javascript 的节流和防抖\"></a>Javascript 的节流和防抖</h2><p>函数节流和函数防抖，两者都是优化高频率执行 JS 代码的一种手段。</p>\n<h3 id=\"函数节流\"><a href=\"#函数节流\" class=\"headerlink\" title=\"函数节流\"></a>函数节流</h3><p>防抖动和节流本质是不一样的。放</p>\n<p>是指一定时间内 js 方法只跑一次。</p>\n<p>函数节流应用的实际场景，多数在监听页面元素滚动时间的时候会用到。因为滚动事件，是一个高频触发的事件。以下是监听页面元素滚动的示例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数节流</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> canRun = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;throttle&quot;</span>).onsroll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!canRun) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否空闲，如果在执行中，则直接return</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    canRun = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;函数节流&quot;</span>);</span><br><span class=\"line\">        canRun = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;, <span class=\"number\">300</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数防抖\"><a href=\"#函数防抖\" class=\"headerlink\" title=\"函数防抖\"></a>函数防抖</h3><p>函数防抖的应有场景，最常见的就是用户注册的时候的手机号码验证和邮箱验证了。只有等用户输入完毕后，前端才需要检查格式是否正确，如果不正确，在弹出提示语。以下还是以页面元素滚动监听的例子，来解析：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数防抖</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timer = fasle;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;document&quot;</span>).onsrcoll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timer).timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//清楚未执行的代码，重置回初始状态</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;函数防抖&quot;</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">300</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// func是用户传入需要防抖的函数</span></span><br><span class=\"line\"><span class=\"comment\">// wait是等待时间</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> debounce = <span class=\"function\">(<span class=\"params\">func, wait = <span class=\"number\">50</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 缓存一个定时器id</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 这里返回的函数是每次用户实际调用的防抖函数</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果已经设定过定时器了就清空上一次的定时器</span></span><br><span class=\"line\">    <span class=\"comment\">// 开始一个新的定时器，延迟执行用户传入的方法</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer) <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            func.apply(<span class=\"built_in\">this</span>, args);</span><br><span class=\"line\">        &#125;, wait);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 不难看出如果用户调用该函数的间隔小于wait的情况下，上一次的时间还未到就被清除了，并不会执行函数</span></span><br></pre></td></tr></table></figure>\n\n<p>函数防抖的要点，也是需要一个 setTimeout 来辅助实现。延迟执行需要跑的代码</p>\n<p>但是这种简单版的防抖也是缺陷的，这个防抖只能在最后调用。一般的防抖会有 imm 选项，表示是否立即调用。这两者的区别在于：</p>\n<ul>\n<li>  在搜索引擎搜索问题的时候，希望达到用户数万最后一个字才调用查询整个接口，这个时候适用<code>延迟执行</code>的防抖函数，它总是在一连串（间隔小于 wait 的）函数出发之后才调用。</li>\n<li>  例如在用户点击按钮时，是立即调用接口，并且下一次调用时间间隔大于 wait 才会触发。</li>\n</ul>\n<p>带有立即执行选项的防抖函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">now</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取当前时间戳</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 防抖函数，返回函数连续调用时，空闲时间必须大于或等于 wait，func 才会执行</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;function&#125;</span> </span>func        回调函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;number&#125;</span>   </span>wait        表示时间窗口的间隔</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;boolean&#125;</span>  </span>immediate   设置为ture时，是否立即调用函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;function&#125;</span>             </span>返回客户调用函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">func, wait = <span class=\"number\">50</span>, immediate = <span class=\"literal\">true</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer, context, args;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 延迟执行函数</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> later = <span class=\"function\">() =&gt;</span></span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 延迟函数执行完毕，清空缓存的定时器序号</span></span><br><span class=\"line\">            timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 延迟执行的情况下，函数会在延迟函数中执行</span></span><br><span class=\"line\">            <span class=\"comment\">// 使用到之前缓存的参数和上下文</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!immediate) &#123;</span><br><span class=\"line\">                func.apply(context, args);</span><br><span class=\"line\">                context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, wait);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这里返回的函数是每次实际调用的函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...params</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果没有创建延迟执行函数（later），就创建一个</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!timer) &#123;</span><br><span class=\"line\">            timer = later();</span><br><span class=\"line\">            <span class=\"comment\">// 如果是立即执行，调用函数</span></span><br><span class=\"line\">            <span class=\"comment\">// 否则缓存参数和调用上下文</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (immediate) &#123;</span><br><span class=\"line\">                func.apply(<span class=\"built_in\">this</span>, params);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                context = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">                args = params;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 如果已有延迟执行函数（later），调用的时候清除原来的并重新设定一个</span></span><br><span class=\"line\">            <span class=\"comment\">// 这样做延迟函数会重新计时</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">            timer = later();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"FileReader-对象\"><a href=\"#FileReader-对象\" class=\"headerlink\" title=\"FileReader 对象\"></a>FileReader 对象</h2><p>之前做图片上传预览都是把图片上传到服务器获得线上地址，如今才发现有另一种方法：使用<code>FildeReader</code>(但兼容性不是很好，ie10)</p>\n<p><code>FileReader</code>允许 Web 应用程序异步读取存储在用户计算机上的文件（或原始数据缓冲区）的内容，使用 File 或 Blob 对象指定要读取的文件或数据。主要用来把文件读入内存，并且读取文件中的数据。通过构造函数创建一个 FileReader 对象。</p>\n<p>其中 file 对象可以是来自用户在一个<code>&lt;input&gt;</code>元素上悬着文件后返回的 filelist 对象，也可以来自拖放操作生成的<code>DataTransfer</code>对象，还可以是来自一个<code>HTMLCanvasElement</code>上执行<code>mozGetAsFile()</code>方法后返回结果。</p>\n<p><code>FileReader.readyState</code>表示 FileReader 状态的数字。取值如下：</p>\n<ul>\n<li>  EMPTY: 0 还没有加载任何数据。</li>\n<li>  LOADING: 1 数据正在加载。</li>\n<li>  DONE：2 已经完成全部的读取请求。</li>\n</ul>\n<p><code>FileReader.result</code>表示文件内容。该属性仅在读取操作完成后才有效，数据的格式取决于使用哪个方法来启动读取操作。</p>\n<p><code>FileReader.readAsDataURL()</code>表示开始读取指定的 Blob 中的内容。一旦完成，result 属性中将包含一个 data:URL 格式的字符串以表示所读取文件的内容。</p>\n<ul>\n<li>  abort：中断读取操作。</li>\n<li>  readAsArrayBuffer：读取文件内容到 ArrayBuffer 对象中。</li>\n<li>  readAsBinaryString：将文件读取为二进制数据。</li>\n<li>  readAsDataURL：将文件读取为 data: URL 格式的字符串。</li>\n<li>  readAsText：将文件读取为文本。</li>\n</ul>\n<h3 id=\"上传图片预览\"><a href=\"#上传图片预览\" class=\"headerlink\" title=\"上传图片预览\"></a>上传图片预览</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;files&quot;</span> <span class=\"attr\">accept</span>=<span class=\"string\">&quot;image/jpeg,image/jpg,image/png&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;blank.gif&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;preview&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> elem = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;files&quot;</span>),</span></span><br><span class=\"line\"><span class=\"javascript\">        img = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;preview&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    elem.onchange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> files = elem.files,</span></span><br><span class=\"line\"><span class=\"javascript\">            reader = <span class=\"keyword\">new</span> FileReader();</span></span><br><span class=\"line\">        if (files &amp;&amp; files[0]) &#123;</span><br><span class=\"line\"><span class=\"javascript\">            reader.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ev</span>) </span>&#123;</span></span><br><span class=\"line\">                img.src = ev.target.result;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            reader.readAsDataURL(files[0]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"图片上传-小图片转-base64\"><a href=\"#图片上传-小图片转-base64\" class=\"headerlink\" title=\"图片上传 小图片转 base64\"></a>图片上传 小图片转 base64</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> reader = <span class=\"keyword\">new</span> FileReader();</span><br><span class=\"line\"><span class=\"keyword\">let</span> imgUrlBase64 = reader.readAsDataURL(file);</span><br><span class=\"line\">reader.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    reader.result.length; <span class=\"comment\">//去判断大小 reader.result就是</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Base64-编码\"><a href=\"#Base64-编码\" class=\"headerlink\" title=\"Base64 编码\"></a>Base64 编码</h2><p>在 HTML5 中新增了 atob 和 btoa 方法来支持 Base64 编码。它们的命名也很简单，b to a 和 a to b，即代表着编码和解码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&quot;https://lin-xin.github.io&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = btoa(a);</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = atob(b);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);     <span class=\"comment\">// https://lin-xin.github.io</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);     <span class=\"comment\">// aHR0cHM6Ly9saW4teGluLmdpdGh1Yi5pbw==</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c);     <span class=\"comment\">// https://lin-xin.github.io复制代码btoa 方法对字符串 a 进行编码，不会改变 a 的值，返回一个编码后的值。atob 方法对编码后的字符串进行解码。</span></span><br><span class=\"line\">但是参数中带中文，已经超出了<span class=\"number\">8</span>位ASCII编码的字符范围，浏览器就会报错。所以需要先对中文进行 <span class=\"built_in\">encodeURIComponent</span> 编码处理。</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&quot;哈喽 世界&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = btoa(<span class=\"built_in\">encodeURIComponent</span>(a));</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"built_in\">decodeURIComponent</span>(atob(b));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);     <span class=\"comment\">// JUU1JTkzJTg4JUU1JTk2JUJEJTIwJUU0JUI4JTk2JUU3JTk1JThD</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c);     <span class=\"comment\">// 哈喽 世界</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查找数组对象里面是否含有某对象\"><a href=\"#查找数组对象里面是否含有某对象\" class=\"headerlink\" title=\"查找数组对象里面是否含有某对象\"></a>查找数组对象里面是否含有某对象</h2><p>查找 selectedList 里面是否存在 listAppEquipment 数组里面的对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> selectedListString = <span class=\"built_in\">JSON</span>.stringify(that.selectedList);</span><br><span class=\"line\">that.listAppEquipment.forEach(<span class=\"function\">(<span class=\"params\">item: any</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = <span class=\"built_in\">JSON</span>.stringify(item.value);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (selectedListString.indexOf(value) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        item.checked = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        item.selected = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>搬砖时的 JS 代码片段整理</p>","more":"<h1 id=\"将-bytes-格式化\"><a href=\"#将-bytes-格式化\" class=\"headerlink\" title=\"将 bytes 格式化\"></a>将 bytes 格式化</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> total = <span class=\"built_in\">this</span>.fileSizeFormat(spaceSize, <span class=\"number\">2</span>, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"title\">fileSizeFormat</span>(<span class=\"params\">bytes, digits, unitFlag, floorFlag</span>)</span> &#123;</span><br><span class=\"line\">      bytes = <span class=\"built_in\">parseFloat</span>(bytes)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> absBytes = <span class=\"built_in\">Math</span>.abs(bytes)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> humanSize, unit</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (digits === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">        digits = <span class=\"number\">2</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (unitFlag === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">        unitFlag = <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (absBytes &lt; <span class=\"number\">1024</span>) &#123;</span><br><span class=\"line\">        digits = <span class=\"number\">0</span></span><br><span class=\"line\">        humanSize = bytes</span><br><span class=\"line\">        unit = <span class=\"string\">&#x27;B&#x27;</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (absBytes &lt; <span class=\"number\">900</span> * <span class=\"number\">1024</span>) &#123;</span><br><span class=\"line\">          humanSize = bytes / <span class=\"number\">1024</span></span><br><span class=\"line\">          unit = <span class=\"string\">&#x27;K&#x27;</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (absBytes &lt; <span class=\"number\">900</span> * <span class=\"number\">1048576</span>) &#123;</span><br><span class=\"line\">            humanSize = bytes / <span class=\"number\">1048576</span></span><br><span class=\"line\">            unit = <span class=\"string\">&#x27;M&#x27;</span></span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (absBytes &lt; <span class=\"number\">900</span> * <span class=\"number\">1073741824</span> || (digits === <span class=\"number\">0</span> &amp;&amp; absBytes &lt; <span class=\"number\">1048576</span> * <span class=\"number\">1048576</span>)) &#123;</span><br><span class=\"line\">              humanSize = bytes / <span class=\"number\">1073741824</span></span><br><span class=\"line\">              unit = <span class=\"string\">&#x27;G&#x27;</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              humanSize = bytes / (<span class=\"number\">1048576</span> * <span class=\"number\">1048576</span>)</span><br><span class=\"line\">              unit = <span class=\"string\">&#x27;T&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        humanSize = <span class=\"built_in\">Math</span>.round(humanSize * <span class=\"built_in\">Math</span>.pow(<span class=\"number\">10</span>, digits)) / <span class=\"built_in\">parseFloat</span>(<span class=\"built_in\">Math</span>.pow(<span class=\"number\">10</span>, digits))</span><br><span class=\"line\">        humanSize = humanSize.toFixed(digits)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> result</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (floorFlag &amp;&amp; digits &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (humanSize !== <span class=\"built_in\">Math</span>.floor(humanSize)) &#123;</span><br><span class=\"line\">            result = humanSize</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            result = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Math</span>.floor(humanSize), <span class=\"number\">10</span>)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          result = humanSize</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (unitFlag) &#123;</span><br><span class=\"line\">          result = result + unit</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取文件扩展名\"><a href=\"#获取文件扩展名\" class=\"headerlink\" title=\"获取文件扩展名\"></a>获取文件扩展名</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> extname = <span class=\"function\"><span class=\"params\">filename</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (filename.indexOf(<span class=\"string\">&quot;.&quot;</span>) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> resultArr = filename.split(<span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"string\">&quot;.&quot;</span> + resultArr[resultArr.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubbleSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = arr.length,</span><br><span class=\"line\">        j;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tempExchangVal;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; i - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                tempExchangVal = arr[j];</span><br><span class=\"line\">                arr[j] = arr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">                arr[j + <span class=\"number\">1</span>] = tempExchangVal;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arrSorted = bubbleSort(arr);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrSorted);</span><br><span class=\"line\">alert(arrSorted);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"快速排序算法\"><a href=\"#快速排序算法\" class=\"headerlink\" title=\"快速排序算法\"></a>快速排序算法</h2><p>快速排序是处理大数据急最快的排序算法之一。它是一种分而治之的算法，通过递归的方式将数据一次分解为包含较小元素和较大元素的不同子序列。</p>\n<p><img src=\"/images/common/kuaipai.png\" alt=\"network\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> left = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> right = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> priot = array[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (array[i] &lt; privot) &#123;</span><br><span class=\"line\">            left.push(array[i]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            right.push(array[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> quickSort(left).concat(privot, quickSort(right));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JS-深度克隆\"><a href=\"#JS-深度克隆\" class=\"headerlink\" title=\"JS 深度克隆\"></a>JS 深度克隆</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepClone</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _toString = <span class=\"built_in\">Object</span>.prototype.toString;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// null, undefined, non-object, function</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!obj || <span class=\"keyword\">typeof</span> obj !== <span class=\"string\">&quot;object&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// DOM Node</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj.nodeType &amp;&amp; <span class=\"string\">&quot;cloneNode&quot;</span> <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj.cloneNode(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Date</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_toString.call(obj) === <span class=\"string\">&quot;[object Date]&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(obj.getTime());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// RegExp</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_toString.call(obj) === <span class=\"string\">&quot;[object RegExp]&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> flags = [];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (obj.global) &#123;</span><br><span class=\"line\">            flags.push(<span class=\"string\">&quot;g&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (obj.multiline) &#123;</span><br><span class=\"line\">            flags.push(<span class=\"string\">&quot;m&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (obj.ignoreCase) &#123;</span><br><span class=\"line\">            flags.push(<span class=\"string\">&quot;i&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(obj.source, flags.join(<span class=\"string\">&quot;&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"built_in\">Array</span>.isArray(obj)</span><br><span class=\"line\">        ? []</span><br><span class=\"line\">        : obj.constructor</span><br><span class=\"line\">        ? <span class=\"keyword\">new</span> obj.constructor()</span><br><span class=\"line\">        : &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">        result[key] = deepClone(obj[key]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.a = a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&quot;qiu&quot;</span>,</span><br><span class=\"line\">    birth: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</span><br><span class=\"line\">    pattern: <span class=\"regexp\">/qiu/gim</span>,</span><br><span class=\"line\">    container: <span class=\"built_in\">document</span>.body,</span><br><span class=\"line\">    hobbys: [<span class=\"string\">&quot;book&quot;</span>, <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(), <span class=\"regexp\">/aaa/gim</span>, <span class=\"number\">111</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = deepClone(c);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c.a === b.a);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c, b);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Javascript-的节流和防抖\"><a href=\"#Javascript-的节流和防抖\" class=\"headerlink\" title=\"Javascript 的节流和防抖\"></a>Javascript 的节流和防抖</h2><p>函数节流和函数防抖，两者都是优化高频率执行 JS 代码的一种手段。</p>\n<h3 id=\"函数节流\"><a href=\"#函数节流\" class=\"headerlink\" title=\"函数节流\"></a>函数节流</h3><p>防抖动和节流本质是不一样的。放</p>\n<p>是指一定时间内 js 方法只跑一次。</p>\n<p>函数节流应用的实际场景，多数在监听页面元素滚动时间的时候会用到。因为滚动事件，是一个高频触发的事件。以下是监听页面元素滚动的示例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数节流</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> canRun = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;throttle&quot;</span>).onsroll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!canRun) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否空闲，如果在执行中，则直接return</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    canRun = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;函数节流&quot;</span>);</span><br><span class=\"line\">        canRun = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;, <span class=\"number\">300</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数防抖\"><a href=\"#函数防抖\" class=\"headerlink\" title=\"函数防抖\"></a>函数防抖</h3><p>函数防抖的应有场景，最常见的就是用户注册的时候的手机号码验证和邮箱验证了。只有等用户输入完毕后，前端才需要检查格式是否正确，如果不正确，在弹出提示语。以下还是以页面元素滚动监听的例子，来解析：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数防抖</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timer = fasle;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;document&quot;</span>).onsrcoll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timer).timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//清楚未执行的代码，重置回初始状态</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;函数防抖&quot;</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">300</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// func是用户传入需要防抖的函数</span></span><br><span class=\"line\"><span class=\"comment\">// wait是等待时间</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> debounce = <span class=\"function\">(<span class=\"params\">func, wait = <span class=\"number\">50</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 缓存一个定时器id</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 这里返回的函数是每次用户实际调用的防抖函数</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果已经设定过定时器了就清空上一次的定时器</span></span><br><span class=\"line\">    <span class=\"comment\">// 开始一个新的定时器，延迟执行用户传入的方法</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer) <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            func.apply(<span class=\"built_in\">this</span>, args);</span><br><span class=\"line\">        &#125;, wait);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 不难看出如果用户调用该函数的间隔小于wait的情况下，上一次的时间还未到就被清除了，并不会执行函数</span></span><br></pre></td></tr></table></figure>\n\n<p>函数防抖的要点，也是需要一个 setTimeout 来辅助实现。延迟执行需要跑的代码</p>\n<p>但是这种简单版的防抖也是缺陷的，这个防抖只能在最后调用。一般的防抖会有 imm 选项，表示是否立即调用。这两者的区别在于：</p>\n<ul>\n<li>  在搜索引擎搜索问题的时候，希望达到用户数万最后一个字才调用查询整个接口，这个时候适用<code>延迟执行</code>的防抖函数，它总是在一连串（间隔小于 wait 的）函数出发之后才调用。</li>\n<li>  例如在用户点击按钮时，是立即调用接口，并且下一次调用时间间隔大于 wait 才会触发。</li>\n</ul>\n<p>带有立即执行选项的防抖函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">now</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取当前时间戳</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 防抖函数，返回函数连续调用时，空闲时间必须大于或等于 wait，func 才会执行</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;function&#125;</span> </span>func        回调函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;number&#125;</span>   </span>wait        表示时间窗口的间隔</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;boolean&#125;</span>  </span>immediate   设置为ture时，是否立即调用函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;function&#125;</span>             </span>返回客户调用函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">func, wait = <span class=\"number\">50</span>, immediate = <span class=\"literal\">true</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer, context, args;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 延迟执行函数</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> later = <span class=\"function\">() =&gt;</span></span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 延迟函数执行完毕，清空缓存的定时器序号</span></span><br><span class=\"line\">            timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 延迟执行的情况下，函数会在延迟函数中执行</span></span><br><span class=\"line\">            <span class=\"comment\">// 使用到之前缓存的参数和上下文</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!immediate) &#123;</span><br><span class=\"line\">                func.apply(context, args);</span><br><span class=\"line\">                context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, wait);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这里返回的函数是每次实际调用的函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...params</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果没有创建延迟执行函数（later），就创建一个</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!timer) &#123;</span><br><span class=\"line\">            timer = later();</span><br><span class=\"line\">            <span class=\"comment\">// 如果是立即执行，调用函数</span></span><br><span class=\"line\">            <span class=\"comment\">// 否则缓存参数和调用上下文</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (immediate) &#123;</span><br><span class=\"line\">                func.apply(<span class=\"built_in\">this</span>, params);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                context = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">                args = params;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 如果已有延迟执行函数（later），调用的时候清除原来的并重新设定一个</span></span><br><span class=\"line\">            <span class=\"comment\">// 这样做延迟函数会重新计时</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">            timer = later();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"FileReader-对象\"><a href=\"#FileReader-对象\" class=\"headerlink\" title=\"FileReader 对象\"></a>FileReader 对象</h2><p>之前做图片上传预览都是把图片上传到服务器获得线上地址，如今才发现有另一种方法：使用<code>FildeReader</code>(但兼容性不是很好，ie10)</p>\n<p><code>FileReader</code>允许 Web 应用程序异步读取存储在用户计算机上的文件（或原始数据缓冲区）的内容，使用 File 或 Blob 对象指定要读取的文件或数据。主要用来把文件读入内存，并且读取文件中的数据。通过构造函数创建一个 FileReader 对象。</p>\n<p>其中 file 对象可以是来自用户在一个<code>&lt;input&gt;</code>元素上悬着文件后返回的 filelist 对象，也可以来自拖放操作生成的<code>DataTransfer</code>对象，还可以是来自一个<code>HTMLCanvasElement</code>上执行<code>mozGetAsFile()</code>方法后返回结果。</p>\n<p><code>FileReader.readyState</code>表示 FileReader 状态的数字。取值如下：</p>\n<ul>\n<li>  EMPTY: 0 还没有加载任何数据。</li>\n<li>  LOADING: 1 数据正在加载。</li>\n<li>  DONE：2 已经完成全部的读取请求。</li>\n</ul>\n<p><code>FileReader.result</code>表示文件内容。该属性仅在读取操作完成后才有效，数据的格式取决于使用哪个方法来启动读取操作。</p>\n<p><code>FileReader.readAsDataURL()</code>表示开始读取指定的 Blob 中的内容。一旦完成，result 属性中将包含一个 data:URL 格式的字符串以表示所读取文件的内容。</p>\n<ul>\n<li>  abort：中断读取操作。</li>\n<li>  readAsArrayBuffer：读取文件内容到 ArrayBuffer 对象中。</li>\n<li>  readAsBinaryString：将文件读取为二进制数据。</li>\n<li>  readAsDataURL：将文件读取为 data: URL 格式的字符串。</li>\n<li>  readAsText：将文件读取为文本。</li>\n</ul>\n<h3 id=\"上传图片预览\"><a href=\"#上传图片预览\" class=\"headerlink\" title=\"上传图片预览\"></a>上传图片预览</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;files&quot;</span> <span class=\"attr\">accept</span>=<span class=\"string\">&quot;image/jpeg,image/jpg,image/png&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;blank.gif&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;preview&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> elem = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;files&quot;</span>),</span></span><br><span class=\"line\"><span class=\"javascript\">        img = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;preview&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    elem.onchange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> files = elem.files,</span></span><br><span class=\"line\"><span class=\"javascript\">            reader = <span class=\"keyword\">new</span> FileReader();</span></span><br><span class=\"line\">        if (files &amp;&amp; files[0]) &#123;</span><br><span class=\"line\"><span class=\"javascript\">            reader.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ev</span>) </span>&#123;</span></span><br><span class=\"line\">                img.src = ev.target.result;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            reader.readAsDataURL(files[0]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"图片上传-小图片转-base64\"><a href=\"#图片上传-小图片转-base64\" class=\"headerlink\" title=\"图片上传 小图片转 base64\"></a>图片上传 小图片转 base64</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> reader = <span class=\"keyword\">new</span> FileReader();</span><br><span class=\"line\"><span class=\"keyword\">let</span> imgUrlBase64 = reader.readAsDataURL(file);</span><br><span class=\"line\">reader.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    reader.result.length; <span class=\"comment\">//去判断大小 reader.result就是</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Base64-编码\"><a href=\"#Base64-编码\" class=\"headerlink\" title=\"Base64 编码\"></a>Base64 编码</h2><p>在 HTML5 中新增了 atob 和 btoa 方法来支持 Base64 编码。它们的命名也很简单，b to a 和 a to b，即代表着编码和解码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&quot;https://lin-xin.github.io&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = btoa(a);</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = atob(b);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);     <span class=\"comment\">// https://lin-xin.github.io</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);     <span class=\"comment\">// aHR0cHM6Ly9saW4teGluLmdpdGh1Yi5pbw==</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c);     <span class=\"comment\">// https://lin-xin.github.io复制代码btoa 方法对字符串 a 进行编码，不会改变 a 的值，返回一个编码后的值。atob 方法对编码后的字符串进行解码。</span></span><br><span class=\"line\">但是参数中带中文，已经超出了<span class=\"number\">8</span>位ASCII编码的字符范围，浏览器就会报错。所以需要先对中文进行 <span class=\"built_in\">encodeURIComponent</span> 编码处理。</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&quot;哈喽 世界&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = btoa(<span class=\"built_in\">encodeURIComponent</span>(a));</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"built_in\">decodeURIComponent</span>(atob(b));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);     <span class=\"comment\">// JUU1JTkzJTg4JUU1JTk2JUJEJTIwJUU0JUI4JTk2JUU3JTk1JThD</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c);     <span class=\"comment\">// 哈喽 世界</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查找数组对象里面是否含有某对象\"><a href=\"#查找数组对象里面是否含有某对象\" class=\"headerlink\" title=\"查找数组对象里面是否含有某对象\"></a>查找数组对象里面是否含有某对象</h2><p>查找 selectedList 里面是否存在 listAppEquipment 数组里面的对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> selectedListString = <span class=\"built_in\">JSON</span>.stringify(that.selectedList);</span><br><span class=\"line\">that.listAppEquipment.forEach(<span class=\"function\">(<span class=\"params\">item: any</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = <span class=\"built_in\">JSON</span>.stringify(item.value);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (selectedListString.indexOf(value) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        item.checked = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        item.selected = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>"},{"title":"JS基础(ES5)","date":"2018-01-18T02:12:34.000Z","_content":"\n感觉自己的 ES5 掌握的比较杂乱，在此整理一下自己的思路，总结、归纳原生 JS 的知识。\n\n<!--more-->\n\n## 内置类型\n\nJS 中有 7 种内置类型，7 种内置类型又分为两大类型：基本类型和对象（Object）\n基础基本类型有 6 种：`null`,`undefined`,`boolean`,`number`,`string`,`symbol`。\n\n## `Typeof`\n\n`typeof` 对于基本类型。除了`null`都可以显示正确的类型\n\n```javascript\ntypeof 1 // 'number'\ntypeof '1' // 'string'\ntypeof undefined // 'undefined'\ntypeof true // 'boolean'\ntypeof Symbol() // 'symbol'\ntypeof b // b 没有声明，但是还会显示 undefined\n\n//typeof 对于对象，除了函数都会显示 object\n\ntypeof [] // 'object'\ntypeof {} // 'object'\ntypeof console.log // 'function'\n\ntypeof null // 'object'\n```\n\nPS：为什么会出现这种情况呢？因为在 JS 的最初版本中，使用的是 32 位系统，为了性能考虑使用低位存储了变量的类型信息，000 开头代表是对象，然而 null 表示为全零，所以将它错误的判断为 object 。虽然现在的内部类型判断代码已经改变了，但是对于这个 Bug 却是一直流传下来\n\n```javascript\nlet a\n// 我们也可以这样判断 undefined\na === undefined\n// 但是 undefined 不是保留字，能够在低版本浏览器被赋值\nlet undefined = 1\n// 这样判断就会出错\n// 所以可以用下面的方式来判断，并且代码量更少\n// 因为 void 后面随便跟上一个组成表达式\n// 返回就是 undefined\na === void 0\n```\n\n## 对象\n\n创建对象可以通过对象直接量，关键字 new 和 object.creat() 函数来创建对象。每一个对象都有与知相关的原型，类和可扩展性。可分为普通对象和函数对象。凡是通过 new function() 创建的都是函数对象。其他都是普通对象。\n\n### 对象直接量\n\n对象直接量是类似于 var a = {x:0,y:0} 的映射表。对象直接量是一个表达式，这个表达式的每次运算都创建并初始化一个新的对象。每次计算对象直接量的时候。也会计算它的每个属性值，**也就是说在一个循环体内使用了对象直接量，他将会创建很对新对象，并且每次创建的对象的属性值也有可能不同。**\n\n### 通过 new 创建对象\n\n1. 新生成了一个对象\n2. 链接到原型\n3. 绑定 this\n4. 返回新对象\n\n在调用`new`的过程中会发生以上四件事情。\n\nvar obj=new MyClass(); new 运算符创建并初始化一个**新对象** 用 new 调用时，this 会指向空的对象，并且这个对象的原型指向 MyClass.prototype\n\n#### new 的过程以及是实现 new\n\n```javascript\nlet obj = {}\nlet con = [].shift.call(arguments)\n```\n\n\n## 原型\n\n原型：每一个对象都从原型继承属性。**每个对象都有 _proto_ 属性 , 每个对象都有原对象，但只有函数对象才有 prototype 属性**, 但是除却 function.prototype,function.prototype 也是函数对象，但是没有 prototype。可以使用 p.isPrototype(o) 来检查 p 是否是 o 的原型。\n\n### 原型模式\n\n原型模式是 js 对继承的一种实现\n\n- prototype：构造函数中的属性，指向该构造函数的原型对象。\n\n- constructor ：原型对象中的属性，指向该原型对象的构造函数\n\n- _proto_：实例中的属性，指向 new 这个实例的构造函数的原型对象，对象可以通过`_proto_`来寻找不属于该对象的属性，`_proto_`将对象连接起来组成原型链。所有引用类型的_proto_属性值均指向它的构造函数的prototype的属性值。当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去他的_proto_（即它的构造函数的prototype）中寻找\n\n### prototype 属性的引入\n\n每一个 new 出的实例都有自己的属性和方法的副本，无法做到属性、方法共享，因此 Brendan Eich 决定为构造函数设置一个 prototype 属性。\n\n这个对象包含一个对象（以下简称 “prototype 对象 ”），所有实例对象需要共享的属性及方法，都放在这个对象里面，那些不需要共享的属性及方法，就放在构造函数里面。\n\n实例对象一旦创建，就自动引用 prototype 对象的属性和方法。也就是说。实例对象的属性和方法，分成两种，一种是本地的，一种是引用的。\n\n```javascript\nfunction DOG(name) {\n  this.name = name\n}\nDOG.prototype = { species: '犬科' }\n\nvar dogA = new DOG('大毛')\nvar dogB = new DOG('二毛')\n\nalert(dogA.species)\n// 其实是通过dogA._proto_.species 来访问DOG.prototype.species\nalert(dogB.species)\n// 犬科\nDOG.prototype\n//{species:''犬科',constructor:fDOG(name),_proto_:Object}\nDOG.prototype.constructor === DOG\n//true\n```\n\n现在，species 属性放在 prototype 对象里，是两个实例对象共享的。只要修改了 prototype 对象，就会同时影响到两个实例对象。\n\n![network](/images/prototype/1.png)\n\n以上就是一个简单的 DOG 类完整的原型链。\n\n#### 原型链的作用：对象属性的访问修改和删除。\n\n- 访问。优先在对象本身查找，没有则顺着原型链向上查找\n- 修改。只能修改跟删除自身属性，不会影响到原型链上的其他对象。\n\n### _proto_ （原型指针）\n\n```javascript\nfunction Person(name, age, job) {\n  this.name = name\n  this.age = age\n  this.job = job\n  this.sayName = function () {\n    alert(this.name)\n  }\n}\nvar person1 = new Person('Zaxlct', 28, 'Software Engineer')\nvar person2 = new Person('Mick', 23, 'Doctor')\nperson1.__proto__ == Person.prototype\n//person1.__proto__  = person1.constructor.prototype , person1.constructor = Person\nPerson.__proto__\n//Person.constructor = Function => Person.__proto__  = Function.prototype\nPerson.prototype.__proto__\n// Person.prototype 是一个普通对象（原型对象），普通函数的构造函数是Object => Person.prototype.__proto__ =  Object.prototype\nObject.__proto__\n//普通对象 同上\nObject.prototype.__proto__\n//对象也有proto属性，但它比较特殊，为null,因为null处于原型链的顶端\n```\n\nJS 在创建对象（不论是普通对象还是函数对象）的时候，都有一个叫做 _proto_ 的内置属性，**用于指向创建它的构造函数的原型对象** ，原型链继承是通过 _proto_ 这个原型指针来完成的\n\n### 原型链图\n\n褐色的线为原型链 ![img caption](/images/prototype/2.png)\n\n够造函数、原型和实例的关系：\n\n1.  每个构造函数都有一个原型对象（x.prototype)\n2.  原型对象都包含一个指向构造函数的指针（x.prototype.constructor === x)\n3.  实例都包含一个指向原型对象的内部指针（a._proto_ ）\n\n** 所有函数的默认原型都是 Object 的实例**\n\n### 继承\n\n常用继承：组合继承，寄生组合继承\n\njavascript 对象具有 “ 自有属性 ” 也有一些属性是从原型对象继承来的。\n有两种继承方式：\n\n1. 寄生函数继承（构造函数继承 (call/apply)），利用 call 继承父类上的属性，用子类的原型等于父类实例去继承父类的方法。缺点：调用父类两次，造成性能浪费。\n2. 原型链继承 ( 挂载到 prototype 属性上面 )。\n\n```javascript\nfunction Parent(name) {\n  this.name = name\n}\n\nParent.prototype.say = function () {\n  console.log(this.name)\n}\n\nfunction Child(name) {\n  Parent.call(this, name)\n}\nChild.prototype = new Parent()\nlet c = new Child('Y')\nc.say()\n```\n\n寄生函数继承：利用 call 继承父类上的属性，用一个干净的函数的原型去等于父类原型，再用子类的原型的等于干净函数的实例。\n\n## 事件委托\n\n利用事件委托技术能让你对特定的每个节点添加事件监听器；相反，事件监听器是被添加到他们的父元素上的。事件监听器会分析从子元素冒泡上来的事件，找到是哪一个子元素的事件。\n\n- event.target 返回触发事件的元素\n- event.currentTarget 返回绑定事件的元素\n\n```html\n<ul id=\"parent-list\">\n  <li id=\"post-1\">Item 1</li>\n  <li id=\"post-2\">Item 2</li>\n  <li id=\"post-3\">Item 3</li>\n  <li id=\"post-4\">Item 4</li>\n  <li id=\"post-5\">Item 5</li>\n  <li id=\"post-6\">Item 6</li>\n</ul>\n<script>\n  document\n    .getElementById('parent-list')\n    .addEventListener('click', function (e) {\n      // e.target是被点击的元素!\n      // 如果被点击的是li元素\n      if (e.target && e.target.nodeName == 'LI') {\n        // 找到目标，输出ID!\n        console.log('List item ', e.target.id.replace('post-'), ' was clicked!')\n      }\n\n      $('li').click(function () {\n        $(this).css('background', '#D4DFE6')\n      })\n\n      // jQuery的delegate写法\n      $('#wrap').delegate('li', 'click', function (ev) {\n        // this 指向委托的对象 li\n        $(this).css('background', '#D4DFE6')\n\n        // 找到父级 ul#wrap\n        $(ev.delegateTarget).css('border', '2px solid #f00')\n      })\n    })\n</script>\n```\n\n## `getComputedStyle()`\n\n`getComputedStyle`是一个可以获取当前元素所有最终使用 css 属性值。返回一个 css 样式声明对象([object CSSStyleDeclaration])，只读。之前偶尔有一次要更改伪类元素 ::after 的样式\n\n```javascript\nvar dom = document.getElementById('test'),\n  style = window.getComputedStyle(dom, ':after')\n```\n\n### `getComputedStyle`与`style`的区别\n\n- `getComputedStyle`方法是只读的，只能获取样式，不能设置；而`element.style`能读能写。\n- 获取对象范围\n  `getComputedStyle`方法获取的是最终应用在元素上的所有 css 属性对象；而`element.style`只能获取元素`style`中的 css 样式。因此对于一个光秃秃的元素`<p>`，`getComputedStyle`方法返回对象中的 length 属性值就有 190+,而`element.style`就是 0。\n\n### `getPropertyValue`方法\n\n`getPropertyValue`方法可以获取 CSS 样式申明对象上的属性值（直接属性名称），例如：\n\n```javascript\nwindow.getComputedStyle(element, null).getPropertyValue('float')\n```\n\n## `this`\n\n\\*\\* `this`要在执行的时候才能确定值，定义时是无法确认，因为 js 不是编译型语言而是解释型语言\n\n说明 this 几种不同的使用方式\n\n- 作为构造函数执行\n- 作为对象属性执行\n- 作为普通函数执行\n- `call`,`applay`,`bind`\n\n```javascript\nvar a = {\n  name: A,\n  fn: function () {\n    console.log(this.name)\n  },\n}\na.fn() //this===a\na.fn({ name: 'b' }) //this==={name:'b'}\nvar fn1 = a.fn\nfn1() //this===window\n```\n\n---\n\n## 深浅拷贝\n\n### 浅拷贝\n\n浅拷贝之解决了第一层的问题，如果接下去的值中还有对象的话，那么就又会出现值引用，改变值会互相影响\n\n- 首先可以通过`Object.assign`来解决这个问题。\n\n  ```javascript\n  let a = {\n    age: 1,\n  }\n  let b = Object.assign({}, a)\n  a.age = 2\n  console.log(b.age)\n  ```\n\n- 当然也可以通过展开运算符（···）来解决\n  ```javascript\n  let a = {\n    age: 1,\n  }\n  let b = { ...a }\n  a.age = 2\n  console.log(b.age) //1\n  ```\n\n### 深拷贝\n\n这个问题可以通过`JSON.parse(JSON.stringfy(object))`来解决。\n\n但是该方法也是有局限性的：\n\n- 会忽略 `undefined`\n- 会忽略`symbol`\n- 不能序列化函数\n- 不能解决循环引用对象\n\n```javascript\nlet obj = {\n  a: 1,\n  b: {\n    c: 2,\n    d: 3,\n  },\n}\nobj.c = obj.b\nobj.e = obj.a\nobj.b.c = obj.c\nobj.b.e = obj.b.c\nlet newObj = JSON.parse(JSON.stringfy(obj))\nconsole.log(newObj) //会报错\n```\n\n```javascript\nlet a = {\n  age: undefined,\n  sex: Symbol('male'),\n  jobs: function () {},\n  name: 'yck',\n}\n\nlet b = JSON.parse(JSON.stringfy(a))\nconsole.log(b) //{name:'yck'}\n```\n\n## `Map`、`FlatMap`、`Reduce`\n\n`Map`作用是生成一个新数组，遍历原数组，将每一个元素拿出来做一些变换然后`append`到新的数组中。\n\n```javascript\n;[1, 2, 3].map((v) => v + 1) //=>[2,3,4]\n```\n\n`Map`有三个参数，分别是当前索引元素，索引，原数组\n\n```javascript\n;['1', '2', '3'].map(parseInt)\n//  parseInt('1', 0) -> 1\n//  parseInt('2', 1) -> NaN\n//  parseInt('3', 2) -> NaN\n```\n\n## NaN\n\n```javascript\nNaN !== NaN //true\nNaN.valueOf() //NaN\nNaN.toString() //'NaN\nNaN < 3 //false\nNaN >= 3 //false\nNaN < NaN //false\nNaN >= NaN //false\n```\n\n## 标签语句\n\n相当于定位符，用于跳转到程序的任意位置。标签通常与 break 语句和 continue 语句配合使用，跳出特定的循环。\n\n```javascript\ntop: for (var i = 0; i < 3; i++) {\n  for (var j = 0; j < 3; j++) {\n    if (i === 1 && j === 1) break top\n    console.log('i=' + i + ', j=' + j)\n  }\n}\n```\n\nbreak 命令后加上 top 标签，满足条件时，直接跳出双层循环。如果 break 语句后面不适用标签，则纸条出内层循环，进入下一次外层循环。\n\ncontinue 语句也可以配合使用\n\n```javascript\ntop: for (var i = 0; i < 3; i++) {\n  for (var j = 0; j < 3; j++) {\n    if (i === 1 && j === 1) continue top\n    console.log('i=' + i + ', j=' + j)\n  }\n}\n// i=0, j=0\n// i=0, j=1\n// i=0, j=2\n// i=1, j=0\n// i=2, j=0\n// i=2, j=1\n// i=2, j=2\n```\n\n满足条件时，会跳过当前循环，直接进入到下一论外层循环。如果 continue 语句后面不使用标签，则只能进入下一轮内层循环。\n\n## with\n\nwith 语句用途是将代码作用于设置为特定对象，使用例子是：\n\n```javascript\nwith(location{\n  let qs = search.substring(1)\n  let hostName = hostname\n  let url = href\n})\n```\n\n使用 with 代替频繁使用的 location 对象，这意味着在这个语句内部，每个变量首先会被认为是一个局部变量，如果没有找到该局部变量，则会搜索 location 对象，看它是否是有一个同名属性。如果有，则该苏醒会被求值成 location 对象属性\n\n由于 with 语句影响性能且难以调试其中代码,通常不推荐在代码中使用\n\n## 原始数据类型\n\nECMScript 变量可以包含两种不同类型的数据：原始值和引用值。原始值就是最简单的数据，引用值是由多个值构成的对象。\n\n**6 种引用值**：Undefined、Null、Boolean、Number、String 和 Symbol，typeOf 操作符最适合用来判断是否是原始类型，但是如果值是对象或是 null，那么 typeof 返回 Object\n\n保存原始值的变量是**按值**访问的，因为我们操作的就是存储在变量中的实际值\n\n注意，原始类型的初始化可以只使用原始字面量形式。如果使用的是 new 关键字，则 JavaScript 会创建一个 Object 类型的实例，但其行为类似原始值。下面来看看这两种初始化方式的差异：\n\n```javascript\nlet name1 = \"Nicholas\";\nlet name2 = new String(\"Matt\");\nname1.age = 27;\nname2.age = 26;\nconsole.log(name1.age) //undefined\nconsole.log(name2.age) // 26\nconsole.log(typeOf name1) //string\nconsole.log(typeOf name2) //object\n```\n\n## 引用值\n\n一个值得深思的例子\n\n```javascript\nfunction setName(obj) {\n  obj.name = 'Nicholas'\n  obj = new Object()\n  obj.name = 'Greg'\n  console.log(obj) //Greg\n}\nlet person = new Object()\nsetName(person)\nconsole.log(person.name) //“Nicholas\"\n```\n\n如果 person 是按饮用类型传递的，那么 person 应该自动将指针改为指向 name 为”Greg\"的对象。可是，当我们再次访问 person.name 时，它的值是“Nicholas\",这表明函数中参数的，原始的引用类型仍然没有改变。\n\n当 obj 在函数内部被重写时，它变成了一个指向本地对象的指针。而那个本地对象在函数执行结束时就被销毁\n","source":"_posts/JS基础-ES5.md","raw":"---\ntitle: JS基础(ES5)\ndate: 2018-01-18 10:12:34\ncategories: JavaScript\n---\n\n感觉自己的 ES5 掌握的比较杂乱，在此整理一下自己的思路，总结、归纳原生 JS 的知识。\n\n<!--more-->\n\n## 内置类型\n\nJS 中有 7 种内置类型，7 种内置类型又分为两大类型：基本类型和对象（Object）\n基础基本类型有 6 种：`null`,`undefined`,`boolean`,`number`,`string`,`symbol`。\n\n## `Typeof`\n\n`typeof` 对于基本类型。除了`null`都可以显示正确的类型\n\n```javascript\ntypeof 1 // 'number'\ntypeof '1' // 'string'\ntypeof undefined // 'undefined'\ntypeof true // 'boolean'\ntypeof Symbol() // 'symbol'\ntypeof b // b 没有声明，但是还会显示 undefined\n\n//typeof 对于对象，除了函数都会显示 object\n\ntypeof [] // 'object'\ntypeof {} // 'object'\ntypeof console.log // 'function'\n\ntypeof null // 'object'\n```\n\nPS：为什么会出现这种情况呢？因为在 JS 的最初版本中，使用的是 32 位系统，为了性能考虑使用低位存储了变量的类型信息，000 开头代表是对象，然而 null 表示为全零，所以将它错误的判断为 object 。虽然现在的内部类型判断代码已经改变了，但是对于这个 Bug 却是一直流传下来\n\n```javascript\nlet a\n// 我们也可以这样判断 undefined\na === undefined\n// 但是 undefined 不是保留字，能够在低版本浏览器被赋值\nlet undefined = 1\n// 这样判断就会出错\n// 所以可以用下面的方式来判断，并且代码量更少\n// 因为 void 后面随便跟上一个组成表达式\n// 返回就是 undefined\na === void 0\n```\n\n## 对象\n\n创建对象可以通过对象直接量，关键字 new 和 object.creat() 函数来创建对象。每一个对象都有与知相关的原型，类和可扩展性。可分为普通对象和函数对象。凡是通过 new function() 创建的都是函数对象。其他都是普通对象。\n\n### 对象直接量\n\n对象直接量是类似于 var a = {x:0,y:0} 的映射表。对象直接量是一个表达式，这个表达式的每次运算都创建并初始化一个新的对象。每次计算对象直接量的时候。也会计算它的每个属性值，**也就是说在一个循环体内使用了对象直接量，他将会创建很对新对象，并且每次创建的对象的属性值也有可能不同。**\n\n### 通过 new 创建对象\n\n1. 新生成了一个对象\n2. 链接到原型\n3. 绑定 this\n4. 返回新对象\n\n在调用`new`的过程中会发生以上四件事情。\n\nvar obj=new MyClass(); new 运算符创建并初始化一个**新对象** 用 new 调用时，this 会指向空的对象，并且这个对象的原型指向 MyClass.prototype\n\n#### new 的过程以及是实现 new\n\n```javascript\nlet obj = {}\nlet con = [].shift.call(arguments)\n```\n\n\n## 原型\n\n原型：每一个对象都从原型继承属性。**每个对象都有 _proto_ 属性 , 每个对象都有原对象，但只有函数对象才有 prototype 属性**, 但是除却 function.prototype,function.prototype 也是函数对象，但是没有 prototype。可以使用 p.isPrototype(o) 来检查 p 是否是 o 的原型。\n\n### 原型模式\n\n原型模式是 js 对继承的一种实现\n\n- prototype：构造函数中的属性，指向该构造函数的原型对象。\n\n- constructor ：原型对象中的属性，指向该原型对象的构造函数\n\n- _proto_：实例中的属性，指向 new 这个实例的构造函数的原型对象，对象可以通过`_proto_`来寻找不属于该对象的属性，`_proto_`将对象连接起来组成原型链。所有引用类型的_proto_属性值均指向它的构造函数的prototype的属性值。当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去他的_proto_（即它的构造函数的prototype）中寻找\n\n### prototype 属性的引入\n\n每一个 new 出的实例都有自己的属性和方法的副本，无法做到属性、方法共享，因此 Brendan Eich 决定为构造函数设置一个 prototype 属性。\n\n这个对象包含一个对象（以下简称 “prototype 对象 ”），所有实例对象需要共享的属性及方法，都放在这个对象里面，那些不需要共享的属性及方法，就放在构造函数里面。\n\n实例对象一旦创建，就自动引用 prototype 对象的属性和方法。也就是说。实例对象的属性和方法，分成两种，一种是本地的，一种是引用的。\n\n```javascript\nfunction DOG(name) {\n  this.name = name\n}\nDOG.prototype = { species: '犬科' }\n\nvar dogA = new DOG('大毛')\nvar dogB = new DOG('二毛')\n\nalert(dogA.species)\n// 其实是通过dogA._proto_.species 来访问DOG.prototype.species\nalert(dogB.species)\n// 犬科\nDOG.prototype\n//{species:''犬科',constructor:fDOG(name),_proto_:Object}\nDOG.prototype.constructor === DOG\n//true\n```\n\n现在，species 属性放在 prototype 对象里，是两个实例对象共享的。只要修改了 prototype 对象，就会同时影响到两个实例对象。\n\n![network](/images/prototype/1.png)\n\n以上就是一个简单的 DOG 类完整的原型链。\n\n#### 原型链的作用：对象属性的访问修改和删除。\n\n- 访问。优先在对象本身查找，没有则顺着原型链向上查找\n- 修改。只能修改跟删除自身属性，不会影响到原型链上的其他对象。\n\n### _proto_ （原型指针）\n\n```javascript\nfunction Person(name, age, job) {\n  this.name = name\n  this.age = age\n  this.job = job\n  this.sayName = function () {\n    alert(this.name)\n  }\n}\nvar person1 = new Person('Zaxlct', 28, 'Software Engineer')\nvar person2 = new Person('Mick', 23, 'Doctor')\nperson1.__proto__ == Person.prototype\n//person1.__proto__  = person1.constructor.prototype , person1.constructor = Person\nPerson.__proto__\n//Person.constructor = Function => Person.__proto__  = Function.prototype\nPerson.prototype.__proto__\n// Person.prototype 是一个普通对象（原型对象），普通函数的构造函数是Object => Person.prototype.__proto__ =  Object.prototype\nObject.__proto__\n//普通对象 同上\nObject.prototype.__proto__\n//对象也有proto属性，但它比较特殊，为null,因为null处于原型链的顶端\n```\n\nJS 在创建对象（不论是普通对象还是函数对象）的时候，都有一个叫做 _proto_ 的内置属性，**用于指向创建它的构造函数的原型对象** ，原型链继承是通过 _proto_ 这个原型指针来完成的\n\n### 原型链图\n\n褐色的线为原型链 ![img caption](/images/prototype/2.png)\n\n够造函数、原型和实例的关系：\n\n1.  每个构造函数都有一个原型对象（x.prototype)\n2.  原型对象都包含一个指向构造函数的指针（x.prototype.constructor === x)\n3.  实例都包含一个指向原型对象的内部指针（a._proto_ ）\n\n** 所有函数的默认原型都是 Object 的实例**\n\n### 继承\n\n常用继承：组合继承，寄生组合继承\n\njavascript 对象具有 “ 自有属性 ” 也有一些属性是从原型对象继承来的。\n有两种继承方式：\n\n1. 寄生函数继承（构造函数继承 (call/apply)），利用 call 继承父类上的属性，用子类的原型等于父类实例去继承父类的方法。缺点：调用父类两次，造成性能浪费。\n2. 原型链继承 ( 挂载到 prototype 属性上面 )。\n\n```javascript\nfunction Parent(name) {\n  this.name = name\n}\n\nParent.prototype.say = function () {\n  console.log(this.name)\n}\n\nfunction Child(name) {\n  Parent.call(this, name)\n}\nChild.prototype = new Parent()\nlet c = new Child('Y')\nc.say()\n```\n\n寄生函数继承：利用 call 继承父类上的属性，用一个干净的函数的原型去等于父类原型，再用子类的原型的等于干净函数的实例。\n\n## 事件委托\n\n利用事件委托技术能让你对特定的每个节点添加事件监听器；相反，事件监听器是被添加到他们的父元素上的。事件监听器会分析从子元素冒泡上来的事件，找到是哪一个子元素的事件。\n\n- event.target 返回触发事件的元素\n- event.currentTarget 返回绑定事件的元素\n\n```html\n<ul id=\"parent-list\">\n  <li id=\"post-1\">Item 1</li>\n  <li id=\"post-2\">Item 2</li>\n  <li id=\"post-3\">Item 3</li>\n  <li id=\"post-4\">Item 4</li>\n  <li id=\"post-5\">Item 5</li>\n  <li id=\"post-6\">Item 6</li>\n</ul>\n<script>\n  document\n    .getElementById('parent-list')\n    .addEventListener('click', function (e) {\n      // e.target是被点击的元素!\n      // 如果被点击的是li元素\n      if (e.target && e.target.nodeName == 'LI') {\n        // 找到目标，输出ID!\n        console.log('List item ', e.target.id.replace('post-'), ' was clicked!')\n      }\n\n      $('li').click(function () {\n        $(this).css('background', '#D4DFE6')\n      })\n\n      // jQuery的delegate写法\n      $('#wrap').delegate('li', 'click', function (ev) {\n        // this 指向委托的对象 li\n        $(this).css('background', '#D4DFE6')\n\n        // 找到父级 ul#wrap\n        $(ev.delegateTarget).css('border', '2px solid #f00')\n      })\n    })\n</script>\n```\n\n## `getComputedStyle()`\n\n`getComputedStyle`是一个可以获取当前元素所有最终使用 css 属性值。返回一个 css 样式声明对象([object CSSStyleDeclaration])，只读。之前偶尔有一次要更改伪类元素 ::after 的样式\n\n```javascript\nvar dom = document.getElementById('test'),\n  style = window.getComputedStyle(dom, ':after')\n```\n\n### `getComputedStyle`与`style`的区别\n\n- `getComputedStyle`方法是只读的，只能获取样式，不能设置；而`element.style`能读能写。\n- 获取对象范围\n  `getComputedStyle`方法获取的是最终应用在元素上的所有 css 属性对象；而`element.style`只能获取元素`style`中的 css 样式。因此对于一个光秃秃的元素`<p>`，`getComputedStyle`方法返回对象中的 length 属性值就有 190+,而`element.style`就是 0。\n\n### `getPropertyValue`方法\n\n`getPropertyValue`方法可以获取 CSS 样式申明对象上的属性值（直接属性名称），例如：\n\n```javascript\nwindow.getComputedStyle(element, null).getPropertyValue('float')\n```\n\n## `this`\n\n\\*\\* `this`要在执行的时候才能确定值，定义时是无法确认，因为 js 不是编译型语言而是解释型语言\n\n说明 this 几种不同的使用方式\n\n- 作为构造函数执行\n- 作为对象属性执行\n- 作为普通函数执行\n- `call`,`applay`,`bind`\n\n```javascript\nvar a = {\n  name: A,\n  fn: function () {\n    console.log(this.name)\n  },\n}\na.fn() //this===a\na.fn({ name: 'b' }) //this==={name:'b'}\nvar fn1 = a.fn\nfn1() //this===window\n```\n\n---\n\n## 深浅拷贝\n\n### 浅拷贝\n\n浅拷贝之解决了第一层的问题，如果接下去的值中还有对象的话，那么就又会出现值引用，改变值会互相影响\n\n- 首先可以通过`Object.assign`来解决这个问题。\n\n  ```javascript\n  let a = {\n    age: 1,\n  }\n  let b = Object.assign({}, a)\n  a.age = 2\n  console.log(b.age)\n  ```\n\n- 当然也可以通过展开运算符（···）来解决\n  ```javascript\n  let a = {\n    age: 1,\n  }\n  let b = { ...a }\n  a.age = 2\n  console.log(b.age) //1\n  ```\n\n### 深拷贝\n\n这个问题可以通过`JSON.parse(JSON.stringfy(object))`来解决。\n\n但是该方法也是有局限性的：\n\n- 会忽略 `undefined`\n- 会忽略`symbol`\n- 不能序列化函数\n- 不能解决循环引用对象\n\n```javascript\nlet obj = {\n  a: 1,\n  b: {\n    c: 2,\n    d: 3,\n  },\n}\nobj.c = obj.b\nobj.e = obj.a\nobj.b.c = obj.c\nobj.b.e = obj.b.c\nlet newObj = JSON.parse(JSON.stringfy(obj))\nconsole.log(newObj) //会报错\n```\n\n```javascript\nlet a = {\n  age: undefined,\n  sex: Symbol('male'),\n  jobs: function () {},\n  name: 'yck',\n}\n\nlet b = JSON.parse(JSON.stringfy(a))\nconsole.log(b) //{name:'yck'}\n```\n\n## `Map`、`FlatMap`、`Reduce`\n\n`Map`作用是生成一个新数组，遍历原数组，将每一个元素拿出来做一些变换然后`append`到新的数组中。\n\n```javascript\n;[1, 2, 3].map((v) => v + 1) //=>[2,3,4]\n```\n\n`Map`有三个参数，分别是当前索引元素，索引，原数组\n\n```javascript\n;['1', '2', '3'].map(parseInt)\n//  parseInt('1', 0) -> 1\n//  parseInt('2', 1) -> NaN\n//  parseInt('3', 2) -> NaN\n```\n\n## NaN\n\n```javascript\nNaN !== NaN //true\nNaN.valueOf() //NaN\nNaN.toString() //'NaN\nNaN < 3 //false\nNaN >= 3 //false\nNaN < NaN //false\nNaN >= NaN //false\n```\n\n## 标签语句\n\n相当于定位符，用于跳转到程序的任意位置。标签通常与 break 语句和 continue 语句配合使用，跳出特定的循环。\n\n```javascript\ntop: for (var i = 0; i < 3; i++) {\n  for (var j = 0; j < 3; j++) {\n    if (i === 1 && j === 1) break top\n    console.log('i=' + i + ', j=' + j)\n  }\n}\n```\n\nbreak 命令后加上 top 标签，满足条件时，直接跳出双层循环。如果 break 语句后面不适用标签，则纸条出内层循环，进入下一次外层循环。\n\ncontinue 语句也可以配合使用\n\n```javascript\ntop: for (var i = 0; i < 3; i++) {\n  for (var j = 0; j < 3; j++) {\n    if (i === 1 && j === 1) continue top\n    console.log('i=' + i + ', j=' + j)\n  }\n}\n// i=0, j=0\n// i=0, j=1\n// i=0, j=2\n// i=1, j=0\n// i=2, j=0\n// i=2, j=1\n// i=2, j=2\n```\n\n满足条件时，会跳过当前循环，直接进入到下一论外层循环。如果 continue 语句后面不使用标签，则只能进入下一轮内层循环。\n\n## with\n\nwith 语句用途是将代码作用于设置为特定对象，使用例子是：\n\n```javascript\nwith(location{\n  let qs = search.substring(1)\n  let hostName = hostname\n  let url = href\n})\n```\n\n使用 with 代替频繁使用的 location 对象，这意味着在这个语句内部，每个变量首先会被认为是一个局部变量，如果没有找到该局部变量，则会搜索 location 对象，看它是否是有一个同名属性。如果有，则该苏醒会被求值成 location 对象属性\n\n由于 with 语句影响性能且难以调试其中代码,通常不推荐在代码中使用\n\n## 原始数据类型\n\nECMScript 变量可以包含两种不同类型的数据：原始值和引用值。原始值就是最简单的数据，引用值是由多个值构成的对象。\n\n**6 种引用值**：Undefined、Null、Boolean、Number、String 和 Symbol，typeOf 操作符最适合用来判断是否是原始类型，但是如果值是对象或是 null，那么 typeof 返回 Object\n\n保存原始值的变量是**按值**访问的，因为我们操作的就是存储在变量中的实际值\n\n注意，原始类型的初始化可以只使用原始字面量形式。如果使用的是 new 关键字，则 JavaScript 会创建一个 Object 类型的实例，但其行为类似原始值。下面来看看这两种初始化方式的差异：\n\n```javascript\nlet name1 = \"Nicholas\";\nlet name2 = new String(\"Matt\");\nname1.age = 27;\nname2.age = 26;\nconsole.log(name1.age) //undefined\nconsole.log(name2.age) // 26\nconsole.log(typeOf name1) //string\nconsole.log(typeOf name2) //object\n```\n\n## 引用值\n\n一个值得深思的例子\n\n```javascript\nfunction setName(obj) {\n  obj.name = 'Nicholas'\n  obj = new Object()\n  obj.name = 'Greg'\n  console.log(obj) //Greg\n}\nlet person = new Object()\nsetName(person)\nconsole.log(person.name) //“Nicholas\"\n```\n\n如果 person 是按饮用类型传递的，那么 person 应该自动将指针改为指向 name 为”Greg\"的对象。可是，当我们再次访问 person.name 时，它的值是“Nicholas\",这表明函数中参数的，原始的引用类型仍然没有改变。\n\n当 obj 在函数内部被重写时，它变成了一个指向本地对象的指针。而那个本地对象在函数执行结束时就被销毁\n","slug":"JS基础-ES5","published":1,"updated":"2021-03-30T03:36:09.975Z","_id":"ckmejaerk000axcvr3bfb1w8y","comments":1,"layout":"post","photos":[],"link":"","content":"<p>感觉自己的 ES5 掌握的比较杂乱，在此整理一下自己的思路，总结、归纳原生 JS 的知识。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"内置类型\"><a href=\"#内置类型\" class=\"headerlink\" title=\"内置类型\"></a>内置类型</h2><p>JS 中有 7 种内置类型，7 种内置类型又分为两大类型：基本类型和对象（Object）<br>基础基本类型有 6 种：<code>null</code>,<code>undefined</code>,<code>boolean</code>,<code>number</code>,<code>string</code>,<code>symbol</code>。</p>\n<h2 id=\"Typeof\"><a href=\"#Typeof\" class=\"headerlink\" title=\"Typeof\"></a><code>Typeof</code></h2><p><code>typeof</code> 对于基本类型。除了<code>null</code>都可以显示正确的类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"number\">1</span> <span class=\"comment\">// &#x27;number&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"string\">&#x27;1&#x27;</span> <span class=\"comment\">// &#x27;string&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span> <span class=\"comment\">// &#x27;undefined&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">true</span> <span class=\"comment\">// &#x27;boolean&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"built_in\">Symbol</span>() <span class=\"comment\">// &#x27;symbol&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> b <span class=\"comment\">// b 没有声明，但是还会显示 undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//typeof 对于对象，除了函数都会显示 object</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> [] <span class=\"comment\">// &#x27;object&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> &#123;&#125; <span class=\"comment\">// &#x27;object&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"built_in\">console</span>.log <span class=\"comment\">// &#x27;function&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">null</span> <span class=\"comment\">// &#x27;object&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>PS：为什么会出现这种情况呢？因为在 JS 的最初版本中，使用的是 32 位系统，为了性能考虑使用低位存储了变量的类型信息，000 开头代表是对象，然而 null 表示为全零，所以将它错误的判断为 object 。虽然现在的内部类型判断代码已经改变了，但是对于这个 Bug 却是一直流传下来</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a</span><br><span class=\"line\"><span class=\"comment\">// 我们也可以这样判断 undefined</span></span><br><span class=\"line\">a === <span class=\"literal\">undefined</span></span><br><span class=\"line\"><span class=\"comment\">// 但是 undefined 不是保留字，能够在低版本浏览器被赋值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"literal\">undefined</span> = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">// 这样判断就会出错</span></span><br><span class=\"line\"><span class=\"comment\">// 所以可以用下面的方式来判断，并且代码量更少</span></span><br><span class=\"line\"><span class=\"comment\">// 因为 void 后面随便跟上一个组成表达式</span></span><br><span class=\"line\"><span class=\"comment\">// 返回就是 undefined</span></span><br><span class=\"line\">a === <span class=\"keyword\">void</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><p>创建对象可以通过对象直接量，关键字 new 和 object.creat() 函数来创建对象。每一个对象都有与知相关的原型，类和可扩展性。可分为普通对象和函数对象。凡是通过 new function() 创建的都是函数对象。其他都是普通对象。</p>\n<h3 id=\"对象直接量\"><a href=\"#对象直接量\" class=\"headerlink\" title=\"对象直接量\"></a>对象直接量</h3><p>对象直接量是类似于 var a = {x:0,y:0} 的映射表。对象直接量是一个表达式，这个表达式的每次运算都创建并初始化一个新的对象。每次计算对象直接量的时候。也会计算它的每个属性值，<strong>也就是说在一个循环体内使用了对象直接量，他将会创建很对新对象，并且每次创建的对象的属性值也有可能不同。</strong></p>\n<h3 id=\"通过-new-创建对象\"><a href=\"#通过-new-创建对象\" class=\"headerlink\" title=\"通过 new 创建对象\"></a>通过 new 创建对象</h3><ol>\n<li>新生成了一个对象</li>\n<li>链接到原型</li>\n<li>绑定 this</li>\n<li>返回新对象</li>\n</ol>\n<p>在调用<code>new</code>的过程中会发生以上四件事情。</p>\n<p>var obj=new MyClass(); new 运算符创建并初始化一个<strong>新对象</strong> 用 new 调用时，this 会指向空的对象，并且这个对象的原型指向 MyClass.prototype</p>\n<h4 id=\"new-的过程以及是实现-new\"><a href=\"#new-的过程以及是实现-new\" class=\"headerlink\" title=\"new 的过程以及是实现 new\"></a>new 的过程以及是实现 new</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> con = [].shift.call(<span class=\"built_in\">arguments</span>)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h2><p>原型：每一个对象都从原型继承属性。<strong>每个对象都有 <em>proto</em> 属性 , 每个对象都有原对象，但只有函数对象才有 prototype 属性</strong>, 但是除却 function.prototype,function.prototype 也是函数对象，但是没有 prototype。可以使用 p.isPrototype(o) 来检查 p 是否是 o 的原型。</p>\n<h3 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h3><p>原型模式是 js 对继承的一种实现</p>\n<ul>\n<li><p>prototype：构造函数中的属性，指向该构造函数的原型对象。</p>\n</li>\n<li><p>constructor ：原型对象中的属性，指向该原型对象的构造函数</p>\n</li>\n<li><p>_proto_：实例中的属性，指向 new 这个实例的构造函数的原型对象，对象可以通过<code>_proto_</code>来寻找不属于该对象的属性，<code>_proto_</code>将对象连接起来组成原型链。所有引用类型的_proto_属性值均指向它的构造函数的prototype的属性值。当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去他的_proto_（即它的构造函数的prototype）中寻找</p>\n</li>\n</ul>\n<h3 id=\"prototype-属性的引入\"><a href=\"#prototype-属性的引入\" class=\"headerlink\" title=\"prototype 属性的引入\"></a>prototype 属性的引入</h3><p>每一个 new 出的实例都有自己的属性和方法的副本，无法做到属性、方法共享，因此 Brendan Eich 决定为构造函数设置一个 prototype 属性。</p>\n<p>这个对象包含一个对象（以下简称 “prototype 对象 ”），所有实例对象需要共享的属性及方法，都放在这个对象里面，那些不需要共享的属性及方法，就放在构造函数里面。</p>\n<p>实例对象一旦创建，就自动引用 prototype 对象的属性和方法。也就是说。实例对象的属性和方法，分成两种，一种是本地的，一种是引用的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">DOG</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">DOG.prototype = &#123; <span class=\"attr\">species</span>: <span class=\"string\">&#x27;犬科&#x27;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> dogA = <span class=\"keyword\">new</span> DOG(<span class=\"string\">&#x27;大毛&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> dogB = <span class=\"keyword\">new</span> DOG(<span class=\"string\">&#x27;二毛&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">alert(dogA.species)</span><br><span class=\"line\"><span class=\"comment\">// 其实是通过dogA._proto_.species 来访问DOG.prototype.species</span></span><br><span class=\"line\">alert(dogB.species)</span><br><span class=\"line\"><span class=\"comment\">// 犬科</span></span><br><span class=\"line\">DOG.prototype</span><br><span class=\"line\"><span class=\"comment\">//&#123;species:&#x27;&#x27;犬科&#x27;,constructor:fDOG(name),_proto_:Object&#125;</span></span><br><span class=\"line\">DOG.prototype.constructor === DOG</span><br><span class=\"line\"><span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>现在，species 属性放在 prototype 对象里，是两个实例对象共享的。只要修改了 prototype 对象，就会同时影响到两个实例对象。</p>\n<p><img src=\"/images/prototype/1.png\" alt=\"network\"></p>\n<p>以上就是一个简单的 DOG 类完整的原型链。</p>\n<h4 id=\"原型链的作用：对象属性的访问修改和删除。\"><a href=\"#原型链的作用：对象属性的访问修改和删除。\" class=\"headerlink\" title=\"原型链的作用：对象属性的访问修改和删除。\"></a>原型链的作用：对象属性的访问修改和删除。</h4><ul>\n<li>访问。优先在对象本身查找，没有则顺着原型链向上查找</li>\n<li>修改。只能修改跟删除自身属性，不会影响到原型链上的其他对象。</li>\n</ul>\n<h3 id=\"proto-（原型指针）\"><a href=\"#proto-（原型指针）\" class=\"headerlink\" title=\"proto （原型指针）\"></a><em>proto</em> （原型指针）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.job = job</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&#x27;Zaxlct&#x27;</span>, <span class=\"number\">28</span>, <span class=\"string\">&#x27;Software Engineer&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&#x27;Mick&#x27;</span>, <span class=\"number\">23</span>, <span class=\"string\">&#x27;Doctor&#x27;</span>)</span><br><span class=\"line\">person1.__proto__ == Person.prototype</span><br><span class=\"line\"><span class=\"comment\">//person1.__proto__  = person1.constructor.prototype , person1.constructor = Person</span></span><br><span class=\"line\">Person.__proto__</span><br><span class=\"line\"><span class=\"comment\">//Person.constructor = Function =&gt; Person.__proto__  = Function.prototype</span></span><br><span class=\"line\">Person.prototype.__proto__</span><br><span class=\"line\"><span class=\"comment\">// Person.prototype 是一个普通对象（原型对象），普通函数的构造函数是Object =&gt; Person.prototype.__proto__ =  Object.prototype</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.__proto__</span><br><span class=\"line\"><span class=\"comment\">//普通对象 同上</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.__proto__</span><br><span class=\"line\"><span class=\"comment\">//对象也有proto属性，但它比较特殊，为null,因为null处于原型链的顶端</span></span><br></pre></td></tr></table></figure>\n\n<p>JS 在创建对象（不论是普通对象还是函数对象）的时候，都有一个叫做 <em>proto</em> 的内置属性，<strong>用于指向创建它的构造函数的原型对象</strong> ，原型链继承是通过 <em>proto</em> 这个原型指针来完成的</p>\n<h3 id=\"原型链图\"><a href=\"#原型链图\" class=\"headerlink\" title=\"原型链图\"></a>原型链图</h3><p>褐色的线为原型链 <img src=\"/images/prototype/2.png\" alt=\"img caption\"></p>\n<p>够造函数、原型和实例的关系：</p>\n<ol>\n<li> 每个构造函数都有一个原型对象（x.prototype)</li>\n<li> 原型对象都包含一个指向构造函数的指针（x.prototype.constructor === x)</li>\n<li> 实例都包含一个指向原型对象的内部指针（a.<em>proto</em> ）</li>\n</ol>\n<p>** 所有函数的默认原型都是 Object 的实例**</p>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>常用继承：组合继承，寄生组合继承</p>\n<p>javascript 对象具有 “ 自有属性 ” 也有一些属性是从原型对象继承来的。<br>有两种继承方式：</p>\n<ol>\n<li>寄生函数继承（构造函数继承 (call/apply)），利用 call 继承父类上的属性，用子类的原型等于父类实例去继承父类的方法。缺点：调用父类两次，造成性能浪费。</li>\n<li>原型链继承 ( 挂载到 prototype 属性上面 )。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Parent.prototype.say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  Parent.call(<span class=\"built_in\">this</span>, name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Child.prototype = <span class=\"keyword\">new</span> Parent()</span><br><span class=\"line\"><span class=\"keyword\">let</span> c = <span class=\"keyword\">new</span> Child(<span class=\"string\">&#x27;Y&#x27;</span>)</span><br><span class=\"line\">c.say()</span><br></pre></td></tr></table></figure>\n\n<p>寄生函数继承：利用 call 继承父类上的属性，用一个干净的函数的原型去等于父类原型，再用子类的原型的等于干净函数的实例。</p>\n<h2 id=\"事件委托\"><a href=\"#事件委托\" class=\"headerlink\" title=\"事件委托\"></a>事件委托</h2><p>利用事件委托技术能让你对特定的每个节点添加事件监听器；相反，事件监听器是被添加到他们的父元素上的。事件监听器会分析从子元素冒泡上来的事件，找到是哪一个子元素的事件。</p>\n<ul>\n<li>event.target 返回触发事件的元素</li>\n<li>event.currentTarget 返回绑定事件的元素</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;parent-list&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;post-1&quot;</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;post-2&quot;</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;post-3&quot;</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;post-4&quot;</span>&gt;</span>Item 4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;post-5&quot;</span>&gt;</span>Item 5<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;post-6&quot;</span>&gt;</span>Item 6<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">document</span></span></span><br><span class=\"line\"><span class=\"javascript\">    .getElementById(<span class=\"string\">&#x27;parent-list&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    .addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// e.target是被点击的元素!</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 如果被点击的是li元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">if</span> (e.target &amp;&amp; e.target.nodeName == <span class=\"string\">&#x27;LI&#x27;</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 找到目标，输出ID!</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;List item &#x27;</span>, e.target.id.replace(<span class=\"string\">&#x27;post-&#x27;</span>), <span class=\"string\">&#x27; was clicked!&#x27;</span>)</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">      $(<span class=\"string\">&#x27;li&#x27;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        $(<span class=\"built_in\">this</span>).css(<span class=\"string\">&#x27;background&#x27;</span>, <span class=\"string\">&#x27;#D4DFE6&#x27;</span>)</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// jQuery的delegate写法</span></span></span><br><span class=\"line\"><span class=\"javascript\">      $(<span class=\"string\">&#x27;#wrap&#x27;</span>).delegate(<span class=\"string\">&#x27;li&#x27;</span>, <span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ev</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// this 指向委托的对象 li</span></span></span><br><span class=\"line\"><span class=\"javascript\">        $(<span class=\"built_in\">this</span>).css(<span class=\"string\">&#x27;background&#x27;</span>, <span class=\"string\">&#x27;#D4DFE6&#x27;</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 找到父级 ul#wrap</span></span></span><br><span class=\"line\"><span class=\"javascript\">        $(ev.delegateTarget).css(<span class=\"string\">&#x27;border&#x27;</span>, <span class=\"string\">&#x27;2px solid #f00&#x27;</span>)</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"getComputedStyle\"><a href=\"#getComputedStyle\" class=\"headerlink\" title=\"getComputedStyle()\"></a><code>getComputedStyle()</code></h2><p><code>getComputedStyle</code>是一个可以获取当前元素所有最终使用 css 属性值。返回一个 css 样式声明对象([object CSSStyleDeclaration])，只读。之前偶尔有一次要更改伪类元素 ::after 的样式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> dom = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;test&#x27;</span>),</span><br><span class=\"line\">  style = <span class=\"built_in\">window</span>.getComputedStyle(dom, <span class=\"string\">&#x27;:after&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"getComputedStyle与style的区别\"><a href=\"#getComputedStyle与style的区别\" class=\"headerlink\" title=\"getComputedStyle与style的区别\"></a><code>getComputedStyle</code>与<code>style</code>的区别</h3><ul>\n<li><code>getComputedStyle</code>方法是只读的，只能获取样式，不能设置；而<code>element.style</code>能读能写。</li>\n<li>获取对象范围<br><code>getComputedStyle</code>方法获取的是最终应用在元素上的所有 css 属性对象；而<code>element.style</code>只能获取元素<code>style</code>中的 css 样式。因此对于一个光秃秃的元素<code>&lt;p&gt;</code>，<code>getComputedStyle</code>方法返回对象中的 length 属性值就有 190+,而<code>element.style</code>就是 0。</li>\n</ul>\n<h3 id=\"getPropertyValue方法\"><a href=\"#getPropertyValue方法\" class=\"headerlink\" title=\"getPropertyValue方法\"></a><code>getPropertyValue</code>方法</h3><p><code>getPropertyValue</code>方法可以获取 CSS 样式申明对象上的属性值（直接属性名称），例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.getComputedStyle(element, <span class=\"literal\">null</span>).getPropertyValue(<span class=\"string\">&#x27;float&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a><code>this</code></h2><p>** <code>this</code>要在执行的时候才能确定值，定义时是无法确认，因为 js 不是编译型语言而是解释型语言</p>\n<p>说明 this 几种不同的使用方式</p>\n<ul>\n<li>作为构造函数执行</li>\n<li>作为对象属性执行</li>\n<li>作为普通函数执行</li>\n<li><code>call</code>,<code>applay</code>,<code>bind</code></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">  name: A,</span><br><span class=\"line\">  fn: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a.fn() <span class=\"comment\">//this===a</span></span><br><span class=\"line\">a.fn(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;b&#x27;</span> &#125;) <span class=\"comment\">//this===&#123;name:&#x27;b&#x27;&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn1 = a.fn</span><br><span class=\"line\">fn1() <span class=\"comment\">//this===window</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"深浅拷贝\"><a href=\"#深浅拷贝\" class=\"headerlink\" title=\"深浅拷贝\"></a>深浅拷贝</h2><h3 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h3><p>浅拷贝之解决了第一层的问题，如果接下去的值中还有对象的话，那么就又会出现值引用，改变值会互相影响</p>\n<ul>\n<li><p>首先可以通过<code>Object.assign</code>来解决这个问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">  age: <span class=\"number\">1</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, a)</span><br><span class=\"line\">a.age = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.age)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当然也可以通过展开运算符（···）来解决</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">  age: <span class=\"number\">1</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = &#123; ...a &#125;</span><br><span class=\"line\">a.age = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.age) <span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h3><p>这个问题可以通过<code>JSON.parse(JSON.stringfy(object))</code>来解决。</p>\n<p>但是该方法也是有局限性的：</p>\n<ul>\n<li>会忽略 <code>undefined</code></li>\n<li>会忽略<code>symbol</code></li>\n<li>不能序列化函数</li>\n<li>不能解决循环引用对象</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  a: <span class=\"number\">1</span>,</span><br><span class=\"line\">  b: &#123;</span><br><span class=\"line\">    c: <span class=\"number\">2</span>,</span><br><span class=\"line\">    d: <span class=\"number\">3</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.c = obj.b</span><br><span class=\"line\">obj.e = obj.a</span><br><span class=\"line\">obj.b.c = obj.c</span><br><span class=\"line\">obj.b.e = obj.b.c</span><br><span class=\"line\"><span class=\"keyword\">let</span> newObj = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringfy(obj))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newObj) <span class=\"comment\">//会报错</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">  age: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">  sex: <span class=\"built_in\">Symbol</span>(<span class=\"string\">&#x27;male&#x27;</span>),</span><br><span class=\"line\">  jobs: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;yck&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringfy(a))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">//&#123;name:&#x27;yck&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Map、FlatMap、Reduce\"><a href=\"#Map、FlatMap、Reduce\" class=\"headerlink\" title=\"Map、FlatMap、Reduce\"></a><code>Map</code>、<code>FlatMap</code>、<code>Reduce</code></h2><p><code>Map</code>作用是生成一个新数组，遍历原数组，将每一个元素拿出来做一些变换然后<code>append</code>到新的数组中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].map(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> v + <span class=\"number\">1</span>) <span class=\"comment\">//=&gt;[2,3,4]</span></span><br></pre></td></tr></table></figure>\n\n<p><code>Map</code>有三个参数，分别是当前索引元素，索引，原数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;[<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>].map(<span class=\"built_in\">parseInt</span>)</span><br><span class=\"line\"><span class=\"comment\">//  parseInt(&#x27;1&#x27;, 0) -&gt; 1</span></span><br><span class=\"line\"><span class=\"comment\">//  parseInt(&#x27;2&#x27;, 1) -&gt; NaN</span></span><br><span class=\"line\"><span class=\"comment\">//  parseInt(&#x27;3&#x27;, 2) -&gt; NaN</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"NaN\"><a href=\"#NaN\" class=\"headerlink\" title=\"NaN\"></a>NaN</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">NaN</span> !== <span class=\"literal\">NaN</span> <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"literal\">NaN</span>.valueOf() <span class=\"comment\">//NaN</span></span><br><span class=\"line\"><span class=\"literal\">NaN</span>.toString() <span class=\"comment\">//&#x27;NaN</span></span><br><span class=\"line\"><span class=\"literal\">NaN</span> &lt; <span class=\"number\">3</span> <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"literal\">NaN</span> &gt;= <span class=\"number\">3</span> <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"literal\">NaN</span> &lt; <span class=\"literal\">NaN</span> <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"literal\">NaN</span> &gt;= <span class=\"literal\">NaN</span> <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"标签语句\"><a href=\"#标签语句\" class=\"headerlink\" title=\"标签语句\"></a>标签语句</h2><p>相当于定位符，用于跳转到程序的任意位置。标签通常与 break 语句和 continue 语句配合使用，跳出特定的循环。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top: <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; j++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i === <span class=\"number\">1</span> &amp;&amp; j === <span class=\"number\">1</span>) <span class=\"keyword\">break</span> top</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i=&#x27;</span> + i + <span class=\"string\">&#x27;, j=&#x27;</span> + j)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>break 命令后加上 top 标签，满足条件时，直接跳出双层循环。如果 break 语句后面不适用标签，则纸条出内层循环，进入下一次外层循环。</p>\n<p>continue 语句也可以配合使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top: <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; j++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i === <span class=\"number\">1</span> &amp;&amp; j === <span class=\"number\">1</span>) <span class=\"keyword\">continue</span> top</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i=&#x27;</span> + i + <span class=\"string\">&#x27;, j=&#x27;</span> + j)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// i=0, j=0</span></span><br><span class=\"line\"><span class=\"comment\">// i=0, j=1</span></span><br><span class=\"line\"><span class=\"comment\">// i=0, j=2</span></span><br><span class=\"line\"><span class=\"comment\">// i=1, j=0</span></span><br><span class=\"line\"><span class=\"comment\">// i=2, j=0</span></span><br><span class=\"line\"><span class=\"comment\">// i=2, j=1</span></span><br><span class=\"line\"><span class=\"comment\">// i=2, j=2</span></span><br></pre></td></tr></table></figure>\n\n<p>满足条件时，会跳过当前循环，直接进入到下一论外层循环。如果 continue 语句后面不使用标签，则只能进入下一轮内层循环。</p>\n<h2 id=\"with\"><a href=\"#with\" class=\"headerlink\" title=\"with\"></a>with</h2><p>with 语句用途是将代码作用于设置为特定对象，使用例子是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span>(location&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> qs = search.substring(<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> hostName = hostname</span><br><span class=\"line\">  <span class=\"keyword\">let</span> url = href</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>使用 with 代替频繁使用的 location 对象，这意味着在这个语句内部，每个变量首先会被认为是一个局部变量，如果没有找到该局部变量，则会搜索 location 对象，看它是否是有一个同名属性。如果有，则该苏醒会被求值成 location 对象属性</p>\n<p>由于 with 语句影响性能且难以调试其中代码,通常不推荐在代码中使用</p>\n<h2 id=\"原始数据类型\"><a href=\"#原始数据类型\" class=\"headerlink\" title=\"原始数据类型\"></a>原始数据类型</h2><p>ECMScript 变量可以包含两种不同类型的数据：原始值和引用值。原始值就是最简单的数据，引用值是由多个值构成的对象。</p>\n<p><strong>6 种引用值</strong>：Undefined、Null、Boolean、Number、String 和 Symbol，typeOf 操作符最适合用来判断是否是原始类型，但是如果值是对象或是 null，那么 typeof 返回 Object</p>\n<p>保存原始值的变量是<strong>按值</strong>访问的，因为我们操作的就是存储在变量中的实际值</p>\n<p>注意，原始类型的初始化可以只使用原始字面量形式。如果使用的是 new 关键字，则 JavaScript 会创建一个 Object 类型的实例，但其行为类似原始值。下面来看看这两种初始化方式的差异：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name1 = <span class=\"string\">&quot;Nicholas&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> name2 = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">&quot;Matt&quot;</span>);</span><br><span class=\"line\">name1.age = <span class=\"number\">27</span>;</span><br><span class=\"line\">name2.age = <span class=\"number\">26</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name1.age) <span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name2.age) <span class=\"comment\">// 26</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(typeOf name1) <span class=\"comment\">//string</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(typeOf name2) <span class=\"comment\">//object</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"引用值\"><a href=\"#引用值\" class=\"headerlink\" title=\"引用值\"></a>引用值</h2><p>一个值得深思的例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setName</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  obj.name = <span class=\"string\">&#x27;Nicholas&#x27;</span></span><br><span class=\"line\">  obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>()</span><br><span class=\"line\">  obj.name = <span class=\"string\">&#x27;Greg&#x27;</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(obj) <span class=\"comment\">//Greg</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> person = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>()</span><br><span class=\"line\">setName(person)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name) <span class=\"comment\">//“Nicholas&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果 person 是按饮用类型传递的，那么 person 应该自动将指针改为指向 name 为”Greg”的对象。可是，当我们再次访问 person.name 时，它的值是“Nicholas”,这表明函数中参数的，原始的引用类型仍然没有改变。</p>\n<p>当 obj 在函数内部被重写时，它变成了一个指向本地对象的指针。而那个本地对象在函数执行结束时就被销毁</p>\n","site":{"data":{}},"excerpt":"<p>感觉自己的 ES5 掌握的比较杂乱，在此整理一下自己的思路，总结、归纳原生 JS 的知识。</p>","more":"<h2 id=\"内置类型\"><a href=\"#内置类型\" class=\"headerlink\" title=\"内置类型\"></a>内置类型</h2><p>JS 中有 7 种内置类型，7 种内置类型又分为两大类型：基本类型和对象（Object）<br>基础基本类型有 6 种：<code>null</code>,<code>undefined</code>,<code>boolean</code>,<code>number</code>,<code>string</code>,<code>symbol</code>。</p>\n<h2 id=\"Typeof\"><a href=\"#Typeof\" class=\"headerlink\" title=\"Typeof\"></a><code>Typeof</code></h2><p><code>typeof</code> 对于基本类型。除了<code>null</code>都可以显示正确的类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"number\">1</span> <span class=\"comment\">// &#x27;number&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"string\">&#x27;1&#x27;</span> <span class=\"comment\">// &#x27;string&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span> <span class=\"comment\">// &#x27;undefined&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">true</span> <span class=\"comment\">// &#x27;boolean&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"built_in\">Symbol</span>() <span class=\"comment\">// &#x27;symbol&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> b <span class=\"comment\">// b 没有声明，但是还会显示 undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//typeof 对于对象，除了函数都会显示 object</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> [] <span class=\"comment\">// &#x27;object&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> &#123;&#125; <span class=\"comment\">// &#x27;object&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"built_in\">console</span>.log <span class=\"comment\">// &#x27;function&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">null</span> <span class=\"comment\">// &#x27;object&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>PS：为什么会出现这种情况呢？因为在 JS 的最初版本中，使用的是 32 位系统，为了性能考虑使用低位存储了变量的类型信息，000 开头代表是对象，然而 null 表示为全零，所以将它错误的判断为 object 。虽然现在的内部类型判断代码已经改变了，但是对于这个 Bug 却是一直流传下来</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a</span><br><span class=\"line\"><span class=\"comment\">// 我们也可以这样判断 undefined</span></span><br><span class=\"line\">a === <span class=\"literal\">undefined</span></span><br><span class=\"line\"><span class=\"comment\">// 但是 undefined 不是保留字，能够在低版本浏览器被赋值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"literal\">undefined</span> = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">// 这样判断就会出错</span></span><br><span class=\"line\"><span class=\"comment\">// 所以可以用下面的方式来判断，并且代码量更少</span></span><br><span class=\"line\"><span class=\"comment\">// 因为 void 后面随便跟上一个组成表达式</span></span><br><span class=\"line\"><span class=\"comment\">// 返回就是 undefined</span></span><br><span class=\"line\">a === <span class=\"keyword\">void</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><p>创建对象可以通过对象直接量，关键字 new 和 object.creat() 函数来创建对象。每一个对象都有与知相关的原型，类和可扩展性。可分为普通对象和函数对象。凡是通过 new function() 创建的都是函数对象。其他都是普通对象。</p>\n<h3 id=\"对象直接量\"><a href=\"#对象直接量\" class=\"headerlink\" title=\"对象直接量\"></a>对象直接量</h3><p>对象直接量是类似于 var a = {x:0,y:0} 的映射表。对象直接量是一个表达式，这个表达式的每次运算都创建并初始化一个新的对象。每次计算对象直接量的时候。也会计算它的每个属性值，<strong>也就是说在一个循环体内使用了对象直接量，他将会创建很对新对象，并且每次创建的对象的属性值也有可能不同。</strong></p>\n<h3 id=\"通过-new-创建对象\"><a href=\"#通过-new-创建对象\" class=\"headerlink\" title=\"通过 new 创建对象\"></a>通过 new 创建对象</h3><ol>\n<li>新生成了一个对象</li>\n<li>链接到原型</li>\n<li>绑定 this</li>\n<li>返回新对象</li>\n</ol>\n<p>在调用<code>new</code>的过程中会发生以上四件事情。</p>\n<p>var obj=new MyClass(); new 运算符创建并初始化一个<strong>新对象</strong> 用 new 调用时，this 会指向空的对象，并且这个对象的原型指向 MyClass.prototype</p>\n<h4 id=\"new-的过程以及是实现-new\"><a href=\"#new-的过程以及是实现-new\" class=\"headerlink\" title=\"new 的过程以及是实现 new\"></a>new 的过程以及是实现 new</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> con = [].shift.call(<span class=\"built_in\">arguments</span>)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h2><p>原型：每一个对象都从原型继承属性。<strong>每个对象都有 <em>proto</em> 属性 , 每个对象都有原对象，但只有函数对象才有 prototype 属性</strong>, 但是除却 function.prototype,function.prototype 也是函数对象，但是没有 prototype。可以使用 p.isPrototype(o) 来检查 p 是否是 o 的原型。</p>\n<h3 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h3><p>原型模式是 js 对继承的一种实现</p>\n<ul>\n<li><p>prototype：构造函数中的属性，指向该构造函数的原型对象。</p>\n</li>\n<li><p>constructor ：原型对象中的属性，指向该原型对象的构造函数</p>\n</li>\n<li><p>_proto_：实例中的属性，指向 new 这个实例的构造函数的原型对象，对象可以通过<code>_proto_</code>来寻找不属于该对象的属性，<code>_proto_</code>将对象连接起来组成原型链。所有引用类型的_proto_属性值均指向它的构造函数的prototype的属性值。当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去他的_proto_（即它的构造函数的prototype）中寻找</p>\n</li>\n</ul>\n<h3 id=\"prototype-属性的引入\"><a href=\"#prototype-属性的引入\" class=\"headerlink\" title=\"prototype 属性的引入\"></a>prototype 属性的引入</h3><p>每一个 new 出的实例都有自己的属性和方法的副本，无法做到属性、方法共享，因此 Brendan Eich 决定为构造函数设置一个 prototype 属性。</p>\n<p>这个对象包含一个对象（以下简称 “prototype 对象 ”），所有实例对象需要共享的属性及方法，都放在这个对象里面，那些不需要共享的属性及方法，就放在构造函数里面。</p>\n<p>实例对象一旦创建，就自动引用 prototype 对象的属性和方法。也就是说。实例对象的属性和方法，分成两种，一种是本地的，一种是引用的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">DOG</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">DOG.prototype = &#123; <span class=\"attr\">species</span>: <span class=\"string\">&#x27;犬科&#x27;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> dogA = <span class=\"keyword\">new</span> DOG(<span class=\"string\">&#x27;大毛&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> dogB = <span class=\"keyword\">new</span> DOG(<span class=\"string\">&#x27;二毛&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">alert(dogA.species)</span><br><span class=\"line\"><span class=\"comment\">// 其实是通过dogA._proto_.species 来访问DOG.prototype.species</span></span><br><span class=\"line\">alert(dogB.species)</span><br><span class=\"line\"><span class=\"comment\">// 犬科</span></span><br><span class=\"line\">DOG.prototype</span><br><span class=\"line\"><span class=\"comment\">//&#123;species:&#x27;&#x27;犬科&#x27;,constructor:fDOG(name),_proto_:Object&#125;</span></span><br><span class=\"line\">DOG.prototype.constructor === DOG</span><br><span class=\"line\"><span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>现在，species 属性放在 prototype 对象里，是两个实例对象共享的。只要修改了 prototype 对象，就会同时影响到两个实例对象。</p>\n<p><img src=\"/images/prototype/1.png\" alt=\"network\"></p>\n<p>以上就是一个简单的 DOG 类完整的原型链。</p>\n<h4 id=\"原型链的作用：对象属性的访问修改和删除。\"><a href=\"#原型链的作用：对象属性的访问修改和删除。\" class=\"headerlink\" title=\"原型链的作用：对象属性的访问修改和删除。\"></a>原型链的作用：对象属性的访问修改和删除。</h4><ul>\n<li>访问。优先在对象本身查找，没有则顺着原型链向上查找</li>\n<li>修改。只能修改跟删除自身属性，不会影响到原型链上的其他对象。</li>\n</ul>\n<h3 id=\"proto-（原型指针）\"><a href=\"#proto-（原型指针）\" class=\"headerlink\" title=\"proto （原型指针）\"></a><em>proto</em> （原型指针）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.job = job</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&#x27;Zaxlct&#x27;</span>, <span class=\"number\">28</span>, <span class=\"string\">&#x27;Software Engineer&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&#x27;Mick&#x27;</span>, <span class=\"number\">23</span>, <span class=\"string\">&#x27;Doctor&#x27;</span>)</span><br><span class=\"line\">person1.__proto__ == Person.prototype</span><br><span class=\"line\"><span class=\"comment\">//person1.__proto__  = person1.constructor.prototype , person1.constructor = Person</span></span><br><span class=\"line\">Person.__proto__</span><br><span class=\"line\"><span class=\"comment\">//Person.constructor = Function =&gt; Person.__proto__  = Function.prototype</span></span><br><span class=\"line\">Person.prototype.__proto__</span><br><span class=\"line\"><span class=\"comment\">// Person.prototype 是一个普通对象（原型对象），普通函数的构造函数是Object =&gt; Person.prototype.__proto__ =  Object.prototype</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.__proto__</span><br><span class=\"line\"><span class=\"comment\">//普通对象 同上</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.__proto__</span><br><span class=\"line\"><span class=\"comment\">//对象也有proto属性，但它比较特殊，为null,因为null处于原型链的顶端</span></span><br></pre></td></tr></table></figure>\n\n<p>JS 在创建对象（不论是普通对象还是函数对象）的时候，都有一个叫做 <em>proto</em> 的内置属性，<strong>用于指向创建它的构造函数的原型对象</strong> ，原型链继承是通过 <em>proto</em> 这个原型指针来完成的</p>\n<h3 id=\"原型链图\"><a href=\"#原型链图\" class=\"headerlink\" title=\"原型链图\"></a>原型链图</h3><p>褐色的线为原型链 <img src=\"/images/prototype/2.png\" alt=\"img caption\"></p>\n<p>够造函数、原型和实例的关系：</p>\n<ol>\n<li> 每个构造函数都有一个原型对象（x.prototype)</li>\n<li> 原型对象都包含一个指向构造函数的指针（x.prototype.constructor === x)</li>\n<li> 实例都包含一个指向原型对象的内部指针（a.<em>proto</em> ）</li>\n</ol>\n<p>** 所有函数的默认原型都是 Object 的实例**</p>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>常用继承：组合继承，寄生组合继承</p>\n<p>javascript 对象具有 “ 自有属性 ” 也有一些属性是从原型对象继承来的。<br>有两种继承方式：</p>\n<ol>\n<li>寄生函数继承（构造函数继承 (call/apply)），利用 call 继承父类上的属性，用子类的原型等于父类实例去继承父类的方法。缺点：调用父类两次，造成性能浪费。</li>\n<li>原型链继承 ( 挂载到 prototype 属性上面 )。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Parent.prototype.say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  Parent.call(<span class=\"built_in\">this</span>, name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Child.prototype = <span class=\"keyword\">new</span> Parent()</span><br><span class=\"line\"><span class=\"keyword\">let</span> c = <span class=\"keyword\">new</span> Child(<span class=\"string\">&#x27;Y&#x27;</span>)</span><br><span class=\"line\">c.say()</span><br></pre></td></tr></table></figure>\n\n<p>寄生函数继承：利用 call 继承父类上的属性，用一个干净的函数的原型去等于父类原型，再用子类的原型的等于干净函数的实例。</p>\n<h2 id=\"事件委托\"><a href=\"#事件委托\" class=\"headerlink\" title=\"事件委托\"></a>事件委托</h2><p>利用事件委托技术能让你对特定的每个节点添加事件监听器；相反，事件监听器是被添加到他们的父元素上的。事件监听器会分析从子元素冒泡上来的事件，找到是哪一个子元素的事件。</p>\n<ul>\n<li>event.target 返回触发事件的元素</li>\n<li>event.currentTarget 返回绑定事件的元素</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;parent-list&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;post-1&quot;</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;post-2&quot;</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;post-3&quot;</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;post-4&quot;</span>&gt;</span>Item 4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;post-5&quot;</span>&gt;</span>Item 5<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;post-6&quot;</span>&gt;</span>Item 6<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">document</span></span></span><br><span class=\"line\"><span class=\"javascript\">    .getElementById(<span class=\"string\">&#x27;parent-list&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    .addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// e.target是被点击的元素!</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 如果被点击的是li元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">if</span> (e.target &amp;&amp; e.target.nodeName == <span class=\"string\">&#x27;LI&#x27;</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 找到目标，输出ID!</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;List item &#x27;</span>, e.target.id.replace(<span class=\"string\">&#x27;post-&#x27;</span>), <span class=\"string\">&#x27; was clicked!&#x27;</span>)</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">      $(<span class=\"string\">&#x27;li&#x27;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        $(<span class=\"built_in\">this</span>).css(<span class=\"string\">&#x27;background&#x27;</span>, <span class=\"string\">&#x27;#D4DFE6&#x27;</span>)</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// jQuery的delegate写法</span></span></span><br><span class=\"line\"><span class=\"javascript\">      $(<span class=\"string\">&#x27;#wrap&#x27;</span>).delegate(<span class=\"string\">&#x27;li&#x27;</span>, <span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ev</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// this 指向委托的对象 li</span></span></span><br><span class=\"line\"><span class=\"javascript\">        $(<span class=\"built_in\">this</span>).css(<span class=\"string\">&#x27;background&#x27;</span>, <span class=\"string\">&#x27;#D4DFE6&#x27;</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 找到父级 ul#wrap</span></span></span><br><span class=\"line\"><span class=\"javascript\">        $(ev.delegateTarget).css(<span class=\"string\">&#x27;border&#x27;</span>, <span class=\"string\">&#x27;2px solid #f00&#x27;</span>)</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"getComputedStyle\"><a href=\"#getComputedStyle\" class=\"headerlink\" title=\"getComputedStyle()\"></a><code>getComputedStyle()</code></h2><p><code>getComputedStyle</code>是一个可以获取当前元素所有最终使用 css 属性值。返回一个 css 样式声明对象([object CSSStyleDeclaration])，只读。之前偶尔有一次要更改伪类元素 ::after 的样式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> dom = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;test&#x27;</span>),</span><br><span class=\"line\">  style = <span class=\"built_in\">window</span>.getComputedStyle(dom, <span class=\"string\">&#x27;:after&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"getComputedStyle与style的区别\"><a href=\"#getComputedStyle与style的区别\" class=\"headerlink\" title=\"getComputedStyle与style的区别\"></a><code>getComputedStyle</code>与<code>style</code>的区别</h3><ul>\n<li><code>getComputedStyle</code>方法是只读的，只能获取样式，不能设置；而<code>element.style</code>能读能写。</li>\n<li>获取对象范围<br><code>getComputedStyle</code>方法获取的是最终应用在元素上的所有 css 属性对象；而<code>element.style</code>只能获取元素<code>style</code>中的 css 样式。因此对于一个光秃秃的元素<code>&lt;p&gt;</code>，<code>getComputedStyle</code>方法返回对象中的 length 属性值就有 190+,而<code>element.style</code>就是 0。</li>\n</ul>\n<h3 id=\"getPropertyValue方法\"><a href=\"#getPropertyValue方法\" class=\"headerlink\" title=\"getPropertyValue方法\"></a><code>getPropertyValue</code>方法</h3><p><code>getPropertyValue</code>方法可以获取 CSS 样式申明对象上的属性值（直接属性名称），例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.getComputedStyle(element, <span class=\"literal\">null</span>).getPropertyValue(<span class=\"string\">&#x27;float&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a><code>this</code></h2><p>** <code>this</code>要在执行的时候才能确定值，定义时是无法确认，因为 js 不是编译型语言而是解释型语言</p>\n<p>说明 this 几种不同的使用方式</p>\n<ul>\n<li>作为构造函数执行</li>\n<li>作为对象属性执行</li>\n<li>作为普通函数执行</li>\n<li><code>call</code>,<code>applay</code>,<code>bind</code></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">  name: A,</span><br><span class=\"line\">  fn: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a.fn() <span class=\"comment\">//this===a</span></span><br><span class=\"line\">a.fn(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;b&#x27;</span> &#125;) <span class=\"comment\">//this===&#123;name:&#x27;b&#x27;&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn1 = a.fn</span><br><span class=\"line\">fn1() <span class=\"comment\">//this===window</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"深浅拷贝\"><a href=\"#深浅拷贝\" class=\"headerlink\" title=\"深浅拷贝\"></a>深浅拷贝</h2><h3 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h3><p>浅拷贝之解决了第一层的问题，如果接下去的值中还有对象的话，那么就又会出现值引用，改变值会互相影响</p>\n<ul>\n<li><p>首先可以通过<code>Object.assign</code>来解决这个问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">  age: <span class=\"number\">1</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, a)</span><br><span class=\"line\">a.age = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.age)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当然也可以通过展开运算符（···）来解决</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">  age: <span class=\"number\">1</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = &#123; ...a &#125;</span><br><span class=\"line\">a.age = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.age) <span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h3><p>这个问题可以通过<code>JSON.parse(JSON.stringfy(object))</code>来解决。</p>\n<p>但是该方法也是有局限性的：</p>\n<ul>\n<li>会忽略 <code>undefined</code></li>\n<li>会忽略<code>symbol</code></li>\n<li>不能序列化函数</li>\n<li>不能解决循环引用对象</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  a: <span class=\"number\">1</span>,</span><br><span class=\"line\">  b: &#123;</span><br><span class=\"line\">    c: <span class=\"number\">2</span>,</span><br><span class=\"line\">    d: <span class=\"number\">3</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.c = obj.b</span><br><span class=\"line\">obj.e = obj.a</span><br><span class=\"line\">obj.b.c = obj.c</span><br><span class=\"line\">obj.b.e = obj.b.c</span><br><span class=\"line\"><span class=\"keyword\">let</span> newObj = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringfy(obj))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newObj) <span class=\"comment\">//会报错</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">  age: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">  sex: <span class=\"built_in\">Symbol</span>(<span class=\"string\">&#x27;male&#x27;</span>),</span><br><span class=\"line\">  jobs: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;yck&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringfy(a))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">//&#123;name:&#x27;yck&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Map、FlatMap、Reduce\"><a href=\"#Map、FlatMap、Reduce\" class=\"headerlink\" title=\"Map、FlatMap、Reduce\"></a><code>Map</code>、<code>FlatMap</code>、<code>Reduce</code></h2><p><code>Map</code>作用是生成一个新数组，遍历原数组，将每一个元素拿出来做一些变换然后<code>append</code>到新的数组中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].map(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> v + <span class=\"number\">1</span>) <span class=\"comment\">//=&gt;[2,3,4]</span></span><br></pre></td></tr></table></figure>\n\n<p><code>Map</code>有三个参数，分别是当前索引元素，索引，原数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;[<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>].map(<span class=\"built_in\">parseInt</span>)</span><br><span class=\"line\"><span class=\"comment\">//  parseInt(&#x27;1&#x27;, 0) -&gt; 1</span></span><br><span class=\"line\"><span class=\"comment\">//  parseInt(&#x27;2&#x27;, 1) -&gt; NaN</span></span><br><span class=\"line\"><span class=\"comment\">//  parseInt(&#x27;3&#x27;, 2) -&gt; NaN</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"NaN\"><a href=\"#NaN\" class=\"headerlink\" title=\"NaN\"></a>NaN</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">NaN</span> !== <span class=\"literal\">NaN</span> <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"literal\">NaN</span>.valueOf() <span class=\"comment\">//NaN</span></span><br><span class=\"line\"><span class=\"literal\">NaN</span>.toString() <span class=\"comment\">//&#x27;NaN</span></span><br><span class=\"line\"><span class=\"literal\">NaN</span> &lt; <span class=\"number\">3</span> <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"literal\">NaN</span> &gt;= <span class=\"number\">3</span> <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"literal\">NaN</span> &lt; <span class=\"literal\">NaN</span> <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"literal\">NaN</span> &gt;= <span class=\"literal\">NaN</span> <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"标签语句\"><a href=\"#标签语句\" class=\"headerlink\" title=\"标签语句\"></a>标签语句</h2><p>相当于定位符，用于跳转到程序的任意位置。标签通常与 break 语句和 continue 语句配合使用，跳出特定的循环。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top: <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; j++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i === <span class=\"number\">1</span> &amp;&amp; j === <span class=\"number\">1</span>) <span class=\"keyword\">break</span> top</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i=&#x27;</span> + i + <span class=\"string\">&#x27;, j=&#x27;</span> + j)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>break 命令后加上 top 标签，满足条件时，直接跳出双层循环。如果 break 语句后面不适用标签，则纸条出内层循环，进入下一次外层循环。</p>\n<p>continue 语句也可以配合使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top: <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; j++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i === <span class=\"number\">1</span> &amp;&amp; j === <span class=\"number\">1</span>) <span class=\"keyword\">continue</span> top</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i=&#x27;</span> + i + <span class=\"string\">&#x27;, j=&#x27;</span> + j)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// i=0, j=0</span></span><br><span class=\"line\"><span class=\"comment\">// i=0, j=1</span></span><br><span class=\"line\"><span class=\"comment\">// i=0, j=2</span></span><br><span class=\"line\"><span class=\"comment\">// i=1, j=0</span></span><br><span class=\"line\"><span class=\"comment\">// i=2, j=0</span></span><br><span class=\"line\"><span class=\"comment\">// i=2, j=1</span></span><br><span class=\"line\"><span class=\"comment\">// i=2, j=2</span></span><br></pre></td></tr></table></figure>\n\n<p>满足条件时，会跳过当前循环，直接进入到下一论外层循环。如果 continue 语句后面不使用标签，则只能进入下一轮内层循环。</p>\n<h2 id=\"with\"><a href=\"#with\" class=\"headerlink\" title=\"with\"></a>with</h2><p>with 语句用途是将代码作用于设置为特定对象，使用例子是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span>(location&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> qs = search.substring(<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> hostName = hostname</span><br><span class=\"line\">  <span class=\"keyword\">let</span> url = href</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>使用 with 代替频繁使用的 location 对象，这意味着在这个语句内部，每个变量首先会被认为是一个局部变量，如果没有找到该局部变量，则会搜索 location 对象，看它是否是有一个同名属性。如果有，则该苏醒会被求值成 location 对象属性</p>\n<p>由于 with 语句影响性能且难以调试其中代码,通常不推荐在代码中使用</p>\n<h2 id=\"原始数据类型\"><a href=\"#原始数据类型\" class=\"headerlink\" title=\"原始数据类型\"></a>原始数据类型</h2><p>ECMScript 变量可以包含两种不同类型的数据：原始值和引用值。原始值就是最简单的数据，引用值是由多个值构成的对象。</p>\n<p><strong>6 种引用值</strong>：Undefined、Null、Boolean、Number、String 和 Symbol，typeOf 操作符最适合用来判断是否是原始类型，但是如果值是对象或是 null，那么 typeof 返回 Object</p>\n<p>保存原始值的变量是<strong>按值</strong>访问的，因为我们操作的就是存储在变量中的实际值</p>\n<p>注意，原始类型的初始化可以只使用原始字面量形式。如果使用的是 new 关键字，则 JavaScript 会创建一个 Object 类型的实例，但其行为类似原始值。下面来看看这两种初始化方式的差异：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name1 = <span class=\"string\">&quot;Nicholas&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> name2 = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">&quot;Matt&quot;</span>);</span><br><span class=\"line\">name1.age = <span class=\"number\">27</span>;</span><br><span class=\"line\">name2.age = <span class=\"number\">26</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name1.age) <span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name2.age) <span class=\"comment\">// 26</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(typeOf name1) <span class=\"comment\">//string</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(typeOf name2) <span class=\"comment\">//object</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"引用值\"><a href=\"#引用值\" class=\"headerlink\" title=\"引用值\"></a>引用值</h2><p>一个值得深思的例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setName</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  obj.name = <span class=\"string\">&#x27;Nicholas&#x27;</span></span><br><span class=\"line\">  obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>()</span><br><span class=\"line\">  obj.name = <span class=\"string\">&#x27;Greg&#x27;</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(obj) <span class=\"comment\">//Greg</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> person = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>()</span><br><span class=\"line\">setName(person)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name) <span class=\"comment\">//“Nicholas&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果 person 是按饮用类型传递的，那么 person 应该自动将指针改为指向 name 为”Greg”的对象。可是，当我们再次访问 person.name 时，它的值是“Nicholas”,这表明函数中参数的，原始的引用类型仍然没有改变。</p>\n<p>当 obj 在函数内部被重写时，它变成了一个指向本地对象的指针。而那个本地对象在函数执行结束时就被销毁</p>"},{"title":"JS的number类型最大值","date":"2019-09-10T06:42:07.000Z","_content":"\n遇到过几次number类型精度丢失的问题，一次是后台传的类型为number类型的 超大值，结果丢失了精度，后来就修改成string 型的就没有了这个问题，一次是对number 型进行乘除操作，后台返回了超大值，出于产品方面的考虑，数据库限定了输入长度。但我想，若是真的有对一个超长number型数字处理的话，那该如何呢？\n\n<!--more-->\n\n## 精度丢失的根本原因\n\njs 的number类型有个最大值（安全值），即2的53次方，为9007199254740992，如果超出这个值，那么js 会出现不精准的问题，这个值为16位。在浏览器控制台分别输入Number.MAX_SAFE_INTEGER和Number.MIN_SAFE_INTEGER可查看对应的最大/小值\n\n## BigInt\n\nBigInt 是JavaScript 中一个新的原始类型，可以用任一精度表示整数。使用BigInt，即使超出JS Number 的安全整数限制，也可以安全的存储和操作大整数。\n\nchrome 67+开始支持BigInt，本文所有demo都是基于chrome 67。\n\n要创建BigInit,在数字后面添加n后缀即可，例如123变成123n。\n\nBigInt是JavaScript语言中的一个原始类型。因此，可以使用typeof操作符检测到这种类型：\n```javascript\ntypeof 123;\n// → 'number'\ntypeof 123n;\n// → 'bigint'\n```\n\n","source":"_posts/JS的number类型最大值.md","raw":"---\ntitle: JS的number类型最大值\ndate: 2019-09-10 14:42:07\ncategories: JavaScript\n---\n\n遇到过几次number类型精度丢失的问题，一次是后台传的类型为number类型的 超大值，结果丢失了精度，后来就修改成string 型的就没有了这个问题，一次是对number 型进行乘除操作，后台返回了超大值，出于产品方面的考虑，数据库限定了输入长度。但我想，若是真的有对一个超长number型数字处理的话，那该如何呢？\n\n<!--more-->\n\n## 精度丢失的根本原因\n\njs 的number类型有个最大值（安全值），即2的53次方，为9007199254740992，如果超出这个值，那么js 会出现不精准的问题，这个值为16位。在浏览器控制台分别输入Number.MAX_SAFE_INTEGER和Number.MIN_SAFE_INTEGER可查看对应的最大/小值\n\n## BigInt\n\nBigInt 是JavaScript 中一个新的原始类型，可以用任一精度表示整数。使用BigInt，即使超出JS Number 的安全整数限制，也可以安全的存储和操作大整数。\n\nchrome 67+开始支持BigInt，本文所有demo都是基于chrome 67。\n\n要创建BigInit,在数字后面添加n后缀即可，例如123变成123n。\n\nBigInt是JavaScript语言中的一个原始类型。因此，可以使用typeof操作符检测到这种类型：\n```javascript\ntypeof 123;\n// → 'number'\ntypeof 123n;\n// → 'bigint'\n```\n\n","slug":"JS的number类型最大值","published":1,"updated":"2019-09-10T07:44:12.909Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmejaerm000dxcvrbo6517ht","content":"<p>遇到过几次number类型精度丢失的问题，一次是后台传的类型为number类型的 超大值，结果丢失了精度，后来就修改成string 型的就没有了这个问题，一次是对number 型进行乘除操作，后台返回了超大值，出于产品方面的考虑，数据库限定了输入长度。但我想，若是真的有对一个超长number型数字处理的话，那该如何呢？</p>\n<span id=\"more\"></span>\n\n<h2 id=\"精度丢失的根本原因\"><a href=\"#精度丢失的根本原因\" class=\"headerlink\" title=\"精度丢失的根本原因\"></a>精度丢失的根本原因</h2><p>js 的number类型有个最大值（安全值），即2的53次方，为9007199254740992，如果超出这个值，那么js 会出现不精准的问题，这个值为16位。在浏览器控制台分别输入Number.MAX_SAFE_INTEGER和Number.MIN_SAFE_INTEGER可查看对应的最大/小值</p>\n<h2 id=\"BigInt\"><a href=\"#BigInt\" class=\"headerlink\" title=\"BigInt\"></a>BigInt</h2><p>BigInt 是JavaScript 中一个新的原始类型，可以用任一精度表示整数。使用BigInt，即使超出JS Number 的安全整数限制，也可以安全的存储和操作大整数。</p>\n<p>chrome 67+开始支持BigInt，本文所有demo都是基于chrome 67。</p>\n<p>要创建BigInit,在数字后面添加n后缀即可，例如123变成123n。</p>\n<p>BigInt是JavaScript语言中的一个原始类型。因此，可以使用typeof操作符检测到这种类型：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"comment\">// → &#x27;number&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"number\">123n</span>;</span><br><span class=\"line\"><span class=\"comment\">// → &#x27;bigint&#x27;</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>遇到过几次number类型精度丢失的问题，一次是后台传的类型为number类型的 超大值，结果丢失了精度，后来就修改成string 型的就没有了这个问题，一次是对number 型进行乘除操作，后台返回了超大值，出于产品方面的考虑，数据库限定了输入长度。但我想，若是真的有对一个超长number型数字处理的话，那该如何呢？</p>","more":"<h2 id=\"精度丢失的根本原因\"><a href=\"#精度丢失的根本原因\" class=\"headerlink\" title=\"精度丢失的根本原因\"></a>精度丢失的根本原因</h2><p>js 的number类型有个最大值（安全值），即2的53次方，为9007199254740992，如果超出这个值，那么js 会出现不精准的问题，这个值为16位。在浏览器控制台分别输入Number.MAX_SAFE_INTEGER和Number.MIN_SAFE_INTEGER可查看对应的最大/小值</p>\n<h2 id=\"BigInt\"><a href=\"#BigInt\" class=\"headerlink\" title=\"BigInt\"></a>BigInt</h2><p>BigInt 是JavaScript 中一个新的原始类型，可以用任一精度表示整数。使用BigInt，即使超出JS Number 的安全整数限制，也可以安全的存储和操作大整数。</p>\n<p>chrome 67+开始支持BigInt，本文所有demo都是基于chrome 67。</p>\n<p>要创建BigInit,在数字后面添加n后缀即可，例如123变成123n。</p>\n<p>BigInt是JavaScript语言中的一个原始类型。因此，可以使用typeof操作符检测到这种类型：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"comment\">// → &#x27;number&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"number\">123n</span>;</span><br><span class=\"line\"><span class=\"comment\">// → &#x27;bigint&#x27;</span></span><br></pre></td></tr></table></figure>"},{"title":"JavaScript动态规划和贪心算法","date":"2019-07-24T01:58:16.000Z","_content":"\n自从做了一个树的深度搜索、广度查询、树的之后，我就深刻的意识到自己对算法和数据结构一无所知，做出来的方案总感觉不是最优解。\n\n<!--more-->\n\n这里记录两种常用的算法：动态规划和贪心算法。动态规划常被人比作是递归的逆过程，而贪心算法在很多求有问题上，是不二之选。\n\n# 动态规划\n\n动态规划为什么会被认为是递归相反的技术呢，是因为递归是从顶部开始将问题分解，通过解决掉所有小问题的方式，来解决征哥问题，动态规划是从底部开始解决问题，将所有小问题解决掉，然后合并成整个大的问题。\n\n递归算法写法简单但是效率并不高。\n\n## 斐波拉契数列\n\n斐波拉契数列 定义为一下序列：0,1,1,2,3,5,8,13,21,34,55\n\n公式为：n>=2,a<sub>n</sub> = a<sub>n-1</sub>+a <sub>n-2</sub>,这个序列是用来描述在理想状况下兔子的增长情况。\n\n若是用递归实现：\n\n```javascript\nfunction fibo(n) {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return fibo(n - 1) + fibo(n - 2);\n}\n```\n\n这种实现方式非常耗性能，在 n 的数量级到达千级别就会变得特别慢，甚至失去响应。\n\n优化方案：\n\n```javascript\nfunction fibo(n) {\n    if (n <= 0) return 0;\n    if (n <= 1) return 1;\n    var a = 0,\n        b = 1;\n    for (var i = 2; i <= n; i++) {\n        b = a + b;\n        a = b - a;\n    }\n    return b;\n}\n```\n\n## 寻找最长公共子串\n\n例如在 hello 和 wellcome 中最长子串是 ell\n\n一种暴力的办法：\n\n```javascript\nfunction maxSubString(str1, str2) {\n    if (!str1 || !str2) return \"\";\n    var len1 = str1.length,\n        len2 = str2.length;\n    var maxSubStr = \"\";\n    for (var i = 0; i < len1; i++) {\n        for (var j = 0; j < len2; j++) {\n            var tempStr = \"\",\n                k = 0;\n            while (\n                i + k < len1 &&\n                j + k < len2 &&\n                str1[i + k] === str2[j + k]\n            ) {\n                tempStr += str1[i + k];\n                k++;\n            }\n            if (tempStr.length > maxSubStr.length) {\n                maxSubStr = tempStr;\n            }\n        }\n    }\n    return maxSubStr;\n}\n```\n\n而且上面不考虑多个一样长的情况吗？\n\n```javascript\nfunction findSubStr(str1, str2){\n    if (str1.length > str2.length) {\n      var temp = str1;\n      str1 = str2;\n      str2 = temp;\n    }\n    var len1 = str1.length,\n      len2 = str2.length;\n    for (var j = len1; j > 0; j--) {\n      for (var i = 0; i < len1 - j; i++) {\n        var current = str1.substr(i, j);\n        if (str2.indexOf(current) >= 0) {\n          return current;\n        }\n      }\n    }\n    return \"\";\n  }\n  console.log(findSubStr(\"aaa3333\", \"baa333cc\")); // aa333\n  console.log(findSubStr(\"aaaX3333--\", \"baa333ccX3333333x\")) // X3333\n```","source":"_posts/JavaScript动态规划和贪心算法.md","raw":"---\ntitle: JavaScript动态规划和贪心算法\ndate: 2019-07-24 09:58:16\ncategories: JavaScript\n---\n\n自从做了一个树的深度搜索、广度查询、树的之后，我就深刻的意识到自己对算法和数据结构一无所知，做出来的方案总感觉不是最优解。\n\n<!--more-->\n\n这里记录两种常用的算法：动态规划和贪心算法。动态规划常被人比作是递归的逆过程，而贪心算法在很多求有问题上，是不二之选。\n\n# 动态规划\n\n动态规划为什么会被认为是递归相反的技术呢，是因为递归是从顶部开始将问题分解，通过解决掉所有小问题的方式，来解决征哥问题，动态规划是从底部开始解决问题，将所有小问题解决掉，然后合并成整个大的问题。\n\n递归算法写法简单但是效率并不高。\n\n## 斐波拉契数列\n\n斐波拉契数列 定义为一下序列：0,1,1,2,3,5,8,13,21,34,55\n\n公式为：n>=2,a<sub>n</sub> = a<sub>n-1</sub>+a <sub>n-2</sub>,这个序列是用来描述在理想状况下兔子的增长情况。\n\n若是用递归实现：\n\n```javascript\nfunction fibo(n) {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return fibo(n - 1) + fibo(n - 2);\n}\n```\n\n这种实现方式非常耗性能，在 n 的数量级到达千级别就会变得特别慢，甚至失去响应。\n\n优化方案：\n\n```javascript\nfunction fibo(n) {\n    if (n <= 0) return 0;\n    if (n <= 1) return 1;\n    var a = 0,\n        b = 1;\n    for (var i = 2; i <= n; i++) {\n        b = a + b;\n        a = b - a;\n    }\n    return b;\n}\n```\n\n## 寻找最长公共子串\n\n例如在 hello 和 wellcome 中最长子串是 ell\n\n一种暴力的办法：\n\n```javascript\nfunction maxSubString(str1, str2) {\n    if (!str1 || !str2) return \"\";\n    var len1 = str1.length,\n        len2 = str2.length;\n    var maxSubStr = \"\";\n    for (var i = 0; i < len1; i++) {\n        for (var j = 0; j < len2; j++) {\n            var tempStr = \"\",\n                k = 0;\n            while (\n                i + k < len1 &&\n                j + k < len2 &&\n                str1[i + k] === str2[j + k]\n            ) {\n                tempStr += str1[i + k];\n                k++;\n            }\n            if (tempStr.length > maxSubStr.length) {\n                maxSubStr = tempStr;\n            }\n        }\n    }\n    return maxSubStr;\n}\n```\n\n而且上面不考虑多个一样长的情况吗？\n\n```javascript\nfunction findSubStr(str1, str2){\n    if (str1.length > str2.length) {\n      var temp = str1;\n      str1 = str2;\n      str2 = temp;\n    }\n    var len1 = str1.length,\n      len2 = str2.length;\n    for (var j = len1; j > 0; j--) {\n      for (var i = 0; i < len1 - j; i++) {\n        var current = str1.substr(i, j);\n        if (str2.indexOf(current) >= 0) {\n          return current;\n        }\n      }\n    }\n    return \"\";\n  }\n  console.log(findSubStr(\"aaa3333\", \"baa333cc\")); // aa333\n  console.log(findSubStr(\"aaaX3333--\", \"baa333ccX3333333x\")) // X3333\n```","slug":"JavaScript动态规划和贪心算法","published":1,"updated":"2019-07-24T06:41:00.035Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmejaero000fxcvr4tjn7b1a","content":"<p>自从做了一个树的深度搜索、广度查询、树的之后，我就深刻的意识到自己对算法和数据结构一无所知，做出来的方案总感觉不是最优解。</p>\n<span id=\"more\"></span>\n\n<p>这里记录两种常用的算法：动态规划和贪心算法。动态规划常被人比作是递归的逆过程，而贪心算法在很多求有问题上，是不二之选。</p>\n<h1 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h1><p>动态规划为什么会被认为是递归相反的技术呢，是因为递归是从顶部开始将问题分解，通过解决掉所有小问题的方式，来解决征哥问题，动态规划是从底部开始解决问题，将所有小问题解决掉，然后合并成整个大的问题。</p>\n<p>递归算法写法简单但是效率并不高。</p>\n<h2 id=\"斐波拉契数列\"><a href=\"#斐波拉契数列\" class=\"headerlink\" title=\"斐波拉契数列\"></a>斐波拉契数列</h2><p>斐波拉契数列 定义为一下序列：0,1,1,2,3,5,8,13,21,34,55</p>\n<p>公式为：n&gt;=2,a<sub>n</sub> = a<sub>n-1</sub>+a <sub>n-2</sub>,这个序列是用来描述在理想状况下兔子的增长情况。</p>\n<p>若是用递归实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibo</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fibo(n - <span class=\"number\">1</span>) + fibo(n - <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种实现方式非常耗性能，在 n 的数量级到达千级别就会变得特别慢，甚至失去响应。</p>\n<p>优化方案：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibo</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">0</span>,</span><br><span class=\"line\">        b = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        b = a + b;</span><br><span class=\"line\">        a = b - a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"寻找最长公共子串\"><a href=\"#寻找最长公共子串\" class=\"headerlink\" title=\"寻找最长公共子串\"></a>寻找最长公共子串</h2><p>例如在 hello 和 wellcome 中最长子串是 ell</p>\n<p>一种暴力的办法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">maxSubString</span>(<span class=\"params\">str1, str2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!str1 || !str2) <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len1 = str1.length,</span><br><span class=\"line\">        len2 = str2.length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> maxSubStr = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len1; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; len2; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> tempStr = <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">                k = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (</span><br><span class=\"line\">                i + k &lt; len1 &amp;&amp;</span><br><span class=\"line\">                j + k &lt; len2 &amp;&amp;</span><br><span class=\"line\">                str1[i + k] === str2[j + k]</span><br><span class=\"line\">            ) &#123;</span><br><span class=\"line\">                tempStr += str1[i + k];</span><br><span class=\"line\">                k++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tempStr.length &gt; maxSubStr.length) &#123;</span><br><span class=\"line\">                maxSubStr = tempStr;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxSubStr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而且上面不考虑多个一样长的情况吗？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findSubStr</span>(<span class=\"params\">str1, str2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str1.length &gt; str2.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> temp = str1;</span><br><span class=\"line\">      str1 = str2;</span><br><span class=\"line\">      str2 = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len1 = str1.length,</span><br><span class=\"line\">      len2 = str2.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = len1; j &gt; <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len1 - j; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> current = str1.substr(i, j);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (str2.indexOf(current) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> current;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(findSubStr(<span class=\"string\">&quot;aaa3333&quot;</span>, <span class=\"string\">&quot;baa333cc&quot;</span>)); <span class=\"comment\">// aa333</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(findSubStr(<span class=\"string\">&quot;aaaX3333--&quot;</span>, <span class=\"string\">&quot;baa333ccX3333333x&quot;</span>)) <span class=\"comment\">// X3333</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>自从做了一个树的深度搜索、广度查询、树的之后，我就深刻的意识到自己对算法和数据结构一无所知，做出来的方案总感觉不是最优解。</p>","more":"<p>这里记录两种常用的算法：动态规划和贪心算法。动态规划常被人比作是递归的逆过程，而贪心算法在很多求有问题上，是不二之选。</p>\n<h1 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h1><p>动态规划为什么会被认为是递归相反的技术呢，是因为递归是从顶部开始将问题分解，通过解决掉所有小问题的方式，来解决征哥问题，动态规划是从底部开始解决问题，将所有小问题解决掉，然后合并成整个大的问题。</p>\n<p>递归算法写法简单但是效率并不高。</p>\n<h2 id=\"斐波拉契数列\"><a href=\"#斐波拉契数列\" class=\"headerlink\" title=\"斐波拉契数列\"></a>斐波拉契数列</h2><p>斐波拉契数列 定义为一下序列：0,1,1,2,3,5,8,13,21,34,55</p>\n<p>公式为：n&gt;=2,a<sub>n</sub> = a<sub>n-1</sub>+a <sub>n-2</sub>,这个序列是用来描述在理想状况下兔子的增长情况。</p>\n<p>若是用递归实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibo</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fibo(n - <span class=\"number\">1</span>) + fibo(n - <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种实现方式非常耗性能，在 n 的数量级到达千级别就会变得特别慢，甚至失去响应。</p>\n<p>优化方案：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibo</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">0</span>,</span><br><span class=\"line\">        b = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        b = a + b;</span><br><span class=\"line\">        a = b - a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"寻找最长公共子串\"><a href=\"#寻找最长公共子串\" class=\"headerlink\" title=\"寻找最长公共子串\"></a>寻找最长公共子串</h2><p>例如在 hello 和 wellcome 中最长子串是 ell</p>\n<p>一种暴力的办法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">maxSubString</span>(<span class=\"params\">str1, str2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!str1 || !str2) <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len1 = str1.length,</span><br><span class=\"line\">        len2 = str2.length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> maxSubStr = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len1; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; len2; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> tempStr = <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">                k = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (</span><br><span class=\"line\">                i + k &lt; len1 &amp;&amp;</span><br><span class=\"line\">                j + k &lt; len2 &amp;&amp;</span><br><span class=\"line\">                str1[i + k] === str2[j + k]</span><br><span class=\"line\">            ) &#123;</span><br><span class=\"line\">                tempStr += str1[i + k];</span><br><span class=\"line\">                k++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tempStr.length &gt; maxSubStr.length) &#123;</span><br><span class=\"line\">                maxSubStr = tempStr;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxSubStr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而且上面不考虑多个一样长的情况吗？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findSubStr</span>(<span class=\"params\">str1, str2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str1.length &gt; str2.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> temp = str1;</span><br><span class=\"line\">      str1 = str2;</span><br><span class=\"line\">      str2 = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len1 = str1.length,</span><br><span class=\"line\">      len2 = str2.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = len1; j &gt; <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len1 - j; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> current = str1.substr(i, j);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (str2.indexOf(current) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> current;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(findSubStr(<span class=\"string\">&quot;aaa3333&quot;</span>, <span class=\"string\">&quot;baa333cc&quot;</span>)); <span class=\"comment\">// aa333</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(findSubStr(<span class=\"string\">&quot;aaaX3333--&quot;</span>, <span class=\"string\">&quot;baa333ccX3333333x&quot;</span>)) <span class=\"comment\">// X3333</span></span><br></pre></td></tr></table></figure>"},{"title":"Jenkins对前端应用做自动化构建","date":"2019-12-03T08:58:31.000Z","_content":"# Jenkins是什么\nJenkins是一个开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能，最初的创建者川口清子（Kohsuke Kawaguchi）。他独自写了大部分代码\n\n<!--more-->\n![network](https://user-images.githubusercontent.com/16111288/68524077-01e52f80-02fd-11ea-9531-d039a4c77113.png)\n\n![network](https://user-images.githubusercontent.com/16111288/68523536-9c417500-02f5-11ea-9862-dd7bc23ae9ec.png)\n\n# 概要\n\n今天分享的主要内容有\n- Docker简单介绍\n- Jenkins的简介与安装\n- Jenkins对接Github 项目做持续集成\n- Jenkins构建项目的几种方式\n- Jenkins上传前端包到文件服务器\n- 云服务器简单使用介绍\n\n\n涉及到的资源和工具\n- 一台阿里云Linux服务器（默认安装Centos）。\n- Xshell：一个Windows软件，脚本的方式来操作服务器。\n- XFTP：是Xshell的一个插件，能图形化看到服务器的文件。\n- Nginx：展示前端页面\n- Docker：一个运行Jenkins的容器\n- Jenkins\n- Git\n\n# 现状\n如今我们已经到前后端分离开发的模式。通常情况下，前端只需要把HTML，CSS，JS打包好之后，发给后端部署即可。最能体现这个场景比如使用vue来开发前端项目的时候，利用vue-cli脚手架来帮我们打包npm run build。 最终会生成一个dist目录，我们只需提供这个dist包给后端开发人员即可。\n\n如果只发一个版本，这种方式完全OK，但是如果需要频繁的更新版本，就会有如下图的操作，各个人员在频发互传代码包，容易出问题。这对于前后端来说，都是一个很低效的事情。\n\n![network](https://user-images.githubusercontent.com/16111288/68523471-c6466780-02f4-11ea-8700-e6c5e0bef519.png)\n\n因此我们需要将低效的手动式部署，升级为更加先进的工程化，流水线式的持续部署。Jenkins就很好的可以做这样的事情，而且我们公司的持续集成也是使用这个工具。\n\n# CI/CD\n## 持续集成Continuous Integration（CI）\n持续集成强调开发人员提交了新代码之后，立刻自动的进行构建、（单元）测试。根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起。\n持续集成过程中很重视自动化测试验证结果，对可能出现的一些问题进行预警，以保障最终合并的代码没有问题。\n\n## 持续交付Continuous Delivery（CD）\n持续交付在持续集成的基础上，将集成后的代码部署到更贴近真实运行环境的「类生产环境」（production-like environments）中。交付给质量团队或者用户，以供评审。如果评审通过，代码就进入生产阶段。\n持续交付并不是指软件每一个改动都要尽快部署到产品环境中，它指的是任何的代码修改都可以在任何时候实施部署。\n这里强调的是\n\n- 手动部署\n- 有部署的能力，但不一定部署\n\n## 持续部署（Continuous Deployment)\n持续部署是指当交付的代码通过评审之后，自动部署到生产环境中。持续部署是持续交付的最高阶段。\n这里强调\n\n- 持续部署是自动的\n- 持续部署是持续交付的最高阶段\n\n## 总结\n「持续集成（Continuous Integration）」、「持续交付（Continuous Delivery）」和「持续部署（Continuous Deployment）」提供了一个优秀的 DevOps 环境，对于整个团队来说，好处与挑战并行。无论如何，频繁部署、快速交付以及开发测试流程自动化都将成为未来软件工程的重要组成部分。\n\n# Docker\n\n## docker简介\n\nDocker 是现今非常流行的一种容器化打包和发布工具，配合Git、SVN等代码版本管理工具， Jenkins、Gitlab Runner等持续集成工具，以及Swarn、Kubernetes 等容器编排工具，可以形成一个完整的软件自动化集成、测试发布流水线（CI/CD），可以有效的提升团队的生产效率和运维体验。\n\nDocker是一种Linux容器技术，容器有效的将由单个操作系统挂管理的资源划分到孤立的组中，以便更好的在组之间平衡有冲突的资源使用需求。可简单理解为一种沙盒 。每个容器内运行一个应用，不同的容器之间相互隔离，容器之间也可以建立通信机制。容器的创建和停止都十分快速，资源需求远远低于虚拟机，一个非常明显的区别就是在运行虚拟机中包含有操作系统，而容器中却没有。\n\n虚拟机正因为带有独立的操作系统，它可以通过这个操作系统内核进行对硬件资源的自主访问，成为一个独立完备的计算机小生态。Docker容器不具备这样的功能，它只能通过与宿主机共享操作系统内核来进行硬件资源的访问，但这也不是docker 的缺点，反而因为不需要携带自己的操作系统，容器变得更小更轻量，创建容器变得非常快速\n\n## docker与虚拟机对比\n| 特性       | docker容器           | 虚拟机               |\n| ---------- | -------------------- | -------------------- |\n| 启动速度   | 秒级                 | 分钟级               |\n| 硬盘使用   | 一般为MB             | 一般为GB             |\n| 性能       | 接近原生             | 弱于原生             |\n| 系统支持量 | 单台机支持上千个容器 | 单台机支持几十个容器 |\n| 隔离性     | 安全隔离             | 安全隔离             |\n\n## Docker容器\n\n 类似linux系统环境，运行和隔离应用。容器从镜像启动的时候，docker会在镜像的最上一层创建一个可写层，镜像本身是只读的，保持不变，是一个文件系统。\n\n## Docker镜像\n\nDocker镜像是一个Docker的可执行文件，其中包含了运行应用程序所需要的代码、依赖库、环境变量、配置文件等等，也是一个文件系统。\n\n## 仓库\n仓库分为本地仓库和远程仓库，是用于存储镜像的地方，通常在电脑上通过docker build 构建镜像后，镜像就被存放着在本地仓库中；当我们要转移、分发这些镜像的时候，就需要利用远程镜像仓库，讲镜像上传，方便后续其他电脑可以从小这些远程仓库中下载到我们的镜像。\n## Dockerfile\n\n如果你想要从一个基础镜像开始建立一个自定义镜像，可以选择一步一步进行构建，也可以选择写一个配置文件，然后一条命令（docker build）完成构建，显然配置文件的方式可以更好地应对需求的变更，这个配置文件就是Dockerfile。\n学习Dockerfile的最好方式就是阅读别人写的Dockerfile，遇到不会的指令就查一查Dockerfile的文档\n\n## 注意\n关机后，docker容器会停止运行，镜像会保留在硬盘上，就想关机了，软件就关闭了，但可以再次打开。\n\n# Jenkins\n\n## Jenkins安装\n建议直接在Linux上安装，首页的插件选择默认的安装。\n\n## Jenkins页面简介\n\n​\t\tjenkins系统的介绍\n\n## Jenkins插件安装\n\n作为CI/CD的调度中心，Jenkins具有十八般武艺，目前已有1500多个插件，功能非常强大，比如说我们用到的，node插件，npm插件，Github插件，ssh上传文件插件，还有很多插件，比较多人用的，导出测试报告，sonar代码扫描等等。如果再jenkins里面没有搜到想用的插件，去官网搜，下载后在回来安装需要额外安装的有：\n- Github plugin：把代码从Github上拉下来\n- Nodejs：运行前端项目，npm install，npm run build \n- Pubish Over SSH：把构建好的文件 上传到nginx\n- Email Extended  Template : 发送邮件通知\n\n### 在github配置钩子\n\tJenkins需要一个对项目有读写权限的账户，所以要在github生成一个token给jenkins使用，这个token，在后面需要用到。\n> \t进入github --> setting --> Personal Access Token --> Generate new token\n\n![network](https://user-images.githubusercontent.com/16111288/68523844-aebdad80-02f9-11ea-9294-828868dfdf69.png)\n\n![network](https://user-images.githubusercontent.com/16111288/68523993-9e0e3700-02fb-11ea-9a0b-f07e19b9cc7f.png)\n\n拿到这个token之后先保存好，等会到jenkins中需要配置凭证\n我们有一个token可以访问到github了，但是还要对其中的项目设置钩子\n> \t进入GitHub上指定的项目 --> setting --> WebHooks&Services --> add webhook --> 输入刚刚部署jenkins的服务器的IP\n\n![network](https://user-images.githubusercontent.com/16111288/68524015-04935500-02fc-11ea-9a12-9cfd5bfc7695.png)\n\n## 在Jenkins和github钩子\n\n### 安装github plugin\n> 系统管理-->插件管理-->可选插件\n### 配置github plugin\n> 系统管理-->github plugin\n\nAPI URL 输入 `https://api.github.com`，Credentials点击Add添加，Kind选择Secret Text,具体如下图所示。\n\n![network](https://user-images.githubusercontent.com/16111288/68524053-c64a6580-02fc-11ea-9f2d-db3a71b304d3.png)\n\n![network](https://user-images.githubusercontent.com/16111288/68524112-9485ce80-02fd-11ea-9047-d73780d20b48.png)\n\n设置完成后，点击`TestConnection`,提示`Credentials verified for user UUserName, rate limit: xxx`,则表明有效。\n\n## 构建配置\n\n## 构建方式\n\n- 手动构建：自己上Jenkins点击。\n- 自动构建：提交代码到git仓库之后，自动构建。\n- 定时构建：每隔一段时间构建一次，比如设置每天固定某个时间段构建。\n\n### 编写shell脚本\n\nShell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。Shell 既是一种命令语言，又是一种程序设计语言。\n\n`node -v`\n`npm -v`\n`npm --registry https://registry.npm.taobao.org install`\n`npm run test:unit`\n`npm run build`\n\n### 参数化构建\n选择参数化构建，配置参数，在工程的首页就会多一个构建入口，参数化构建使得构建变得更加灵活。\n\n![network](https://user-images.githubusercontent.com/16111288/68524161-5d63ed00-02fe-11ea-9874-1f4672d47891.png)\n\n![network](https://user-images.githubusercontent.com/16111288/68524197-a0be5b80-02fe-11ea-8765-a5505bc42420.png)\n\n### 上传构建包\n\n使用nginx做为文件服务器\n在机器上安装nginx\n在nginx上配置为文件资源服务器\n\n`location / {\n        root   /usr/share/nginx/html/static;\n        autoindex on;\n        autoindex_exact_size off;\n        autoindex_localtime on;\n    }`\n![network](https://user-images.githubusercontent.com/16111288/68524366-0b709680-0301-11ea-8892-a7e1e50f4cfa.png)\n\n## Jenkins系统配置SSH账号\n\n安装Publish Over SSH插件用于SSH连接远程的服务器。\n\n登录 jenkins 管理系统首页，打开“系统管理”--“管理插件”  搜索 Publish Over SSH 然后勾选安装\n配置远程服务器的连接\n\n打开“系统管理”--“系统设置”  找到 “Publish over SSH” 项 ，我这里远程服务器用的是ssh登录，通过ppk密钥进行连接，所以我的配置如图，如果是帐号密码登录的Passphrase填写密码Username填写用户名，path to key 为空就可以了。\n\n![network](https://user-images.githubusercontent.com/16111288/68524390-5094c880-0301-11ea-8559-ad729ff4f671.png)\n\n点击 Test Configuration 按钮测试连接是否成功\n\n![network](https://user-images.githubusercontent.com/16111288/68524400-6bffd380-0301-11ea-840d-96bc52a4257b.png)\n\n### JOB添加构建后上传\n\n> “构建后操作步骤”---“Send build artifacts over SSH” \n\nName：第三步创建的远程服务器名称\n\nSource files：本地需要传输过去的文件路径\n\nRemove prefix：过滤掉的目录名\n\nRemote directory：远程服务器的保存路径\n\nExec command：传输完成后在远程服务器执行的sh命令\n\n![network](https://user-images.githubusercontent.com/16111288/68524450-03652680-0302-11ea-9bce-f7b42ddf589d.png)\n\n## 构建后邮件通知\n构建成功之后，可以进行邮件通知。\n第一步，先到插件管理安装插件，Email Extension Plugin，我只搜到了Email EXtension Template，所以就安装了它\n\n\n如果是QQ邮箱，先去获取一个独立密码\n\n![network](https://user-images.githubusercontent.com/16111288/68524622-02cd8f80-0304-11ea-949b-ec148ea39d08.png)\n\n> 系统管理-->系统设置--> Extended E-mail Notification\n\n![network](https://user-images.githubusercontent.com/16111288/68524633-1a0c7d00-0304-11ea-8bdb-3c94222fcfb8.png)\n\n![network](https://user-images.githubusercontent.com/16111288/68524636-21338b00-0304-11ea-8ac7-0e8aa0f07aab.png)\n\n## 配置邮件报错\n\n![network](https://user-images.githubusercontent.com/16111288/68524653-593ace00-0304-11ea-9b60-d4f4227f020c.png)\n\n邮件配置的过程出错，是因为管理的邮箱没有配置，到用户设置去设置\n\n![network](https://user-images.githubusercontent.com/16111288/68524659-6952ad80-0304-11ea-846b-fb1dc721ab56.png)\n\n### 构建后选择接收人\n\n![network](https://user-images.githubusercontent.com/16111288/68524667-7f606e00-0304-11ea-8425-84fbd475e9af.png)\n\n\n## 注意\n\n 对于新手来说，Jenkin最好直接安装在机器上，安装在docker上的话，Jenkins无法访问到宿主机器的环境变量，比如我在机器上安装Yarn，但docker上的Jenkins无法访问得到Yarn，只能老老实实的使用npm。\n\n\n\n## 遇到的问题\n\n- 学习Jenkins，Docker这种工具，最好租一个服务器，不需要买域名，按月租就够了。\n- 境外服务器的比境内便宜，但境外的经常连不上去，每天总有几个小时连不上去。\n- 构建过程中npm install总是失败，服务器从1G内存扩容到2G 之后又成功了。\n- Docker安装的jenkins无法访问到本机的环境变量，例如无法在构建脚本中写Yarn命令。\n\n\n# 阿里云简介\n\n轻量应用型服务器，便宜，适合学习。\n买好之后，在点击进入自己的机器\n\n![network](https://user-images.githubusercontent.com/16111288/68524467-30193e00-0302-11ea-8266-0114201443ba.png)\n\n服务器默认只开发 80,443，22端口是可以通过外网进行访问的，如果自己的应用是8080,8088这个端口，需要在阿里云防火墙里面添加规则，并重启机器\n\n![network](https://user-images.githubusercontent.com/16111288/68524471-3c050000-0302-11ea-8d61-54e8fc0000fb.png)\n\n## 通过xshell进入服务器\n\n![network](https://user-images.githubusercontent.com/16111288/68524476-4c1cdf80-0302-11ea-825b-aa3ce6144c22.png)\n\n# 访问github慢\n\ngithub的CDN被某墙屏了，由于网络代理商的原因，所以访问下载很慢。ping github.com 时，速度只有300多ms。\n绕过dns解析，在本地直接绑定host，该方法也可加速其他因为CDN被屏蔽导致访问慢的网站。\nwindows系统的hosts文件的位置如下：C:\\Windows\\System32\\drivers\\etc\\hosts\nmac/linux系统的hosts文件的位置如下：/etc/hosts\n\n修改windows里的hosts文件，添加如下内容\n\n`# Github\n151.101.44.249 github.global.ssl.fastly.net \n192.30.253.113 github.com \n103.245.222.133 assets-cdn.github.com \n23.235.47.133 assets-cdn.github.com \n203.208.39.104 assets-cdn.github.com \n204.232.175.78 documentcloud.github.com \n204.232.175.94 gist.github.com \n107.21.116.220 help.github.com \n207.97.227.252 nodeload.github.com \n199.27.76.130 raw.github.com \n107.22.3.110 status.github.com \n204.232.175.78 training.github.com \n207.97.227.243 www.github.com \n185.31.16.184 github.global.ssl.fastly.net \n185.31.18.133 avatars0.githubusercontent.com \n185.31.19.133 avatars1.githubusercontent.com\n192.30.253.120 codeload.github.com`","source":"_posts/Jenkins对前端应用做自动化构建.md","raw":"---\ntitle: Jenkins对前端应用做自动化构建\ndate: 2019-12-03 16:58:31\ncategories: 工具\n---\n# Jenkins是什么\nJenkins是一个开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能，最初的创建者川口清子（Kohsuke Kawaguchi）。他独自写了大部分代码\n\n<!--more-->\n![network](https://user-images.githubusercontent.com/16111288/68524077-01e52f80-02fd-11ea-9531-d039a4c77113.png)\n\n![network](https://user-images.githubusercontent.com/16111288/68523536-9c417500-02f5-11ea-9862-dd7bc23ae9ec.png)\n\n# 概要\n\n今天分享的主要内容有\n- Docker简单介绍\n- Jenkins的简介与安装\n- Jenkins对接Github 项目做持续集成\n- Jenkins构建项目的几种方式\n- Jenkins上传前端包到文件服务器\n- 云服务器简单使用介绍\n\n\n涉及到的资源和工具\n- 一台阿里云Linux服务器（默认安装Centos）。\n- Xshell：一个Windows软件，脚本的方式来操作服务器。\n- XFTP：是Xshell的一个插件，能图形化看到服务器的文件。\n- Nginx：展示前端页面\n- Docker：一个运行Jenkins的容器\n- Jenkins\n- Git\n\n# 现状\n如今我们已经到前后端分离开发的模式。通常情况下，前端只需要把HTML，CSS，JS打包好之后，发给后端部署即可。最能体现这个场景比如使用vue来开发前端项目的时候，利用vue-cli脚手架来帮我们打包npm run build。 最终会生成一个dist目录，我们只需提供这个dist包给后端开发人员即可。\n\n如果只发一个版本，这种方式完全OK，但是如果需要频繁的更新版本，就会有如下图的操作，各个人员在频发互传代码包，容易出问题。这对于前后端来说，都是一个很低效的事情。\n\n![network](https://user-images.githubusercontent.com/16111288/68523471-c6466780-02f4-11ea-8700-e6c5e0bef519.png)\n\n因此我们需要将低效的手动式部署，升级为更加先进的工程化，流水线式的持续部署。Jenkins就很好的可以做这样的事情，而且我们公司的持续集成也是使用这个工具。\n\n# CI/CD\n## 持续集成Continuous Integration（CI）\n持续集成强调开发人员提交了新代码之后，立刻自动的进行构建、（单元）测试。根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起。\n持续集成过程中很重视自动化测试验证结果，对可能出现的一些问题进行预警，以保障最终合并的代码没有问题。\n\n## 持续交付Continuous Delivery（CD）\n持续交付在持续集成的基础上，将集成后的代码部署到更贴近真实运行环境的「类生产环境」（production-like environments）中。交付给质量团队或者用户，以供评审。如果评审通过，代码就进入生产阶段。\n持续交付并不是指软件每一个改动都要尽快部署到产品环境中，它指的是任何的代码修改都可以在任何时候实施部署。\n这里强调的是\n\n- 手动部署\n- 有部署的能力，但不一定部署\n\n## 持续部署（Continuous Deployment)\n持续部署是指当交付的代码通过评审之后，自动部署到生产环境中。持续部署是持续交付的最高阶段。\n这里强调\n\n- 持续部署是自动的\n- 持续部署是持续交付的最高阶段\n\n## 总结\n「持续集成（Continuous Integration）」、「持续交付（Continuous Delivery）」和「持续部署（Continuous Deployment）」提供了一个优秀的 DevOps 环境，对于整个团队来说，好处与挑战并行。无论如何，频繁部署、快速交付以及开发测试流程自动化都将成为未来软件工程的重要组成部分。\n\n# Docker\n\n## docker简介\n\nDocker 是现今非常流行的一种容器化打包和发布工具，配合Git、SVN等代码版本管理工具， Jenkins、Gitlab Runner等持续集成工具，以及Swarn、Kubernetes 等容器编排工具，可以形成一个完整的软件自动化集成、测试发布流水线（CI/CD），可以有效的提升团队的生产效率和运维体验。\n\nDocker是一种Linux容器技术，容器有效的将由单个操作系统挂管理的资源划分到孤立的组中，以便更好的在组之间平衡有冲突的资源使用需求。可简单理解为一种沙盒 。每个容器内运行一个应用，不同的容器之间相互隔离，容器之间也可以建立通信机制。容器的创建和停止都十分快速，资源需求远远低于虚拟机，一个非常明显的区别就是在运行虚拟机中包含有操作系统，而容器中却没有。\n\n虚拟机正因为带有独立的操作系统，它可以通过这个操作系统内核进行对硬件资源的自主访问，成为一个独立完备的计算机小生态。Docker容器不具备这样的功能，它只能通过与宿主机共享操作系统内核来进行硬件资源的访问，但这也不是docker 的缺点，反而因为不需要携带自己的操作系统，容器变得更小更轻量，创建容器变得非常快速\n\n## docker与虚拟机对比\n| 特性       | docker容器           | 虚拟机               |\n| ---------- | -------------------- | -------------------- |\n| 启动速度   | 秒级                 | 分钟级               |\n| 硬盘使用   | 一般为MB             | 一般为GB             |\n| 性能       | 接近原生             | 弱于原生             |\n| 系统支持量 | 单台机支持上千个容器 | 单台机支持几十个容器 |\n| 隔离性     | 安全隔离             | 安全隔离             |\n\n## Docker容器\n\n 类似linux系统环境，运行和隔离应用。容器从镜像启动的时候，docker会在镜像的最上一层创建一个可写层，镜像本身是只读的，保持不变，是一个文件系统。\n\n## Docker镜像\n\nDocker镜像是一个Docker的可执行文件，其中包含了运行应用程序所需要的代码、依赖库、环境变量、配置文件等等，也是一个文件系统。\n\n## 仓库\n仓库分为本地仓库和远程仓库，是用于存储镜像的地方，通常在电脑上通过docker build 构建镜像后，镜像就被存放着在本地仓库中；当我们要转移、分发这些镜像的时候，就需要利用远程镜像仓库，讲镜像上传，方便后续其他电脑可以从小这些远程仓库中下载到我们的镜像。\n## Dockerfile\n\n如果你想要从一个基础镜像开始建立一个自定义镜像，可以选择一步一步进行构建，也可以选择写一个配置文件，然后一条命令（docker build）完成构建，显然配置文件的方式可以更好地应对需求的变更，这个配置文件就是Dockerfile。\n学习Dockerfile的最好方式就是阅读别人写的Dockerfile，遇到不会的指令就查一查Dockerfile的文档\n\n## 注意\n关机后，docker容器会停止运行，镜像会保留在硬盘上，就想关机了，软件就关闭了，但可以再次打开。\n\n# Jenkins\n\n## Jenkins安装\n建议直接在Linux上安装，首页的插件选择默认的安装。\n\n## Jenkins页面简介\n\n​\t\tjenkins系统的介绍\n\n## Jenkins插件安装\n\n作为CI/CD的调度中心，Jenkins具有十八般武艺，目前已有1500多个插件，功能非常强大，比如说我们用到的，node插件，npm插件，Github插件，ssh上传文件插件，还有很多插件，比较多人用的，导出测试报告，sonar代码扫描等等。如果再jenkins里面没有搜到想用的插件，去官网搜，下载后在回来安装需要额外安装的有：\n- Github plugin：把代码从Github上拉下来\n- Nodejs：运行前端项目，npm install，npm run build \n- Pubish Over SSH：把构建好的文件 上传到nginx\n- Email Extended  Template : 发送邮件通知\n\n### 在github配置钩子\n\tJenkins需要一个对项目有读写权限的账户，所以要在github生成一个token给jenkins使用，这个token，在后面需要用到。\n> \t进入github --> setting --> Personal Access Token --> Generate new token\n\n![network](https://user-images.githubusercontent.com/16111288/68523844-aebdad80-02f9-11ea-9294-828868dfdf69.png)\n\n![network](https://user-images.githubusercontent.com/16111288/68523993-9e0e3700-02fb-11ea-9a0b-f07e19b9cc7f.png)\n\n拿到这个token之后先保存好，等会到jenkins中需要配置凭证\n我们有一个token可以访问到github了，但是还要对其中的项目设置钩子\n> \t进入GitHub上指定的项目 --> setting --> WebHooks&Services --> add webhook --> 输入刚刚部署jenkins的服务器的IP\n\n![network](https://user-images.githubusercontent.com/16111288/68524015-04935500-02fc-11ea-9a12-9cfd5bfc7695.png)\n\n## 在Jenkins和github钩子\n\n### 安装github plugin\n> 系统管理-->插件管理-->可选插件\n### 配置github plugin\n> 系统管理-->github plugin\n\nAPI URL 输入 `https://api.github.com`，Credentials点击Add添加，Kind选择Secret Text,具体如下图所示。\n\n![network](https://user-images.githubusercontent.com/16111288/68524053-c64a6580-02fc-11ea-9f2d-db3a71b304d3.png)\n\n![network](https://user-images.githubusercontent.com/16111288/68524112-9485ce80-02fd-11ea-9047-d73780d20b48.png)\n\n设置完成后，点击`TestConnection`,提示`Credentials verified for user UUserName, rate limit: xxx`,则表明有效。\n\n## 构建配置\n\n## 构建方式\n\n- 手动构建：自己上Jenkins点击。\n- 自动构建：提交代码到git仓库之后，自动构建。\n- 定时构建：每隔一段时间构建一次，比如设置每天固定某个时间段构建。\n\n### 编写shell脚本\n\nShell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。Shell 既是一种命令语言，又是一种程序设计语言。\n\n`node -v`\n`npm -v`\n`npm --registry https://registry.npm.taobao.org install`\n`npm run test:unit`\n`npm run build`\n\n### 参数化构建\n选择参数化构建，配置参数，在工程的首页就会多一个构建入口，参数化构建使得构建变得更加灵活。\n\n![network](https://user-images.githubusercontent.com/16111288/68524161-5d63ed00-02fe-11ea-9874-1f4672d47891.png)\n\n![network](https://user-images.githubusercontent.com/16111288/68524197-a0be5b80-02fe-11ea-8765-a5505bc42420.png)\n\n### 上传构建包\n\n使用nginx做为文件服务器\n在机器上安装nginx\n在nginx上配置为文件资源服务器\n\n`location / {\n        root   /usr/share/nginx/html/static;\n        autoindex on;\n        autoindex_exact_size off;\n        autoindex_localtime on;\n    }`\n![network](https://user-images.githubusercontent.com/16111288/68524366-0b709680-0301-11ea-8892-a7e1e50f4cfa.png)\n\n## Jenkins系统配置SSH账号\n\n安装Publish Over SSH插件用于SSH连接远程的服务器。\n\n登录 jenkins 管理系统首页，打开“系统管理”--“管理插件”  搜索 Publish Over SSH 然后勾选安装\n配置远程服务器的连接\n\n打开“系统管理”--“系统设置”  找到 “Publish over SSH” 项 ，我这里远程服务器用的是ssh登录，通过ppk密钥进行连接，所以我的配置如图，如果是帐号密码登录的Passphrase填写密码Username填写用户名，path to key 为空就可以了。\n\n![network](https://user-images.githubusercontent.com/16111288/68524390-5094c880-0301-11ea-8559-ad729ff4f671.png)\n\n点击 Test Configuration 按钮测试连接是否成功\n\n![network](https://user-images.githubusercontent.com/16111288/68524400-6bffd380-0301-11ea-840d-96bc52a4257b.png)\n\n### JOB添加构建后上传\n\n> “构建后操作步骤”---“Send build artifacts over SSH” \n\nName：第三步创建的远程服务器名称\n\nSource files：本地需要传输过去的文件路径\n\nRemove prefix：过滤掉的目录名\n\nRemote directory：远程服务器的保存路径\n\nExec command：传输完成后在远程服务器执行的sh命令\n\n![network](https://user-images.githubusercontent.com/16111288/68524450-03652680-0302-11ea-9bce-f7b42ddf589d.png)\n\n## 构建后邮件通知\n构建成功之后，可以进行邮件通知。\n第一步，先到插件管理安装插件，Email Extension Plugin，我只搜到了Email EXtension Template，所以就安装了它\n\n\n如果是QQ邮箱，先去获取一个独立密码\n\n![network](https://user-images.githubusercontent.com/16111288/68524622-02cd8f80-0304-11ea-949b-ec148ea39d08.png)\n\n> 系统管理-->系统设置--> Extended E-mail Notification\n\n![network](https://user-images.githubusercontent.com/16111288/68524633-1a0c7d00-0304-11ea-8bdb-3c94222fcfb8.png)\n\n![network](https://user-images.githubusercontent.com/16111288/68524636-21338b00-0304-11ea-8ac7-0e8aa0f07aab.png)\n\n## 配置邮件报错\n\n![network](https://user-images.githubusercontent.com/16111288/68524653-593ace00-0304-11ea-9b60-d4f4227f020c.png)\n\n邮件配置的过程出错，是因为管理的邮箱没有配置，到用户设置去设置\n\n![network](https://user-images.githubusercontent.com/16111288/68524659-6952ad80-0304-11ea-846b-fb1dc721ab56.png)\n\n### 构建后选择接收人\n\n![network](https://user-images.githubusercontent.com/16111288/68524667-7f606e00-0304-11ea-8425-84fbd475e9af.png)\n\n\n## 注意\n\n 对于新手来说，Jenkin最好直接安装在机器上，安装在docker上的话，Jenkins无法访问到宿主机器的环境变量，比如我在机器上安装Yarn，但docker上的Jenkins无法访问得到Yarn，只能老老实实的使用npm。\n\n\n\n## 遇到的问题\n\n- 学习Jenkins，Docker这种工具，最好租一个服务器，不需要买域名，按月租就够了。\n- 境外服务器的比境内便宜，但境外的经常连不上去，每天总有几个小时连不上去。\n- 构建过程中npm install总是失败，服务器从1G内存扩容到2G 之后又成功了。\n- Docker安装的jenkins无法访问到本机的环境变量，例如无法在构建脚本中写Yarn命令。\n\n\n# 阿里云简介\n\n轻量应用型服务器，便宜，适合学习。\n买好之后，在点击进入自己的机器\n\n![network](https://user-images.githubusercontent.com/16111288/68524467-30193e00-0302-11ea-8266-0114201443ba.png)\n\n服务器默认只开发 80,443，22端口是可以通过外网进行访问的，如果自己的应用是8080,8088这个端口，需要在阿里云防火墙里面添加规则，并重启机器\n\n![network](https://user-images.githubusercontent.com/16111288/68524471-3c050000-0302-11ea-8d61-54e8fc0000fb.png)\n\n## 通过xshell进入服务器\n\n![network](https://user-images.githubusercontent.com/16111288/68524476-4c1cdf80-0302-11ea-825b-aa3ce6144c22.png)\n\n# 访问github慢\n\ngithub的CDN被某墙屏了，由于网络代理商的原因，所以访问下载很慢。ping github.com 时，速度只有300多ms。\n绕过dns解析，在本地直接绑定host，该方法也可加速其他因为CDN被屏蔽导致访问慢的网站。\nwindows系统的hosts文件的位置如下：C:\\Windows\\System32\\drivers\\etc\\hosts\nmac/linux系统的hosts文件的位置如下：/etc/hosts\n\n修改windows里的hosts文件，添加如下内容\n\n`# Github\n151.101.44.249 github.global.ssl.fastly.net \n192.30.253.113 github.com \n103.245.222.133 assets-cdn.github.com \n23.235.47.133 assets-cdn.github.com \n203.208.39.104 assets-cdn.github.com \n204.232.175.78 documentcloud.github.com \n204.232.175.94 gist.github.com \n107.21.116.220 help.github.com \n207.97.227.252 nodeload.github.com \n199.27.76.130 raw.github.com \n107.22.3.110 status.github.com \n204.232.175.78 training.github.com \n207.97.227.243 www.github.com \n185.31.16.184 github.global.ssl.fastly.net \n185.31.18.133 avatars0.githubusercontent.com \n185.31.19.133 avatars1.githubusercontent.com\n192.30.253.120 codeload.github.com`","slug":"Jenkins对前端应用做自动化构建","published":1,"updated":"2021-03-29T09:19:23.052Z","_id":"ckmejaerr000jxcvrbybw3lcj","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Jenkins是什么\"><a href=\"#Jenkins是什么\" class=\"headerlink\" title=\"Jenkins是什么\"></a>Jenkins是什么</h1><p>Jenkins是一个开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能，最初的创建者川口清子（Kohsuke Kawaguchi）。他独自写了大部分代码</p>\n<span id=\"more\"></span>\n<p><img src=\"https://user-images.githubusercontent.com/16111288/68524077-01e52f80-02fd-11ea-9531-d039a4c77113.png\" alt=\"network\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/16111288/68523536-9c417500-02f5-11ea-9862-dd7bc23ae9ec.png\" alt=\"network\"></p>\n<h1 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要\"></a>概要</h1><p>今天分享的主要内容有</p>\n<ul>\n<li>Docker简单介绍</li>\n<li>Jenkins的简介与安装</li>\n<li>Jenkins对接Github 项目做持续集成</li>\n<li>Jenkins构建项目的几种方式</li>\n<li>Jenkins上传前端包到文件服务器</li>\n<li>云服务器简单使用介绍</li>\n</ul>\n<p>涉及到的资源和工具</p>\n<ul>\n<li>一台阿里云Linux服务器（默认安装Centos）。</li>\n<li>Xshell：一个Windows软件，脚本的方式来操作服务器。</li>\n<li>XFTP：是Xshell的一个插件，能图形化看到服务器的文件。</li>\n<li>Nginx：展示前端页面</li>\n<li>Docker：一个运行Jenkins的容器</li>\n<li>Jenkins</li>\n<li>Git</li>\n</ul>\n<h1 id=\"现状\"><a href=\"#现状\" class=\"headerlink\" title=\"现状\"></a>现状</h1><p>如今我们已经到前后端分离开发的模式。通常情况下，前端只需要把HTML，CSS，JS打包好之后，发给后端部署即可。最能体现这个场景比如使用vue来开发前端项目的时候，利用vue-cli脚手架来帮我们打包npm run build。 最终会生成一个dist目录，我们只需提供这个dist包给后端开发人员即可。</p>\n<p>如果只发一个版本，这种方式完全OK，但是如果需要频繁的更新版本，就会有如下图的操作，各个人员在频发互传代码包，容易出问题。这对于前后端来说，都是一个很低效的事情。</p>\n<p><img src=\"https://user-images.githubusercontent.com/16111288/68523471-c6466780-02f4-11ea-8700-e6c5e0bef519.png\" alt=\"network\"></p>\n<p>因此我们需要将低效的手动式部署，升级为更加先进的工程化，流水线式的持续部署。Jenkins就很好的可以做这样的事情，而且我们公司的持续集成也是使用这个工具。</p>\n<h1 id=\"CI-CD\"><a href=\"#CI-CD\" class=\"headerlink\" title=\"CI/CD\"></a>CI/CD</h1><h2 id=\"持续集成Continuous-Integration（CI）\"><a href=\"#持续集成Continuous-Integration（CI）\" class=\"headerlink\" title=\"持续集成Continuous Integration（CI）\"></a>持续集成Continuous Integration（CI）</h2><p>持续集成强调开发人员提交了新代码之后，立刻自动的进行构建、（单元）测试。根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起。<br>持续集成过程中很重视自动化测试验证结果，对可能出现的一些问题进行预警，以保障最终合并的代码没有问题。</p>\n<h2 id=\"持续交付Continuous-Delivery（CD）\"><a href=\"#持续交付Continuous-Delivery（CD）\" class=\"headerlink\" title=\"持续交付Continuous Delivery（CD）\"></a>持续交付Continuous Delivery（CD）</h2><p>持续交付在持续集成的基础上，将集成后的代码部署到更贴近真实运行环境的「类生产环境」（production-like environments）中。交付给质量团队或者用户，以供评审。如果评审通过，代码就进入生产阶段。<br>持续交付并不是指软件每一个改动都要尽快部署到产品环境中，它指的是任何的代码修改都可以在任何时候实施部署。<br>这里强调的是</p>\n<ul>\n<li>手动部署</li>\n<li>有部署的能力，但不一定部署</li>\n</ul>\n<h2 id=\"持续部署（Continuous-Deployment\"><a href=\"#持续部署（Continuous-Deployment\" class=\"headerlink\" title=\"持续部署（Continuous Deployment)\"></a>持续部署（Continuous Deployment)</h2><p>持续部署是指当交付的代码通过评审之后，自动部署到生产环境中。持续部署是持续交付的最高阶段。<br>这里强调</p>\n<ul>\n<li>持续部署是自动的</li>\n<li>持续部署是持续交付的最高阶段</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>「持续集成（Continuous Integration）」、「持续交付（Continuous Delivery）」和「持续部署（Continuous Deployment）」提供了一个优秀的 DevOps 环境，对于整个团队来说，好处与挑战并行。无论如何，频繁部署、快速交付以及开发测试流程自动化都将成为未来软件工程的重要组成部分。</p>\n<h1 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h1><h2 id=\"docker简介\"><a href=\"#docker简介\" class=\"headerlink\" title=\"docker简介\"></a>docker简介</h2><p>Docker 是现今非常流行的一种容器化打包和发布工具，配合Git、SVN等代码版本管理工具， Jenkins、Gitlab Runner等持续集成工具，以及Swarn、Kubernetes 等容器编排工具，可以形成一个完整的软件自动化集成、测试发布流水线（CI/CD），可以有效的提升团队的生产效率和运维体验。</p>\n<p>Docker是一种Linux容器技术，容器有效的将由单个操作系统挂管理的资源划分到孤立的组中，以便更好的在组之间平衡有冲突的资源使用需求。可简单理解为一种沙盒 。每个容器内运行一个应用，不同的容器之间相互隔离，容器之间也可以建立通信机制。容器的创建和停止都十分快速，资源需求远远低于虚拟机，一个非常明显的区别就是在运行虚拟机中包含有操作系统，而容器中却没有。</p>\n<p>虚拟机正因为带有独立的操作系统，它可以通过这个操作系统内核进行对硬件资源的自主访问，成为一个独立完备的计算机小生态。Docker容器不具备这样的功能，它只能通过与宿主机共享操作系统内核来进行硬件资源的访问，但这也不是docker 的缺点，反而因为不需要携带自己的操作系统，容器变得更小更轻量，创建容器变得非常快速</p>\n<h2 id=\"docker与虚拟机对比\"><a href=\"#docker与虚拟机对比\" class=\"headerlink\" title=\"docker与虚拟机对比\"></a>docker与虚拟机对比</h2><table>\n<thead>\n<tr>\n<th>特性</th>\n<th>docker容器</th>\n<th>虚拟机</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>启动速度</td>\n<td>秒级</td>\n<td>分钟级</td>\n</tr>\n<tr>\n<td>硬盘使用</td>\n<td>一般为MB</td>\n<td>一般为GB</td>\n</tr>\n<tr>\n<td>性能</td>\n<td>接近原生</td>\n<td>弱于原生</td>\n</tr>\n<tr>\n<td>系统支持量</td>\n<td>单台机支持上千个容器</td>\n<td>单台机支持几十个容器</td>\n</tr>\n<tr>\n<td>隔离性</td>\n<td>安全隔离</td>\n<td>安全隔离</td>\n</tr>\n</tbody></table>\n<h2 id=\"Docker容器\"><a href=\"#Docker容器\" class=\"headerlink\" title=\"Docker容器\"></a>Docker容器</h2><p> 类似linux系统环境，运行和隔离应用。容器从镜像启动的时候，docker会在镜像的最上一层创建一个可写层，镜像本身是只读的，保持不变，是一个文件系统。</p>\n<h2 id=\"Docker镜像\"><a href=\"#Docker镜像\" class=\"headerlink\" title=\"Docker镜像\"></a>Docker镜像</h2><p>Docker镜像是一个Docker的可执行文件，其中包含了运行应用程序所需要的代码、依赖库、环境变量、配置文件等等，也是一个文件系统。</p>\n<h2 id=\"仓库\"><a href=\"#仓库\" class=\"headerlink\" title=\"仓库\"></a>仓库</h2><p>仓库分为本地仓库和远程仓库，是用于存储镜像的地方，通常在电脑上通过docker build 构建镜像后，镜像就被存放着在本地仓库中；当我们要转移、分发这些镜像的时候，就需要利用远程镜像仓库，讲镜像上传，方便后续其他电脑可以从小这些远程仓库中下载到我们的镜像。</p>\n<h2 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h2><p>如果你想要从一个基础镜像开始建立一个自定义镜像，可以选择一步一步进行构建，也可以选择写一个配置文件，然后一条命令（docker build）完成构建，显然配置文件的方式可以更好地应对需求的变更，这个配置文件就是Dockerfile。<br>学习Dockerfile的最好方式就是阅读别人写的Dockerfile，遇到不会的指令就查一查Dockerfile的文档</p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>关机后，docker容器会停止运行，镜像会保留在硬盘上，就想关机了，软件就关闭了，但可以再次打开。</p>\n<h1 id=\"Jenkins\"><a href=\"#Jenkins\" class=\"headerlink\" title=\"Jenkins\"></a>Jenkins</h1><h2 id=\"Jenkins安装\"><a href=\"#Jenkins安装\" class=\"headerlink\" title=\"Jenkins安装\"></a>Jenkins安装</h2><p>建议直接在Linux上安装，首页的插件选择默认的安装。</p>\n<h2 id=\"Jenkins页面简介\"><a href=\"#Jenkins页面简介\" class=\"headerlink\" title=\"Jenkins页面简介\"></a>Jenkins页面简介</h2><p>​        jenkins系统的介绍</p>\n<h2 id=\"Jenkins插件安装\"><a href=\"#Jenkins插件安装\" class=\"headerlink\" title=\"Jenkins插件安装\"></a>Jenkins插件安装</h2><p>作为CI/CD的调度中心，Jenkins具有十八般武艺，目前已有1500多个插件，功能非常强大，比如说我们用到的，node插件，npm插件，Github插件，ssh上传文件插件，还有很多插件，比较多人用的，导出测试报告，sonar代码扫描等等。如果再jenkins里面没有搜到想用的插件，去官网搜，下载后在回来安装需要额外安装的有：</p>\n<ul>\n<li>Github plugin：把代码从Github上拉下来</li>\n<li>Nodejs：运行前端项目，npm install，npm run build </li>\n<li>Pubish Over SSH：把构建好的文件 上传到nginx</li>\n<li>Email Extended  Template : 发送邮件通知</li>\n</ul>\n<h3 id=\"在github配置钩子\"><a href=\"#在github配置钩子\" class=\"headerlink\" title=\"在github配置钩子\"></a>在github配置钩子</h3><pre><code>Jenkins需要一个对项目有读写权限的账户，所以要在github生成一个token给jenkins使用，这个token，在后面需要用到。\n</code></pre>\n<blockquote>\n<pre><code>进入github --&gt; setting --&gt; Personal Access Token --&gt; Generate new token\n</code></pre>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/16111288/68523844-aebdad80-02f9-11ea-9294-828868dfdf69.png\" alt=\"network\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/16111288/68523993-9e0e3700-02fb-11ea-9a0b-f07e19b9cc7f.png\" alt=\"network\"></p>\n<p>拿到这个token之后先保存好，等会到jenkins中需要配置凭证<br>我们有一个token可以访问到github了，但是还要对其中的项目设置钩子</p>\n<blockquote>\n<pre><code>进入GitHub上指定的项目 --&gt; setting --&gt; WebHooks&amp;Services --&gt; add webhook --&gt; 输入刚刚部署jenkins的服务器的IP\n</code></pre>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/16111288/68524015-04935500-02fc-11ea-9a12-9cfd5bfc7695.png\" alt=\"network\"></p>\n<h2 id=\"在Jenkins和github钩子\"><a href=\"#在Jenkins和github钩子\" class=\"headerlink\" title=\"在Jenkins和github钩子\"></a>在Jenkins和github钩子</h2><h3 id=\"安装github-plugin\"><a href=\"#安装github-plugin\" class=\"headerlink\" title=\"安装github plugin\"></a>安装github plugin</h3><blockquote>\n<p>系统管理–&gt;插件管理–&gt;可选插件</p>\n</blockquote>\n<h3 id=\"配置github-plugin\"><a href=\"#配置github-plugin\" class=\"headerlink\" title=\"配置github plugin\"></a>配置github plugin</h3><blockquote>\n<p>系统管理–&gt;github plugin</p>\n</blockquote>\n<p>API URL 输入 <code>https://api.github.com</code>，Credentials点击Add添加，Kind选择Secret Text,具体如下图所示。</p>\n<p><img src=\"https://user-images.githubusercontent.com/16111288/68524053-c64a6580-02fc-11ea-9f2d-db3a71b304d3.png\" alt=\"network\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/16111288/68524112-9485ce80-02fd-11ea-9047-d73780d20b48.png\" alt=\"network\"></p>\n<p>设置完成后，点击<code>TestConnection</code>,提示<code>Credentials verified for user UUserName, rate limit: xxx</code>,则表明有效。</p>\n<h2 id=\"构建配置\"><a href=\"#构建配置\" class=\"headerlink\" title=\"构建配置\"></a>构建配置</h2><h2 id=\"构建方式\"><a href=\"#构建方式\" class=\"headerlink\" title=\"构建方式\"></a>构建方式</h2><ul>\n<li>手动构建：自己上Jenkins点击。</li>\n<li>自动构建：提交代码到git仓库之后，自动构建。</li>\n<li>定时构建：每隔一段时间构建一次，比如设置每天固定某个时间段构建。</li>\n</ul>\n<h3 id=\"编写shell脚本\"><a href=\"#编写shell脚本\" class=\"headerlink\" title=\"编写shell脚本\"></a>编写shell脚本</h3><p>Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。Shell 既是一种命令语言，又是一种程序设计语言。</p>\n<p><code>node -v</code><br><code>npm -v</code><br><code>npm --registry https://registry.npm.taobao.org install</code><br><code>npm run test:unit</code><br><code>npm run build</code></p>\n<h3 id=\"参数化构建\"><a href=\"#参数化构建\" class=\"headerlink\" title=\"参数化构建\"></a>参数化构建</h3><p>选择参数化构建，配置参数，在工程的首页就会多一个构建入口，参数化构建使得构建变得更加灵活。</p>\n<p><img src=\"https://user-images.githubusercontent.com/16111288/68524161-5d63ed00-02fe-11ea-9874-1f4672d47891.png\" alt=\"network\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/16111288/68524197-a0be5b80-02fe-11ea-8765-a5505bc42420.png\" alt=\"network\"></p>\n<h3 id=\"上传构建包\"><a href=\"#上传构建包\" class=\"headerlink\" title=\"上传构建包\"></a>上传构建包</h3><p>使用nginx做为文件服务器<br>在机器上安装nginx<br>在nginx上配置为文件资源服务器</p>\n<p><code>location / &#123;         root   /usr/share/nginx/html/static;         autoindex on;         autoindex_exact_size off;         autoindex_localtime on;     &#125;</code><br><img src=\"https://user-images.githubusercontent.com/16111288/68524366-0b709680-0301-11ea-8892-a7e1e50f4cfa.png\" alt=\"network\"></p>\n<h2 id=\"Jenkins系统配置SSH账号\"><a href=\"#Jenkins系统配置SSH账号\" class=\"headerlink\" title=\"Jenkins系统配置SSH账号\"></a>Jenkins系统配置SSH账号</h2><p>安装Publish Over SSH插件用于SSH连接远程的服务器。</p>\n<p>登录 jenkins 管理系统首页，打开“系统管理”–“管理插件”  搜索 Publish Over SSH 然后勾选安装<br>配置远程服务器的连接</p>\n<p>打开“系统管理”–“系统设置”  找到 “Publish over SSH” 项 ，我这里远程服务器用的是ssh登录，通过ppk密钥进行连接，所以我的配置如图，如果是帐号密码登录的Passphrase填写密码Username填写用户名，path to key 为空就可以了。</p>\n<p><img src=\"https://user-images.githubusercontent.com/16111288/68524390-5094c880-0301-11ea-8559-ad729ff4f671.png\" alt=\"network\"></p>\n<p>点击 Test Configuration 按钮测试连接是否成功</p>\n<p><img src=\"https://user-images.githubusercontent.com/16111288/68524400-6bffd380-0301-11ea-840d-96bc52a4257b.png\" alt=\"network\"></p>\n<h3 id=\"JOB添加构建后上传\"><a href=\"#JOB添加构建后上传\" class=\"headerlink\" title=\"JOB添加构建后上传\"></a>JOB添加构建后上传</h3><blockquote>\n<p>“构建后操作步骤”—“Send build artifacts over SSH” </p>\n</blockquote>\n<p>Name：第三步创建的远程服务器名称</p>\n<p>Source files：本地需要传输过去的文件路径</p>\n<p>Remove prefix：过滤掉的目录名</p>\n<p>Remote directory：远程服务器的保存路径</p>\n<p>Exec command：传输完成后在远程服务器执行的sh命令</p>\n<p><img src=\"https://user-images.githubusercontent.com/16111288/68524450-03652680-0302-11ea-9bce-f7b42ddf589d.png\" alt=\"network\"></p>\n<h2 id=\"构建后邮件通知\"><a href=\"#构建后邮件通知\" class=\"headerlink\" title=\"构建后邮件通知\"></a>构建后邮件通知</h2><p>构建成功之后，可以进行邮件通知。<br>第一步，先到插件管理安装插件，Email Extension Plugin，我只搜到了Email EXtension Template，所以就安装了它</p>\n<p>如果是QQ邮箱，先去获取一个独立密码</p>\n<p><img src=\"https://user-images.githubusercontent.com/16111288/68524622-02cd8f80-0304-11ea-949b-ec148ea39d08.png\" alt=\"network\"></p>\n<blockquote>\n<p>系统管理–&gt;系统设置–&gt; Extended E-mail Notification</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/16111288/68524633-1a0c7d00-0304-11ea-8bdb-3c94222fcfb8.png\" alt=\"network\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/16111288/68524636-21338b00-0304-11ea-8ac7-0e8aa0f07aab.png\" alt=\"network\"></p>\n<h2 id=\"配置邮件报错\"><a href=\"#配置邮件报错\" class=\"headerlink\" title=\"配置邮件报错\"></a>配置邮件报错</h2><p><img src=\"https://user-images.githubusercontent.com/16111288/68524653-593ace00-0304-11ea-9b60-d4f4227f020c.png\" alt=\"network\"></p>\n<p>邮件配置的过程出错，是因为管理的邮箱没有配置，到用户设置去设置</p>\n<p><img src=\"https://user-images.githubusercontent.com/16111288/68524659-6952ad80-0304-11ea-846b-fb1dc721ab56.png\" alt=\"network\"></p>\n<h3 id=\"构建后选择接收人\"><a href=\"#构建后选择接收人\" class=\"headerlink\" title=\"构建后选择接收人\"></a>构建后选择接收人</h3><p><img src=\"https://user-images.githubusercontent.com/16111288/68524667-7f606e00-0304-11ea-8425-84fbd475e9af.png\" alt=\"network\"></p>\n<h2 id=\"注意-1\"><a href=\"#注意-1\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p> 对于新手来说，Jenkin最好直接安装在机器上，安装在docker上的话，Jenkins无法访问到宿主机器的环境变量，比如我在机器上安装Yarn，但docker上的Jenkins无法访问得到Yarn，只能老老实实的使用npm。</p>\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><ul>\n<li>学习Jenkins，Docker这种工具，最好租一个服务器，不需要买域名，按月租就够了。</li>\n<li>境外服务器的比境内便宜，但境外的经常连不上去，每天总有几个小时连不上去。</li>\n<li>构建过程中npm install总是失败，服务器从1G内存扩容到2G 之后又成功了。</li>\n<li>Docker安装的jenkins无法访问到本机的环境变量，例如无法在构建脚本中写Yarn命令。</li>\n</ul>\n<h1 id=\"阿里云简介\"><a href=\"#阿里云简介\" class=\"headerlink\" title=\"阿里云简介\"></a>阿里云简介</h1><p>轻量应用型服务器，便宜，适合学习。<br>买好之后，在点击进入自己的机器</p>\n<p><img src=\"https://user-images.githubusercontent.com/16111288/68524467-30193e00-0302-11ea-8266-0114201443ba.png\" alt=\"network\"></p>\n<p>服务器默认只开发 80,443，22端口是可以通过外网进行访问的，如果自己的应用是8080,8088这个端口，需要在阿里云防火墙里面添加规则，并重启机器</p>\n<p><img src=\"https://user-images.githubusercontent.com/16111288/68524471-3c050000-0302-11ea-8d61-54e8fc0000fb.png\" alt=\"network\"></p>\n<h2 id=\"通过xshell进入服务器\"><a href=\"#通过xshell进入服务器\" class=\"headerlink\" title=\"通过xshell进入服务器\"></a>通过xshell进入服务器</h2><p><img src=\"https://user-images.githubusercontent.com/16111288/68524476-4c1cdf80-0302-11ea-825b-aa3ce6144c22.png\" alt=\"network\"></p>\n<h1 id=\"访问github慢\"><a href=\"#访问github慢\" class=\"headerlink\" title=\"访问github慢\"></a>访问github慢</h1><p>github的CDN被某墙屏了，由于网络代理商的原因，所以访问下载很慢。ping github.com 时，速度只有300多ms。<br>绕过dns解析，在本地直接绑定host，该方法也可加速其他因为CDN被屏蔽导致访问慢的网站。<br>windows系统的hosts文件的位置如下：C:\\Windows\\System32\\drivers\\etc\\hosts<br>mac/linux系统的hosts文件的位置如下：/etc/hosts</p>\n<p>修改windows里的hosts文件，添加如下内容</p>\n<p><code># Github 151.101.44.249 github.global.ssl.fastly.net  192.30.253.113 github.com  103.245.222.133 assets-cdn.github.com  23.235.47.133 assets-cdn.github.com  203.208.39.104 assets-cdn.github.com  204.232.175.78 documentcloud.github.com  204.232.175.94 gist.github.com  107.21.116.220 help.github.com  207.97.227.252 nodeload.github.com  199.27.76.130 raw.github.com  107.22.3.110 status.github.com  204.232.175.78 training.github.com  207.97.227.243 www.github.com  185.31.16.184 github.global.ssl.fastly.net  185.31.18.133 avatars0.githubusercontent.com  185.31.19.133 avatars1.githubusercontent.com 192.30.253.120 codeload.github.com</code></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Jenkins是什么\"><a href=\"#Jenkins是什么\" class=\"headerlink\" title=\"Jenkins是什么\"></a>Jenkins是什么</h1><p>Jenkins是一个开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能，最初的创建者川口清子（Kohsuke Kawaguchi）。他独自写了大部分代码</p>","more":"<p><img src=\"https://user-images.githubusercontent.com/16111288/68524077-01e52f80-02fd-11ea-9531-d039a4c77113.png\" alt=\"network\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/16111288/68523536-9c417500-02f5-11ea-9862-dd7bc23ae9ec.png\" alt=\"network\"></p>\n<h1 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要\"></a>概要</h1><p>今天分享的主要内容有</p>\n<ul>\n<li>Docker简单介绍</li>\n<li>Jenkins的简介与安装</li>\n<li>Jenkins对接Github 项目做持续集成</li>\n<li>Jenkins构建项目的几种方式</li>\n<li>Jenkins上传前端包到文件服务器</li>\n<li>云服务器简单使用介绍</li>\n</ul>\n<p>涉及到的资源和工具</p>\n<ul>\n<li>一台阿里云Linux服务器（默认安装Centos）。</li>\n<li>Xshell：一个Windows软件，脚本的方式来操作服务器。</li>\n<li>XFTP：是Xshell的一个插件，能图形化看到服务器的文件。</li>\n<li>Nginx：展示前端页面</li>\n<li>Docker：一个运行Jenkins的容器</li>\n<li>Jenkins</li>\n<li>Git</li>\n</ul>\n<h1 id=\"现状\"><a href=\"#现状\" class=\"headerlink\" title=\"现状\"></a>现状</h1><p>如今我们已经到前后端分离开发的模式。通常情况下，前端只需要把HTML，CSS，JS打包好之后，发给后端部署即可。最能体现这个场景比如使用vue来开发前端项目的时候，利用vue-cli脚手架来帮我们打包npm run build。 最终会生成一个dist目录，我们只需提供这个dist包给后端开发人员即可。</p>\n<p>如果只发一个版本，这种方式完全OK，但是如果需要频繁的更新版本，就会有如下图的操作，各个人员在频发互传代码包，容易出问题。这对于前后端来说，都是一个很低效的事情。</p>\n<p><img src=\"https://user-images.githubusercontent.com/16111288/68523471-c6466780-02f4-11ea-8700-e6c5e0bef519.png\" alt=\"network\"></p>\n<p>因此我们需要将低效的手动式部署，升级为更加先进的工程化，流水线式的持续部署。Jenkins就很好的可以做这样的事情，而且我们公司的持续集成也是使用这个工具。</p>\n<h1 id=\"CI-CD\"><a href=\"#CI-CD\" class=\"headerlink\" title=\"CI/CD\"></a>CI/CD</h1><h2 id=\"持续集成Continuous-Integration（CI）\"><a href=\"#持续集成Continuous-Integration（CI）\" class=\"headerlink\" title=\"持续集成Continuous Integration（CI）\"></a>持续集成Continuous Integration（CI）</h2><p>持续集成强调开发人员提交了新代码之后，立刻自动的进行构建、（单元）测试。根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起。<br>持续集成过程中很重视自动化测试验证结果，对可能出现的一些问题进行预警，以保障最终合并的代码没有问题。</p>\n<h2 id=\"持续交付Continuous-Delivery（CD）\"><a href=\"#持续交付Continuous-Delivery（CD）\" class=\"headerlink\" title=\"持续交付Continuous Delivery（CD）\"></a>持续交付Continuous Delivery（CD）</h2><p>持续交付在持续集成的基础上，将集成后的代码部署到更贴近真实运行环境的「类生产环境」（production-like environments）中。交付给质量团队或者用户，以供评审。如果评审通过，代码就进入生产阶段。<br>持续交付并不是指软件每一个改动都要尽快部署到产品环境中，它指的是任何的代码修改都可以在任何时候实施部署。<br>这里强调的是</p>\n<ul>\n<li>手动部署</li>\n<li>有部署的能力，但不一定部署</li>\n</ul>\n<h2 id=\"持续部署（Continuous-Deployment\"><a href=\"#持续部署（Continuous-Deployment\" class=\"headerlink\" title=\"持续部署（Continuous Deployment)\"></a>持续部署（Continuous Deployment)</h2><p>持续部署是指当交付的代码通过评审之后，自动部署到生产环境中。持续部署是持续交付的最高阶段。<br>这里强调</p>\n<ul>\n<li>持续部署是自动的</li>\n<li>持续部署是持续交付的最高阶段</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>「持续集成（Continuous Integration）」、「持续交付（Continuous Delivery）」和「持续部署（Continuous Deployment）」提供了一个优秀的 DevOps 环境，对于整个团队来说，好处与挑战并行。无论如何，频繁部署、快速交付以及开发测试流程自动化都将成为未来软件工程的重要组成部分。</p>\n<h1 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h1><h2 id=\"docker简介\"><a href=\"#docker简介\" class=\"headerlink\" title=\"docker简介\"></a>docker简介</h2><p>Docker 是现今非常流行的一种容器化打包和发布工具，配合Git、SVN等代码版本管理工具， Jenkins、Gitlab Runner等持续集成工具，以及Swarn、Kubernetes 等容器编排工具，可以形成一个完整的软件自动化集成、测试发布流水线（CI/CD），可以有效的提升团队的生产效率和运维体验。</p>\n<p>Docker是一种Linux容器技术，容器有效的将由单个操作系统挂管理的资源划分到孤立的组中，以便更好的在组之间平衡有冲突的资源使用需求。可简单理解为一种沙盒 。每个容器内运行一个应用，不同的容器之间相互隔离，容器之间也可以建立通信机制。容器的创建和停止都十分快速，资源需求远远低于虚拟机，一个非常明显的区别就是在运行虚拟机中包含有操作系统，而容器中却没有。</p>\n<p>虚拟机正因为带有独立的操作系统，它可以通过这个操作系统内核进行对硬件资源的自主访问，成为一个独立完备的计算机小生态。Docker容器不具备这样的功能，它只能通过与宿主机共享操作系统内核来进行硬件资源的访问，但这也不是docker 的缺点，反而因为不需要携带自己的操作系统，容器变得更小更轻量，创建容器变得非常快速</p>\n<h2 id=\"docker与虚拟机对比\"><a href=\"#docker与虚拟机对比\" class=\"headerlink\" title=\"docker与虚拟机对比\"></a>docker与虚拟机对比</h2><table>\n<thead>\n<tr>\n<th>特性</th>\n<th>docker容器</th>\n<th>虚拟机</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>启动速度</td>\n<td>秒级</td>\n<td>分钟级</td>\n</tr>\n<tr>\n<td>硬盘使用</td>\n<td>一般为MB</td>\n<td>一般为GB</td>\n</tr>\n<tr>\n<td>性能</td>\n<td>接近原生</td>\n<td>弱于原生</td>\n</tr>\n<tr>\n<td>系统支持量</td>\n<td>单台机支持上千个容器</td>\n<td>单台机支持几十个容器</td>\n</tr>\n<tr>\n<td>隔离性</td>\n<td>安全隔离</td>\n<td>安全隔离</td>\n</tr>\n</tbody></table>\n<h2 id=\"Docker容器\"><a href=\"#Docker容器\" class=\"headerlink\" title=\"Docker容器\"></a>Docker容器</h2><p> 类似linux系统环境，运行和隔离应用。容器从镜像启动的时候，docker会在镜像的最上一层创建一个可写层，镜像本身是只读的，保持不变，是一个文件系统。</p>\n<h2 id=\"Docker镜像\"><a href=\"#Docker镜像\" class=\"headerlink\" title=\"Docker镜像\"></a>Docker镜像</h2><p>Docker镜像是一个Docker的可执行文件，其中包含了运行应用程序所需要的代码、依赖库、环境变量、配置文件等等，也是一个文件系统。</p>\n<h2 id=\"仓库\"><a href=\"#仓库\" class=\"headerlink\" title=\"仓库\"></a>仓库</h2><p>仓库分为本地仓库和远程仓库，是用于存储镜像的地方，通常在电脑上通过docker build 构建镜像后，镜像就被存放着在本地仓库中；当我们要转移、分发这些镜像的时候，就需要利用远程镜像仓库，讲镜像上传，方便后续其他电脑可以从小这些远程仓库中下载到我们的镜像。</p>\n<h2 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h2><p>如果你想要从一个基础镜像开始建立一个自定义镜像，可以选择一步一步进行构建，也可以选择写一个配置文件，然后一条命令（docker build）完成构建，显然配置文件的方式可以更好地应对需求的变更，这个配置文件就是Dockerfile。<br>学习Dockerfile的最好方式就是阅读别人写的Dockerfile，遇到不会的指令就查一查Dockerfile的文档</p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>关机后，docker容器会停止运行，镜像会保留在硬盘上，就想关机了，软件就关闭了，但可以再次打开。</p>\n<h1 id=\"Jenkins\"><a href=\"#Jenkins\" class=\"headerlink\" title=\"Jenkins\"></a>Jenkins</h1><h2 id=\"Jenkins安装\"><a href=\"#Jenkins安装\" class=\"headerlink\" title=\"Jenkins安装\"></a>Jenkins安装</h2><p>建议直接在Linux上安装，首页的插件选择默认的安装。</p>\n<h2 id=\"Jenkins页面简介\"><a href=\"#Jenkins页面简介\" class=\"headerlink\" title=\"Jenkins页面简介\"></a>Jenkins页面简介</h2><p>​        jenkins系统的介绍</p>\n<h2 id=\"Jenkins插件安装\"><a href=\"#Jenkins插件安装\" class=\"headerlink\" title=\"Jenkins插件安装\"></a>Jenkins插件安装</h2><p>作为CI/CD的调度中心，Jenkins具有十八般武艺，目前已有1500多个插件，功能非常强大，比如说我们用到的，node插件，npm插件，Github插件，ssh上传文件插件，还有很多插件，比较多人用的，导出测试报告，sonar代码扫描等等。如果再jenkins里面没有搜到想用的插件，去官网搜，下载后在回来安装需要额外安装的有：</p>\n<ul>\n<li>Github plugin：把代码从Github上拉下来</li>\n<li>Nodejs：运行前端项目，npm install，npm run build </li>\n<li>Pubish Over SSH：把构建好的文件 上传到nginx</li>\n<li>Email Extended  Template : 发送邮件通知</li>\n</ul>\n<h3 id=\"在github配置钩子\"><a href=\"#在github配置钩子\" class=\"headerlink\" title=\"在github配置钩子\"></a>在github配置钩子</h3><pre><code>Jenkins需要一个对项目有读写权限的账户，所以要在github生成一个token给jenkins使用，这个token，在后面需要用到。\n</code></pre>\n<blockquote>\n<pre><code>进入github --&gt; setting --&gt; Personal Access Token --&gt; Generate new token\n</code></pre>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/16111288/68523844-aebdad80-02f9-11ea-9294-828868dfdf69.png\" alt=\"network\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/16111288/68523993-9e0e3700-02fb-11ea-9a0b-f07e19b9cc7f.png\" alt=\"network\"></p>\n<p>拿到这个token之后先保存好，等会到jenkins中需要配置凭证<br>我们有一个token可以访问到github了，但是还要对其中的项目设置钩子</p>\n<blockquote>\n<pre><code>进入GitHub上指定的项目 --&gt; setting --&gt; WebHooks&amp;Services --&gt; add webhook --&gt; 输入刚刚部署jenkins的服务器的IP\n</code></pre>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/16111288/68524015-04935500-02fc-11ea-9a12-9cfd5bfc7695.png\" alt=\"network\"></p>\n<h2 id=\"在Jenkins和github钩子\"><a href=\"#在Jenkins和github钩子\" class=\"headerlink\" title=\"在Jenkins和github钩子\"></a>在Jenkins和github钩子</h2><h3 id=\"安装github-plugin\"><a href=\"#安装github-plugin\" class=\"headerlink\" title=\"安装github plugin\"></a>安装github plugin</h3><blockquote>\n<p>系统管理–&gt;插件管理–&gt;可选插件</p>\n</blockquote>\n<h3 id=\"配置github-plugin\"><a href=\"#配置github-plugin\" class=\"headerlink\" title=\"配置github plugin\"></a>配置github plugin</h3><blockquote>\n<p>系统管理–&gt;github plugin</p>\n</blockquote>\n<p>API URL 输入 <code>https://api.github.com</code>，Credentials点击Add添加，Kind选择Secret Text,具体如下图所示。</p>\n<p><img src=\"https://user-images.githubusercontent.com/16111288/68524053-c64a6580-02fc-11ea-9f2d-db3a71b304d3.png\" alt=\"network\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/16111288/68524112-9485ce80-02fd-11ea-9047-d73780d20b48.png\" alt=\"network\"></p>\n<p>设置完成后，点击<code>TestConnection</code>,提示<code>Credentials verified for user UUserName, rate limit: xxx</code>,则表明有效。</p>\n<h2 id=\"构建配置\"><a href=\"#构建配置\" class=\"headerlink\" title=\"构建配置\"></a>构建配置</h2><h2 id=\"构建方式\"><a href=\"#构建方式\" class=\"headerlink\" title=\"构建方式\"></a>构建方式</h2><ul>\n<li>手动构建：自己上Jenkins点击。</li>\n<li>自动构建：提交代码到git仓库之后，自动构建。</li>\n<li>定时构建：每隔一段时间构建一次，比如设置每天固定某个时间段构建。</li>\n</ul>\n<h3 id=\"编写shell脚本\"><a href=\"#编写shell脚本\" class=\"headerlink\" title=\"编写shell脚本\"></a>编写shell脚本</h3><p>Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。Shell 既是一种命令语言，又是一种程序设计语言。</p>\n<p><code>node -v</code><br><code>npm -v</code><br><code>npm --registry https://registry.npm.taobao.org install</code><br><code>npm run test:unit</code><br><code>npm run build</code></p>\n<h3 id=\"参数化构建\"><a href=\"#参数化构建\" class=\"headerlink\" title=\"参数化构建\"></a>参数化构建</h3><p>选择参数化构建，配置参数，在工程的首页就会多一个构建入口，参数化构建使得构建变得更加灵活。</p>\n<p><img src=\"https://user-images.githubusercontent.com/16111288/68524161-5d63ed00-02fe-11ea-9874-1f4672d47891.png\" alt=\"network\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/16111288/68524197-a0be5b80-02fe-11ea-8765-a5505bc42420.png\" alt=\"network\"></p>\n<h3 id=\"上传构建包\"><a href=\"#上传构建包\" class=\"headerlink\" title=\"上传构建包\"></a>上传构建包</h3><p>使用nginx做为文件服务器<br>在机器上安装nginx<br>在nginx上配置为文件资源服务器</p>\n<p><code>location / &#123;         root   /usr/share/nginx/html/static;         autoindex on;         autoindex_exact_size off;         autoindex_localtime on;     &#125;</code><br><img src=\"https://user-images.githubusercontent.com/16111288/68524366-0b709680-0301-11ea-8892-a7e1e50f4cfa.png\" alt=\"network\"></p>\n<h2 id=\"Jenkins系统配置SSH账号\"><a href=\"#Jenkins系统配置SSH账号\" class=\"headerlink\" title=\"Jenkins系统配置SSH账号\"></a>Jenkins系统配置SSH账号</h2><p>安装Publish Over SSH插件用于SSH连接远程的服务器。</p>\n<p>登录 jenkins 管理系统首页，打开“系统管理”–“管理插件”  搜索 Publish Over SSH 然后勾选安装<br>配置远程服务器的连接</p>\n<p>打开“系统管理”–“系统设置”  找到 “Publish over SSH” 项 ，我这里远程服务器用的是ssh登录，通过ppk密钥进行连接，所以我的配置如图，如果是帐号密码登录的Passphrase填写密码Username填写用户名，path to key 为空就可以了。</p>\n<p><img src=\"https://user-images.githubusercontent.com/16111288/68524390-5094c880-0301-11ea-8559-ad729ff4f671.png\" alt=\"network\"></p>\n<p>点击 Test Configuration 按钮测试连接是否成功</p>\n<p><img src=\"https://user-images.githubusercontent.com/16111288/68524400-6bffd380-0301-11ea-840d-96bc52a4257b.png\" alt=\"network\"></p>\n<h3 id=\"JOB添加构建后上传\"><a href=\"#JOB添加构建后上传\" class=\"headerlink\" title=\"JOB添加构建后上传\"></a>JOB添加构建后上传</h3><blockquote>\n<p>“构建后操作步骤”—“Send build artifacts over SSH” </p>\n</blockquote>\n<p>Name：第三步创建的远程服务器名称</p>\n<p>Source files：本地需要传输过去的文件路径</p>\n<p>Remove prefix：过滤掉的目录名</p>\n<p>Remote directory：远程服务器的保存路径</p>\n<p>Exec command：传输完成后在远程服务器执行的sh命令</p>\n<p><img src=\"https://user-images.githubusercontent.com/16111288/68524450-03652680-0302-11ea-9bce-f7b42ddf589d.png\" alt=\"network\"></p>\n<h2 id=\"构建后邮件通知\"><a href=\"#构建后邮件通知\" class=\"headerlink\" title=\"构建后邮件通知\"></a>构建后邮件通知</h2><p>构建成功之后，可以进行邮件通知。<br>第一步，先到插件管理安装插件，Email Extension Plugin，我只搜到了Email EXtension Template，所以就安装了它</p>\n<p>如果是QQ邮箱，先去获取一个独立密码</p>\n<p><img src=\"https://user-images.githubusercontent.com/16111288/68524622-02cd8f80-0304-11ea-949b-ec148ea39d08.png\" alt=\"network\"></p>\n<blockquote>\n<p>系统管理–&gt;系统设置–&gt; Extended E-mail Notification</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/16111288/68524633-1a0c7d00-0304-11ea-8bdb-3c94222fcfb8.png\" alt=\"network\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/16111288/68524636-21338b00-0304-11ea-8ac7-0e8aa0f07aab.png\" alt=\"network\"></p>\n<h2 id=\"配置邮件报错\"><a href=\"#配置邮件报错\" class=\"headerlink\" title=\"配置邮件报错\"></a>配置邮件报错</h2><p><img src=\"https://user-images.githubusercontent.com/16111288/68524653-593ace00-0304-11ea-9b60-d4f4227f020c.png\" alt=\"network\"></p>\n<p>邮件配置的过程出错，是因为管理的邮箱没有配置，到用户设置去设置</p>\n<p><img src=\"https://user-images.githubusercontent.com/16111288/68524659-6952ad80-0304-11ea-846b-fb1dc721ab56.png\" alt=\"network\"></p>\n<h3 id=\"构建后选择接收人\"><a href=\"#构建后选择接收人\" class=\"headerlink\" title=\"构建后选择接收人\"></a>构建后选择接收人</h3><p><img src=\"https://user-images.githubusercontent.com/16111288/68524667-7f606e00-0304-11ea-8425-84fbd475e9af.png\" alt=\"network\"></p>\n<h2 id=\"注意-1\"><a href=\"#注意-1\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p> 对于新手来说，Jenkin最好直接安装在机器上，安装在docker上的话，Jenkins无法访问到宿主机器的环境变量，比如我在机器上安装Yarn，但docker上的Jenkins无法访问得到Yarn，只能老老实实的使用npm。</p>\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><ul>\n<li>学习Jenkins，Docker这种工具，最好租一个服务器，不需要买域名，按月租就够了。</li>\n<li>境外服务器的比境内便宜，但境外的经常连不上去，每天总有几个小时连不上去。</li>\n<li>构建过程中npm install总是失败，服务器从1G内存扩容到2G 之后又成功了。</li>\n<li>Docker安装的jenkins无法访问到本机的环境变量，例如无法在构建脚本中写Yarn命令。</li>\n</ul>\n<h1 id=\"阿里云简介\"><a href=\"#阿里云简介\" class=\"headerlink\" title=\"阿里云简介\"></a>阿里云简介</h1><p>轻量应用型服务器，便宜，适合学习。<br>买好之后，在点击进入自己的机器</p>\n<p><img src=\"https://user-images.githubusercontent.com/16111288/68524467-30193e00-0302-11ea-8266-0114201443ba.png\" alt=\"network\"></p>\n<p>服务器默认只开发 80,443，22端口是可以通过外网进行访问的，如果自己的应用是8080,8088这个端口，需要在阿里云防火墙里面添加规则，并重启机器</p>\n<p><img src=\"https://user-images.githubusercontent.com/16111288/68524471-3c050000-0302-11ea-8d61-54e8fc0000fb.png\" alt=\"network\"></p>\n<h2 id=\"通过xshell进入服务器\"><a href=\"#通过xshell进入服务器\" class=\"headerlink\" title=\"通过xshell进入服务器\"></a>通过xshell进入服务器</h2><p><img src=\"https://user-images.githubusercontent.com/16111288/68524476-4c1cdf80-0302-11ea-825b-aa3ce6144c22.png\" alt=\"network\"></p>\n<h1 id=\"访问github慢\"><a href=\"#访问github慢\" class=\"headerlink\" title=\"访问github慢\"></a>访问github慢</h1><p>github的CDN被某墙屏了，由于网络代理商的原因，所以访问下载很慢。ping github.com 时，速度只有300多ms。<br>绕过dns解析，在本地直接绑定host，该方法也可加速其他因为CDN被屏蔽导致访问慢的网站。<br>windows系统的hosts文件的位置如下：C:\\Windows\\System32\\drivers\\etc\\hosts<br>mac/linux系统的hosts文件的位置如下：/etc/hosts</p>\n<p>修改windows里的hosts文件，添加如下内容</p>\n<p><code># Github 151.101.44.249 github.global.ssl.fastly.net  192.30.253.113 github.com  103.245.222.133 assets-cdn.github.com  23.235.47.133 assets-cdn.github.com  203.208.39.104 assets-cdn.github.com  204.232.175.78 documentcloud.github.com  204.232.175.94 gist.github.com  107.21.116.220 help.github.com  207.97.227.252 nodeload.github.com  199.27.76.130 raw.github.com  107.22.3.110 status.github.com  204.232.175.78 training.github.com  207.97.227.243 www.github.com  185.31.16.184 github.global.ssl.fastly.net  185.31.18.133 avatars0.githubusercontent.com  185.31.19.133 avatars1.githubusercontent.com 192.30.253.120 codeload.github.com</code></p>"},{"title":"Observable","date":"2017-09-26T03:28:03.000Z","_content":"\n观察者模式又称发布订阅模式，在此种模式中，一个目标物件管理所有相依于它的观察者物件。并且在它本身的状态改变时主动发出通知。观察者模式（Observer ）完美的将观察者和被观察的对象分离开。\n\n<!--more-->\n\nObservable 只是一个普通函数，要想让他有所作为，就需要跟 observer 一起使用；而这个 observer（后面我们会介绍）只是一个带有 next、error 、 complete 的简单对象而已。最后，还需要通过 subscribe 订阅来 **启动** Observable；否则它是不会有任何反应；而订阅也会返回一个可用于取消操作（在 RxJS 里叫 unsubscribe）。\n\n* Observer Pattern - ( 观察者模式 / 发布订阅模式 )\n* Iterator Pattern - ( 迭代器模式 )\n\n这两种模式是 Observable 的基础。\n\n## 观察者模式\n\n一个目标对象管理所有相依于它的观察者对象，并且在它本身的状态改变时主动发出通知。它定义了一种一对多的关系，让多个观察者对象同时监听某一个主题对象，这个主题对象的状态发生变化时就会通知所有的观察者对象，使得它们能够自动更新自己。\n\nObservables 与 Observer 之间的订阅发布关系 ( 观察者模式 ) 如下：\n\n* 订阅：Observer 通过 Observable 提供的 subscribe() 方法订阅 Observable。\n* 发布：Observable 通过回调 next 方法向 Observer 发布事件。\n\n当 Observable 设置观察者后，而连接并获取原始数据的这个过程叫生产者，可能是 DOM 中的 click 事件、input 事件、或者更加复杂的 HTTP 通信。\n\n```javascript\nimport { Component } from '@angular/core'\nimport { Observable, Subscription } from 'rxjs'\n\n@Component({\n  selector: 'app-home',\n  template: `<input type=\"text\"> `\n})\nexport class HomeComponent {\n  ngOnInit() {\n    const node = document.querySelector('input[type=text]')\n\n    // 第二个参数 input 是事件名，对于input元素有一个 oninput 事件用于接受用户输入\n    const input$ = Observable.fromEvent(node, 'input')\n    input$.subscribe({\n      next: (event: any) => console.log(`You just typed ${event.target.value}!`),\n      error: err => console.log(`Oops... ${err}`),\n      complete: () => console.log(`Complete!`)\n    })\n  }\n}\n```\n\n**Observable.fromEvent() 会返回一个 Observable，并且监听 input 事件，当事件被触发后会发送一个 Event 给对应的 observer 观察者。**\n\n## 一、observer\n\n**subscribe 订阅就是接收一个 observer 方法。**\n\n```javascript\ninput$.subscribe((event: any) => {})\n```\n\n从语法角度来讲和 subscribe({ next, error, complete }) 是一样的。当 Observable 产生一个新值时，会通知 observer 的 next()，而当捕获失败可以调用 error()。\n\n当 Observable 被订阅后，除非调用 observer 的 complete() 或 unsubscribe() 取消订阅两情况以外；会一直将值传递给 observer。\n\nObservable 的生产的值允许经过一序列格式化或操作，最终得到一个有价值的数据给观察者，而这一切是由一序列链式 operator 来完成的，每一个 operator 都会产生一个新的 Observable。而我们也称这一序列过程为：**流**。\n\n---\n\n## 二、operator\n\nObservable 可以链式写法，这意味着我们可以这样：\n\n```javascript\nObservable.fromEvent(node, 'input')\n  .map((event: any) => event.target.value)\n  .filter(value => value.length >= 2)\n  .subscribe(value => {\n    console.log(value)\n  })\n```\n\n下面是顺序步骤：\n\n* 假设用户输入：a\n* Observable 对触发 oninput 事件作出反应，将值以参数的形式传递给 observer 的 next()。\n* map() 根据 event.target.value 的内容返回一个新的 Observable，并调用 next() 传递给下一个 observer。\n* filter() 如果值长度 >=2 的话，则返回一个新的 Observable，并调用 next() 传递给下一个 observer。\n* 最后，将结果传递给 subscribe 订阅块。\n\n#### 取消订阅\n\nObservable 当有数据产生时才会推送给订阅者，所以它可能会无限次向订阅者推送数据。正因为如此，在 Angular 里面创建组件的时候务必要取消订阅操作，以避免内存泄漏，要知道在 SPA 世界里懂得擦屁股是一件必须的事。\n\n##### unsubscribe\n\n前面示例讲过，调用 subscribe() 后，会返回一个 Subscription 可用于取消操作 unsubscribe()。最合理的方式在 ngOnDestroy 调用它。\n\n```javascript\n    ngOnDestroy() {\n        this.inputSubscription.unsubscribe();\n    }\n```\n\n##### takeWhile\n\n如果组件有很多订阅者的话，则需要将这些订阅者存储在数组中，并组件被销毁时再逐个取消订阅。但，我们有更好的办法：\n\n使用 takeWhile() operator，它会在你传递一个布尔值是调用 next() 还是 complete()。\n\n```javascript\nprivate alive: boolean = true;\nngOnInit() {\n  const node = document.querySelector('input[type=text]');\n\n  this.s = Observable.fromEvent(node, 'input')\n    .takeWhile(() => this.alive)\n    .map((event: any) => event.target.value)\n    .filter(value => value.length >= 2)\n    .subscribe(value => { console.log(value) });\n}\n\nngOnDestroy() {\n  this.alive = false;\n}\n```\n\n## Subject\n\n我们在写一个 Service 用于数据传递时，总是使用 new Subject。\n\n```javascript\n@Injectable()\nexport class MessageService {\n    private subject = new Subject<any>();\n\n    send(message: any) {\n        this.subject.next(message);\n    }\n\n    get(): Observable<any> {\n        return this.subject.asObservable();\n    }\n}\n```\n\n当 F 组件需要向 M 组件传递数据时，我们可以在 F 组件中使用 send()。\n\n```javascript\n    constructor(public srv: MessageService) { }\n\n    ngOnInit() {\n        this.srv.send('w s k f m?')\n    }\n```\n\n而 M 组件只需要订阅内容就行：\n\n```javascript\n    constructor(private srv: MessageService) {}\n\n    message: any;\n    ngOnInit() {\n        this.srv.get().subscribe((result) => {\n            this.message = result;\n        })\n    }\n```\n\n## EventEmitter\n\n其实 EventEmitter 跟 RxJS 没有直接关系，因为他是 Angular 的产物，而非 RxJS 的东西。或者我们压根没必要去谈，因为 EventEmitter 就是 Subject。\n\n**EventEmitter 的作用是使指令或组件能自定义事件。**\n\n```javascript\n@Output() changed = new EventEmitter<string>();\n\nclick() {\n    this.changed.emit('hi~');\n}\n```\n\n```javascript\n@Component({\n  template: `<comp (changed)=\"subscribe($event)\"></comp>`\n})\nexport class HomeComponent {\n  subscribe(message: string) {\n    // 接收：hi~\n  }\n}\n```\n\n上面示例其实和上一个示例中 MessageService 如出一辙，只不过是将 next() 换成 emit() 仅此而已。\n\n## 结论\n\n#### 创建数据流：\n\n* 单值：of, empty, never\n* 多值：from\n* 定时：interval, timer\n* 从事件创建：fromEvent\n* 从 Promise 创建：fromPromise\n* 自定义创建：create\n\n#### 转换操作：\n\n* 改变数据形态：map, mapTo, pluck\n* 过滤一些值：filter, skip, first, last, take\n* 时间轴上的操作：delay, timeout, throttle, debounce, audit, bufferTime\n* 累加：reduce, scan\n* 异常处理：throw, catch, retry, finally\n* 条件执行：takeUntil, delayWhen, retryWhen, subscribeOn, ObserveOn\n* 转接：switch\n\n#### 组合数据流：\n\n* concat ，保持原来的序列顺序连接两个数据流\n* merge，合并序列\n* race，预设条件为其中一个数据流完成\n* forkJoin，预设条件为所有数据流都完成\n* zip，取各来源数据流最后一个值合并为对象\n* combineLatest，取各来源数据流最后一个值合并为数组另，最好使用 $ 结尾的命名方式来表示 Observable，例：input$ 。\n","source":"_posts/Observable.md","raw":"---\ntitle: Observable\ndate: 2017-09-26 11:28:03\ncategories: rx.js\n---\n\n观察者模式又称发布订阅模式，在此种模式中，一个目标物件管理所有相依于它的观察者物件。并且在它本身的状态改变时主动发出通知。观察者模式（Observer ）完美的将观察者和被观察的对象分离开。\n\n<!--more-->\n\nObservable 只是一个普通函数，要想让他有所作为，就需要跟 observer 一起使用；而这个 observer（后面我们会介绍）只是一个带有 next、error 、 complete 的简单对象而已。最后，还需要通过 subscribe 订阅来 **启动** Observable；否则它是不会有任何反应；而订阅也会返回一个可用于取消操作（在 RxJS 里叫 unsubscribe）。\n\n* Observer Pattern - ( 观察者模式 / 发布订阅模式 )\n* Iterator Pattern - ( 迭代器模式 )\n\n这两种模式是 Observable 的基础。\n\n## 观察者模式\n\n一个目标对象管理所有相依于它的观察者对象，并且在它本身的状态改变时主动发出通知。它定义了一种一对多的关系，让多个观察者对象同时监听某一个主题对象，这个主题对象的状态发生变化时就会通知所有的观察者对象，使得它们能够自动更新自己。\n\nObservables 与 Observer 之间的订阅发布关系 ( 观察者模式 ) 如下：\n\n* 订阅：Observer 通过 Observable 提供的 subscribe() 方法订阅 Observable。\n* 发布：Observable 通过回调 next 方法向 Observer 发布事件。\n\n当 Observable 设置观察者后，而连接并获取原始数据的这个过程叫生产者，可能是 DOM 中的 click 事件、input 事件、或者更加复杂的 HTTP 通信。\n\n```javascript\nimport { Component } from '@angular/core'\nimport { Observable, Subscription } from 'rxjs'\n\n@Component({\n  selector: 'app-home',\n  template: `<input type=\"text\"> `\n})\nexport class HomeComponent {\n  ngOnInit() {\n    const node = document.querySelector('input[type=text]')\n\n    // 第二个参数 input 是事件名，对于input元素有一个 oninput 事件用于接受用户输入\n    const input$ = Observable.fromEvent(node, 'input')\n    input$.subscribe({\n      next: (event: any) => console.log(`You just typed ${event.target.value}!`),\n      error: err => console.log(`Oops... ${err}`),\n      complete: () => console.log(`Complete!`)\n    })\n  }\n}\n```\n\n**Observable.fromEvent() 会返回一个 Observable，并且监听 input 事件，当事件被触发后会发送一个 Event 给对应的 observer 观察者。**\n\n## 一、observer\n\n**subscribe 订阅就是接收一个 observer 方法。**\n\n```javascript\ninput$.subscribe((event: any) => {})\n```\n\n从语法角度来讲和 subscribe({ next, error, complete }) 是一样的。当 Observable 产生一个新值时，会通知 observer 的 next()，而当捕获失败可以调用 error()。\n\n当 Observable 被订阅后，除非调用 observer 的 complete() 或 unsubscribe() 取消订阅两情况以外；会一直将值传递给 observer。\n\nObservable 的生产的值允许经过一序列格式化或操作，最终得到一个有价值的数据给观察者，而这一切是由一序列链式 operator 来完成的，每一个 operator 都会产生一个新的 Observable。而我们也称这一序列过程为：**流**。\n\n---\n\n## 二、operator\n\nObservable 可以链式写法，这意味着我们可以这样：\n\n```javascript\nObservable.fromEvent(node, 'input')\n  .map((event: any) => event.target.value)\n  .filter(value => value.length >= 2)\n  .subscribe(value => {\n    console.log(value)\n  })\n```\n\n下面是顺序步骤：\n\n* 假设用户输入：a\n* Observable 对触发 oninput 事件作出反应，将值以参数的形式传递给 observer 的 next()。\n* map() 根据 event.target.value 的内容返回一个新的 Observable，并调用 next() 传递给下一个 observer。\n* filter() 如果值长度 >=2 的话，则返回一个新的 Observable，并调用 next() 传递给下一个 observer。\n* 最后，将结果传递给 subscribe 订阅块。\n\n#### 取消订阅\n\nObservable 当有数据产生时才会推送给订阅者，所以它可能会无限次向订阅者推送数据。正因为如此，在 Angular 里面创建组件的时候务必要取消订阅操作，以避免内存泄漏，要知道在 SPA 世界里懂得擦屁股是一件必须的事。\n\n##### unsubscribe\n\n前面示例讲过，调用 subscribe() 后，会返回一个 Subscription 可用于取消操作 unsubscribe()。最合理的方式在 ngOnDestroy 调用它。\n\n```javascript\n    ngOnDestroy() {\n        this.inputSubscription.unsubscribe();\n    }\n```\n\n##### takeWhile\n\n如果组件有很多订阅者的话，则需要将这些订阅者存储在数组中，并组件被销毁时再逐个取消订阅。但，我们有更好的办法：\n\n使用 takeWhile() operator，它会在你传递一个布尔值是调用 next() 还是 complete()。\n\n```javascript\nprivate alive: boolean = true;\nngOnInit() {\n  const node = document.querySelector('input[type=text]');\n\n  this.s = Observable.fromEvent(node, 'input')\n    .takeWhile(() => this.alive)\n    .map((event: any) => event.target.value)\n    .filter(value => value.length >= 2)\n    .subscribe(value => { console.log(value) });\n}\n\nngOnDestroy() {\n  this.alive = false;\n}\n```\n\n## Subject\n\n我们在写一个 Service 用于数据传递时，总是使用 new Subject。\n\n```javascript\n@Injectable()\nexport class MessageService {\n    private subject = new Subject<any>();\n\n    send(message: any) {\n        this.subject.next(message);\n    }\n\n    get(): Observable<any> {\n        return this.subject.asObservable();\n    }\n}\n```\n\n当 F 组件需要向 M 组件传递数据时，我们可以在 F 组件中使用 send()。\n\n```javascript\n    constructor(public srv: MessageService) { }\n\n    ngOnInit() {\n        this.srv.send('w s k f m?')\n    }\n```\n\n而 M 组件只需要订阅内容就行：\n\n```javascript\n    constructor(private srv: MessageService) {}\n\n    message: any;\n    ngOnInit() {\n        this.srv.get().subscribe((result) => {\n            this.message = result;\n        })\n    }\n```\n\n## EventEmitter\n\n其实 EventEmitter 跟 RxJS 没有直接关系，因为他是 Angular 的产物，而非 RxJS 的东西。或者我们压根没必要去谈，因为 EventEmitter 就是 Subject。\n\n**EventEmitter 的作用是使指令或组件能自定义事件。**\n\n```javascript\n@Output() changed = new EventEmitter<string>();\n\nclick() {\n    this.changed.emit('hi~');\n}\n```\n\n```javascript\n@Component({\n  template: `<comp (changed)=\"subscribe($event)\"></comp>`\n})\nexport class HomeComponent {\n  subscribe(message: string) {\n    // 接收：hi~\n  }\n}\n```\n\n上面示例其实和上一个示例中 MessageService 如出一辙，只不过是将 next() 换成 emit() 仅此而已。\n\n## 结论\n\n#### 创建数据流：\n\n* 单值：of, empty, never\n* 多值：from\n* 定时：interval, timer\n* 从事件创建：fromEvent\n* 从 Promise 创建：fromPromise\n* 自定义创建：create\n\n#### 转换操作：\n\n* 改变数据形态：map, mapTo, pluck\n* 过滤一些值：filter, skip, first, last, take\n* 时间轴上的操作：delay, timeout, throttle, debounce, audit, bufferTime\n* 累加：reduce, scan\n* 异常处理：throw, catch, retry, finally\n* 条件执行：takeUntil, delayWhen, retryWhen, subscribeOn, ObserveOn\n* 转接：switch\n\n#### 组合数据流：\n\n* concat ，保持原来的序列顺序连接两个数据流\n* merge，合并序列\n* race，预设条件为其中一个数据流完成\n* forkJoin，预设条件为所有数据流都完成\n* zip，取各来源数据流最后一个值合并为对象\n* combineLatest，取各来源数据流最后一个值合并为数组另，最好使用 $ 结尾的命名方式来表示 Observable，例：input$ 。\n","slug":"Observable","published":1,"updated":"2021-03-01T03:47:26.020Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmejaers000lxcvrh8x9bjyy","content":"<p>观察者模式又称发布订阅模式，在此种模式中，一个目标物件管理所有相依于它的观察者物件。并且在它本身的状态改变时主动发出通知。观察者模式（Observer ）完美的将观察者和被观察的对象分离开。</p>\n<span id=\"more\"></span>\n\n<p>Observable 只是一个普通函数，要想让他有所作为，就需要跟 observer 一起使用；而这个 observer（后面我们会介绍）只是一个带有 next、error 、 complete 的简单对象而已。最后，还需要通过 subscribe 订阅来 <strong>启动</strong> Observable；否则它是不会有任何反应；而订阅也会返回一个可用于取消操作（在 RxJS 里叫 unsubscribe）。</p>\n<ul>\n<li>Observer Pattern - ( 观察者模式 / 发布订阅模式 )</li>\n<li>Iterator Pattern - ( 迭代器模式 )</li>\n</ul>\n<p>这两种模式是 Observable 的基础。</p>\n<h2 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h2><p>一个目标对象管理所有相依于它的观察者对象，并且在它本身的状态改变时主动发出通知。它定义了一种一对多的关系，让多个观察者对象同时监听某一个主题对象，这个主题对象的状态发生变化时就会通知所有的观察者对象，使得它们能够自动更新自己。</p>\n<p>Observables 与 Observer 之间的订阅发布关系 ( 观察者模式 ) 如下：</p>\n<ul>\n<li>订阅：Observer 通过 Observable 提供的 subscribe() 方法订阅 Observable。</li>\n<li>发布：Observable 通过回调 next 方法向 Observer 发布事件。</li>\n</ul>\n<p>当 Observable 设置观察者后，而连接并获取原始数据的这个过程叫生产者，可能是 DOM 中的 click 事件、input 事件、或者更加复杂的 HTTP 通信。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Observable, Subscription &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">@Component(&#123;</span><br><span class=\"line\">  selector: <span class=\"string\">&#x27;app-home&#x27;</span>,</span><br><span class=\"line\">  template: <span class=\"string\">`&lt;input type=&quot;text&quot;&gt; `</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeComponent</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">ngOnInit</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> node = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;input[type=text]&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 第二个参数 input 是事件名，对于input元素有一个 oninput 事件用于接受用户输入</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> input$ = Observable.fromEvent(node, <span class=\"string\">&#x27;input&#x27;</span>)</span><br><span class=\"line\">    input$.subscribe(&#123;</span><br><span class=\"line\">      next: <span class=\"function\">(<span class=\"params\">event: any</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">`You just typed <span class=\"subst\">$&#123;event.target.value&#125;</span>!`</span>),</span><br><span class=\"line\">      error: <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">`Oops... <span class=\"subst\">$&#123;err&#125;</span>`</span>),</span><br><span class=\"line\">      complete: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">`Complete!`</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Observable.fromEvent() 会返回一个 Observable，并且监听 input 事件，当事件被触发后会发送一个 Event 给对应的 observer 观察者。</strong></p>\n<h2 id=\"一、observer\"><a href=\"#一、observer\" class=\"headerlink\" title=\"一、observer\"></a>一、observer</h2><p><strong>subscribe 订阅就是接收一个 observer 方法。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input$.subscribe(<span class=\"function\">(<span class=\"params\">event: any</span>) =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>从语法角度来讲和 subscribe({ next, error, complete }) 是一样的。当 Observable 产生一个新值时，会通知 observer 的 next()，而当捕获失败可以调用 error()。</p>\n<p>当 Observable 被订阅后，除非调用 observer 的 complete() 或 unsubscribe() 取消订阅两情况以外；会一直将值传递给 observer。</p>\n<p>Observable 的生产的值允许经过一序列格式化或操作，最终得到一个有价值的数据给观察者，而这一切是由一序列链式 operator 来完成的，每一个 operator 都会产生一个新的 Observable。而我们也称这一序列过程为：<strong>流</strong>。</p>\n<hr>\n<h2 id=\"二、operator\"><a href=\"#二、operator\" class=\"headerlink\" title=\"二、operator\"></a>二、operator</h2><p>Observable 可以链式写法，这意味着我们可以这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable.fromEvent(node, <span class=\"string\">&#x27;input&#x27;</span>)</span><br><span class=\"line\">  .map(<span class=\"function\">(<span class=\"params\">event: any</span>) =&gt;</span> event.target.value)</span><br><span class=\"line\">  .filter(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value.length &gt;= <span class=\"number\">2</span>)</span><br><span class=\"line\">  .subscribe(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>下面是顺序步骤：</p>\n<ul>\n<li>假设用户输入：a</li>\n<li>Observable 对触发 oninput 事件作出反应，将值以参数的形式传递给 observer 的 next()。</li>\n<li>map() 根据 event.target.value 的内容返回一个新的 Observable，并调用 next() 传递给下一个 observer。</li>\n<li>filter() 如果值长度 &gt;=2 的话，则返回一个新的 Observable，并调用 next() 传递给下一个 observer。</li>\n<li>最后，将结果传递给 subscribe 订阅块。</li>\n</ul>\n<h4 id=\"取消订阅\"><a href=\"#取消订阅\" class=\"headerlink\" title=\"取消订阅\"></a>取消订阅</h4><p>Observable 当有数据产生时才会推送给订阅者，所以它可能会无限次向订阅者推送数据。正因为如此，在 Angular 里面创建组件的时候务必要取消订阅操作，以避免内存泄漏，要知道在 SPA 世界里懂得擦屁股是一件必须的事。</p>\n<h5 id=\"unsubscribe\"><a href=\"#unsubscribe\" class=\"headerlink\" title=\"unsubscribe\"></a>unsubscribe</h5><p>前面示例讲过，调用 subscribe() 后，会返回一个 Subscription 可用于取消操作 unsubscribe()。最合理的方式在 ngOnDestroy 调用它。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">ngOnDestroy</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.inputSubscription.unsubscribe();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"takeWhile\"><a href=\"#takeWhile\" class=\"headerlink\" title=\"takeWhile\"></a>takeWhile</h5><p>如果组件有很多订阅者的话，则需要将这些订阅者存储在数组中，并组件被销毁时再逐个取消订阅。但，我们有更好的办法：</p>\n<p>使用 takeWhile() operator，它会在你传递一个布尔值是调用 next() 还是 complete()。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private alive: boolean = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">ngOnInit</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> node = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;input[type=text]&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.s = Observable.fromEvent(node, <span class=\"string\">&#x27;input&#x27;</span>)</span><br><span class=\"line\">    .takeWhile(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">this</span>.alive)</span><br><span class=\"line\">    .map(<span class=\"function\">(<span class=\"params\">event: any</span>) =&gt;</span> event.target.value)</span><br><span class=\"line\">    .filter(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value.length &gt;= <span class=\"number\">2</span>)</span><br><span class=\"line\">    .subscribe(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123; <span class=\"built_in\">console</span>.log(value) &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">ngOnDestroy</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.alive = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Subject\"><a href=\"#Subject\" class=\"headerlink\" title=\"Subject\"></a>Subject</h2><p>我们在写一个 Service 用于数据传递时，总是使用 new Subject。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Injectable()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageService</span> </span>&#123;</span><br><span class=\"line\">    private subject = <span class=\"keyword\">new</span> Subject&lt;any&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">send</span>(<span class=\"params\">message: any</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.subject.next(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    get(): Observable&lt;any&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.subject.asObservable();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当 F 组件需要向 M 组件传递数据时，我们可以在 F 组件中使用 send()。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">public srv: MessageService</span>)</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">ngOnInit</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.srv.send(<span class=\"string\">&#x27;w s k f m?&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而 M 组件只需要订阅内容就行：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">private srv: MessageService</span>)</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">message: any;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">ngOnInit</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.srv.get().subscribe(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.message = result;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"EventEmitter\"><a href=\"#EventEmitter\" class=\"headerlink\" title=\"EventEmitter\"></a>EventEmitter</h2><p>其实 EventEmitter 跟 RxJS 没有直接关系，因为他是 Angular 的产物，而非 RxJS 的东西。或者我们压根没必要去谈，因为 EventEmitter 就是 Subject。</p>\n<p><strong>EventEmitter 的作用是使指令或组件能自定义事件。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Output() changed = <span class=\"keyword\">new</span> EventEmitter&lt;string&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">click</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.changed.emit(<span class=\"string\">&#x27;hi~&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component(&#123;</span><br><span class=\"line\">  template: <span class=\"string\">`&lt;comp (changed)=&quot;subscribe($event)&quot;&gt;&lt;/comp&gt;`</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeComponent</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">subscribe</span>(<span class=\"params\">message: string</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 接收：hi~</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面示例其实和上一个示例中 MessageService 如出一辙，只不过是将 next() 换成 emit() 仅此而已。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><h4 id=\"创建数据流：\"><a href=\"#创建数据流：\" class=\"headerlink\" title=\"创建数据流：\"></a>创建数据流：</h4><ul>\n<li>单值：of, empty, never</li>\n<li>多值：from</li>\n<li>定时：interval, timer</li>\n<li>从事件创建：fromEvent</li>\n<li>从 Promise 创建：fromPromise</li>\n<li>自定义创建：create</li>\n</ul>\n<h4 id=\"转换操作：\"><a href=\"#转换操作：\" class=\"headerlink\" title=\"转换操作：\"></a>转换操作：</h4><ul>\n<li>改变数据形态：map, mapTo, pluck</li>\n<li>过滤一些值：filter, skip, first, last, take</li>\n<li>时间轴上的操作：delay, timeout, throttle, debounce, audit, bufferTime</li>\n<li>累加：reduce, scan</li>\n<li>异常处理：throw, catch, retry, finally</li>\n<li>条件执行：takeUntil, delayWhen, retryWhen, subscribeOn, ObserveOn</li>\n<li>转接：switch</li>\n</ul>\n<h4 id=\"组合数据流：\"><a href=\"#组合数据流：\" class=\"headerlink\" title=\"组合数据流：\"></a>组合数据流：</h4><ul>\n<li>concat ，保持原来的序列顺序连接两个数据流</li>\n<li>merge，合并序列</li>\n<li>race，预设条件为其中一个数据流完成</li>\n<li>forkJoin，预设条件为所有数据流都完成</li>\n<li>zip，取各来源数据流最后一个值合并为对象</li>\n<li>combineLatest，取各来源数据流最后一个值合并为数组另，最好使用 $ 结尾的命名方式来表示 Observable，例：input$ 。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>观察者模式又称发布订阅模式，在此种模式中，一个目标物件管理所有相依于它的观察者物件。并且在它本身的状态改变时主动发出通知。观察者模式（Observer ）完美的将观察者和被观察的对象分离开。</p>","more":"<p>Observable 只是一个普通函数，要想让他有所作为，就需要跟 observer 一起使用；而这个 observer（后面我们会介绍）只是一个带有 next、error 、 complete 的简单对象而已。最后，还需要通过 subscribe 订阅来 <strong>启动</strong> Observable；否则它是不会有任何反应；而订阅也会返回一个可用于取消操作（在 RxJS 里叫 unsubscribe）。</p>\n<ul>\n<li>Observer Pattern - ( 观察者模式 / 发布订阅模式 )</li>\n<li>Iterator Pattern - ( 迭代器模式 )</li>\n</ul>\n<p>这两种模式是 Observable 的基础。</p>\n<h2 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h2><p>一个目标对象管理所有相依于它的观察者对象，并且在它本身的状态改变时主动发出通知。它定义了一种一对多的关系，让多个观察者对象同时监听某一个主题对象，这个主题对象的状态发生变化时就会通知所有的观察者对象，使得它们能够自动更新自己。</p>\n<p>Observables 与 Observer 之间的订阅发布关系 ( 观察者模式 ) 如下：</p>\n<ul>\n<li>订阅：Observer 通过 Observable 提供的 subscribe() 方法订阅 Observable。</li>\n<li>发布：Observable 通过回调 next 方法向 Observer 发布事件。</li>\n</ul>\n<p>当 Observable 设置观察者后，而连接并获取原始数据的这个过程叫生产者，可能是 DOM 中的 click 事件、input 事件、或者更加复杂的 HTTP 通信。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Observable, Subscription &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">@Component(&#123;</span><br><span class=\"line\">  selector: <span class=\"string\">&#x27;app-home&#x27;</span>,</span><br><span class=\"line\">  template: <span class=\"string\">`&lt;input type=&quot;text&quot;&gt; `</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeComponent</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">ngOnInit</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> node = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;input[type=text]&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 第二个参数 input 是事件名，对于input元素有一个 oninput 事件用于接受用户输入</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> input$ = Observable.fromEvent(node, <span class=\"string\">&#x27;input&#x27;</span>)</span><br><span class=\"line\">    input$.subscribe(&#123;</span><br><span class=\"line\">      next: <span class=\"function\">(<span class=\"params\">event: any</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">`You just typed <span class=\"subst\">$&#123;event.target.value&#125;</span>!`</span>),</span><br><span class=\"line\">      error: <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">`Oops... <span class=\"subst\">$&#123;err&#125;</span>`</span>),</span><br><span class=\"line\">      complete: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">`Complete!`</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Observable.fromEvent() 会返回一个 Observable，并且监听 input 事件，当事件被触发后会发送一个 Event 给对应的 observer 观察者。</strong></p>\n<h2 id=\"一、observer\"><a href=\"#一、observer\" class=\"headerlink\" title=\"一、observer\"></a>一、observer</h2><p><strong>subscribe 订阅就是接收一个 observer 方法。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input$.subscribe(<span class=\"function\">(<span class=\"params\">event: any</span>) =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>从语法角度来讲和 subscribe({ next, error, complete }) 是一样的。当 Observable 产生一个新值时，会通知 observer 的 next()，而当捕获失败可以调用 error()。</p>\n<p>当 Observable 被订阅后，除非调用 observer 的 complete() 或 unsubscribe() 取消订阅两情况以外；会一直将值传递给 observer。</p>\n<p>Observable 的生产的值允许经过一序列格式化或操作，最终得到一个有价值的数据给观察者，而这一切是由一序列链式 operator 来完成的，每一个 operator 都会产生一个新的 Observable。而我们也称这一序列过程为：<strong>流</strong>。</p>\n<hr>\n<h2 id=\"二、operator\"><a href=\"#二、operator\" class=\"headerlink\" title=\"二、operator\"></a>二、operator</h2><p>Observable 可以链式写法，这意味着我们可以这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable.fromEvent(node, <span class=\"string\">&#x27;input&#x27;</span>)</span><br><span class=\"line\">  .map(<span class=\"function\">(<span class=\"params\">event: any</span>) =&gt;</span> event.target.value)</span><br><span class=\"line\">  .filter(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value.length &gt;= <span class=\"number\">2</span>)</span><br><span class=\"line\">  .subscribe(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>下面是顺序步骤：</p>\n<ul>\n<li>假设用户输入：a</li>\n<li>Observable 对触发 oninput 事件作出反应，将值以参数的形式传递给 observer 的 next()。</li>\n<li>map() 根据 event.target.value 的内容返回一个新的 Observable，并调用 next() 传递给下一个 observer。</li>\n<li>filter() 如果值长度 &gt;=2 的话，则返回一个新的 Observable，并调用 next() 传递给下一个 observer。</li>\n<li>最后，将结果传递给 subscribe 订阅块。</li>\n</ul>\n<h4 id=\"取消订阅\"><a href=\"#取消订阅\" class=\"headerlink\" title=\"取消订阅\"></a>取消订阅</h4><p>Observable 当有数据产生时才会推送给订阅者，所以它可能会无限次向订阅者推送数据。正因为如此，在 Angular 里面创建组件的时候务必要取消订阅操作，以避免内存泄漏，要知道在 SPA 世界里懂得擦屁股是一件必须的事。</p>\n<h5 id=\"unsubscribe\"><a href=\"#unsubscribe\" class=\"headerlink\" title=\"unsubscribe\"></a>unsubscribe</h5><p>前面示例讲过，调用 subscribe() 后，会返回一个 Subscription 可用于取消操作 unsubscribe()。最合理的方式在 ngOnDestroy 调用它。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">ngOnDestroy</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.inputSubscription.unsubscribe();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"takeWhile\"><a href=\"#takeWhile\" class=\"headerlink\" title=\"takeWhile\"></a>takeWhile</h5><p>如果组件有很多订阅者的话，则需要将这些订阅者存储在数组中，并组件被销毁时再逐个取消订阅。但，我们有更好的办法：</p>\n<p>使用 takeWhile() operator，它会在你传递一个布尔值是调用 next() 还是 complete()。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private alive: boolean = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">ngOnInit</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> node = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;input[type=text]&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.s = Observable.fromEvent(node, <span class=\"string\">&#x27;input&#x27;</span>)</span><br><span class=\"line\">    .takeWhile(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">this</span>.alive)</span><br><span class=\"line\">    .map(<span class=\"function\">(<span class=\"params\">event: any</span>) =&gt;</span> event.target.value)</span><br><span class=\"line\">    .filter(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value.length &gt;= <span class=\"number\">2</span>)</span><br><span class=\"line\">    .subscribe(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123; <span class=\"built_in\">console</span>.log(value) &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">ngOnDestroy</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.alive = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Subject\"><a href=\"#Subject\" class=\"headerlink\" title=\"Subject\"></a>Subject</h2><p>我们在写一个 Service 用于数据传递时，总是使用 new Subject。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Injectable()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageService</span> </span>&#123;</span><br><span class=\"line\">    private subject = <span class=\"keyword\">new</span> Subject&lt;any&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">send</span>(<span class=\"params\">message: any</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.subject.next(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    get(): Observable&lt;any&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.subject.asObservable();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当 F 组件需要向 M 组件传递数据时，我们可以在 F 组件中使用 send()。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">public srv: MessageService</span>)</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">ngOnInit</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.srv.send(<span class=\"string\">&#x27;w s k f m?&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而 M 组件只需要订阅内容就行：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">private srv: MessageService</span>)</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">message: any;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">ngOnInit</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.srv.get().subscribe(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.message = result;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"EventEmitter\"><a href=\"#EventEmitter\" class=\"headerlink\" title=\"EventEmitter\"></a>EventEmitter</h2><p>其实 EventEmitter 跟 RxJS 没有直接关系，因为他是 Angular 的产物，而非 RxJS 的东西。或者我们压根没必要去谈，因为 EventEmitter 就是 Subject。</p>\n<p><strong>EventEmitter 的作用是使指令或组件能自定义事件。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Output() changed = <span class=\"keyword\">new</span> EventEmitter&lt;string&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">click</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.changed.emit(<span class=\"string\">&#x27;hi~&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component(&#123;</span><br><span class=\"line\">  template: <span class=\"string\">`&lt;comp (changed)=&quot;subscribe($event)&quot;&gt;&lt;/comp&gt;`</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeComponent</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">subscribe</span>(<span class=\"params\">message: string</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 接收：hi~</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面示例其实和上一个示例中 MessageService 如出一辙，只不过是将 next() 换成 emit() 仅此而已。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><h4 id=\"创建数据流：\"><a href=\"#创建数据流：\" class=\"headerlink\" title=\"创建数据流：\"></a>创建数据流：</h4><ul>\n<li>单值：of, empty, never</li>\n<li>多值：from</li>\n<li>定时：interval, timer</li>\n<li>从事件创建：fromEvent</li>\n<li>从 Promise 创建：fromPromise</li>\n<li>自定义创建：create</li>\n</ul>\n<h4 id=\"转换操作：\"><a href=\"#转换操作：\" class=\"headerlink\" title=\"转换操作：\"></a>转换操作：</h4><ul>\n<li>改变数据形态：map, mapTo, pluck</li>\n<li>过滤一些值：filter, skip, first, last, take</li>\n<li>时间轴上的操作：delay, timeout, throttle, debounce, audit, bufferTime</li>\n<li>累加：reduce, scan</li>\n<li>异常处理：throw, catch, retry, finally</li>\n<li>条件执行：takeUntil, delayWhen, retryWhen, subscribeOn, ObserveOn</li>\n<li>转接：switch</li>\n</ul>\n<h4 id=\"组合数据流：\"><a href=\"#组合数据流：\" class=\"headerlink\" title=\"组合数据流：\"></a>组合数据流：</h4><ul>\n<li>concat ，保持原来的序列顺序连接两个数据流</li>\n<li>merge，合并序列</li>\n<li>race，预设条件为其中一个数据流完成</li>\n<li>forkJoin，预设条件为所有数据流都完成</li>\n<li>zip，取各来源数据流最后一个值合并为对象</li>\n<li>combineLatest，取各来源数据流最后一个值合并为数组另，最好使用 $ 结尾的命名方式来表示 Observable，例：input$ 。</li>\n</ul>"},{"title":"Object.defineProperty","date":"2017-11-09T03:28:03.000Z","_content":"\nObject.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。Vue 是通过数据劫持来做数据绑定的，其中最核心的方法便是通过 Ojbect.defineProperty() 来实现对属性的劫持，达到监听数据变动的目的。\n\n<!--more-->\n\n对象的属性分两种：数据属性和访问属性\n\n## 数据属性\n\n数据属性包含一个保存数据值的位置。数据属性有 4 个特性描述它们的行为\n\n- Configurable：表示属性是否可以通过 delete 删除并重新定义，是否可以修改它的特性，以及是否可以把它改为访问属性，默认为 true\n- Enumerable：表示是否可以通过 for-in 循环返回，默认为 true\n- Writable：是否可以被修改，默认为 true\n- Value：包含属性实际的值，默认值为 undefined\n\n要修改属性的默认特性，就必须使用 Object.defineProperty()方法\n\n### Object.defineProperty(object, propertyname, descriptor) 为对象定义属性\n\n在 js 中我们可以通过下面几种方法定义属性 :\n\n```javascript\n// (1) define someOne property name\nsomeOne.name = 'cover';\n//or use (2)\nsomeOne['name'] = 'cover';\n// or use (3) defineProperty\nObject.defineProperty(someOne, 'name', {\n  writable:false\n  value: 'cover'\n});\nsomeOne['name'] = 'bbbb';\nconsole.log(someOne['name'])//cover\n```\n\n若是用来封装自定义 API 是非常有用的\n\n#### descriptor\n\n其中 descriptor 的参数值得我们关注下 , 该属性可设置的值有：value 、 writable、configurable 、 enumerable、set 和 get。\n\n#### 【 value】\n\n该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等），默认为 undefined。\n\n#### 【 writable】\n\n该属性是否可写，如果设置成 false，则任何对该属性改写的操作都无效（但不会报错），对于像前面例子中直接在对象上定义的属性，这个属性该特性默认值为为 true。\n\n```javascript\nvar someOne = {}\nObject.defineProperty(someOne, 'name', {\n  value: 'coverguo', //由于设定了writable属性为false 导致这个量不可以修改 ，任何修改豆浆无效化\n  writable: false,\n})\nconsole.log(someOne.name) // 输出 coverguo\nsomeOne.name = 'linkzhu'\nconsole.log(someOne.name) // 输出coverguo\n```\n\n#### 【 configurable】\n\n仅当该属性的 configurable 为 true 时，该属性才能够被改变，也能够被删除。默认为 false。\n\n如果为 false，则任何尝试删除目标属性或修改属性以下特性（writable, configurable, enumerable ）的行为将被无效化，对于像前面例子中直接在对象上定义的属性，这个属性该特性默认值为为 true。\n\n#### 【 enumerable】\n\n是否能在 for-in 循环中遍历出来或在 Object.keys 中列举出来。对于像前面例子中直接在对象上定义的属性，这个属性该特性默认值为为 true。\n\n```javascript\nvar a = {}\nObject.defineProperty(a, 'b', {\n  value: 3445,\n  enumerable: true,\n})\nconsole.log(Object.keys(a)) // 打印[\"b\"]\n//改为false\nvar a = {}\nObject.defineProperty(a, 'b', {\n  value: 3445,\n  enumerable: false, //注意咯这里改了\n})\nconsole.log(Object.keys(a)) // 打印[]\n```\n\n#### 注意：\n\n在调用 Object.defineProperty() 方法时，如果不指定， configurable ， enumerable， writable 特性的默认值都是 false, 这跟之前所 说的对于像前面例子中直接在对象上定义的属性，这个特性默认值为为 true。并不冲突，如下代码所示：\n\n```javascript\n//调用Object.defineProperty()方法时，如果不指定\nvar someOne = {}\nsomeOne.name = 'coverguo'\nconsole.log(Object.getOwnPropertyDescriptor(someOne, 'name'))\n//输出 Object {value: \"coverguo\", writable: true, enumerable: true, configurable: true}\n\n//直接在对象上定义的属性，这个特性默认值为为 true\nvar otherOne = {}\nObject.defineProperty(otherOne, 'name', {\n  value: 'coverguo',\n})\nconsole.log(Object.getOwnPropertyDescriptor(otherOne, 'name'))\n//输出 Object {value: \"coverguo\", writable: false, enumerable: false, configurable: false}\n```\n\n## 访问器属性\n\n访问器属性不包含数据值。相反他们包含一个获取 getter 函数和一个设置 setter 函数，不过这两个函数不是必需的。在读取访问器属性时，会调用获取函数，这个函数的责任就是返回一个有效的值。\n\n在写入访问器属性时，会调用设置函数并传入新值，这个函数必须决定对数据做出什么修改，访问器属性有 4 个特性描述它们的行为。\n\n- Configurable：表示属性是否可以通过 delete 删除并重新定义，是否可以修改它的特性，以及是否可以把它改为数据属性，默认为 true\n- Enumerable：表示属性是否可以通过 for-in 循环返回，默认为 true\n- Get：获取函数，在读取属性时调用，默认为 undefined\n- Set：设置函数，在写入属性时调用，默认为 undefined\n\n访问器属性是不能直接定义的，不许使用 Object.defineProperty()\n\n#### 【 get】和【set 】\n\n在 descriptor 中不能 同时设置访问器 (get 和 set) 和 wriable 或 value，否则会错，就是说想用 (get 和 set)，就不能用（wriable 或 value 中的任何一个）\n\n```javascript\nvar a= {}\nObject.defineProperty(a,\"b\",{\n  set:function(newValue){\n    console.log(\"你要赋值给我,我的新值是\"＋newValue)\n    },\n  get:function(){\n    console.log(\"你取我的值\")\n    return 2 //注意这里，我硬编码返回2\n   }\n})\na.b =1 //打印 你要赋值给我,我的新值是1\nconsole.log(a.b)    //打印 你取我的值\n                    //打印 2    注意这里，和我的硬编码相同的\n```\n\n\\*\\* 这个 \"b\" 赋值 或者取值的时候会分别触发 set 和 get 对应的函数，这就是 observe 的关键，是 vue 实现 observe 的实现的基础，也是实现 \\$watch 的基础。\n\n##### 【 get】\n\n一旦目标对象访问该属性，就会调用这个方法，并返回结果。默认为 undefined。 ##### 【 set】 一旦目标对象设置该属性，就会调用这个方法。默认为 undefined。\n\n## 兼容性\n\n在 ie8 下只能在 DOM 对象上使用，尝试在原生的对象使用 Object.defineProperty() 会报错。\n","source":"_posts/Object-defineProperty.md","raw":"---\ntitle: Object.defineProperty\ncategories: JavaScript\ndate: 2017-11-09 11:28:03\n---\n\nObject.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。Vue 是通过数据劫持来做数据绑定的，其中最核心的方法便是通过 Ojbect.defineProperty() 来实现对属性的劫持，达到监听数据变动的目的。\n\n<!--more-->\n\n对象的属性分两种：数据属性和访问属性\n\n## 数据属性\n\n数据属性包含一个保存数据值的位置。数据属性有 4 个特性描述它们的行为\n\n- Configurable：表示属性是否可以通过 delete 删除并重新定义，是否可以修改它的特性，以及是否可以把它改为访问属性，默认为 true\n- Enumerable：表示是否可以通过 for-in 循环返回，默认为 true\n- Writable：是否可以被修改，默认为 true\n- Value：包含属性实际的值，默认值为 undefined\n\n要修改属性的默认特性，就必须使用 Object.defineProperty()方法\n\n### Object.defineProperty(object, propertyname, descriptor) 为对象定义属性\n\n在 js 中我们可以通过下面几种方法定义属性 :\n\n```javascript\n// (1) define someOne property name\nsomeOne.name = 'cover';\n//or use (2)\nsomeOne['name'] = 'cover';\n// or use (3) defineProperty\nObject.defineProperty(someOne, 'name', {\n  writable:false\n  value: 'cover'\n});\nsomeOne['name'] = 'bbbb';\nconsole.log(someOne['name'])//cover\n```\n\n若是用来封装自定义 API 是非常有用的\n\n#### descriptor\n\n其中 descriptor 的参数值得我们关注下 , 该属性可设置的值有：value 、 writable、configurable 、 enumerable、set 和 get。\n\n#### 【 value】\n\n该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等），默认为 undefined。\n\n#### 【 writable】\n\n该属性是否可写，如果设置成 false，则任何对该属性改写的操作都无效（但不会报错），对于像前面例子中直接在对象上定义的属性，这个属性该特性默认值为为 true。\n\n```javascript\nvar someOne = {}\nObject.defineProperty(someOne, 'name', {\n  value: 'coverguo', //由于设定了writable属性为false 导致这个量不可以修改 ，任何修改豆浆无效化\n  writable: false,\n})\nconsole.log(someOne.name) // 输出 coverguo\nsomeOne.name = 'linkzhu'\nconsole.log(someOne.name) // 输出coverguo\n```\n\n#### 【 configurable】\n\n仅当该属性的 configurable 为 true 时，该属性才能够被改变，也能够被删除。默认为 false。\n\n如果为 false，则任何尝试删除目标属性或修改属性以下特性（writable, configurable, enumerable ）的行为将被无效化，对于像前面例子中直接在对象上定义的属性，这个属性该特性默认值为为 true。\n\n#### 【 enumerable】\n\n是否能在 for-in 循环中遍历出来或在 Object.keys 中列举出来。对于像前面例子中直接在对象上定义的属性，这个属性该特性默认值为为 true。\n\n```javascript\nvar a = {}\nObject.defineProperty(a, 'b', {\n  value: 3445,\n  enumerable: true,\n})\nconsole.log(Object.keys(a)) // 打印[\"b\"]\n//改为false\nvar a = {}\nObject.defineProperty(a, 'b', {\n  value: 3445,\n  enumerable: false, //注意咯这里改了\n})\nconsole.log(Object.keys(a)) // 打印[]\n```\n\n#### 注意：\n\n在调用 Object.defineProperty() 方法时，如果不指定， configurable ， enumerable， writable 特性的默认值都是 false, 这跟之前所 说的对于像前面例子中直接在对象上定义的属性，这个特性默认值为为 true。并不冲突，如下代码所示：\n\n```javascript\n//调用Object.defineProperty()方法时，如果不指定\nvar someOne = {}\nsomeOne.name = 'coverguo'\nconsole.log(Object.getOwnPropertyDescriptor(someOne, 'name'))\n//输出 Object {value: \"coverguo\", writable: true, enumerable: true, configurable: true}\n\n//直接在对象上定义的属性，这个特性默认值为为 true\nvar otherOne = {}\nObject.defineProperty(otherOne, 'name', {\n  value: 'coverguo',\n})\nconsole.log(Object.getOwnPropertyDescriptor(otherOne, 'name'))\n//输出 Object {value: \"coverguo\", writable: false, enumerable: false, configurable: false}\n```\n\n## 访问器属性\n\n访问器属性不包含数据值。相反他们包含一个获取 getter 函数和一个设置 setter 函数，不过这两个函数不是必需的。在读取访问器属性时，会调用获取函数，这个函数的责任就是返回一个有效的值。\n\n在写入访问器属性时，会调用设置函数并传入新值，这个函数必须决定对数据做出什么修改，访问器属性有 4 个特性描述它们的行为。\n\n- Configurable：表示属性是否可以通过 delete 删除并重新定义，是否可以修改它的特性，以及是否可以把它改为数据属性，默认为 true\n- Enumerable：表示属性是否可以通过 for-in 循环返回，默认为 true\n- Get：获取函数，在读取属性时调用，默认为 undefined\n- Set：设置函数，在写入属性时调用，默认为 undefined\n\n访问器属性是不能直接定义的，不许使用 Object.defineProperty()\n\n#### 【 get】和【set 】\n\n在 descriptor 中不能 同时设置访问器 (get 和 set) 和 wriable 或 value，否则会错，就是说想用 (get 和 set)，就不能用（wriable 或 value 中的任何一个）\n\n```javascript\nvar a= {}\nObject.defineProperty(a,\"b\",{\n  set:function(newValue){\n    console.log(\"你要赋值给我,我的新值是\"＋newValue)\n    },\n  get:function(){\n    console.log(\"你取我的值\")\n    return 2 //注意这里，我硬编码返回2\n   }\n})\na.b =1 //打印 你要赋值给我,我的新值是1\nconsole.log(a.b)    //打印 你取我的值\n                    //打印 2    注意这里，和我的硬编码相同的\n```\n\n\\*\\* 这个 \"b\" 赋值 或者取值的时候会分别触发 set 和 get 对应的函数，这就是 observe 的关键，是 vue 实现 observe 的实现的基础，也是实现 \\$watch 的基础。\n\n##### 【 get】\n\n一旦目标对象访问该属性，就会调用这个方法，并返回结果。默认为 undefined。 ##### 【 set】 一旦目标对象设置该属性，就会调用这个方法。默认为 undefined。\n\n## 兼容性\n\n在 ie8 下只能在 DOM 对象上使用，尝试在原生的对象使用 Object.defineProperty() 会报错。\n","slug":"Object-defineProperty","published":1,"updated":"2021-03-30T02:08:21.030Z","_id":"ckmejaert000oxcvr2bzj8c60","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。Vue 是通过数据劫持来做数据绑定的，其中最核心的方法便是通过 Ojbect.defineProperty() 来实现对属性的劫持，达到监听数据变动的目的。</p>\n<span id=\"more\"></span>\n\n<p>对象的属性分两种：数据属性和访问属性</p>\n<h2 id=\"数据属性\"><a href=\"#数据属性\" class=\"headerlink\" title=\"数据属性\"></a>数据属性</h2><p>数据属性包含一个保存数据值的位置。数据属性有 4 个特性描述它们的行为</p>\n<ul>\n<li>Configurable：表示属性是否可以通过 delete 删除并重新定义，是否可以修改它的特性，以及是否可以把它改为访问属性，默认为 true</li>\n<li>Enumerable：表示是否可以通过 for-in 循环返回，默认为 true</li>\n<li>Writable：是否可以被修改，默认为 true</li>\n<li>Value：包含属性实际的值，默认值为 undefined</li>\n</ul>\n<p>要修改属性的默认特性，就必须使用 Object.defineProperty()方法</p>\n<h3 id=\"Object-defineProperty-object-propertyname-descriptor-为对象定义属性\"><a href=\"#Object-defineProperty-object-propertyname-descriptor-为对象定义属性\" class=\"headerlink\" title=\"Object.defineProperty(object, propertyname, descriptor) 为对象定义属性\"></a>Object.defineProperty(object, propertyname, descriptor) 为对象定义属性</h3><p>在 js 中我们可以通过下面几种方法定义属性 :</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// (1) define someOne property name</span></span><br><span class=\"line\">someOne.name = <span class=\"string\">&#x27;cover&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//or use (2)</span></span><br><span class=\"line\">someOne[<span class=\"string\">&#x27;name&#x27;</span>] = <span class=\"string\">&#x27;cover&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// or use (3) defineProperty</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(someOne, <span class=\"string\">&#x27;name&#x27;</span>, &#123;</span><br><span class=\"line\">  writable:<span class=\"literal\">false</span></span><br><span class=\"line\">  value: <span class=\"string\">&#x27;cover&#x27;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">someOne[<span class=\"string\">&#x27;name&#x27;</span>] = <span class=\"string\">&#x27;bbbb&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(someOne[<span class=\"string\">&#x27;name&#x27;</span>])<span class=\"comment\">//cover</span></span><br></pre></td></tr></table></figure>\n\n<p>若是用来封装自定义 API 是非常有用的</p>\n<h4 id=\"descriptor\"><a href=\"#descriptor\" class=\"headerlink\" title=\"descriptor\"></a>descriptor</h4><p>其中 descriptor 的参数值得我们关注下 , 该属性可设置的值有：value 、 writable、configurable 、 enumerable、set 和 get。</p>\n<h4 id=\"【-value】\"><a href=\"#【-value】\" class=\"headerlink\" title=\"【 value】\"></a>【 value】</h4><p>该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等），默认为 undefined。</p>\n<h4 id=\"【-writable】\"><a href=\"#【-writable】\" class=\"headerlink\" title=\"【 writable】\"></a>【 writable】</h4><p>该属性是否可写，如果设置成 false，则任何对该属性改写的操作都无效（但不会报错），对于像前面例子中直接在对象上定义的属性，这个属性该特性默认值为为 true。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someOne = &#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(someOne, <span class=\"string\">&#x27;name&#x27;</span>, &#123;</span><br><span class=\"line\">  value: <span class=\"string\">&#x27;coverguo&#x27;</span>, <span class=\"comment\">//由于设定了writable属性为false 导致这个量不可以修改 ，任何修改豆浆无效化</span></span><br><span class=\"line\">  writable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(someOne.name) <span class=\"comment\">// 输出 coverguo</span></span><br><span class=\"line\">someOne.name = <span class=\"string\">&#x27;linkzhu&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(someOne.name) <span class=\"comment\">// 输出coverguo</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"【-configurable】\"><a href=\"#【-configurable】\" class=\"headerlink\" title=\"【 configurable】\"></a>【 configurable】</h4><p>仅当该属性的 configurable 为 true 时，该属性才能够被改变，也能够被删除。默认为 false。</p>\n<p>如果为 false，则任何尝试删除目标属性或修改属性以下特性（writable, configurable, enumerable ）的行为将被无效化，对于像前面例子中直接在对象上定义的属性，这个属性该特性默认值为为 true。</p>\n<h4 id=\"【-enumerable】\"><a href=\"#【-enumerable】\" class=\"headerlink\" title=\"【 enumerable】\"></a>【 enumerable】</h4><p>是否能在 for-in 循环中遍历出来或在 Object.keys 中列举出来。对于像前面例子中直接在对象上定义的属性，这个属性该特性默认值为为 true。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(a, <span class=\"string\">&#x27;b&#x27;</span>, &#123;</span><br><span class=\"line\">  value: <span class=\"number\">3445</span>,</span><br><span class=\"line\">  enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.keys(a)) <span class=\"comment\">// 打印[&quot;b&quot;]</span></span><br><span class=\"line\"><span class=\"comment\">//改为false</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(a, <span class=\"string\">&#x27;b&#x27;</span>, &#123;</span><br><span class=\"line\">  value: <span class=\"number\">3445</span>,</span><br><span class=\"line\">  enumerable: <span class=\"literal\">false</span>, <span class=\"comment\">//注意咯这里改了</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.keys(a)) <span class=\"comment\">// 打印[]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h4><p>在调用 Object.defineProperty() 方法时，如果不指定， configurable ， enumerable， writable 特性的默认值都是 false, 这跟之前所 说的对于像前面例子中直接在对象上定义的属性，这个特性默认值为为 true。并不冲突，如下代码所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//调用Object.defineProperty()方法时，如果不指定</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> someOne = &#123;&#125;</span><br><span class=\"line\">someOne.name = <span class=\"string\">&#x27;coverguo&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(someOne, <span class=\"string\">&#x27;name&#x27;</span>))</span><br><span class=\"line\"><span class=\"comment\">//输出 Object &#123;value: &quot;coverguo&quot;, writable: true, enumerable: true, configurable: true&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//直接在对象上定义的属性，这个特性默认值为为 true</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> otherOne = &#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(otherOne, <span class=\"string\">&#x27;name&#x27;</span>, &#123;</span><br><span class=\"line\">  value: <span class=\"string\">&#x27;coverguo&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(otherOne, <span class=\"string\">&#x27;name&#x27;</span>))</span><br><span class=\"line\"><span class=\"comment\">//输出 Object &#123;value: &quot;coverguo&quot;, writable: false, enumerable: false, configurable: false&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"访问器属性\"><a href=\"#访问器属性\" class=\"headerlink\" title=\"访问器属性\"></a>访问器属性</h2><p>访问器属性不包含数据值。相反他们包含一个获取 getter 函数和一个设置 setter 函数，不过这两个函数不是必需的。在读取访问器属性时，会调用获取函数，这个函数的责任就是返回一个有效的值。</p>\n<p>在写入访问器属性时，会调用设置函数并传入新值，这个函数必须决定对数据做出什么修改，访问器属性有 4 个特性描述它们的行为。</p>\n<ul>\n<li>Configurable：表示属性是否可以通过 delete 删除并重新定义，是否可以修改它的特性，以及是否可以把它改为数据属性，默认为 true</li>\n<li>Enumerable：表示属性是否可以通过 for-in 循环返回，默认为 true</li>\n<li>Get：获取函数，在读取属性时调用，默认为 undefined</li>\n<li>Set：设置函数，在写入属性时调用，默认为 undefined</li>\n</ul>\n<p>访问器属性是不能直接定义的，不许使用 Object.defineProperty()</p>\n<h4 id=\"【-get】和【set-】\"><a href=\"#【-get】和【set-】\" class=\"headerlink\" title=\"【 get】和【set 】\"></a>【 get】和【set 】</h4><p>在 descriptor 中不能 同时设置访问器 (get 和 set) 和 wriable 或 value，否则会错，就是说想用 (get 和 set)，就不能用（wriable 或 value 中的任何一个）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a= &#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(a,<span class=\"string\">&quot;b&quot;</span>,&#123;</span><br><span class=\"line\">  set:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newValue</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;你要赋值给我,我的新值是&quot;</span>＋newValue)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  get:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;你取我的值&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span> <span class=\"comment\">//注意这里，我硬编码返回2</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">a.b =<span class=\"number\">1</span> <span class=\"comment\">//打印 你要赋值给我,我的新值是1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.b)    <span class=\"comment\">//打印 你取我的值</span></span><br><span class=\"line\">                    <span class=\"comment\">//打印 2    注意这里，和我的硬编码相同的</span></span><br></pre></td></tr></table></figure>\n\n<p>** 这个 “b” 赋值 或者取值的时候会分别触发 set 和 get 对应的函数，这就是 observe 的关键，是 vue 实现 observe 的实现的基础，也是实现 $watch 的基础。</p>\n<h5 id=\"【-get】\"><a href=\"#【-get】\" class=\"headerlink\" title=\"【 get】\"></a>【 get】</h5><p>一旦目标对象访问该属性，就会调用这个方法，并返回结果。默认为 undefined。 ##### 【 set】 一旦目标对象设置该属性，就会调用这个方法。默认为 undefined。</p>\n<h2 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h2><p>在 ie8 下只能在 DOM 对象上使用，尝试在原生的对象使用 Object.defineProperty() 会报错。</p>\n","site":{"data":{}},"excerpt":"<p>Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。Vue 是通过数据劫持来做数据绑定的，其中最核心的方法便是通过 Ojbect.defineProperty() 来实现对属性的劫持，达到监听数据变动的目的。</p>","more":"<p>对象的属性分两种：数据属性和访问属性</p>\n<h2 id=\"数据属性\"><a href=\"#数据属性\" class=\"headerlink\" title=\"数据属性\"></a>数据属性</h2><p>数据属性包含一个保存数据值的位置。数据属性有 4 个特性描述它们的行为</p>\n<ul>\n<li>Configurable：表示属性是否可以通过 delete 删除并重新定义，是否可以修改它的特性，以及是否可以把它改为访问属性，默认为 true</li>\n<li>Enumerable：表示是否可以通过 for-in 循环返回，默认为 true</li>\n<li>Writable：是否可以被修改，默认为 true</li>\n<li>Value：包含属性实际的值，默认值为 undefined</li>\n</ul>\n<p>要修改属性的默认特性，就必须使用 Object.defineProperty()方法</p>\n<h3 id=\"Object-defineProperty-object-propertyname-descriptor-为对象定义属性\"><a href=\"#Object-defineProperty-object-propertyname-descriptor-为对象定义属性\" class=\"headerlink\" title=\"Object.defineProperty(object, propertyname, descriptor) 为对象定义属性\"></a>Object.defineProperty(object, propertyname, descriptor) 为对象定义属性</h3><p>在 js 中我们可以通过下面几种方法定义属性 :</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// (1) define someOne property name</span></span><br><span class=\"line\">someOne.name = <span class=\"string\">&#x27;cover&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//or use (2)</span></span><br><span class=\"line\">someOne[<span class=\"string\">&#x27;name&#x27;</span>] = <span class=\"string\">&#x27;cover&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// or use (3) defineProperty</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(someOne, <span class=\"string\">&#x27;name&#x27;</span>, &#123;</span><br><span class=\"line\">  writable:<span class=\"literal\">false</span></span><br><span class=\"line\">  value: <span class=\"string\">&#x27;cover&#x27;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">someOne[<span class=\"string\">&#x27;name&#x27;</span>] = <span class=\"string\">&#x27;bbbb&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(someOne[<span class=\"string\">&#x27;name&#x27;</span>])<span class=\"comment\">//cover</span></span><br></pre></td></tr></table></figure>\n\n<p>若是用来封装自定义 API 是非常有用的</p>\n<h4 id=\"descriptor\"><a href=\"#descriptor\" class=\"headerlink\" title=\"descriptor\"></a>descriptor</h4><p>其中 descriptor 的参数值得我们关注下 , 该属性可设置的值有：value 、 writable、configurable 、 enumerable、set 和 get。</p>\n<h4 id=\"【-value】\"><a href=\"#【-value】\" class=\"headerlink\" title=\"【 value】\"></a>【 value】</h4><p>该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等），默认为 undefined。</p>\n<h4 id=\"【-writable】\"><a href=\"#【-writable】\" class=\"headerlink\" title=\"【 writable】\"></a>【 writable】</h4><p>该属性是否可写，如果设置成 false，则任何对该属性改写的操作都无效（但不会报错），对于像前面例子中直接在对象上定义的属性，这个属性该特性默认值为为 true。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someOne = &#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(someOne, <span class=\"string\">&#x27;name&#x27;</span>, &#123;</span><br><span class=\"line\">  value: <span class=\"string\">&#x27;coverguo&#x27;</span>, <span class=\"comment\">//由于设定了writable属性为false 导致这个量不可以修改 ，任何修改豆浆无效化</span></span><br><span class=\"line\">  writable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(someOne.name) <span class=\"comment\">// 输出 coverguo</span></span><br><span class=\"line\">someOne.name = <span class=\"string\">&#x27;linkzhu&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(someOne.name) <span class=\"comment\">// 输出coverguo</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"【-configurable】\"><a href=\"#【-configurable】\" class=\"headerlink\" title=\"【 configurable】\"></a>【 configurable】</h4><p>仅当该属性的 configurable 为 true 时，该属性才能够被改变，也能够被删除。默认为 false。</p>\n<p>如果为 false，则任何尝试删除目标属性或修改属性以下特性（writable, configurable, enumerable ）的行为将被无效化，对于像前面例子中直接在对象上定义的属性，这个属性该特性默认值为为 true。</p>\n<h4 id=\"【-enumerable】\"><a href=\"#【-enumerable】\" class=\"headerlink\" title=\"【 enumerable】\"></a>【 enumerable】</h4><p>是否能在 for-in 循环中遍历出来或在 Object.keys 中列举出来。对于像前面例子中直接在对象上定义的属性，这个属性该特性默认值为为 true。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(a, <span class=\"string\">&#x27;b&#x27;</span>, &#123;</span><br><span class=\"line\">  value: <span class=\"number\">3445</span>,</span><br><span class=\"line\">  enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.keys(a)) <span class=\"comment\">// 打印[&quot;b&quot;]</span></span><br><span class=\"line\"><span class=\"comment\">//改为false</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(a, <span class=\"string\">&#x27;b&#x27;</span>, &#123;</span><br><span class=\"line\">  value: <span class=\"number\">3445</span>,</span><br><span class=\"line\">  enumerable: <span class=\"literal\">false</span>, <span class=\"comment\">//注意咯这里改了</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.keys(a)) <span class=\"comment\">// 打印[]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h4><p>在调用 Object.defineProperty() 方法时，如果不指定， configurable ， enumerable， writable 特性的默认值都是 false, 这跟之前所 说的对于像前面例子中直接在对象上定义的属性，这个特性默认值为为 true。并不冲突，如下代码所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//调用Object.defineProperty()方法时，如果不指定</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> someOne = &#123;&#125;</span><br><span class=\"line\">someOne.name = <span class=\"string\">&#x27;coverguo&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(someOne, <span class=\"string\">&#x27;name&#x27;</span>))</span><br><span class=\"line\"><span class=\"comment\">//输出 Object &#123;value: &quot;coverguo&quot;, writable: true, enumerable: true, configurable: true&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//直接在对象上定义的属性，这个特性默认值为为 true</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> otherOne = &#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(otherOne, <span class=\"string\">&#x27;name&#x27;</span>, &#123;</span><br><span class=\"line\">  value: <span class=\"string\">&#x27;coverguo&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(otherOne, <span class=\"string\">&#x27;name&#x27;</span>))</span><br><span class=\"line\"><span class=\"comment\">//输出 Object &#123;value: &quot;coverguo&quot;, writable: false, enumerable: false, configurable: false&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"访问器属性\"><a href=\"#访问器属性\" class=\"headerlink\" title=\"访问器属性\"></a>访问器属性</h2><p>访问器属性不包含数据值。相反他们包含一个获取 getter 函数和一个设置 setter 函数，不过这两个函数不是必需的。在读取访问器属性时，会调用获取函数，这个函数的责任就是返回一个有效的值。</p>\n<p>在写入访问器属性时，会调用设置函数并传入新值，这个函数必须决定对数据做出什么修改，访问器属性有 4 个特性描述它们的行为。</p>\n<ul>\n<li>Configurable：表示属性是否可以通过 delete 删除并重新定义，是否可以修改它的特性，以及是否可以把它改为数据属性，默认为 true</li>\n<li>Enumerable：表示属性是否可以通过 for-in 循环返回，默认为 true</li>\n<li>Get：获取函数，在读取属性时调用，默认为 undefined</li>\n<li>Set：设置函数，在写入属性时调用，默认为 undefined</li>\n</ul>\n<p>访问器属性是不能直接定义的，不许使用 Object.defineProperty()</p>\n<h4 id=\"【-get】和【set-】\"><a href=\"#【-get】和【set-】\" class=\"headerlink\" title=\"【 get】和【set 】\"></a>【 get】和【set 】</h4><p>在 descriptor 中不能 同时设置访问器 (get 和 set) 和 wriable 或 value，否则会错，就是说想用 (get 和 set)，就不能用（wriable 或 value 中的任何一个）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a= &#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(a,<span class=\"string\">&quot;b&quot;</span>,&#123;</span><br><span class=\"line\">  set:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newValue</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;你要赋值给我,我的新值是&quot;</span>＋newValue)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  get:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;你取我的值&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span> <span class=\"comment\">//注意这里，我硬编码返回2</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">a.b =<span class=\"number\">1</span> <span class=\"comment\">//打印 你要赋值给我,我的新值是1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.b)    <span class=\"comment\">//打印 你取我的值</span></span><br><span class=\"line\">                    <span class=\"comment\">//打印 2    注意这里，和我的硬编码相同的</span></span><br></pre></td></tr></table></figure>\n\n<p>** 这个 “b” 赋值 或者取值的时候会分别触发 set 和 get 对应的函数，这就是 observe 的关键，是 vue 实现 observe 的实现的基础，也是实现 $watch 的基础。</p>\n<h5 id=\"【-get】\"><a href=\"#【-get】\" class=\"headerlink\" title=\"【 get】\"></a>【 get】</h5><p>一旦目标对象访问该属性，就会调用这个方法，并返回结果。默认为 undefined。 ##### 【 set】 一旦目标对象设置该属性，就会调用这个方法。默认为 undefined。</p>\n<h2 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h2><p>在 ie8 下只能在 DOM 对象上使用，尝试在原生的对象使用 Object.defineProperty() 会报错。</p>"},{"title":"PWA 离线缓存","date":"2017-11-01T03:28:03.000Z","_content":"\n# PWA (Progressive Web App) 特点\n\n1. installability( 可安装性 )，可被添加自主屏与全屏运行。\n2. app shell: 第一次渲染个壳，等异步数据来了在填充。\n3. offline( 离线能力 )：离线和弱网环境也能秒开，server worker 给了 web 一个可以跑后台的线程，它可以搭配非常靠谱的 cache Api 做缓存、可以拦截所有 Http 请求并使用 Fetch API 进行 response ，一个非常完备哦的 proxy 就这么诞生了\n4. re-engageable：推送通知的能力，依赖 service Worker 与 http push，不过默认支持的可是 GCM\n5. 推送是指服务器向服务工作线程提供信息的操作\n6. 通知是指服务工作线程或网页脚本向用户信息的操作。\n\n<!--more-->\n\n## service Worker 有以下功能和特性\n\n* 一个独立的 worker 线程，独立于当前网页进程，有自己独立的 worker context。\n* 一旦被 install，就永远存在，除非被 uninstall\n* 需要的时候可以直接唤醒，不需要的时候自动睡眠（有效利用资源，此处有坑）\n* 可编程拦截代理请求和返回，缓存文件，缓存的文件可以被网页进程取到（包括网络离线状态）\n* 离线内容开发者可控\n* 能向客户端推送消息\n* 不能直接操作 DOM\n* 出于安全的考虑，必须在 HTTPS 环境下才能工作\n* 异步实现，内部大都是通过 Promise 实现\n\n## service Worker 前提条件\n\n* 要求 HTTPS 的环境\n* 缓存机制是依赖 cache API 实现的 (cacheStorage)\n* 依赖 HTML5 fetchAPI\n* 依赖 Promise\n\n## 注册\n\n```javascript\n      if ('serviceWorker' in navigator) {\n            navigator.serviceWorker\n                .register('./pwa/sw.js', {scope: '/pwa'})\n                .then(function (registration) {\n                    console.log('Service Worker 注册成功，域名: ', registration.scope);\n                })\n                .catch(function (err) {\n                    console.log('Service Worker 注册失败: ', err);\n                });\n        }\n```\n\n 每次页面加载成功后，就会调用register()方法。浏览器会判断service Worker线程是否已注册，并作出相应的处理\nscope 方法是可选的，用于指定你想让service worker 控制内容的子目录。service worker 线程将接受\nscope指定网域目录上所有事项的fetch事件。并将它保存在你正在访问的域名下。\nsw.js将包含所有自定义的service worker事件处理程序\nscope的意义在于如果sw.js在/a/b/sw.js下，那么scope默认是/a/b,那么service worker 线程只能\n捕捉到path为/a/b开头的（/a/b/page1,/a/b/page2,..)下的fetch事件\n\n现在 Service Worker 已经被注册好了，接下来是在 Service Worker 生命周期中触发实现对应的事件处理程序了。\n\n## 事件处理程序\n\n生命周期：installing  installed activating activated,这个状态变化的过程就是service worker生命周期的反应。\n\n### 安装\n\ninstall事件我们会绑定在service worker 文件中，在service worker 安装成功后，install事件被触发。**install事件一般是被用来填充你的浏览器的离线缓存能力。**为了达到这个目的，我们使用了service worker 新的标志性的存储**cache API** ——一个service worker上的全局对象，**它使我们可以存储网络响应发来的资源，并且根据他们的请求来生成key**。这个 API 和浏览器的标准的缓存工作原理很相似，但是是只对应你的站点的域的。它会一直持久存在，直到你告诉它不再存储，你拥有全部的控制权。\n\n由于service worker是走的另外的线程，因此，window 和 DOM 都是不能访问的，因此我们要使用self访问全局上下文。\n\n```javascript\n    const CACHE_NAME = 'yu';\n    const urlsToCache = [\n        '/',\n        '/js/main.js',\n        '/css/style.css',\n        '/img/bob-ross.jpg'\n    ];\n\n    self.addEventListener('install', function (e) {\n        console.log('[ServiceWorker] Install');\n        /*ExtendableEvent.waitUntil():\n         延长了时间的生命周期。在服务工作中，延长事件的生命周期阻止浏览器在事件中的一部操作完成之前终止service worker。\n         当在与安装事件相关联的EventHandler中调用时，它会延时将已安装的工作程序视为安装，\n         直到传递的promise成功解析为止。这主要用于确保service worker在其依赖的所有核心高速缓存填充之前不会被考虑安装*/\n        e.waitUntil(\n            caches.open(chache_name).then(function (cache) {\n                console.log('[ServiceWorker] Caching app shell');\n                console.log(cache);\n                return cache.addAll(urlsToCache);\n            })\n        );\n    });\n\n```\n\n这里我们新增了`install`事件监听器，接着在事件上接了一个`ExtendableEvent.waitUntil()`方法\n这会确保`service worker`不会在`waitUntil()`里面的代码执行完毕之前安装完成\n我们使用`caches.open()`方法创建了一个yu的新缓存，将会是我们站点资源的缓存的第一个版本。它返回了一个创建缓存的`promise`,\n当它`resolved` 的时候，我们接着会调用在创建的缓存上的一个方法`addALL()`，这个方法的参数是一个由一组相对于origin的URL组成的数组，\n这个数组就是你想缓存的资源的列表\n`caches`是一个全局的`CacheStorage`对象，允许在浏览器中管理你的缓存。调用`open`方法来检索具体我们想要使用的`Cache`对象。\n\n### 更新静态资源\n\n缓存资源随着班恩的更新会过期，所以会根据缓存的字符串名称（CACHE_NAME）值清除旧缓存，可以遍历所有的缓存名称最易判断决定是否清除\n\n```javascript\nself.addEventListener('activate', function(e) {\n  e.waitUntil(\n    Promise.all(\n      caches.keys().then(cacheNames => {\n        return cacheNames.map(name => {\n          if (name !== CACHE_NAME) {\n            return caches.delete(name)\n          }\n        })\n      })\n    ).then(() => {\n      return self.clients.claim()\n    })\n  )\n})\n```\n\n在新安装的Service Worker 中调用self.clients.claim()取的页面的控制权，这样之后打开的页面都会使用版本更新的缓存。旧的Service Worker 脚本不在控制页面之后会被停止。\n\n### 自定义请求响应\n\n``` javascript\n    self.addEventListener('fetch', function (e) {\n     console.log('[service worker] fetch',e.request.url);\n    /*respondWith()方法旨在包裹代码，这些代码为来自受控页面的request生成的自定义的response。用来劫持我们的http响应*/\n        e.resondWith(\n            caches.match(e.request).then(function () {\n                //如果sw有自己的返回，就直接返回，减少一次http请求。\n               if (response) {\n                   return response;\n               }\n\n               //如果没有返回，就直接请求真实远程服务\n                var request = e.request.clone(); //拷贝原始请求\n                //clone()允许多次请求body()对象。\n                return fetch(request).then(function (httpRes) {\n                   //http请求的返回已经抓到，可以进行设置\n\n                    //请求失败，直接返回失败的结果\n                    if(!httpRes||httpRes.status!==200){\n                        return httpRes;\n                    }\n                    //  请求成功，将请求缓存\n                    var responseClone = httpRes.clone();\n                    caches.open(cache_name).then(function (cache) {\n                        cache.put(e.request,responseClone);\n                    });\n                    return httpRes;\n                });\n\n            })\n        );\n\n    });\n\n```\n\n每次任何被`service worker` 控制的资源被请求到时，都会触发`fetch`事件，这些资源包括了指定的`scope`内的\n`html` 文档，和这些`html`文档内引用的其他任何资源（比如`index.html`发起了一个跨域的请求来嵌入一张图片，这个也会通过`service worker`。\n我们可以在`install` 的时候进行静态资源缓存。也可以通过`fetch`事件回调来代理页面请求从而实现动态资源缓存:\n\n- `on install` 的优点是第二次访问就可以离线访问，缺点是需要缓存的URL在编译时插入到脚本中，增加代码量和降低可维护性。\n- `on fetch` 的优点是无需变更编译过程，也不会产生额外的流量，缺点是需要多一次访问才能离线访问。\n- `request` 属性包含在`FetchEvent`对象里，它用于查找匹配请求的缓存。\n- `cache.match`将尝试找到一个与指定请求匹配的缓存响应。如果没有找到对应的缓存，则`promise`会返回一个undefined值。在这里我们通过判断这个值来决定是否返回这个值，还是调用`fetch`发出一个网络请求并返回一个`promise`。\n- `e.resondWith`是一个fetchevent对象中的特殊方法，用于将请求的响应发送回浏览器（提供对应的请求）。打开缓存找到匹配的响应，如果它不存在，就发情网络请求。\n\n#### Fetch事件\n\n`fetch`事件是在每次网页发出请求的时候触发的，触发该事件的时候 `service worker`能够拦截请求，弄决定是返回缓存的数据，还是返回真是请求响应的数据。与请求匹配的任何缓存数据都将优先被返回，而不需要发送网络请求。只有当没有现有的缓存数据时才会发出网络请求。\n\n#### Service Worker 生命周期 （也许翻译的不好，尽量去看原文）\n\n- installing: 这一阶段标志着开始注册。它想要允许设置worker-specific 的资源,例如离线模式的caches.\n    - 用 **event.waitUntil()** 通过一个promise 去延长安装service worker阶段直到e.waitUntil()里的代码执行完毕。如果所有资源安装成功缓存则安装成功，否则安装失败，则无法激活service worker。\n    - 用 **self.skipWaiting()** self 是当前context 的 global 变量。强制当前处于waiting 状态的脚本进入activate状态。\n- installed:service worker 已经完成了它的安装，在等待其他service Workers 线程被关闭。\n- activating: 这时没有被其他workers 控制的客户端。这个阶段允许workers 去完成安装并且清理其他 worker以及关联缓存的就缓存资源，等待新的service worker线程被激活。\n- activated:现在可以处理方法事件。\n- message: service worker 运行于独立context 中，无法直接访问当前页面主线程的DOM信息，但是通过postMessageAPI ,可以实现他们之间的消息传递，这样主线程就可以接受service worker 的指令操作DOM。\n\n## manifest.json\n\npwa 添加至桌面的功能实现依赖于manifest.json。\n\n### 基本功能\n\n- name:{string} 应用名称，用于安装横幅、启动画面显示\n- short_name:{string} 应用短名称，用于主屏幕显示\n- icon:img 应用图标列表，其中包括:\n    - src:{string}  图标URL\n    - type:图标的mime 类型\n    - size:图标尺寸。当PWA添加到主屏幕时，浏览器会根据有效图标的size 字段进行选择，如果匹配到的图标路径错误，将会显示浏览器默认icon。\n- start_url:{string=} 应用启动地址\n- background_color:{color} css色值\n- display: {string} 显示类型\n    - fullScreen: 应用的显示界面将占满整个屏幕\n    - standalone: 浏览器相关UI（导航栏、工具栏等）将会被隐藏\n    - minimal-ui: 显示形式与standalone类似，浏览器相关UI会最小化为一个按钮，不同浏览器在实现上略有不同\n    - browser: 浏览器模式，与普通网页在浏览器中打开的显示一致\n- orientation: string 应用显示方向\n- theme_color: 主题颜色\n\n### 设置作用域\n\n- 如果没有在manifest中设置scope，则默认的作用域为manifest.json所在的文件夹；\n- **start_url 必须在作用域范围之内**;\n- 如果start_url 为相对地址，其根路径收scope所影响;\n- 如果start_url 为绝对地址（以/开头）,则该地址将永远以/作为跟地址；\n\n### 添加启动动画\n\n当PWA添加到主屏幕点击打开时，幕后执行了若干操作：\n\n1. 启动浏览器\n2. 启动显示页面的渲染器\n3. 加载资源\n\n在这个过程中，由于页面未加载完毕，因此屏幕将显示空白并且看似停滞。如果是从网络加载的页面资源，白屏过程将会变得更加明显。因此 PWA 提供了启动画面功能，用标题、颜色和图像组成的画面来替代白屏，提升用户体验。\n\n目前，如果修改了manifest.json 的应用的名称，已经添加到主屏幕的名称并不会改变，只有当用户重新添加到桌面时，更改后的名称才会显示出来。但是未来版本的chrome 支持自动更新。\n\n## 更新页面\n\n（个人认为这是一个缺点）\n页面被缓存之后，就需要适当处理缓存失效时的页面更新。某些配置中被缓存的资源是无法发起请求判断是否被更新的，只有sw.js会自动根据HTTP缓存的机制尝试去判断应用是否被更新。所以当页面发生改变时，要同事对sw.js文件的缓存名进行修改。这就意味着在联网情况下，用户得到的可能不是最新的数据。\n然后重新打开页面，这个时候渲染的页面依旧是的，但是sw.js被安装和激活。之后关闭页面后再次打开才可以看到更新过后的页面。所以最好是将一些不经常更改的静态文件发到缓存中，提高用户体验。\n\n### 缓存刷新\n\n静态文件，类似于图片和视频等不会经常改变的资源，做长时间缓存是没有很大的问题，可以在HTTP头里设置 `Cache-Control`来缓存文件使其缓存时间为一年：`Cache-Control: max-age=31536000`\n\n页面，css和script文件会经常变化，所以应该设置一个很短的缓存时间比如24小时，并在联网时与服务区端文件进行验证 `Cache-Control: must-revalidate, max-age=86400`","source":"_posts/PWA-offline.md","raw":"---\ntitle: PWA 离线缓存\ndate: 2017-11-01 11:28:03\ncategories: WEB\n---\n\n# PWA (Progressive Web App) 特点\n\n1. installability( 可安装性 )，可被添加自主屏与全屏运行。\n2. app shell: 第一次渲染个壳，等异步数据来了在填充。\n3. offline( 离线能力 )：离线和弱网环境也能秒开，server worker 给了 web 一个可以跑后台的线程，它可以搭配非常靠谱的 cache Api 做缓存、可以拦截所有 Http 请求并使用 Fetch API 进行 response ，一个非常完备哦的 proxy 就这么诞生了\n4. re-engageable：推送通知的能力，依赖 service Worker 与 http push，不过默认支持的可是 GCM\n5. 推送是指服务器向服务工作线程提供信息的操作\n6. 通知是指服务工作线程或网页脚本向用户信息的操作。\n\n<!--more-->\n\n## service Worker 有以下功能和特性\n\n* 一个独立的 worker 线程，独立于当前网页进程，有自己独立的 worker context。\n* 一旦被 install，就永远存在，除非被 uninstall\n* 需要的时候可以直接唤醒，不需要的时候自动睡眠（有效利用资源，此处有坑）\n* 可编程拦截代理请求和返回，缓存文件，缓存的文件可以被网页进程取到（包括网络离线状态）\n* 离线内容开发者可控\n* 能向客户端推送消息\n* 不能直接操作 DOM\n* 出于安全的考虑，必须在 HTTPS 环境下才能工作\n* 异步实现，内部大都是通过 Promise 实现\n\n## service Worker 前提条件\n\n* 要求 HTTPS 的环境\n* 缓存机制是依赖 cache API 实现的 (cacheStorage)\n* 依赖 HTML5 fetchAPI\n* 依赖 Promise\n\n## 注册\n\n```javascript\n      if ('serviceWorker' in navigator) {\n            navigator.serviceWorker\n                .register('./pwa/sw.js', {scope: '/pwa'})\n                .then(function (registration) {\n                    console.log('Service Worker 注册成功，域名: ', registration.scope);\n                })\n                .catch(function (err) {\n                    console.log('Service Worker 注册失败: ', err);\n                });\n        }\n```\n\n 每次页面加载成功后，就会调用register()方法。浏览器会判断service Worker线程是否已注册，并作出相应的处理\nscope 方法是可选的，用于指定你想让service worker 控制内容的子目录。service worker 线程将接受\nscope指定网域目录上所有事项的fetch事件。并将它保存在你正在访问的域名下。\nsw.js将包含所有自定义的service worker事件处理程序\nscope的意义在于如果sw.js在/a/b/sw.js下，那么scope默认是/a/b,那么service worker 线程只能\n捕捉到path为/a/b开头的（/a/b/page1,/a/b/page2,..)下的fetch事件\n\n现在 Service Worker 已经被注册好了，接下来是在 Service Worker 生命周期中触发实现对应的事件处理程序了。\n\n## 事件处理程序\n\n生命周期：installing  installed activating activated,这个状态变化的过程就是service worker生命周期的反应。\n\n### 安装\n\ninstall事件我们会绑定在service worker 文件中，在service worker 安装成功后，install事件被触发。**install事件一般是被用来填充你的浏览器的离线缓存能力。**为了达到这个目的，我们使用了service worker 新的标志性的存储**cache API** ——一个service worker上的全局对象，**它使我们可以存储网络响应发来的资源，并且根据他们的请求来生成key**。这个 API 和浏览器的标准的缓存工作原理很相似，但是是只对应你的站点的域的。它会一直持久存在，直到你告诉它不再存储，你拥有全部的控制权。\n\n由于service worker是走的另外的线程，因此，window 和 DOM 都是不能访问的，因此我们要使用self访问全局上下文。\n\n```javascript\n    const CACHE_NAME = 'yu';\n    const urlsToCache = [\n        '/',\n        '/js/main.js',\n        '/css/style.css',\n        '/img/bob-ross.jpg'\n    ];\n\n    self.addEventListener('install', function (e) {\n        console.log('[ServiceWorker] Install');\n        /*ExtendableEvent.waitUntil():\n         延长了时间的生命周期。在服务工作中，延长事件的生命周期阻止浏览器在事件中的一部操作完成之前终止service worker。\n         当在与安装事件相关联的EventHandler中调用时，它会延时将已安装的工作程序视为安装，\n         直到传递的promise成功解析为止。这主要用于确保service worker在其依赖的所有核心高速缓存填充之前不会被考虑安装*/\n        e.waitUntil(\n            caches.open(chache_name).then(function (cache) {\n                console.log('[ServiceWorker] Caching app shell');\n                console.log(cache);\n                return cache.addAll(urlsToCache);\n            })\n        );\n    });\n\n```\n\n这里我们新增了`install`事件监听器，接着在事件上接了一个`ExtendableEvent.waitUntil()`方法\n这会确保`service worker`不会在`waitUntil()`里面的代码执行完毕之前安装完成\n我们使用`caches.open()`方法创建了一个yu的新缓存，将会是我们站点资源的缓存的第一个版本。它返回了一个创建缓存的`promise`,\n当它`resolved` 的时候，我们接着会调用在创建的缓存上的一个方法`addALL()`，这个方法的参数是一个由一组相对于origin的URL组成的数组，\n这个数组就是你想缓存的资源的列表\n`caches`是一个全局的`CacheStorage`对象，允许在浏览器中管理你的缓存。调用`open`方法来检索具体我们想要使用的`Cache`对象。\n\n### 更新静态资源\n\n缓存资源随着班恩的更新会过期，所以会根据缓存的字符串名称（CACHE_NAME）值清除旧缓存，可以遍历所有的缓存名称最易判断决定是否清除\n\n```javascript\nself.addEventListener('activate', function(e) {\n  e.waitUntil(\n    Promise.all(\n      caches.keys().then(cacheNames => {\n        return cacheNames.map(name => {\n          if (name !== CACHE_NAME) {\n            return caches.delete(name)\n          }\n        })\n      })\n    ).then(() => {\n      return self.clients.claim()\n    })\n  )\n})\n```\n\n在新安装的Service Worker 中调用self.clients.claim()取的页面的控制权，这样之后打开的页面都会使用版本更新的缓存。旧的Service Worker 脚本不在控制页面之后会被停止。\n\n### 自定义请求响应\n\n``` javascript\n    self.addEventListener('fetch', function (e) {\n     console.log('[service worker] fetch',e.request.url);\n    /*respondWith()方法旨在包裹代码，这些代码为来自受控页面的request生成的自定义的response。用来劫持我们的http响应*/\n        e.resondWith(\n            caches.match(e.request).then(function () {\n                //如果sw有自己的返回，就直接返回，减少一次http请求。\n               if (response) {\n                   return response;\n               }\n\n               //如果没有返回，就直接请求真实远程服务\n                var request = e.request.clone(); //拷贝原始请求\n                //clone()允许多次请求body()对象。\n                return fetch(request).then(function (httpRes) {\n                   //http请求的返回已经抓到，可以进行设置\n\n                    //请求失败，直接返回失败的结果\n                    if(!httpRes||httpRes.status!==200){\n                        return httpRes;\n                    }\n                    //  请求成功，将请求缓存\n                    var responseClone = httpRes.clone();\n                    caches.open(cache_name).then(function (cache) {\n                        cache.put(e.request,responseClone);\n                    });\n                    return httpRes;\n                });\n\n            })\n        );\n\n    });\n\n```\n\n每次任何被`service worker` 控制的资源被请求到时，都会触发`fetch`事件，这些资源包括了指定的`scope`内的\n`html` 文档，和这些`html`文档内引用的其他任何资源（比如`index.html`发起了一个跨域的请求来嵌入一张图片，这个也会通过`service worker`。\n我们可以在`install` 的时候进行静态资源缓存。也可以通过`fetch`事件回调来代理页面请求从而实现动态资源缓存:\n\n- `on install` 的优点是第二次访问就可以离线访问，缺点是需要缓存的URL在编译时插入到脚本中，增加代码量和降低可维护性。\n- `on fetch` 的优点是无需变更编译过程，也不会产生额外的流量，缺点是需要多一次访问才能离线访问。\n- `request` 属性包含在`FetchEvent`对象里，它用于查找匹配请求的缓存。\n- `cache.match`将尝试找到一个与指定请求匹配的缓存响应。如果没有找到对应的缓存，则`promise`会返回一个undefined值。在这里我们通过判断这个值来决定是否返回这个值，还是调用`fetch`发出一个网络请求并返回一个`promise`。\n- `e.resondWith`是一个fetchevent对象中的特殊方法，用于将请求的响应发送回浏览器（提供对应的请求）。打开缓存找到匹配的响应，如果它不存在，就发情网络请求。\n\n#### Fetch事件\n\n`fetch`事件是在每次网页发出请求的时候触发的，触发该事件的时候 `service worker`能够拦截请求，弄决定是返回缓存的数据，还是返回真是请求响应的数据。与请求匹配的任何缓存数据都将优先被返回，而不需要发送网络请求。只有当没有现有的缓存数据时才会发出网络请求。\n\n#### Service Worker 生命周期 （也许翻译的不好，尽量去看原文）\n\n- installing: 这一阶段标志着开始注册。它想要允许设置worker-specific 的资源,例如离线模式的caches.\n    - 用 **event.waitUntil()** 通过一个promise 去延长安装service worker阶段直到e.waitUntil()里的代码执行完毕。如果所有资源安装成功缓存则安装成功，否则安装失败，则无法激活service worker。\n    - 用 **self.skipWaiting()** self 是当前context 的 global 变量。强制当前处于waiting 状态的脚本进入activate状态。\n- installed:service worker 已经完成了它的安装，在等待其他service Workers 线程被关闭。\n- activating: 这时没有被其他workers 控制的客户端。这个阶段允许workers 去完成安装并且清理其他 worker以及关联缓存的就缓存资源，等待新的service worker线程被激活。\n- activated:现在可以处理方法事件。\n- message: service worker 运行于独立context 中，无法直接访问当前页面主线程的DOM信息，但是通过postMessageAPI ,可以实现他们之间的消息传递，这样主线程就可以接受service worker 的指令操作DOM。\n\n## manifest.json\n\npwa 添加至桌面的功能实现依赖于manifest.json。\n\n### 基本功能\n\n- name:{string} 应用名称，用于安装横幅、启动画面显示\n- short_name:{string} 应用短名称，用于主屏幕显示\n- icon:img 应用图标列表，其中包括:\n    - src:{string}  图标URL\n    - type:图标的mime 类型\n    - size:图标尺寸。当PWA添加到主屏幕时，浏览器会根据有效图标的size 字段进行选择，如果匹配到的图标路径错误，将会显示浏览器默认icon。\n- start_url:{string=} 应用启动地址\n- background_color:{color} css色值\n- display: {string} 显示类型\n    - fullScreen: 应用的显示界面将占满整个屏幕\n    - standalone: 浏览器相关UI（导航栏、工具栏等）将会被隐藏\n    - minimal-ui: 显示形式与standalone类似，浏览器相关UI会最小化为一个按钮，不同浏览器在实现上略有不同\n    - browser: 浏览器模式，与普通网页在浏览器中打开的显示一致\n- orientation: string 应用显示方向\n- theme_color: 主题颜色\n\n### 设置作用域\n\n- 如果没有在manifest中设置scope，则默认的作用域为manifest.json所在的文件夹；\n- **start_url 必须在作用域范围之内**;\n- 如果start_url 为相对地址，其根路径收scope所影响;\n- 如果start_url 为绝对地址（以/开头）,则该地址将永远以/作为跟地址；\n\n### 添加启动动画\n\n当PWA添加到主屏幕点击打开时，幕后执行了若干操作：\n\n1. 启动浏览器\n2. 启动显示页面的渲染器\n3. 加载资源\n\n在这个过程中，由于页面未加载完毕，因此屏幕将显示空白并且看似停滞。如果是从网络加载的页面资源，白屏过程将会变得更加明显。因此 PWA 提供了启动画面功能，用标题、颜色和图像组成的画面来替代白屏，提升用户体验。\n\n目前，如果修改了manifest.json 的应用的名称，已经添加到主屏幕的名称并不会改变，只有当用户重新添加到桌面时，更改后的名称才会显示出来。但是未来版本的chrome 支持自动更新。\n\n## 更新页面\n\n（个人认为这是一个缺点）\n页面被缓存之后，就需要适当处理缓存失效时的页面更新。某些配置中被缓存的资源是无法发起请求判断是否被更新的，只有sw.js会自动根据HTTP缓存的机制尝试去判断应用是否被更新。所以当页面发生改变时，要同事对sw.js文件的缓存名进行修改。这就意味着在联网情况下，用户得到的可能不是最新的数据。\n然后重新打开页面，这个时候渲染的页面依旧是的，但是sw.js被安装和激活。之后关闭页面后再次打开才可以看到更新过后的页面。所以最好是将一些不经常更改的静态文件发到缓存中，提高用户体验。\n\n### 缓存刷新\n\n静态文件，类似于图片和视频等不会经常改变的资源，做长时间缓存是没有很大的问题，可以在HTTP头里设置 `Cache-Control`来缓存文件使其缓存时间为一年：`Cache-Control: max-age=31536000`\n\n页面，css和script文件会经常变化，所以应该设置一个很短的缓存时间比如24小时，并在联网时与服务区端文件进行验证 `Cache-Control: must-revalidate, max-age=86400`","slug":"PWA-offline","published":1,"updated":"2021-03-01T03:47:26.022Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmejaeru000qxcvrgydfffjd","content":"<h1 id=\"PWA-Progressive-Web-App-特点\"><a href=\"#PWA-Progressive-Web-App-特点\" class=\"headerlink\" title=\"PWA (Progressive Web App) 特点\"></a>PWA (Progressive Web App) 特点</h1><ol>\n<li>installability( 可安装性 )，可被添加自主屏与全屏运行。</li>\n<li>app shell: 第一次渲染个壳，等异步数据来了在填充。</li>\n<li>offline( 离线能力 )：离线和弱网环境也能秒开，server worker 给了 web 一个可以跑后台的线程，它可以搭配非常靠谱的 cache Api 做缓存、可以拦截所有 Http 请求并使用 Fetch API 进行 response ，一个非常完备哦的 proxy 就这么诞生了</li>\n<li>re-engageable：推送通知的能力，依赖 service Worker 与 http push，不过默认支持的可是 GCM</li>\n<li>推送是指服务器向服务工作线程提供信息的操作</li>\n<li>通知是指服务工作线程或网页脚本向用户信息的操作。</li>\n</ol>\n<span id=\"more\"></span>\n\n<h2 id=\"service-Worker-有以下功能和特性\"><a href=\"#service-Worker-有以下功能和特性\" class=\"headerlink\" title=\"service Worker 有以下功能和特性\"></a>service Worker 有以下功能和特性</h2><ul>\n<li>一个独立的 worker 线程，独立于当前网页进程，有自己独立的 worker context。</li>\n<li>一旦被 install，就永远存在，除非被 uninstall</li>\n<li>需要的时候可以直接唤醒，不需要的时候自动睡眠（有效利用资源，此处有坑）</li>\n<li>可编程拦截代理请求和返回，缓存文件，缓存的文件可以被网页进程取到（包括网络离线状态）</li>\n<li>离线内容开发者可控</li>\n<li>能向客户端推送消息</li>\n<li>不能直接操作 DOM</li>\n<li>出于安全的考虑，必须在 HTTPS 环境下才能工作</li>\n<li>异步实现，内部大都是通过 Promise 实现</li>\n</ul>\n<h2 id=\"service-Worker-前提条件\"><a href=\"#service-Worker-前提条件\" class=\"headerlink\" title=\"service Worker 前提条件\"></a>service Worker 前提条件</h2><ul>\n<li>要求 HTTPS 的环境</li>\n<li>缓存机制是依赖 cache API 实现的 (cacheStorage)</li>\n<li>依赖 HTML5 fetchAPI</li>\n<li>依赖 Promise</li>\n</ul>\n<h2 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">&#x27;serviceWorker&#x27;</span> <span class=\"keyword\">in</span> navigator) &#123;</span><br><span class=\"line\">      navigator.serviceWorker</span><br><span class=\"line\">          .register(<span class=\"string\">&#x27;./pwa/sw.js&#x27;</span>, &#123;<span class=\"attr\">scope</span>: <span class=\"string\">&#x27;/pwa&#x27;</span>&#125;)</span><br><span class=\"line\">          .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">registration</span>) </span>&#123;</span><br><span class=\"line\">              <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Service Worker 注册成功，域名: &#x27;</span>, registration.scope);</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">              <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Service Worker 注册失败: &#x27;</span>, err);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p> 每次页面加载成功后，就会调用register()方法。浏览器会判断service Worker线程是否已注册，并作出相应的处理<br>scope 方法是可选的，用于指定你想让service worker 控制内容的子目录。service worker 线程将接受<br>scope指定网域目录上所有事项的fetch事件。并将它保存在你正在访问的域名下。<br>sw.js将包含所有自定义的service worker事件处理程序<br>scope的意义在于如果sw.js在/a/b/sw.js下，那么scope默认是/a/b,那么service worker 线程只能<br>捕捉到path为/a/b开头的（/a/b/page1,/a/b/page2,..)下的fetch事件</p>\n<p>现在 Service Worker 已经被注册好了，接下来是在 Service Worker 生命周期中触发实现对应的事件处理程序了。</p>\n<h2 id=\"事件处理程序\"><a href=\"#事件处理程序\" class=\"headerlink\" title=\"事件处理程序\"></a>事件处理程序</h2><p>生命周期：installing  installed activating activated,这个状态变化的过程就是service worker生命周期的反应。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>install事件我们会绑定在service worker 文件中，在service worker 安装成功后，install事件被触发。<strong>install事件一般是被用来填充你的浏览器的离线缓存能力。</strong>为了达到这个目的，我们使用了service worker 新的标志性的存储<strong>cache API</strong> ——一个service worker上的全局对象，<strong>它使我们可以存储网络响应发来的资源，并且根据他们的请求来生成key</strong>。这个 API 和浏览器的标准的缓存工作原理很相似，但是是只对应你的站点的域的。它会一直持久存在，直到你告诉它不再存储，你拥有全部的控制权。</p>\n<p>由于service worker是走的另外的线程，因此，window 和 DOM 都是不能访问的，因此我们要使用self访问全局上下文。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> CACHE_NAME = <span class=\"string\">&#x27;yu&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> urlsToCache = [</span><br><span class=\"line\">    <span class=\"string\">&#x27;/&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;/js/main.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;/css/style.css&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;/img/bob-ross.jpg&#x27;</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">self.addEventListener(<span class=\"string\">&#x27;install&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;[ServiceWorker] Install&#x27;</span>);</span><br><span class=\"line\">    <span class=\"comment\">/*ExtendableEvent.waitUntil():</span></span><br><span class=\"line\"><span class=\"comment\">     延长了时间的生命周期。在服务工作中，延长事件的生命周期阻止浏览器在事件中的一部操作完成之前终止service worker。</span></span><br><span class=\"line\"><span class=\"comment\">     当在与安装事件相关联的EventHandler中调用时，它会延时将已安装的工作程序视为安装，</span></span><br><span class=\"line\"><span class=\"comment\">     直到传递的promise成功解析为止。这主要用于确保service worker在其依赖的所有核心高速缓存填充之前不会被考虑安装*/</span></span><br><span class=\"line\">    e.waitUntil(</span><br><span class=\"line\">        caches.open(chache_name).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">cache</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;[ServiceWorker] Caching app shell&#x27;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(cache);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cache.addAll(urlsToCache);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这里我们新增了<code>install</code>事件监听器，接着在事件上接了一个<code>ExtendableEvent.waitUntil()</code>方法<br>这会确保<code>service worker</code>不会在<code>waitUntil()</code>里面的代码执行完毕之前安装完成<br>我们使用<code>caches.open()</code>方法创建了一个yu的新缓存，将会是我们站点资源的缓存的第一个版本。它返回了一个创建缓存的<code>promise</code>,<br>当它<code>resolved</code> 的时候，我们接着会调用在创建的缓存上的一个方法<code>addALL()</code>，这个方法的参数是一个由一组相对于origin的URL组成的数组，<br>这个数组就是你想缓存的资源的列表<br><code>caches</code>是一个全局的<code>CacheStorage</code>对象，允许在浏览器中管理你的缓存。调用<code>open</code>方法来检索具体我们想要使用的<code>Cache</code>对象。</p>\n<h3 id=\"更新静态资源\"><a href=\"#更新静态资源\" class=\"headerlink\" title=\"更新静态资源\"></a>更新静态资源</h3><p>缓存资源随着班恩的更新会过期，所以会根据缓存的字符串名称（CACHE_NAME）值清除旧缓存，可以遍历所有的缓存名称最易判断决定是否清除</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.addEventListener(<span class=\"string\">&#x27;activate&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  e.waitUntil(</span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.all(</span><br><span class=\"line\">      caches.keys().then(<span class=\"function\"><span class=\"params\">cacheNames</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cacheNames.map(<span class=\"function\"><span class=\"params\">name</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (name !== CACHE_NAME) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> caches.delete(name)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ).then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> self.clients.claim()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在新安装的Service Worker 中调用self.clients.claim()取的页面的控制权，这样之后打开的页面都会使用版本更新的缓存。旧的Service Worker 脚本不在控制页面之后会被停止。</p>\n<h3 id=\"自定义请求响应\"><a href=\"#自定义请求响应\" class=\"headerlink\" title=\"自定义请求响应\"></a>自定义请求响应</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.addEventListener(<span class=\"string\">&#x27;fetch&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;[service worker] fetch&#x27;</span>,e.request.url);</span><br><span class=\"line\"><span class=\"comment\">/*respondWith()方法旨在包裹代码，这些代码为来自受控页面的request生成的自定义的response。用来劫持我们的http响应*/</span></span><br><span class=\"line\">    e.resondWith(</span><br><span class=\"line\">        caches.match(e.request).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果sw有自己的返回，就直接返回，减少一次http请求。</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (response) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">//如果没有返回，就直接请求真实远程服务</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> request = e.request.clone(); <span class=\"comment\">//拷贝原始请求</span></span><br><span class=\"line\">            <span class=\"comment\">//clone()允许多次请求body()对象。</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> fetch(request).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">httpRes</span>) </span>&#123;</span><br><span class=\"line\">               <span class=\"comment\">//http请求的返回已经抓到，可以进行设置</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//请求失败，直接返回失败的结果</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!httpRes||httpRes.status!==<span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> httpRes;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//  请求成功，将请求缓存</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> responseClone = httpRes.clone();</span><br><span class=\"line\">                caches.open(cache_name).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">cache</span>) </span>&#123;</span><br><span class=\"line\">                    cache.put(e.request,responseClone);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> httpRes;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>每次任何被<code>service worker</code> 控制的资源被请求到时，都会触发<code>fetch</code>事件，这些资源包括了指定的<code>scope</code>内的<br><code>html</code> 文档，和这些<code>html</code>文档内引用的其他任何资源（比如<code>index.html</code>发起了一个跨域的请求来嵌入一张图片，这个也会通过<code>service worker</code>。<br>我们可以在<code>install</code> 的时候进行静态资源缓存。也可以通过<code>fetch</code>事件回调来代理页面请求从而实现动态资源缓存:</p>\n<ul>\n<li><code>on install</code> 的优点是第二次访问就可以离线访问，缺点是需要缓存的URL在编译时插入到脚本中，增加代码量和降低可维护性。</li>\n<li><code>on fetch</code> 的优点是无需变更编译过程，也不会产生额外的流量，缺点是需要多一次访问才能离线访问。</li>\n<li><code>request</code> 属性包含在<code>FetchEvent</code>对象里，它用于查找匹配请求的缓存。</li>\n<li><code>cache.match</code>将尝试找到一个与指定请求匹配的缓存响应。如果没有找到对应的缓存，则<code>promise</code>会返回一个undefined值。在这里我们通过判断这个值来决定是否返回这个值，还是调用<code>fetch</code>发出一个网络请求并返回一个<code>promise</code>。</li>\n<li><code>e.resondWith</code>是一个fetchevent对象中的特殊方法，用于将请求的响应发送回浏览器（提供对应的请求）。打开缓存找到匹配的响应，如果它不存在，就发情网络请求。</li>\n</ul>\n<h4 id=\"Fetch事件\"><a href=\"#Fetch事件\" class=\"headerlink\" title=\"Fetch事件\"></a>Fetch事件</h4><p><code>fetch</code>事件是在每次网页发出请求的时候触发的，触发该事件的时候 <code>service worker</code>能够拦截请求，弄决定是返回缓存的数据，还是返回真是请求响应的数据。与请求匹配的任何缓存数据都将优先被返回，而不需要发送网络请求。只有当没有现有的缓存数据时才会发出网络请求。</p>\n<h4 id=\"Service-Worker-生命周期-（也许翻译的不好，尽量去看原文）\"><a href=\"#Service-Worker-生命周期-（也许翻译的不好，尽量去看原文）\" class=\"headerlink\" title=\"Service Worker 生命周期 （也许翻译的不好，尽量去看原文）\"></a>Service Worker 生命周期 （也许翻译的不好，尽量去看原文）</h4><ul>\n<li>installing: 这一阶段标志着开始注册。它想要允许设置worker-specific 的资源,例如离线模式的caches.<ul>\n<li>用 <strong>event.waitUntil()</strong> 通过一个promise 去延长安装service worker阶段直到e.waitUntil()里的代码执行完毕。如果所有资源安装成功缓存则安装成功，否则安装失败，则无法激活service worker。</li>\n<li>用 <strong>self.skipWaiting()</strong> self 是当前context 的 global 变量。强制当前处于waiting 状态的脚本进入activate状态。</li>\n</ul>\n</li>\n<li>installed:service worker 已经完成了它的安装，在等待其他service Workers 线程被关闭。</li>\n<li>activating: 这时没有被其他workers 控制的客户端。这个阶段允许workers 去完成安装并且清理其他 worker以及关联缓存的就缓存资源，等待新的service worker线程被激活。</li>\n<li>activated:现在可以处理方法事件。</li>\n<li>message: service worker 运行于独立context 中，无法直接访问当前页面主线程的DOM信息，但是通过postMessageAPI ,可以实现他们之间的消息传递，这样主线程就可以接受service worker 的指令操作DOM。</li>\n</ul>\n<h2 id=\"manifest-json\"><a href=\"#manifest-json\" class=\"headerlink\" title=\"manifest.json\"></a>manifest.json</h2><p>pwa 添加至桌面的功能实现依赖于manifest.json。</p>\n<h3 id=\"基本功能\"><a href=\"#基本功能\" class=\"headerlink\" title=\"基本功能\"></a>基本功能</h3><ul>\n<li>name:{string} 应用名称，用于安装横幅、启动画面显示</li>\n<li>short_name:{string} 应用短名称，用于主屏幕显示</li>\n<li>icon:img 应用图标列表，其中包括:<ul>\n<li>src:{string}  图标URL</li>\n<li>type:图标的mime 类型</li>\n<li>size:图标尺寸。当PWA添加到主屏幕时，浏览器会根据有效图标的size 字段进行选择，如果匹配到的图标路径错误，将会显示浏览器默认icon。</li>\n</ul>\n</li>\n<li>start_url:{string=} 应用启动地址</li>\n<li>background_color:{color} css色值</li>\n<li>display: {string} 显示类型<ul>\n<li>fullScreen: 应用的显示界面将占满整个屏幕</li>\n<li>standalone: 浏览器相关UI（导航栏、工具栏等）将会被隐藏</li>\n<li>minimal-ui: 显示形式与standalone类似，浏览器相关UI会最小化为一个按钮，不同浏览器在实现上略有不同</li>\n<li>browser: 浏览器模式，与普通网页在浏览器中打开的显示一致</li>\n</ul>\n</li>\n<li>orientation: string 应用显示方向</li>\n<li>theme_color: 主题颜色</li>\n</ul>\n<h3 id=\"设置作用域\"><a href=\"#设置作用域\" class=\"headerlink\" title=\"设置作用域\"></a>设置作用域</h3><ul>\n<li>如果没有在manifest中设置scope，则默认的作用域为manifest.json所在的文件夹；</li>\n<li><strong>start_url 必须在作用域范围之内</strong>;</li>\n<li>如果start_url 为相对地址，其根路径收scope所影响;</li>\n<li>如果start_url 为绝对地址（以/开头）,则该地址将永远以/作为跟地址；</li>\n</ul>\n<h3 id=\"添加启动动画\"><a href=\"#添加启动动画\" class=\"headerlink\" title=\"添加启动动画\"></a>添加启动动画</h3><p>当PWA添加到主屏幕点击打开时，幕后执行了若干操作：</p>\n<ol>\n<li>启动浏览器</li>\n<li>启动显示页面的渲染器</li>\n<li>加载资源</li>\n</ol>\n<p>在这个过程中，由于页面未加载完毕，因此屏幕将显示空白并且看似停滞。如果是从网络加载的页面资源，白屏过程将会变得更加明显。因此 PWA 提供了启动画面功能，用标题、颜色和图像组成的画面来替代白屏，提升用户体验。</p>\n<p>目前，如果修改了manifest.json 的应用的名称，已经添加到主屏幕的名称并不会改变，只有当用户重新添加到桌面时，更改后的名称才会显示出来。但是未来版本的chrome 支持自动更新。</p>\n<h2 id=\"更新页面\"><a href=\"#更新页面\" class=\"headerlink\" title=\"更新页面\"></a>更新页面</h2><p>（个人认为这是一个缺点）<br>页面被缓存之后，就需要适当处理缓存失效时的页面更新。某些配置中被缓存的资源是无法发起请求判断是否被更新的，只有sw.js会自动根据HTTP缓存的机制尝试去判断应用是否被更新。所以当页面发生改变时，要同事对sw.js文件的缓存名进行修改。这就意味着在联网情况下，用户得到的可能不是最新的数据。<br>然后重新打开页面，这个时候渲染的页面依旧是的，但是sw.js被安装和激活。之后关闭页面后再次打开才可以看到更新过后的页面。所以最好是将一些不经常更改的静态文件发到缓存中，提高用户体验。</p>\n<h3 id=\"缓存刷新\"><a href=\"#缓存刷新\" class=\"headerlink\" title=\"缓存刷新\"></a>缓存刷新</h3><p>静态文件，类似于图片和视频等不会经常改变的资源，做长时间缓存是没有很大的问题，可以在HTTP头里设置 <code>Cache-Control</code>来缓存文件使其缓存时间为一年：<code>Cache-Control: max-age=31536000</code></p>\n<p>页面，css和script文件会经常变化，所以应该设置一个很短的缓存时间比如24小时，并在联网时与服务区端文件进行验证 <code>Cache-Control: must-revalidate, max-age=86400</code></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"PWA-Progressive-Web-App-特点\"><a href=\"#PWA-Progressive-Web-App-特点\" class=\"headerlink\" title=\"PWA (Progressive Web App) 特点\"></a>PWA (Progressive Web App) 特点</h1><ol>\n<li>installability( 可安装性 )，可被添加自主屏与全屏运行。</li>\n<li>app shell: 第一次渲染个壳，等异步数据来了在填充。</li>\n<li>offline( 离线能力 )：离线和弱网环境也能秒开，server worker 给了 web 一个可以跑后台的线程，它可以搭配非常靠谱的 cache Api 做缓存、可以拦截所有 Http 请求并使用 Fetch API 进行 response ，一个非常完备哦的 proxy 就这么诞生了</li>\n<li>re-engageable：推送通知的能力，依赖 service Worker 与 http push，不过默认支持的可是 GCM</li>\n<li>推送是指服务器向服务工作线程提供信息的操作</li>\n<li>通知是指服务工作线程或网页脚本向用户信息的操作。</li>\n</ol>","more":"<h2 id=\"service-Worker-有以下功能和特性\"><a href=\"#service-Worker-有以下功能和特性\" class=\"headerlink\" title=\"service Worker 有以下功能和特性\"></a>service Worker 有以下功能和特性</h2><ul>\n<li>一个独立的 worker 线程，独立于当前网页进程，有自己独立的 worker context。</li>\n<li>一旦被 install，就永远存在，除非被 uninstall</li>\n<li>需要的时候可以直接唤醒，不需要的时候自动睡眠（有效利用资源，此处有坑）</li>\n<li>可编程拦截代理请求和返回，缓存文件，缓存的文件可以被网页进程取到（包括网络离线状态）</li>\n<li>离线内容开发者可控</li>\n<li>能向客户端推送消息</li>\n<li>不能直接操作 DOM</li>\n<li>出于安全的考虑，必须在 HTTPS 环境下才能工作</li>\n<li>异步实现，内部大都是通过 Promise 实现</li>\n</ul>\n<h2 id=\"service-Worker-前提条件\"><a href=\"#service-Worker-前提条件\" class=\"headerlink\" title=\"service Worker 前提条件\"></a>service Worker 前提条件</h2><ul>\n<li>要求 HTTPS 的环境</li>\n<li>缓存机制是依赖 cache API 实现的 (cacheStorage)</li>\n<li>依赖 HTML5 fetchAPI</li>\n<li>依赖 Promise</li>\n</ul>\n<h2 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">&#x27;serviceWorker&#x27;</span> <span class=\"keyword\">in</span> navigator) &#123;</span><br><span class=\"line\">      navigator.serviceWorker</span><br><span class=\"line\">          .register(<span class=\"string\">&#x27;./pwa/sw.js&#x27;</span>, &#123;<span class=\"attr\">scope</span>: <span class=\"string\">&#x27;/pwa&#x27;</span>&#125;)</span><br><span class=\"line\">          .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">registration</span>) </span>&#123;</span><br><span class=\"line\">              <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Service Worker 注册成功，域名: &#x27;</span>, registration.scope);</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">              <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Service Worker 注册失败: &#x27;</span>, err);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p> 每次页面加载成功后，就会调用register()方法。浏览器会判断service Worker线程是否已注册，并作出相应的处理<br>scope 方法是可选的，用于指定你想让service worker 控制内容的子目录。service worker 线程将接受<br>scope指定网域目录上所有事项的fetch事件。并将它保存在你正在访问的域名下。<br>sw.js将包含所有自定义的service worker事件处理程序<br>scope的意义在于如果sw.js在/a/b/sw.js下，那么scope默认是/a/b,那么service worker 线程只能<br>捕捉到path为/a/b开头的（/a/b/page1,/a/b/page2,..)下的fetch事件</p>\n<p>现在 Service Worker 已经被注册好了，接下来是在 Service Worker 生命周期中触发实现对应的事件处理程序了。</p>\n<h2 id=\"事件处理程序\"><a href=\"#事件处理程序\" class=\"headerlink\" title=\"事件处理程序\"></a>事件处理程序</h2><p>生命周期：installing  installed activating activated,这个状态变化的过程就是service worker生命周期的反应。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>install事件我们会绑定在service worker 文件中，在service worker 安装成功后，install事件被触发。<strong>install事件一般是被用来填充你的浏览器的离线缓存能力。</strong>为了达到这个目的，我们使用了service worker 新的标志性的存储<strong>cache API</strong> ——一个service worker上的全局对象，<strong>它使我们可以存储网络响应发来的资源，并且根据他们的请求来生成key</strong>。这个 API 和浏览器的标准的缓存工作原理很相似，但是是只对应你的站点的域的。它会一直持久存在，直到你告诉它不再存储，你拥有全部的控制权。</p>\n<p>由于service worker是走的另外的线程，因此，window 和 DOM 都是不能访问的，因此我们要使用self访问全局上下文。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> CACHE_NAME = <span class=\"string\">&#x27;yu&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> urlsToCache = [</span><br><span class=\"line\">    <span class=\"string\">&#x27;/&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;/js/main.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;/css/style.css&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;/img/bob-ross.jpg&#x27;</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">self.addEventListener(<span class=\"string\">&#x27;install&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;[ServiceWorker] Install&#x27;</span>);</span><br><span class=\"line\">    <span class=\"comment\">/*ExtendableEvent.waitUntil():</span></span><br><span class=\"line\"><span class=\"comment\">     延长了时间的生命周期。在服务工作中，延长事件的生命周期阻止浏览器在事件中的一部操作完成之前终止service worker。</span></span><br><span class=\"line\"><span class=\"comment\">     当在与安装事件相关联的EventHandler中调用时，它会延时将已安装的工作程序视为安装，</span></span><br><span class=\"line\"><span class=\"comment\">     直到传递的promise成功解析为止。这主要用于确保service worker在其依赖的所有核心高速缓存填充之前不会被考虑安装*/</span></span><br><span class=\"line\">    e.waitUntil(</span><br><span class=\"line\">        caches.open(chache_name).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">cache</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;[ServiceWorker] Caching app shell&#x27;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(cache);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cache.addAll(urlsToCache);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这里我们新增了<code>install</code>事件监听器，接着在事件上接了一个<code>ExtendableEvent.waitUntil()</code>方法<br>这会确保<code>service worker</code>不会在<code>waitUntil()</code>里面的代码执行完毕之前安装完成<br>我们使用<code>caches.open()</code>方法创建了一个yu的新缓存，将会是我们站点资源的缓存的第一个版本。它返回了一个创建缓存的<code>promise</code>,<br>当它<code>resolved</code> 的时候，我们接着会调用在创建的缓存上的一个方法<code>addALL()</code>，这个方法的参数是一个由一组相对于origin的URL组成的数组，<br>这个数组就是你想缓存的资源的列表<br><code>caches</code>是一个全局的<code>CacheStorage</code>对象，允许在浏览器中管理你的缓存。调用<code>open</code>方法来检索具体我们想要使用的<code>Cache</code>对象。</p>\n<h3 id=\"更新静态资源\"><a href=\"#更新静态资源\" class=\"headerlink\" title=\"更新静态资源\"></a>更新静态资源</h3><p>缓存资源随着班恩的更新会过期，所以会根据缓存的字符串名称（CACHE_NAME）值清除旧缓存，可以遍历所有的缓存名称最易判断决定是否清除</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.addEventListener(<span class=\"string\">&#x27;activate&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  e.waitUntil(</span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.all(</span><br><span class=\"line\">      caches.keys().then(<span class=\"function\"><span class=\"params\">cacheNames</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cacheNames.map(<span class=\"function\"><span class=\"params\">name</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (name !== CACHE_NAME) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> caches.delete(name)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ).then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> self.clients.claim()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在新安装的Service Worker 中调用self.clients.claim()取的页面的控制权，这样之后打开的页面都会使用版本更新的缓存。旧的Service Worker 脚本不在控制页面之后会被停止。</p>\n<h3 id=\"自定义请求响应\"><a href=\"#自定义请求响应\" class=\"headerlink\" title=\"自定义请求响应\"></a>自定义请求响应</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.addEventListener(<span class=\"string\">&#x27;fetch&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;[service worker] fetch&#x27;</span>,e.request.url);</span><br><span class=\"line\"><span class=\"comment\">/*respondWith()方法旨在包裹代码，这些代码为来自受控页面的request生成的自定义的response。用来劫持我们的http响应*/</span></span><br><span class=\"line\">    e.resondWith(</span><br><span class=\"line\">        caches.match(e.request).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果sw有自己的返回，就直接返回，减少一次http请求。</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (response) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">//如果没有返回，就直接请求真实远程服务</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> request = e.request.clone(); <span class=\"comment\">//拷贝原始请求</span></span><br><span class=\"line\">            <span class=\"comment\">//clone()允许多次请求body()对象。</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> fetch(request).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">httpRes</span>) </span>&#123;</span><br><span class=\"line\">               <span class=\"comment\">//http请求的返回已经抓到，可以进行设置</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//请求失败，直接返回失败的结果</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!httpRes||httpRes.status!==<span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> httpRes;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//  请求成功，将请求缓存</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> responseClone = httpRes.clone();</span><br><span class=\"line\">                caches.open(cache_name).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">cache</span>) </span>&#123;</span><br><span class=\"line\">                    cache.put(e.request,responseClone);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> httpRes;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>每次任何被<code>service worker</code> 控制的资源被请求到时，都会触发<code>fetch</code>事件，这些资源包括了指定的<code>scope</code>内的<br><code>html</code> 文档，和这些<code>html</code>文档内引用的其他任何资源（比如<code>index.html</code>发起了一个跨域的请求来嵌入一张图片，这个也会通过<code>service worker</code>。<br>我们可以在<code>install</code> 的时候进行静态资源缓存。也可以通过<code>fetch</code>事件回调来代理页面请求从而实现动态资源缓存:</p>\n<ul>\n<li><code>on install</code> 的优点是第二次访问就可以离线访问，缺点是需要缓存的URL在编译时插入到脚本中，增加代码量和降低可维护性。</li>\n<li><code>on fetch</code> 的优点是无需变更编译过程，也不会产生额外的流量，缺点是需要多一次访问才能离线访问。</li>\n<li><code>request</code> 属性包含在<code>FetchEvent</code>对象里，它用于查找匹配请求的缓存。</li>\n<li><code>cache.match</code>将尝试找到一个与指定请求匹配的缓存响应。如果没有找到对应的缓存，则<code>promise</code>会返回一个undefined值。在这里我们通过判断这个值来决定是否返回这个值，还是调用<code>fetch</code>发出一个网络请求并返回一个<code>promise</code>。</li>\n<li><code>e.resondWith</code>是一个fetchevent对象中的特殊方法，用于将请求的响应发送回浏览器（提供对应的请求）。打开缓存找到匹配的响应，如果它不存在，就发情网络请求。</li>\n</ul>\n<h4 id=\"Fetch事件\"><a href=\"#Fetch事件\" class=\"headerlink\" title=\"Fetch事件\"></a>Fetch事件</h4><p><code>fetch</code>事件是在每次网页发出请求的时候触发的，触发该事件的时候 <code>service worker</code>能够拦截请求，弄决定是返回缓存的数据，还是返回真是请求响应的数据。与请求匹配的任何缓存数据都将优先被返回，而不需要发送网络请求。只有当没有现有的缓存数据时才会发出网络请求。</p>\n<h4 id=\"Service-Worker-生命周期-（也许翻译的不好，尽量去看原文）\"><a href=\"#Service-Worker-生命周期-（也许翻译的不好，尽量去看原文）\" class=\"headerlink\" title=\"Service Worker 生命周期 （也许翻译的不好，尽量去看原文）\"></a>Service Worker 生命周期 （也许翻译的不好，尽量去看原文）</h4><ul>\n<li>installing: 这一阶段标志着开始注册。它想要允许设置worker-specific 的资源,例如离线模式的caches.<ul>\n<li>用 <strong>event.waitUntil()</strong> 通过一个promise 去延长安装service worker阶段直到e.waitUntil()里的代码执行完毕。如果所有资源安装成功缓存则安装成功，否则安装失败，则无法激活service worker。</li>\n<li>用 <strong>self.skipWaiting()</strong> self 是当前context 的 global 变量。强制当前处于waiting 状态的脚本进入activate状态。</li>\n</ul>\n</li>\n<li>installed:service worker 已经完成了它的安装，在等待其他service Workers 线程被关闭。</li>\n<li>activating: 这时没有被其他workers 控制的客户端。这个阶段允许workers 去完成安装并且清理其他 worker以及关联缓存的就缓存资源，等待新的service worker线程被激活。</li>\n<li>activated:现在可以处理方法事件。</li>\n<li>message: service worker 运行于独立context 中，无法直接访问当前页面主线程的DOM信息，但是通过postMessageAPI ,可以实现他们之间的消息传递，这样主线程就可以接受service worker 的指令操作DOM。</li>\n</ul>\n<h2 id=\"manifest-json\"><a href=\"#manifest-json\" class=\"headerlink\" title=\"manifest.json\"></a>manifest.json</h2><p>pwa 添加至桌面的功能实现依赖于manifest.json。</p>\n<h3 id=\"基本功能\"><a href=\"#基本功能\" class=\"headerlink\" title=\"基本功能\"></a>基本功能</h3><ul>\n<li>name:{string} 应用名称，用于安装横幅、启动画面显示</li>\n<li>short_name:{string} 应用短名称，用于主屏幕显示</li>\n<li>icon:img 应用图标列表，其中包括:<ul>\n<li>src:{string}  图标URL</li>\n<li>type:图标的mime 类型</li>\n<li>size:图标尺寸。当PWA添加到主屏幕时，浏览器会根据有效图标的size 字段进行选择，如果匹配到的图标路径错误，将会显示浏览器默认icon。</li>\n</ul>\n</li>\n<li>start_url:{string=} 应用启动地址</li>\n<li>background_color:{color} css色值</li>\n<li>display: {string} 显示类型<ul>\n<li>fullScreen: 应用的显示界面将占满整个屏幕</li>\n<li>standalone: 浏览器相关UI（导航栏、工具栏等）将会被隐藏</li>\n<li>minimal-ui: 显示形式与standalone类似，浏览器相关UI会最小化为一个按钮，不同浏览器在实现上略有不同</li>\n<li>browser: 浏览器模式，与普通网页在浏览器中打开的显示一致</li>\n</ul>\n</li>\n<li>orientation: string 应用显示方向</li>\n<li>theme_color: 主题颜色</li>\n</ul>\n<h3 id=\"设置作用域\"><a href=\"#设置作用域\" class=\"headerlink\" title=\"设置作用域\"></a>设置作用域</h3><ul>\n<li>如果没有在manifest中设置scope，则默认的作用域为manifest.json所在的文件夹；</li>\n<li><strong>start_url 必须在作用域范围之内</strong>;</li>\n<li>如果start_url 为相对地址，其根路径收scope所影响;</li>\n<li>如果start_url 为绝对地址（以/开头）,则该地址将永远以/作为跟地址；</li>\n</ul>\n<h3 id=\"添加启动动画\"><a href=\"#添加启动动画\" class=\"headerlink\" title=\"添加启动动画\"></a>添加启动动画</h3><p>当PWA添加到主屏幕点击打开时，幕后执行了若干操作：</p>\n<ol>\n<li>启动浏览器</li>\n<li>启动显示页面的渲染器</li>\n<li>加载资源</li>\n</ol>\n<p>在这个过程中，由于页面未加载完毕，因此屏幕将显示空白并且看似停滞。如果是从网络加载的页面资源，白屏过程将会变得更加明显。因此 PWA 提供了启动画面功能，用标题、颜色和图像组成的画面来替代白屏，提升用户体验。</p>\n<p>目前，如果修改了manifest.json 的应用的名称，已经添加到主屏幕的名称并不会改变，只有当用户重新添加到桌面时，更改后的名称才会显示出来。但是未来版本的chrome 支持自动更新。</p>\n<h2 id=\"更新页面\"><a href=\"#更新页面\" class=\"headerlink\" title=\"更新页面\"></a>更新页面</h2><p>（个人认为这是一个缺点）<br>页面被缓存之后，就需要适当处理缓存失效时的页面更新。某些配置中被缓存的资源是无法发起请求判断是否被更新的，只有sw.js会自动根据HTTP缓存的机制尝试去判断应用是否被更新。所以当页面发生改变时，要同事对sw.js文件的缓存名进行修改。这就意味着在联网情况下，用户得到的可能不是最新的数据。<br>然后重新打开页面，这个时候渲染的页面依旧是的，但是sw.js被安装和激活。之后关闭页面后再次打开才可以看到更新过后的页面。所以最好是将一些不经常更改的静态文件发到缓存中，提高用户体验。</p>\n<h3 id=\"缓存刷新\"><a href=\"#缓存刷新\" class=\"headerlink\" title=\"缓存刷新\"></a>缓存刷新</h3><p>静态文件，类似于图片和视频等不会经常改变的资源，做长时间缓存是没有很大的问题，可以在HTTP头里设置 <code>Cache-Control</code>来缓存文件使其缓存时间为一年：<code>Cache-Control: max-age=31536000</code></p>\n<p>页面，css和script文件会经常变化，所以应该设置一个很短的缓存时间比如24小时，并在联网时与服务区端文件进行验证 <code>Cache-Control: must-revalidate, max-age=86400</code></p>"},{"title":"PWA-pushMessage","date":"2017-07-21T03:28:03.000Z","_content":"\n## 消息推送介绍\n\n消息推送通知目前整体支持度并不高，在手机端更只有安卓 chrome57 支持。在订阅消息之前，浏览器主要得到用户授权，同意后才能使用消息推送服务。都是通过 serviceWorker 去实现的。\n\n<!--more-->\n\n基本原理是，你的客户端和推送服务进行绑定，会生成一个绑定后的推送服务 API 接口，服务端调用此接口，发送消息。同时浏览器也需要支持这个功能，在注册 sw 时，加上推送功能的判断。\n\n```javascript\nif ('serviceWorker' in navigator && 'PushManager' in window) {\n  navigator.serviceWorker\n    .register(sw.js)\n    .then(function(swReg) {\n      swRegistration = swReg\n    })\n    .catch(function(error) {\n      console.error('Service Worker Error', error)\n    })\n} else {\n  console.warn('Push messaging is not supported')\n}\n```\n\nPushManager 注册好之后，那么要做的就是浏览器和服务器的绑定了。\n\n## 获取授权\n\n* 在订阅之前先获取用户授权，\\*\\* 使用 Notification.requestPermission。当用户允许或者拒绝授权之后，后续都不会重复询问。\n* 如果不选择 1，在正式订阅时，浏览器也会自动弹出。对于开发者而言不需要显示调用。\n* <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/notification\">Notifications API</a> 的通知接口用于向用户配置和显示桌面通知。\n* <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Push_API\">push API</a> 允许 web 应用程序接受从服务器推送到它们的消息的能力，无论 WEB 应用程序是否在用户代理的前台，或者甚至当前加载。这样。开发人员就可以向选择启用的用户投放异步通知和更新，从而更及时的吸引新内容。\n\n## 订阅消息的具体实现\n\n* 在订阅之前先获取用户授权\n* 使用 pushManager 添加订阅，浏览器向推送服务发送请求，轻重传递参数对象包含两个属性。\n  * userVisibleOnly, 不允许静默的推出，所有推出都对用户可见，所以值为 true\n  * applicationServerKey, 服务器生成的公钥\n* 得到推送服务成功响应后，浏览器将推送服务返回的 endpoint 加入推送订阅对象，向服务器发送这个对象供其存储。\n\n消息推送的安全性 :\n\n* 推送服务确保调用来自可靠的服务端。\n* 推送消息内容只有浏览器能够解密，就算是推送服务也不行\n\n## 使用 web-push 服务器发送信息\n\n 这是谷歌自己实现的一个推送功能的服务器\n \n服务器端请求推送服务器，需要涉及加密，设置请求头等复杂操作。使用 web-push 可以解决大部分问题。\n\n* 使用 web-push 生成一对公私钥，还记得 pushManager 订阅时需要用到的 applicationServerKey 吗，我们需要公钥 publicKey 传递到订阅脚本所在的页面中。。\n* 调用 setVapidDetails 为 web-push 设置生成的公私钥。\n* 之前订阅时浏览器已经将推送订阅对象发送到了服务端，此时从数据库中取出。\n* 调用 sendNotification 向推送服务发起调用请求，如果返回错误状态码，从数据库中删除保存的推送订阅对象。\n* 所有推送服务都遵循同意的调用标准，**所有推送服务都遵循统一的调用标准，推送服务如果接到了服务器的调用请求，向设备推送消息，如果处于离线状态，消息将进入待发送队列，过期后队列清空，消息将被丢弃。**\n\n## 推送服务的响应\n\n* 429 too many requests\n* 400 invalid request\n* 404 not found 订阅过期，需要在服务端删除保存的推送订阅对象。\n* 410 Gone 订阅失效，需要在服务端删除保存的推送订阅对象，并调用推送订阅对象的 unsubscribe() 方法\n* 413 Payload size too large\n","source":"_posts/PWA-pushMessage.md","raw":"---\ntitle: PWA-pushMessage\ncategories: WEB\ndate: 2017-07-21 11:28:03\n---\n\n## 消息推送介绍\n\n消息推送通知目前整体支持度并不高，在手机端更只有安卓 chrome57 支持。在订阅消息之前，浏览器主要得到用户授权，同意后才能使用消息推送服务。都是通过 serviceWorker 去实现的。\n\n<!--more-->\n\n基本原理是，你的客户端和推送服务进行绑定，会生成一个绑定后的推送服务 API 接口，服务端调用此接口，发送消息。同时浏览器也需要支持这个功能，在注册 sw 时，加上推送功能的判断。\n\n```javascript\nif ('serviceWorker' in navigator && 'PushManager' in window) {\n  navigator.serviceWorker\n    .register(sw.js)\n    .then(function(swReg) {\n      swRegistration = swReg\n    })\n    .catch(function(error) {\n      console.error('Service Worker Error', error)\n    })\n} else {\n  console.warn('Push messaging is not supported')\n}\n```\n\nPushManager 注册好之后，那么要做的就是浏览器和服务器的绑定了。\n\n## 获取授权\n\n* 在订阅之前先获取用户授权，\\*\\* 使用 Notification.requestPermission。当用户允许或者拒绝授权之后，后续都不会重复询问。\n* 如果不选择 1，在正式订阅时，浏览器也会自动弹出。对于开发者而言不需要显示调用。\n* <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/notification\">Notifications API</a> 的通知接口用于向用户配置和显示桌面通知。\n* <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Push_API\">push API</a> 允许 web 应用程序接受从服务器推送到它们的消息的能力，无论 WEB 应用程序是否在用户代理的前台，或者甚至当前加载。这样。开发人员就可以向选择启用的用户投放异步通知和更新，从而更及时的吸引新内容。\n\n## 订阅消息的具体实现\n\n* 在订阅之前先获取用户授权\n* 使用 pushManager 添加订阅，浏览器向推送服务发送请求，轻重传递参数对象包含两个属性。\n  * userVisibleOnly, 不允许静默的推出，所有推出都对用户可见，所以值为 true\n  * applicationServerKey, 服务器生成的公钥\n* 得到推送服务成功响应后，浏览器将推送服务返回的 endpoint 加入推送订阅对象，向服务器发送这个对象供其存储。\n\n消息推送的安全性 :\n\n* 推送服务确保调用来自可靠的服务端。\n* 推送消息内容只有浏览器能够解密，就算是推送服务也不行\n\n## 使用 web-push 服务器发送信息\n\n 这是谷歌自己实现的一个推送功能的服务器\n \n服务器端请求推送服务器，需要涉及加密，设置请求头等复杂操作。使用 web-push 可以解决大部分问题。\n\n* 使用 web-push 生成一对公私钥，还记得 pushManager 订阅时需要用到的 applicationServerKey 吗，我们需要公钥 publicKey 传递到订阅脚本所在的页面中。。\n* 调用 setVapidDetails 为 web-push 设置生成的公私钥。\n* 之前订阅时浏览器已经将推送订阅对象发送到了服务端，此时从数据库中取出。\n* 调用 sendNotification 向推送服务发起调用请求，如果返回错误状态码，从数据库中删除保存的推送订阅对象。\n* 所有推送服务都遵循同意的调用标准，**所有推送服务都遵循统一的调用标准，推送服务如果接到了服务器的调用请求，向设备推送消息，如果处于离线状态，消息将进入待发送队列，过期后队列清空，消息将被丢弃。**\n\n## 推送服务的响应\n\n* 429 too many requests\n* 400 invalid request\n* 404 not found 订阅过期，需要在服务端删除保存的推送订阅对象。\n* 410 Gone 订阅失效，需要在服务端删除保存的推送订阅对象，并调用推送订阅对象的 unsubscribe() 方法\n* 413 Payload size too large\n","slug":"PWA-pushMessage","published":1,"updated":"2021-03-01T03:47:26.024Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmejaerv000sxcvrabc570vr","content":"<h2 id=\"消息推送介绍\"><a href=\"#消息推送介绍\" class=\"headerlink\" title=\"消息推送介绍\"></a>消息推送介绍</h2><p>消息推送通知目前整体支持度并不高，在手机端更只有安卓 chrome57 支持。在订阅消息之前，浏览器主要得到用户授权，同意后才能使用消息推送服务。都是通过 serviceWorker 去实现的。</p>\n<span id=\"more\"></span>\n\n<p>基本原理是，你的客户端和推送服务进行绑定，会生成一个绑定后的推送服务 API 接口，服务端调用此接口，发送消息。同时浏览器也需要支持这个功能，在注册 sw 时，加上推送功能的判断。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">&#x27;serviceWorker&#x27;</span> <span class=\"keyword\">in</span> navigator &amp;&amp; <span class=\"string\">&#x27;PushManager&#x27;</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span>) &#123;</span><br><span class=\"line\">  navigator.serviceWorker</span><br><span class=\"line\">    .register(sw.js)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">swReg</span>) </span>&#123;</span><br><span class=\"line\">      swRegistration = swReg</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(<span class=\"string\">&#x27;Service Worker Error&#x27;</span>, error)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.warn(<span class=\"string\">&#x27;Push messaging is not supported&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>PushManager 注册好之后，那么要做的就是浏览器和服务器的绑定了。</p>\n<h2 id=\"获取授权\"><a href=\"#获取授权\" class=\"headerlink\" title=\"获取授权\"></a>获取授权</h2><ul>\n<li>在订阅之前先获取用户授权，** 使用 Notification.requestPermission。当用户允许或者拒绝授权之后，后续都不会重复询问。</li>\n<li>如果不选择 1，在正式订阅时，浏览器也会自动弹出。对于开发者而言不需要显示调用。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/notification\">Notifications API</a> 的通知接口用于向用户配置和显示桌面通知。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Push_API\">push API</a> 允许 web 应用程序接受从服务器推送到它们的消息的能力，无论 WEB 应用程序是否在用户代理的前台，或者甚至当前加载。这样。开发人员就可以向选择启用的用户投放异步通知和更新，从而更及时的吸引新内容。</li>\n</ul>\n<h2 id=\"订阅消息的具体实现\"><a href=\"#订阅消息的具体实现\" class=\"headerlink\" title=\"订阅消息的具体实现\"></a>订阅消息的具体实现</h2><ul>\n<li>在订阅之前先获取用户授权</li>\n<li>使用 pushManager 添加订阅，浏览器向推送服务发送请求，轻重传递参数对象包含两个属性。<ul>\n<li>userVisibleOnly, 不允许静默的推出，所有推出都对用户可见，所以值为 true</li>\n<li>applicationServerKey, 服务器生成的公钥</li>\n</ul>\n</li>\n<li>得到推送服务成功响应后，浏览器将推送服务返回的 endpoint 加入推送订阅对象，向服务器发送这个对象供其存储。</li>\n</ul>\n<p>消息推送的安全性 :</p>\n<ul>\n<li>推送服务确保调用来自可靠的服务端。</li>\n<li>推送消息内容只有浏览器能够解密，就算是推送服务也不行</li>\n</ul>\n<h2 id=\"使用-web-push-服务器发送信息\"><a href=\"#使用-web-push-服务器发送信息\" class=\"headerlink\" title=\"使用 web-push 服务器发送信息\"></a>使用 web-push 服务器发送信息</h2><p> 这是谷歌自己实现的一个推送功能的服务器</p>\n<p>服务器端请求推送服务器，需要涉及加密，设置请求头等复杂操作。使用 web-push 可以解决大部分问题。</p>\n<ul>\n<li>使用 web-push 生成一对公私钥，还记得 pushManager 订阅时需要用到的 applicationServerKey 吗，我们需要公钥 publicKey 传递到订阅脚本所在的页面中。。</li>\n<li>调用 setVapidDetails 为 web-push 设置生成的公私钥。</li>\n<li>之前订阅时浏览器已经将推送订阅对象发送到了服务端，此时从数据库中取出。</li>\n<li>调用 sendNotification 向推送服务发起调用请求，如果返回错误状态码，从数据库中删除保存的推送订阅对象。</li>\n<li>所有推送服务都遵循同意的调用标准，<strong>所有推送服务都遵循统一的调用标准，推送服务如果接到了服务器的调用请求，向设备推送消息，如果处于离线状态，消息将进入待发送队列，过期后队列清空，消息将被丢弃。</strong></li>\n</ul>\n<h2 id=\"推送服务的响应\"><a href=\"#推送服务的响应\" class=\"headerlink\" title=\"推送服务的响应\"></a>推送服务的响应</h2><ul>\n<li>429 too many requests</li>\n<li>400 invalid request</li>\n<li>404 not found 订阅过期，需要在服务端删除保存的推送订阅对象。</li>\n<li>410 Gone 订阅失效，需要在服务端删除保存的推送订阅对象，并调用推送订阅对象的 unsubscribe() 方法</li>\n<li>413 Payload size too large</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"消息推送介绍\"><a href=\"#消息推送介绍\" class=\"headerlink\" title=\"消息推送介绍\"></a>消息推送介绍</h2><p>消息推送通知目前整体支持度并不高，在手机端更只有安卓 chrome57 支持。在订阅消息之前，浏览器主要得到用户授权，同意后才能使用消息推送服务。都是通过 serviceWorker 去实现的。</p>","more":"<p>基本原理是，你的客户端和推送服务进行绑定，会生成一个绑定后的推送服务 API 接口，服务端调用此接口，发送消息。同时浏览器也需要支持这个功能，在注册 sw 时，加上推送功能的判断。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">&#x27;serviceWorker&#x27;</span> <span class=\"keyword\">in</span> navigator &amp;&amp; <span class=\"string\">&#x27;PushManager&#x27;</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span>) &#123;</span><br><span class=\"line\">  navigator.serviceWorker</span><br><span class=\"line\">    .register(sw.js)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">swReg</span>) </span>&#123;</span><br><span class=\"line\">      swRegistration = swReg</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(<span class=\"string\">&#x27;Service Worker Error&#x27;</span>, error)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.warn(<span class=\"string\">&#x27;Push messaging is not supported&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>PushManager 注册好之后，那么要做的就是浏览器和服务器的绑定了。</p>\n<h2 id=\"获取授权\"><a href=\"#获取授权\" class=\"headerlink\" title=\"获取授权\"></a>获取授权</h2><ul>\n<li>在订阅之前先获取用户授权，** 使用 Notification.requestPermission。当用户允许或者拒绝授权之后，后续都不会重复询问。</li>\n<li>如果不选择 1，在正式订阅时，浏览器也会自动弹出。对于开发者而言不需要显示调用。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/notification\">Notifications API</a> 的通知接口用于向用户配置和显示桌面通知。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Push_API\">push API</a> 允许 web 应用程序接受从服务器推送到它们的消息的能力，无论 WEB 应用程序是否在用户代理的前台，或者甚至当前加载。这样。开发人员就可以向选择启用的用户投放异步通知和更新，从而更及时的吸引新内容。</li>\n</ul>\n<h2 id=\"订阅消息的具体实现\"><a href=\"#订阅消息的具体实现\" class=\"headerlink\" title=\"订阅消息的具体实现\"></a>订阅消息的具体实现</h2><ul>\n<li>在订阅之前先获取用户授权</li>\n<li>使用 pushManager 添加订阅，浏览器向推送服务发送请求，轻重传递参数对象包含两个属性。<ul>\n<li>userVisibleOnly, 不允许静默的推出，所有推出都对用户可见，所以值为 true</li>\n<li>applicationServerKey, 服务器生成的公钥</li>\n</ul>\n</li>\n<li>得到推送服务成功响应后，浏览器将推送服务返回的 endpoint 加入推送订阅对象，向服务器发送这个对象供其存储。</li>\n</ul>\n<p>消息推送的安全性 :</p>\n<ul>\n<li>推送服务确保调用来自可靠的服务端。</li>\n<li>推送消息内容只有浏览器能够解密，就算是推送服务也不行</li>\n</ul>\n<h2 id=\"使用-web-push-服务器发送信息\"><a href=\"#使用-web-push-服务器发送信息\" class=\"headerlink\" title=\"使用 web-push 服务器发送信息\"></a>使用 web-push 服务器发送信息</h2><p> 这是谷歌自己实现的一个推送功能的服务器</p>\n<p>服务器端请求推送服务器，需要涉及加密，设置请求头等复杂操作。使用 web-push 可以解决大部分问题。</p>\n<ul>\n<li>使用 web-push 生成一对公私钥，还记得 pushManager 订阅时需要用到的 applicationServerKey 吗，我们需要公钥 publicKey 传递到订阅脚本所在的页面中。。</li>\n<li>调用 setVapidDetails 为 web-push 设置生成的公私钥。</li>\n<li>之前订阅时浏览器已经将推送订阅对象发送到了服务端，此时从数据库中取出。</li>\n<li>调用 sendNotification 向推送服务发起调用请求，如果返回错误状态码，从数据库中删除保存的推送订阅对象。</li>\n<li>所有推送服务都遵循同意的调用标准，<strong>所有推送服务都遵循统一的调用标准，推送服务如果接到了服务器的调用请求，向设备推送消息，如果处于离线状态，消息将进入待发送队列，过期后队列清空，消息将被丢弃。</strong></li>\n</ul>\n<h2 id=\"推送服务的响应\"><a href=\"#推送服务的响应\" class=\"headerlink\" title=\"推送服务的响应\"></a>推送服务的响应</h2><ul>\n<li>429 too many requests</li>\n<li>400 invalid request</li>\n<li>404 not found 订阅过期，需要在服务端删除保存的推送订阅对象。</li>\n<li>410 Gone 订阅失效，需要在服务端删除保存的推送订阅对象，并调用推送订阅对象的 unsubscribe() 方法</li>\n<li>413 Payload size too large</li>\n</ul>"},{"title":"Vue.js内部运行机制","date":"2018-11-06T03:07:19.000Z","_content":"\n记录一下 vue.js 内部的整个流程\n\n<!--more-->\n\n## vue 模板如何渲染成 HTML？以及渲染过程\n\n1. vue 模板的本质是字符串，利用各种正则，把模板中的属性去变成 js 中的变量，vif,vshow,v-for 等指令变成 js 中的逻辑\n2. 模板最终会被转换成 render 函数\n3. render 函数执行返回 vnode\n4. 使用 vnode 的 path 方法把 vnode 渲染成真实 DOM\n\n## vue 的整个实现流程\n\n1. 先把模板解析成 render 函数，把模板中的属性 去变成 js 中的变量，vif,vshow,vfor 等指令变成 js 中的逻辑。\n2. 执行 render 函数，在初次渲染执行 render 函数的过程中绑定属性监听，收集依赖，最终得到 vnode。利用 vnode 的 path 方法，把 vnode 渲染成真实的 DOM\n3. 在属性更新后，重新执行 render 函数，不过这时候就不需要绑定属性和收集依赖了，最终生成新的 vnode\n4. 把新的 vnode 和旧的 vnode 去做对比，找出需要更新的 dom，渲染\n\n## 什么是 diff 算法，或者是 diff 算法是用来做什么的\n\n- diff 是 linux 中的基础命令，可以用来做文件，内容之间做比较\n- vnode 中使用 diff 算法是为了找出需要更新的节点，避免造成不必要的更新\n\n## vuex 是什么\n\nvuex 就是一个全局的仓库，公共的状态或者复杂组件交互的状态我们会抽离出来放进里面。\nvuex 的核心主要是包括以下几个部分：\n\n- state：state 里面就是存放的我们需要使用的状态，他是单向数据流，在 vue 中不予许直接对他进行修改，而是使用 mutations 去进行修改\n- mutations：mutations 就是存放如何更改状态 的一些方法\n- actions：actions 是用来做异步修改的，他可以等待异步结束后，在去使用 commit mutations 去修改状态\n- getters:相当于是 state 的计算属性\n\n使用：\n\n- 获取状态在组件内部 computed 中使用 this.\\$store.state 得到想要的状态\n- 修改的话可在组件中使用 this.\\$store.commit 方法去修改状态\n- 如果在一个组件中，方法，状态使用太多，可以使用 mapstate,mapmutations 辅助函数\n\n## 生命周期\n\n- 窗前前/后（beforeCreate/created）:在 beforeCreate 阶段，Vue 实例的挂载元素 el 和数据对象 data 都为 undefined，还未初始化。在 created 阶段，Vue 实例的数据对象 data 有了，el 还没有\n- 载入前后/后（beforeMount/mounted）:在 beforeMount 阶段，vue 实例的\\$el 和 data 都初始化了，但还是挂载之前为虚拟 DOM 节点，data 尚未替换，在 mounted 阶段，vue 实例挂载完成，data 成功渲染\n- 更新前/后（beforeDestory/destory）：beforeDestroy 是在 vue 实例销毁前触发，一般在这里要通过 removeEventLisener 解除手动绑定事件。实例销毁后，触发 destroyed。\n\n## 组件间的通信\n\n1. 父子通信：\n   父向子传递数据是通过 props，子向父是通过 event（\\$emit）;通过父链/子链也可以通信（$parent,$children）；ref 也可以访问组件实例。proved/injectApi\n2. 兄弟通信：\n   Bus;Vuex;\n3. 跨级通信\n   Bus；Vuex;provide/inject Api\n\n## 数组监听漏洞\nVue检测数据的变动是通过Object.defineProperty实现的，所以无法监听数组的添加操作是可以理解的，因为是在构造函数中就已经为所有属性做了这个检测绑定操作。\n但是官方的原文：由于 JavaScript 的限制， Vue 不能检测以下变动的数组：\n- 当你利用索引直接设置一个项时，例如： vm.items[indexOfItem] = newValue\n- 当你修改数组的长度时，例如： vm.items.length = newLength\n\nVue.js观察数组变化主要通过以下7个方法（push、pop、shift、unshift、splice、sort、reverse），由于 Vue 会在初始化实例时对属性执行 getter/setter 转化过程，所以属性必须在 data 对象上存在才能让 Vue 转换它，这样才能让它是响应的。\n\nvue 中是通过对每个键设置getter/setter 来实现响应式的，开发者使用数组，目的往往是遍历，此时电泳getter开销太大了，所以vue不在数组每个键上设置，而是在数组上定义`_ob_`,并且替代了push等等能够影响原数组的原型方法。\n\n```javascript\nvar vm = new Vue({\n    el: '#app',\n    data: {\n        orderList: [{\n            status: 0,\n            points: 3,\n            money: 300,\n            checked:false\n        },\n        {\n            status: 0,\n            points: 3,\n            money: 300\n        },\n        {\n            status: 1,\n            points: 3,\n            money: 400\n        }]\n    },\n    created() {\n        this.orderList.forEach(function (item) {\n            item.checked = false;\n        })\n    },\n    methods: {\n        handleChoose(item) {\n            item.checked = !item.checked;\n        }\n    }\n})\n```\n上面是检测不到后面两个checked的变化的。\n\n### 解决方案\n\n- Vue.set(vue.obj,'e',0)\n- this.obj= Object.assign({}, this.obj, { a: 1, e: 2 })\n\n```javascript\nvar vm = new Vue({\n    el: '#app',\n    data: {\n        orderList: []\n    },\n    created() {\n        var data = [{\n            status: 0,\n            points: 3,\n            money: 300,\n        },\n        {\n            status: 0,\n            points: 3,\n            money: 300\n        },\n        {\n            status: 1,\n            points: 3,\n            money: 400\n        }];\n        data.forEach(function (item) {\n            item.checked = false;\n        })\n        this.orderList = data;\n    },\n    methods: {\n        handleChoose(item) {\n            item.checked = !item.checked;\n        }\n    }\n})\n```\n这样写也是没有问题的，浅层次操作数组是没有问题的。\n\n## vue中的key 到底有什么用\n","source":"_posts/Vue-js内部运行机制.md","raw":"---\ntitle: Vue.js内部运行机制\ndate: 2018-11-06 11:07:19\ntags: Vue\n---\n\n记录一下 vue.js 内部的整个流程\n\n<!--more-->\n\n## vue 模板如何渲染成 HTML？以及渲染过程\n\n1. vue 模板的本质是字符串，利用各种正则，把模板中的属性去变成 js 中的变量，vif,vshow,v-for 等指令变成 js 中的逻辑\n2. 模板最终会被转换成 render 函数\n3. render 函数执行返回 vnode\n4. 使用 vnode 的 path 方法把 vnode 渲染成真实 DOM\n\n## vue 的整个实现流程\n\n1. 先把模板解析成 render 函数，把模板中的属性 去变成 js 中的变量，vif,vshow,vfor 等指令变成 js 中的逻辑。\n2. 执行 render 函数，在初次渲染执行 render 函数的过程中绑定属性监听，收集依赖，最终得到 vnode。利用 vnode 的 path 方法，把 vnode 渲染成真实的 DOM\n3. 在属性更新后，重新执行 render 函数，不过这时候就不需要绑定属性和收集依赖了，最终生成新的 vnode\n4. 把新的 vnode 和旧的 vnode 去做对比，找出需要更新的 dom，渲染\n\n## 什么是 diff 算法，或者是 diff 算法是用来做什么的\n\n- diff 是 linux 中的基础命令，可以用来做文件，内容之间做比较\n- vnode 中使用 diff 算法是为了找出需要更新的节点，避免造成不必要的更新\n\n## vuex 是什么\n\nvuex 就是一个全局的仓库，公共的状态或者复杂组件交互的状态我们会抽离出来放进里面。\nvuex 的核心主要是包括以下几个部分：\n\n- state：state 里面就是存放的我们需要使用的状态，他是单向数据流，在 vue 中不予许直接对他进行修改，而是使用 mutations 去进行修改\n- mutations：mutations 就是存放如何更改状态 的一些方法\n- actions：actions 是用来做异步修改的，他可以等待异步结束后，在去使用 commit mutations 去修改状态\n- getters:相当于是 state 的计算属性\n\n使用：\n\n- 获取状态在组件内部 computed 中使用 this.\\$store.state 得到想要的状态\n- 修改的话可在组件中使用 this.\\$store.commit 方法去修改状态\n- 如果在一个组件中，方法，状态使用太多，可以使用 mapstate,mapmutations 辅助函数\n\n## 生命周期\n\n- 窗前前/后（beforeCreate/created）:在 beforeCreate 阶段，Vue 实例的挂载元素 el 和数据对象 data 都为 undefined，还未初始化。在 created 阶段，Vue 实例的数据对象 data 有了，el 还没有\n- 载入前后/后（beforeMount/mounted）:在 beforeMount 阶段，vue 实例的\\$el 和 data 都初始化了，但还是挂载之前为虚拟 DOM 节点，data 尚未替换，在 mounted 阶段，vue 实例挂载完成，data 成功渲染\n- 更新前/后（beforeDestory/destory）：beforeDestroy 是在 vue 实例销毁前触发，一般在这里要通过 removeEventLisener 解除手动绑定事件。实例销毁后，触发 destroyed。\n\n## 组件间的通信\n\n1. 父子通信：\n   父向子传递数据是通过 props，子向父是通过 event（\\$emit）;通过父链/子链也可以通信（$parent,$children）；ref 也可以访问组件实例。proved/injectApi\n2. 兄弟通信：\n   Bus;Vuex;\n3. 跨级通信\n   Bus；Vuex;provide/inject Api\n\n## 数组监听漏洞\nVue检测数据的变动是通过Object.defineProperty实现的，所以无法监听数组的添加操作是可以理解的，因为是在构造函数中就已经为所有属性做了这个检测绑定操作。\n但是官方的原文：由于 JavaScript 的限制， Vue 不能检测以下变动的数组：\n- 当你利用索引直接设置一个项时，例如： vm.items[indexOfItem] = newValue\n- 当你修改数组的长度时，例如： vm.items.length = newLength\n\nVue.js观察数组变化主要通过以下7个方法（push、pop、shift、unshift、splice、sort、reverse），由于 Vue 会在初始化实例时对属性执行 getter/setter 转化过程，所以属性必须在 data 对象上存在才能让 Vue 转换它，这样才能让它是响应的。\n\nvue 中是通过对每个键设置getter/setter 来实现响应式的，开发者使用数组，目的往往是遍历，此时电泳getter开销太大了，所以vue不在数组每个键上设置，而是在数组上定义`_ob_`,并且替代了push等等能够影响原数组的原型方法。\n\n```javascript\nvar vm = new Vue({\n    el: '#app',\n    data: {\n        orderList: [{\n            status: 0,\n            points: 3,\n            money: 300,\n            checked:false\n        },\n        {\n            status: 0,\n            points: 3,\n            money: 300\n        },\n        {\n            status: 1,\n            points: 3,\n            money: 400\n        }]\n    },\n    created() {\n        this.orderList.forEach(function (item) {\n            item.checked = false;\n        })\n    },\n    methods: {\n        handleChoose(item) {\n            item.checked = !item.checked;\n        }\n    }\n})\n```\n上面是检测不到后面两个checked的变化的。\n\n### 解决方案\n\n- Vue.set(vue.obj,'e',0)\n- this.obj= Object.assign({}, this.obj, { a: 1, e: 2 })\n\n```javascript\nvar vm = new Vue({\n    el: '#app',\n    data: {\n        orderList: []\n    },\n    created() {\n        var data = [{\n            status: 0,\n            points: 3,\n            money: 300,\n        },\n        {\n            status: 0,\n            points: 3,\n            money: 300\n        },\n        {\n            status: 1,\n            points: 3,\n            money: 400\n        }];\n        data.forEach(function (item) {\n            item.checked = false;\n        })\n        this.orderList = data;\n    },\n    methods: {\n        handleChoose(item) {\n            item.checked = !item.checked;\n        }\n    }\n})\n```\n这样写也是没有问题的，浅层次操作数组是没有问题的。\n\n## vue中的key 到底有什么用\n","slug":"Vue-js内部运行机制","published":1,"updated":"2019-12-26T02:40:18.803Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmejaerw000vxcvrawsx89cy","content":"<p>记录一下 vue.js 内部的整个流程</p>\n<span id=\"more\"></span>\n\n<h2 id=\"vue-模板如何渲染成-HTML？以及渲染过程\"><a href=\"#vue-模板如何渲染成-HTML？以及渲染过程\" class=\"headerlink\" title=\"vue 模板如何渲染成 HTML？以及渲染过程\"></a>vue 模板如何渲染成 HTML？以及渲染过程</h2><ol>\n<li>vue 模板的本质是字符串，利用各种正则，把模板中的属性去变成 js 中的变量，vif,vshow,v-for 等指令变成 js 中的逻辑</li>\n<li>模板最终会被转换成 render 函数</li>\n<li>render 函数执行返回 vnode</li>\n<li>使用 vnode 的 path 方法把 vnode 渲染成真实 DOM</li>\n</ol>\n<h2 id=\"vue-的整个实现流程\"><a href=\"#vue-的整个实现流程\" class=\"headerlink\" title=\"vue 的整个实现流程\"></a>vue 的整个实现流程</h2><ol>\n<li>先把模板解析成 render 函数，把模板中的属性 去变成 js 中的变量，vif,vshow,vfor 等指令变成 js 中的逻辑。</li>\n<li>执行 render 函数，在初次渲染执行 render 函数的过程中绑定属性监听，收集依赖，最终得到 vnode。利用 vnode 的 path 方法，把 vnode 渲染成真实的 DOM</li>\n<li>在属性更新后，重新执行 render 函数，不过这时候就不需要绑定属性和收集依赖了，最终生成新的 vnode</li>\n<li>把新的 vnode 和旧的 vnode 去做对比，找出需要更新的 dom，渲染</li>\n</ol>\n<h2 id=\"什么是-diff-算法，或者是-diff-算法是用来做什么的\"><a href=\"#什么是-diff-算法，或者是-diff-算法是用来做什么的\" class=\"headerlink\" title=\"什么是 diff 算法，或者是 diff 算法是用来做什么的\"></a>什么是 diff 算法，或者是 diff 算法是用来做什么的</h2><ul>\n<li>diff 是 linux 中的基础命令，可以用来做文件，内容之间做比较</li>\n<li>vnode 中使用 diff 算法是为了找出需要更新的节点，避免造成不必要的更新</li>\n</ul>\n<h2 id=\"vuex-是什么\"><a href=\"#vuex-是什么\" class=\"headerlink\" title=\"vuex 是什么\"></a>vuex 是什么</h2><p>vuex 就是一个全局的仓库，公共的状态或者复杂组件交互的状态我们会抽离出来放进里面。<br>vuex 的核心主要是包括以下几个部分：</p>\n<ul>\n<li>state：state 里面就是存放的我们需要使用的状态，他是单向数据流，在 vue 中不予许直接对他进行修改，而是使用 mutations 去进行修改</li>\n<li>mutations：mutations 就是存放如何更改状态 的一些方法</li>\n<li>actions：actions 是用来做异步修改的，他可以等待异步结束后，在去使用 commit mutations 去修改状态</li>\n<li>getters:相当于是 state 的计算属性</li>\n</ul>\n<p>使用：</p>\n<ul>\n<li>获取状态在组件内部 computed 中使用 this.$store.state 得到想要的状态</li>\n<li>修改的话可在组件中使用 this.$store.commit 方法去修改状态</li>\n<li>如果在一个组件中，方法，状态使用太多，可以使用 mapstate,mapmutations 辅助函数</li>\n</ul>\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><ul>\n<li>窗前前/后（beforeCreate/created）:在 beforeCreate 阶段，Vue 实例的挂载元素 el 和数据对象 data 都为 undefined，还未初始化。在 created 阶段，Vue 实例的数据对象 data 有了，el 还没有</li>\n<li>载入前后/后（beforeMount/mounted）:在 beforeMount 阶段，vue 实例的$el 和 data 都初始化了，但还是挂载之前为虚拟 DOM 节点，data 尚未替换，在 mounted 阶段，vue 实例挂载完成，data 成功渲染</li>\n<li>更新前/后（beforeDestory/destory）：beforeDestroy 是在 vue 实例销毁前触发，一般在这里要通过 removeEventLisener 解除手动绑定事件。实例销毁后，触发 destroyed。</li>\n</ul>\n<h2 id=\"组件间的通信\"><a href=\"#组件间的通信\" class=\"headerlink\" title=\"组件间的通信\"></a>组件间的通信</h2><ol>\n<li>父子通信：<br>父向子传递数据是通过 props，子向父是通过 event（$emit）;通过父链/子链也可以通信（$parent,$children）；ref 也可以访问组件实例。proved/injectApi</li>\n<li>兄弟通信：<br>Bus;Vuex;</li>\n<li>跨级通信<br>Bus；Vuex;provide/inject Api</li>\n</ol>\n<h2 id=\"数组监听漏洞\"><a href=\"#数组监听漏洞\" class=\"headerlink\" title=\"数组监听漏洞\"></a>数组监听漏洞</h2><p>Vue检测数据的变动是通过Object.defineProperty实现的，所以无法监听数组的添加操作是可以理解的，因为是在构造函数中就已经为所有属性做了这个检测绑定操作。<br>但是官方的原文：由于 JavaScript 的限制， Vue 不能检测以下变动的数组：</p>\n<ul>\n<li>当你利用索引直接设置一个项时，例如： vm.items[indexOfItem] = newValue</li>\n<li>当你修改数组的长度时，例如： vm.items.length = newLength</li>\n</ul>\n<p>Vue.js观察数组变化主要通过以下7个方法（push、pop、shift、unshift、splice、sort、reverse），由于 Vue 会在初始化实例时对属性执行 getter/setter 转化过程，所以属性必须在 data 对象上存在才能让 Vue 转换它，这样才能让它是响应的。</p>\n<p>vue 中是通过对每个键设置getter/setter 来实现响应式的，开发者使用数组，目的往往是遍历，此时电泳getter开销太大了，所以vue不在数组每个键上设置，而是在数组上定义<code>_ob_</code>,并且替代了push等等能够影响原数组的原型方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        orderList: [&#123;</span><br><span class=\"line\">            status: <span class=\"number\">0</span>,</span><br><span class=\"line\">            points: <span class=\"number\">3</span>,</span><br><span class=\"line\">            money: <span class=\"number\">300</span>,</span><br><span class=\"line\">            checked:<span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            status: <span class=\"number\">0</span>,</span><br><span class=\"line\">            points: <span class=\"number\">3</span>,</span><br><span class=\"line\">            money: <span class=\"number\">300</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            status: <span class=\"number\">1</span>,</span><br><span class=\"line\">            points: <span class=\"number\">3</span>,</span><br><span class=\"line\">            money: <span class=\"number\">400</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">created</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.orderList.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">            item.checked = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">handleChoose</span>(<span class=\"params\">item</span>)</span> &#123;</span><br><span class=\"line\">            item.checked = !item.checked;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>上面是检测不到后面两个checked的变化的。</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><ul>\n<li>Vue.set(vue.obj,’e’,0)</li>\n<li>this.obj= Object.assign({}, this.obj, { a: 1, e: 2 })</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        orderList: []</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">created</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> data = [&#123;</span><br><span class=\"line\">            status: <span class=\"number\">0</span>,</span><br><span class=\"line\">            points: <span class=\"number\">3</span>,</span><br><span class=\"line\">            money: <span class=\"number\">300</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            status: <span class=\"number\">0</span>,</span><br><span class=\"line\">            points: <span class=\"number\">3</span>,</span><br><span class=\"line\">            money: <span class=\"number\">300</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            status: <span class=\"number\">1</span>,</span><br><span class=\"line\">            points: <span class=\"number\">3</span>,</span><br><span class=\"line\">            money: <span class=\"number\">400</span></span><br><span class=\"line\">        &#125;];</span><br><span class=\"line\">        data.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">            item.checked = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.orderList = data;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">handleChoose</span>(<span class=\"params\">item</span>)</span> &#123;</span><br><span class=\"line\">            item.checked = !item.checked;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这样写也是没有问题的，浅层次操作数组是没有问题的。</p>\n<h2 id=\"vue中的key-到底有什么用\"><a href=\"#vue中的key-到底有什么用\" class=\"headerlink\" title=\"vue中的key 到底有什么用\"></a>vue中的key 到底有什么用</h2>","site":{"data":{}},"excerpt":"<p>记录一下 vue.js 内部的整个流程</p>","more":"<h2 id=\"vue-模板如何渲染成-HTML？以及渲染过程\"><a href=\"#vue-模板如何渲染成-HTML？以及渲染过程\" class=\"headerlink\" title=\"vue 模板如何渲染成 HTML？以及渲染过程\"></a>vue 模板如何渲染成 HTML？以及渲染过程</h2><ol>\n<li>vue 模板的本质是字符串，利用各种正则，把模板中的属性去变成 js 中的变量，vif,vshow,v-for 等指令变成 js 中的逻辑</li>\n<li>模板最终会被转换成 render 函数</li>\n<li>render 函数执行返回 vnode</li>\n<li>使用 vnode 的 path 方法把 vnode 渲染成真实 DOM</li>\n</ol>\n<h2 id=\"vue-的整个实现流程\"><a href=\"#vue-的整个实现流程\" class=\"headerlink\" title=\"vue 的整个实现流程\"></a>vue 的整个实现流程</h2><ol>\n<li>先把模板解析成 render 函数，把模板中的属性 去变成 js 中的变量，vif,vshow,vfor 等指令变成 js 中的逻辑。</li>\n<li>执行 render 函数，在初次渲染执行 render 函数的过程中绑定属性监听，收集依赖，最终得到 vnode。利用 vnode 的 path 方法，把 vnode 渲染成真实的 DOM</li>\n<li>在属性更新后，重新执行 render 函数，不过这时候就不需要绑定属性和收集依赖了，最终生成新的 vnode</li>\n<li>把新的 vnode 和旧的 vnode 去做对比，找出需要更新的 dom，渲染</li>\n</ol>\n<h2 id=\"什么是-diff-算法，或者是-diff-算法是用来做什么的\"><a href=\"#什么是-diff-算法，或者是-diff-算法是用来做什么的\" class=\"headerlink\" title=\"什么是 diff 算法，或者是 diff 算法是用来做什么的\"></a>什么是 diff 算法，或者是 diff 算法是用来做什么的</h2><ul>\n<li>diff 是 linux 中的基础命令，可以用来做文件，内容之间做比较</li>\n<li>vnode 中使用 diff 算法是为了找出需要更新的节点，避免造成不必要的更新</li>\n</ul>\n<h2 id=\"vuex-是什么\"><a href=\"#vuex-是什么\" class=\"headerlink\" title=\"vuex 是什么\"></a>vuex 是什么</h2><p>vuex 就是一个全局的仓库，公共的状态或者复杂组件交互的状态我们会抽离出来放进里面。<br>vuex 的核心主要是包括以下几个部分：</p>\n<ul>\n<li>state：state 里面就是存放的我们需要使用的状态，他是单向数据流，在 vue 中不予许直接对他进行修改，而是使用 mutations 去进行修改</li>\n<li>mutations：mutations 就是存放如何更改状态 的一些方法</li>\n<li>actions：actions 是用来做异步修改的，他可以等待异步结束后，在去使用 commit mutations 去修改状态</li>\n<li>getters:相当于是 state 的计算属性</li>\n</ul>\n<p>使用：</p>\n<ul>\n<li>获取状态在组件内部 computed 中使用 this.$store.state 得到想要的状态</li>\n<li>修改的话可在组件中使用 this.$store.commit 方法去修改状态</li>\n<li>如果在一个组件中，方法，状态使用太多，可以使用 mapstate,mapmutations 辅助函数</li>\n</ul>\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><ul>\n<li>窗前前/后（beforeCreate/created）:在 beforeCreate 阶段，Vue 实例的挂载元素 el 和数据对象 data 都为 undefined，还未初始化。在 created 阶段，Vue 实例的数据对象 data 有了，el 还没有</li>\n<li>载入前后/后（beforeMount/mounted）:在 beforeMount 阶段，vue 实例的$el 和 data 都初始化了，但还是挂载之前为虚拟 DOM 节点，data 尚未替换，在 mounted 阶段，vue 实例挂载完成，data 成功渲染</li>\n<li>更新前/后（beforeDestory/destory）：beforeDestroy 是在 vue 实例销毁前触发，一般在这里要通过 removeEventLisener 解除手动绑定事件。实例销毁后，触发 destroyed。</li>\n</ul>\n<h2 id=\"组件间的通信\"><a href=\"#组件间的通信\" class=\"headerlink\" title=\"组件间的通信\"></a>组件间的通信</h2><ol>\n<li>父子通信：<br>父向子传递数据是通过 props，子向父是通过 event（$emit）;通过父链/子链也可以通信（$parent,$children）；ref 也可以访问组件实例。proved/injectApi</li>\n<li>兄弟通信：<br>Bus;Vuex;</li>\n<li>跨级通信<br>Bus；Vuex;provide/inject Api</li>\n</ol>\n<h2 id=\"数组监听漏洞\"><a href=\"#数组监听漏洞\" class=\"headerlink\" title=\"数组监听漏洞\"></a>数组监听漏洞</h2><p>Vue检测数据的变动是通过Object.defineProperty实现的，所以无法监听数组的添加操作是可以理解的，因为是在构造函数中就已经为所有属性做了这个检测绑定操作。<br>但是官方的原文：由于 JavaScript 的限制， Vue 不能检测以下变动的数组：</p>\n<ul>\n<li>当你利用索引直接设置一个项时，例如： vm.items[indexOfItem] = newValue</li>\n<li>当你修改数组的长度时，例如： vm.items.length = newLength</li>\n</ul>\n<p>Vue.js观察数组变化主要通过以下7个方法（push、pop、shift、unshift、splice、sort、reverse），由于 Vue 会在初始化实例时对属性执行 getter/setter 转化过程，所以属性必须在 data 对象上存在才能让 Vue 转换它，这样才能让它是响应的。</p>\n<p>vue 中是通过对每个键设置getter/setter 来实现响应式的，开发者使用数组，目的往往是遍历，此时电泳getter开销太大了，所以vue不在数组每个键上设置，而是在数组上定义<code>_ob_</code>,并且替代了push等等能够影响原数组的原型方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        orderList: [&#123;</span><br><span class=\"line\">            status: <span class=\"number\">0</span>,</span><br><span class=\"line\">            points: <span class=\"number\">3</span>,</span><br><span class=\"line\">            money: <span class=\"number\">300</span>,</span><br><span class=\"line\">            checked:<span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            status: <span class=\"number\">0</span>,</span><br><span class=\"line\">            points: <span class=\"number\">3</span>,</span><br><span class=\"line\">            money: <span class=\"number\">300</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            status: <span class=\"number\">1</span>,</span><br><span class=\"line\">            points: <span class=\"number\">3</span>,</span><br><span class=\"line\">            money: <span class=\"number\">400</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">created</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.orderList.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">            item.checked = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">handleChoose</span>(<span class=\"params\">item</span>)</span> &#123;</span><br><span class=\"line\">            item.checked = !item.checked;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>上面是检测不到后面两个checked的变化的。</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><ul>\n<li>Vue.set(vue.obj,’e’,0)</li>\n<li>this.obj= Object.assign({}, this.obj, { a: 1, e: 2 })</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        orderList: []</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">created</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> data = [&#123;</span><br><span class=\"line\">            status: <span class=\"number\">0</span>,</span><br><span class=\"line\">            points: <span class=\"number\">3</span>,</span><br><span class=\"line\">            money: <span class=\"number\">300</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            status: <span class=\"number\">0</span>,</span><br><span class=\"line\">            points: <span class=\"number\">3</span>,</span><br><span class=\"line\">            money: <span class=\"number\">300</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            status: <span class=\"number\">1</span>,</span><br><span class=\"line\">            points: <span class=\"number\">3</span>,</span><br><span class=\"line\">            money: <span class=\"number\">400</span></span><br><span class=\"line\">        &#125;];</span><br><span class=\"line\">        data.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">            item.checked = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.orderList = data;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">handleChoose</span>(<span class=\"params\">item</span>)</span> &#123;</span><br><span class=\"line\">            item.checked = !item.checked;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这样写也是没有问题的，浅层次操作数组是没有问题的。</p>\n<h2 id=\"vue中的key-到底有什么用\"><a href=\"#vue中的key-到底有什么用\" class=\"headerlink\" title=\"vue中的key 到底有什么用\"></a>vue中的key 到底有什么用</h2>"},{"title":"angular 基础","date":"2017-09-08T03:30:11.000Z","_content":"\n## angular 与 vue 的区别\n\n* angular2 全部采用 TypeScript 编写，TypeScript （编译工具），它为 JS 带来了类似于 Java 和 C# 的静态类型，\n* vue 的双向绑定基于 ES5 的 getter/setter 来实现的，而 angular 是由自己实现一套模板编译规则们需要进行 “ 脏 ” 检查，而 vue 不需要，因此 vue 在性能上更高效。\n* angular 中，当 watcher 越来越多时会越来越慢，因为作用域的每一次变化\n\n<!--more-->\n\n## angular\n\n* 组件化，数据的单向中心。es6 的语法。angular.js 是通过脏值检测的方式比对数据是否有变更，来决定是否更新视图，最简单的方式就是通过 setInterval() 定时轮询检测数据变动，当然 Google 不会这么 low，angular 只有在指定的事件触发时进入脏值检测，大致如下：\n* DOM 事件，譬如用户输入文本，点击按钮等。( ng-click )\n* XHR 响应事件 ( $http )\n* 浏览器 Location 变更事件 ( $location )\n* Timer 事件 ( $timeout , $interval )\n* 执行 $digest() 或 $apply()\n\n## react\n\n* 速度很快：来源于虚拟 DOM，只有在调用 get 和 set 的时候才会更新 DOM，而且是先更新虚拟 DOM 再更新实际的 DOM，由此更新 DOM 的次数少内容也会少很多。\n* FLUX 架构，react 更关注 UI 的组件化和数据的单向更新。可以直接有 es6 的一些语法。\n* 服务器端渲染，单页应用的缺陷是对于搜索引擎有很大的限制。react 的解决的方案是在服务器上预渲染应用然后发送到服务端，但是爬虫是依赖的服务端的响应而不是 web 的执行。\n* 目标是 UI。\n* 本身是一个 MVC 中的 V。\n\n---\n\n## Angular 为表单内置了 4 种 css 样式\n\n* ng-valid 校验合法状态\n* ng-invalid 校验非法状态\n* ng-pristine 如果要使用原生的 form，需要设置这个值\n* ng-dirty 表单处于脏数据状态\n\n---\n\n## @Component\n\n* @Component 是 Angular 提供的装饰函数，用来描述 Component 的元数据\n* selector 指这个组件在 HTML 模板中的标签是什么\n* template 是嵌入（inline ）的 HTML 模板，如果使用单独文件可用 templateUrl。\n* styles 是嵌入（inline ）的 CSS 样式，如果使用单独文件可用 styleUrls。\n* providers 列出会在此模块中 “ 注入 ” 的服务 (service)- 依赖注入\n* bootstrap 指明哪个组件为引导组件 ( 比如 AppComponent), 当 angular 引导应用时，它会在 Dom 中渲染这个引导性组件，并把结果放进 index.html 的该组件的标签中。\n\n## @NgModule\n\n@NgModule 装饰器用来为模块定义元数据。declarations 列出了应用中的顶层组件，在 module 里面声明的组件在 module 范围内都可以直接使用，也就是说在同一 module 里面的任何 Component 都可以在其模板文件中直接使用声明的组件，就想我们在 AppComponent 的模板末尾加上 <app-login></app-login> 一样。\n\n```javascript\nimport { HttpModule } from '@angular/http'\n\nimport { AppComponent } from './app.component'\nimport { LoginComponent } from './login/login.component'\n\n@NgModule({\n  declarations: [AppComponent, LoginComponent],\n  imports: [BrowserModule, FormsModule, HttpModule],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n\nNgModule 装饰器用来为模块定义元数据。\n\n* declarations 列出了应用中的顶层组件。\n* BrowerModule 提供了运行在浏览器中的应用所需要的关键服务 (service) 和指令 (Directive), 这个模块所在需要在浏览器中跑的应用都应用引用。\n* FormsModule 提供了表单处理和双向绑定等服务和指令。\n* HttpModule 提供 Htpp 请求和响应的服务。\n* providers 列出会在此模版中 “ 注入 ” 的服务（service ）。\n* bootstrap 指明哪个组件为引导性组件，并把结果放到 index.html 的该组件的元素标签中。\n* 静态引导 AppModuleNgFactory platformBrowser().bootstrapModuleFactory(AppModuleNgFactory);\n\n---\n\n## 依赖注入\n\n如果不使用依赖注入，则需要 // 声明成员变量，其类型为 service 里面自定义的方法\n\n    ```javascript\n    //第一种：\n    service:AuthService;\n\n    constructor(){\n        this.service = new AuthService();//在构造中初始化service\n    }\n    //第二种：\n\n    providers: [\n    {provide: 'auth',  useClass: AuthService}\n    ]\n    ```\n\n* 第一种：由于实例化是在组件中进行的，意味着我们如果更改 service 的构造函数的话，组件也需要更改。如果使用依赖注入的话，就不需要显示声明成员变量 service。当 import 相关的服务后，这是 import 将类型引入进来，而 provider 里面会配置这个类型的实例。\n* provider 是一个数组，这里配置将要注入到其他组件中的服务配置。provide 定义了这个服务的名称，有需要注入这个服务的就引用这个名称就好。useClass 指明这个名称对应的服务是一个类。这样定义之后就能在任意组件中注入这个依赖了。\n\n```javascript\n       onstructor(@Inject('auth') private service) {\n   }\n```\n\n* @inject('auth'), 这个修饰符的意思是请到系统配置中找到名称为 auth 的那个依赖注入到我修饰的变量中。\n\n## 双向数据绑定\n\n* [(ngModel)]=\"username\" ,[] 的作用是将等号后面当成表达式来解析而不是当成字符串，如果去掉 [] 就是将 ngModel 赋值成 username 这个字符串。[] 的含义是单向绑定，就是将组件中给 model 赋的值会设置到 HTML 的 input 控件中。[()]是双向绑定。ngModel 是 FormModule 中提供的指令，它负责从 Domain Model 中创建一个 FormControl 的实例，并将这个实例和表单控件绑定 .\n* @Input() 是输入型绑定的修饰符，用于从数据从父组件传到子组件。\n\n---\n\n## 表单验证\n\n```html\n    <div>\n        <input required type=\"text\"\n            [(ngModel)]=\"username\"\n            #usernameRef=\"ngModel\"\n            />\n            {{usernameRef.valid}}\n        <input required type=\"password\"\n            [(ngModel)]=\"password\"\n            #passwordRef=\"ngModel\"\n            />\n            {{passwordRef.valid}}\n        <button (click)=\"onClick()\">Login</button>\n        </div>\n        <div>\n        <input #usernameRef type=\"text\">\n        <button (click)=\"onClick(usernameRef.value)\">Login</button>\n        </div>\n```\n\n1. 通过 #usernameRef = 'ngModel' 重新加入了引用，这个引用指向了 ngModel, 这个引用是要在模板中使用的所以加入这个引用。\n2. 在输入框中加入 #usernameRef，这个叫引用，引用的是 input 对象，如果想要传递 input 的值，可以用 usernameRef.value.\n\n```html\n    <div>\n        <input type=\"text\"\n            [(ngModel)]=\"username\"\n            #usernameRef=\"ngModel\"\n            required\n            minlength=\"3\"\n            />\n            {{ usernameRef.errors | json }}\n            <div *ngIf=\"usernameRef.errors?.required\">this is required</div>\n            <div *ngIf=\"usernameRef.errors?.minlength\">should be at least 3 charactors</div>\n        <input required type=\"password\"\n            [(ngModel)]=\"password\"\n            #passwordRef=\"ngModel\"\n            />\n            <div *ngIf=\"passwordRef.errors?.required\">this is required</div>\n        <button (click)=\"onClick()\">Login</button>\n    </div>\n```\n\n\\*ngIf = \"usernameRef.error?.required\" 的意思是当 usernameRef.error.required 为 true 的时候显示 div 标签\n\n```html\n    <div>\n        <form #formRef=\"ngForm\" (ngSubmit)=\"onSubmit(formRef.value)\">\n        <fieldset ngModelGroup=\"login\">\n            <input type=\"text\"\n            name=\"username\"\n            [(ngModel)]=\"username\"\n            #usernameRef=\"ngModel\"\n            required\n            minlength=\"3\"\n            />\n            <div *ngIf=\"usernameRef.errors?.required\">this is required</div>\n            <div *ngIf=\"usernameRef.errors?.minlength\">should be at least 3 charactors</div>\n            <input type=\"password\"\n            name=\"password\"\n            [(ngModel)]=\"password\"\n            #passwordRef=\"ngModel\"\n            required\n            />\n            <div *ngIf=\"passwordRef.errors?.required\">this is required</div>\n            <button (click)=\"onClick()\">Login</button>\n            <button type=\"submit\">Submit</button>\n            </fieldset>\n        </form>\n        </div>\n```\n\n* ngModel 会注册成 Form 的子控件，注册控件需要 name ，这个要求我们显示的指定对应控件的 name ，因此需要为 input 增加 name 属性，在 formREF.value 中包含了表单所有填写项的值\n\n* 有时在表单相中表单项过多时，就使用 HTML 中的 fieldset 标签用来处理。<fieldset ngModelGroup=\"login\"> 意味着我们对于 fieldset 之内的数据都分组到了 login 对象中。\n\n---\n\n## 路由\n\n路径配置的顺序是非常重要的，angular2 使用 “ 先匹配优先 ” 的原则。\n\n* redirectTo 重定向\n  ## service\n\n```javascript\n    //post /todos\n    addTodo(desc:string):Promise<Todo>{\n        let todo={\n            id:UUID.UUID(),\n            desc:desc,\n            completed:false\n        };\n        return this.http\n            .post(this.api_url,JSON.stringfy(todo),{header:this.headers})\n            .toPromise()\n            .then(res=>res.json().data as Todo)\n            .catch(this.handleError);\n    }\n```\n\n---\n\n````javascript\n    inputValue: string = '';\n    @Input() placeholder: string = 'What needs to be done?';\n    @Input() delay: number = 300;\n\n    //detect the input value and output this to parent\n    @Output() textChanges = new EventEmitter<string>();\n    //detect the enter keyup event and output this to parent\n    @Output() onEnterUp = new EventEmitter<boolean>();\n    ```\n- placeholder和delay作为2个输入型变量，这样在引入标签中就可以设置这两个属性了。\n- 由@Output修饰的onTextChanges 和 onEnterUp，这两个变量都定义了EventEmitter(事件发射器)。\n- export const routing = RouterModule.forChild(routes);，用的是forChild而不是forRoot,因为forRoot只能用于根目录，所有非跟模块的其他模块都只能用forChild.\n\n\n--------------------------\n## 验证用户帐户的流程\n- UserService:用于通过用户名查找用户并返回用户\n- AuthService:用于认证用户，其中需要利用UserService 的方法。\n- AuthGuard:路由拦截器，用于拦截到路由后通过Authservice来知道此用户是否有权限访问路由。根据结果导航到不同路径。\n- @SkipSelf装饰器意味着在当前注入器的所有祖先注入器中寻找，如果注入器找不到想要的提供商时就会抛出一个错误。但是@Optional装饰器表示找不到该服务则会返回null,\nparentModule参数也就被赋值为空。\n\n----------------\n## 路由守卫\n应用场景如下:\n该用户可能无权导航到目标组件。导航前需要用户先登录。\n\n路由器支持多种守卫：\n\n- 用CanActivate来处理导航到某路由的情况。\n- 用CanActivateChild处理导航到子路由的情况。\n- 用CanDeactivate来处理从当前路由离开的情况。\n- 用Resolve在路由激活之前获取路由数据。\n- 用CanLoad来处理异步导航到某特性模块的情况。\n\n----------------------\n## 模块优化\n 各个模块定义，发现我们不断地重复引入了CommonModule、FormsModule、MdlModule,这些组件常用，就可以建立一个ShareModule(src\\app\\shared\\shared.module.ts)\n\n```javascript\n    import { NgModule } from '@angular/core';\n    import { CommonModule } from '@angular/common';\n    import { FormsModule } from '@angular/forms';\n    import { MdlModule } from 'angular2-mdl';\n\n    @NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        MdlModule\n    ],\n    exports: [\n        CommonModule,\n        FormsModule,\n        MdlModule\n    ]\n    })\n    export class SharedModule { }\n````\n\n这个模块的作用是将常用的模块打包起来，将常用的模块导入又导出，这样在其他模块中值需引入这个模块即可\n","source":"_posts/angular基础.md","raw":"---\ntitle: angular 基础\ndate: 2017-09-08 11:30:11\ncategories: angular\n---\n\n## angular 与 vue 的区别\n\n* angular2 全部采用 TypeScript 编写，TypeScript （编译工具），它为 JS 带来了类似于 Java 和 C# 的静态类型，\n* vue 的双向绑定基于 ES5 的 getter/setter 来实现的，而 angular 是由自己实现一套模板编译规则们需要进行 “ 脏 ” 检查，而 vue 不需要，因此 vue 在性能上更高效。\n* angular 中，当 watcher 越来越多时会越来越慢，因为作用域的每一次变化\n\n<!--more-->\n\n## angular\n\n* 组件化，数据的单向中心。es6 的语法。angular.js 是通过脏值检测的方式比对数据是否有变更，来决定是否更新视图，最简单的方式就是通过 setInterval() 定时轮询检测数据变动，当然 Google 不会这么 low，angular 只有在指定的事件触发时进入脏值检测，大致如下：\n* DOM 事件，譬如用户输入文本，点击按钮等。( ng-click )\n* XHR 响应事件 ( $http )\n* 浏览器 Location 变更事件 ( $location )\n* Timer 事件 ( $timeout , $interval )\n* 执行 $digest() 或 $apply()\n\n## react\n\n* 速度很快：来源于虚拟 DOM，只有在调用 get 和 set 的时候才会更新 DOM，而且是先更新虚拟 DOM 再更新实际的 DOM，由此更新 DOM 的次数少内容也会少很多。\n* FLUX 架构，react 更关注 UI 的组件化和数据的单向更新。可以直接有 es6 的一些语法。\n* 服务器端渲染，单页应用的缺陷是对于搜索引擎有很大的限制。react 的解决的方案是在服务器上预渲染应用然后发送到服务端，但是爬虫是依赖的服务端的响应而不是 web 的执行。\n* 目标是 UI。\n* 本身是一个 MVC 中的 V。\n\n---\n\n## Angular 为表单内置了 4 种 css 样式\n\n* ng-valid 校验合法状态\n* ng-invalid 校验非法状态\n* ng-pristine 如果要使用原生的 form，需要设置这个值\n* ng-dirty 表单处于脏数据状态\n\n---\n\n## @Component\n\n* @Component 是 Angular 提供的装饰函数，用来描述 Component 的元数据\n* selector 指这个组件在 HTML 模板中的标签是什么\n* template 是嵌入（inline ）的 HTML 模板，如果使用单独文件可用 templateUrl。\n* styles 是嵌入（inline ）的 CSS 样式，如果使用单独文件可用 styleUrls。\n* providers 列出会在此模块中 “ 注入 ” 的服务 (service)- 依赖注入\n* bootstrap 指明哪个组件为引导组件 ( 比如 AppComponent), 当 angular 引导应用时，它会在 Dom 中渲染这个引导性组件，并把结果放进 index.html 的该组件的标签中。\n\n## @NgModule\n\n@NgModule 装饰器用来为模块定义元数据。declarations 列出了应用中的顶层组件，在 module 里面声明的组件在 module 范围内都可以直接使用，也就是说在同一 module 里面的任何 Component 都可以在其模板文件中直接使用声明的组件，就想我们在 AppComponent 的模板末尾加上 <app-login></app-login> 一样。\n\n```javascript\nimport { HttpModule } from '@angular/http'\n\nimport { AppComponent } from './app.component'\nimport { LoginComponent } from './login/login.component'\n\n@NgModule({\n  declarations: [AppComponent, LoginComponent],\n  imports: [BrowserModule, FormsModule, HttpModule],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n\nNgModule 装饰器用来为模块定义元数据。\n\n* declarations 列出了应用中的顶层组件。\n* BrowerModule 提供了运行在浏览器中的应用所需要的关键服务 (service) 和指令 (Directive), 这个模块所在需要在浏览器中跑的应用都应用引用。\n* FormsModule 提供了表单处理和双向绑定等服务和指令。\n* HttpModule 提供 Htpp 请求和响应的服务。\n* providers 列出会在此模版中 “ 注入 ” 的服务（service ）。\n* bootstrap 指明哪个组件为引导性组件，并把结果放到 index.html 的该组件的元素标签中。\n* 静态引导 AppModuleNgFactory platformBrowser().bootstrapModuleFactory(AppModuleNgFactory);\n\n---\n\n## 依赖注入\n\n如果不使用依赖注入，则需要 // 声明成员变量，其类型为 service 里面自定义的方法\n\n    ```javascript\n    //第一种：\n    service:AuthService;\n\n    constructor(){\n        this.service = new AuthService();//在构造中初始化service\n    }\n    //第二种：\n\n    providers: [\n    {provide: 'auth',  useClass: AuthService}\n    ]\n    ```\n\n* 第一种：由于实例化是在组件中进行的，意味着我们如果更改 service 的构造函数的话，组件也需要更改。如果使用依赖注入的话，就不需要显示声明成员变量 service。当 import 相关的服务后，这是 import 将类型引入进来，而 provider 里面会配置这个类型的实例。\n* provider 是一个数组，这里配置将要注入到其他组件中的服务配置。provide 定义了这个服务的名称，有需要注入这个服务的就引用这个名称就好。useClass 指明这个名称对应的服务是一个类。这样定义之后就能在任意组件中注入这个依赖了。\n\n```javascript\n       onstructor(@Inject('auth') private service) {\n   }\n```\n\n* @inject('auth'), 这个修饰符的意思是请到系统配置中找到名称为 auth 的那个依赖注入到我修饰的变量中。\n\n## 双向数据绑定\n\n* [(ngModel)]=\"username\" ,[] 的作用是将等号后面当成表达式来解析而不是当成字符串，如果去掉 [] 就是将 ngModel 赋值成 username 这个字符串。[] 的含义是单向绑定，就是将组件中给 model 赋的值会设置到 HTML 的 input 控件中。[()]是双向绑定。ngModel 是 FormModule 中提供的指令，它负责从 Domain Model 中创建一个 FormControl 的实例，并将这个实例和表单控件绑定 .\n* @Input() 是输入型绑定的修饰符，用于从数据从父组件传到子组件。\n\n---\n\n## 表单验证\n\n```html\n    <div>\n        <input required type=\"text\"\n            [(ngModel)]=\"username\"\n            #usernameRef=\"ngModel\"\n            />\n            {{usernameRef.valid}}\n        <input required type=\"password\"\n            [(ngModel)]=\"password\"\n            #passwordRef=\"ngModel\"\n            />\n            {{passwordRef.valid}}\n        <button (click)=\"onClick()\">Login</button>\n        </div>\n        <div>\n        <input #usernameRef type=\"text\">\n        <button (click)=\"onClick(usernameRef.value)\">Login</button>\n        </div>\n```\n\n1. 通过 #usernameRef = 'ngModel' 重新加入了引用，这个引用指向了 ngModel, 这个引用是要在模板中使用的所以加入这个引用。\n2. 在输入框中加入 #usernameRef，这个叫引用，引用的是 input 对象，如果想要传递 input 的值，可以用 usernameRef.value.\n\n```html\n    <div>\n        <input type=\"text\"\n            [(ngModel)]=\"username\"\n            #usernameRef=\"ngModel\"\n            required\n            minlength=\"3\"\n            />\n            {{ usernameRef.errors | json }}\n            <div *ngIf=\"usernameRef.errors?.required\">this is required</div>\n            <div *ngIf=\"usernameRef.errors?.minlength\">should be at least 3 charactors</div>\n        <input required type=\"password\"\n            [(ngModel)]=\"password\"\n            #passwordRef=\"ngModel\"\n            />\n            <div *ngIf=\"passwordRef.errors?.required\">this is required</div>\n        <button (click)=\"onClick()\">Login</button>\n    </div>\n```\n\n\\*ngIf = \"usernameRef.error?.required\" 的意思是当 usernameRef.error.required 为 true 的时候显示 div 标签\n\n```html\n    <div>\n        <form #formRef=\"ngForm\" (ngSubmit)=\"onSubmit(formRef.value)\">\n        <fieldset ngModelGroup=\"login\">\n            <input type=\"text\"\n            name=\"username\"\n            [(ngModel)]=\"username\"\n            #usernameRef=\"ngModel\"\n            required\n            minlength=\"3\"\n            />\n            <div *ngIf=\"usernameRef.errors?.required\">this is required</div>\n            <div *ngIf=\"usernameRef.errors?.minlength\">should be at least 3 charactors</div>\n            <input type=\"password\"\n            name=\"password\"\n            [(ngModel)]=\"password\"\n            #passwordRef=\"ngModel\"\n            required\n            />\n            <div *ngIf=\"passwordRef.errors?.required\">this is required</div>\n            <button (click)=\"onClick()\">Login</button>\n            <button type=\"submit\">Submit</button>\n            </fieldset>\n        </form>\n        </div>\n```\n\n* ngModel 会注册成 Form 的子控件，注册控件需要 name ，这个要求我们显示的指定对应控件的 name ，因此需要为 input 增加 name 属性，在 formREF.value 中包含了表单所有填写项的值\n\n* 有时在表单相中表单项过多时，就使用 HTML 中的 fieldset 标签用来处理。<fieldset ngModelGroup=\"login\"> 意味着我们对于 fieldset 之内的数据都分组到了 login 对象中。\n\n---\n\n## 路由\n\n路径配置的顺序是非常重要的，angular2 使用 “ 先匹配优先 ” 的原则。\n\n* redirectTo 重定向\n  ## service\n\n```javascript\n    //post /todos\n    addTodo(desc:string):Promise<Todo>{\n        let todo={\n            id:UUID.UUID(),\n            desc:desc,\n            completed:false\n        };\n        return this.http\n            .post(this.api_url,JSON.stringfy(todo),{header:this.headers})\n            .toPromise()\n            .then(res=>res.json().data as Todo)\n            .catch(this.handleError);\n    }\n```\n\n---\n\n````javascript\n    inputValue: string = '';\n    @Input() placeholder: string = 'What needs to be done?';\n    @Input() delay: number = 300;\n\n    //detect the input value and output this to parent\n    @Output() textChanges = new EventEmitter<string>();\n    //detect the enter keyup event and output this to parent\n    @Output() onEnterUp = new EventEmitter<boolean>();\n    ```\n- placeholder和delay作为2个输入型变量，这样在引入标签中就可以设置这两个属性了。\n- 由@Output修饰的onTextChanges 和 onEnterUp，这两个变量都定义了EventEmitter(事件发射器)。\n- export const routing = RouterModule.forChild(routes);，用的是forChild而不是forRoot,因为forRoot只能用于根目录，所有非跟模块的其他模块都只能用forChild.\n\n\n--------------------------\n## 验证用户帐户的流程\n- UserService:用于通过用户名查找用户并返回用户\n- AuthService:用于认证用户，其中需要利用UserService 的方法。\n- AuthGuard:路由拦截器，用于拦截到路由后通过Authservice来知道此用户是否有权限访问路由。根据结果导航到不同路径。\n- @SkipSelf装饰器意味着在当前注入器的所有祖先注入器中寻找，如果注入器找不到想要的提供商时就会抛出一个错误。但是@Optional装饰器表示找不到该服务则会返回null,\nparentModule参数也就被赋值为空。\n\n----------------\n## 路由守卫\n应用场景如下:\n该用户可能无权导航到目标组件。导航前需要用户先登录。\n\n路由器支持多种守卫：\n\n- 用CanActivate来处理导航到某路由的情况。\n- 用CanActivateChild处理导航到子路由的情况。\n- 用CanDeactivate来处理从当前路由离开的情况。\n- 用Resolve在路由激活之前获取路由数据。\n- 用CanLoad来处理异步导航到某特性模块的情况。\n\n----------------------\n## 模块优化\n 各个模块定义，发现我们不断地重复引入了CommonModule、FormsModule、MdlModule,这些组件常用，就可以建立一个ShareModule(src\\app\\shared\\shared.module.ts)\n\n```javascript\n    import { NgModule } from '@angular/core';\n    import { CommonModule } from '@angular/common';\n    import { FormsModule } from '@angular/forms';\n    import { MdlModule } from 'angular2-mdl';\n\n    @NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        MdlModule\n    ],\n    exports: [\n        CommonModule,\n        FormsModule,\n        MdlModule\n    ]\n    })\n    export class SharedModule { }\n````\n\n这个模块的作用是将常用的模块打包起来，将常用的模块导入又导出，这样在其他模块中值需引入这个模块即可\n","slug":"angular基础","published":1,"updated":"2021-03-01T03:47:26.025Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmejaerz000xxcvrgpiz8xr5","content":"<h2 id=\"angular-与-vue-的区别\"><a href=\"#angular-与-vue-的区别\" class=\"headerlink\" title=\"angular 与 vue 的区别\"></a>angular 与 vue 的区别</h2><ul>\n<li>angular2 全部采用 TypeScript 编写，TypeScript （编译工具），它为 JS 带来了类似于 Java 和 C# 的静态类型，</li>\n<li>vue 的双向绑定基于 ES5 的 getter/setter 来实现的，而 angular 是由自己实现一套模板编译规则们需要进行 “ 脏 ” 检查，而 vue 不需要，因此 vue 在性能上更高效。</li>\n<li>angular 中，当 watcher 越来越多时会越来越慢，因为作用域的每一次变化</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"angular\"><a href=\"#angular\" class=\"headerlink\" title=\"angular\"></a>angular</h2><ul>\n<li>组件化，数据的单向中心。es6 的语法。angular.js 是通过脏值检测的方式比对数据是否有变更，来决定是否更新视图，最简单的方式就是通过 setInterval() 定时轮询检测数据变动，当然 Google 不会这么 low，angular 只有在指定的事件触发时进入脏值检测，大致如下：</li>\n<li>DOM 事件，譬如用户输入文本，点击按钮等。( ng-click )</li>\n<li>XHR 响应事件 ( $http )</li>\n<li>浏览器 Location 变更事件 ( $location )</li>\n<li>Timer 事件 ( $timeout , $interval )</li>\n<li>执行 $digest() 或 $apply()</li>\n</ul>\n<h2 id=\"react\"><a href=\"#react\" class=\"headerlink\" title=\"react\"></a>react</h2><ul>\n<li>速度很快：来源于虚拟 DOM，只有在调用 get 和 set 的时候才会更新 DOM，而且是先更新虚拟 DOM 再更新实际的 DOM，由此更新 DOM 的次数少内容也会少很多。</li>\n<li>FLUX 架构，react 更关注 UI 的组件化和数据的单向更新。可以直接有 es6 的一些语法。</li>\n<li>服务器端渲染，单页应用的缺陷是对于搜索引擎有很大的限制。react 的解决的方案是在服务器上预渲染应用然后发送到服务端，但是爬虫是依赖的服务端的响应而不是 web 的执行。</li>\n<li>目标是 UI。</li>\n<li>本身是一个 MVC 中的 V。</li>\n</ul>\n<hr>\n<h2 id=\"Angular-为表单内置了-4-种-css-样式\"><a href=\"#Angular-为表单内置了-4-种-css-样式\" class=\"headerlink\" title=\"Angular 为表单内置了 4 种 css 样式\"></a>Angular 为表单内置了 4 种 css 样式</h2><ul>\n<li>ng-valid 校验合法状态</li>\n<li>ng-invalid 校验非法状态</li>\n<li>ng-pristine 如果要使用原生的 form，需要设置这个值</li>\n<li>ng-dirty 表单处于脏数据状态</li>\n</ul>\n<hr>\n<h2 id=\"Component\"><a href=\"#Component\" class=\"headerlink\" title=\"@Component\"></a>@Component</h2><ul>\n<li>@Component 是 Angular 提供的装饰函数，用来描述 Component 的元数据</li>\n<li>selector 指这个组件在 HTML 模板中的标签是什么</li>\n<li>template 是嵌入（inline ）的 HTML 模板，如果使用单独文件可用 templateUrl。</li>\n<li>styles 是嵌入（inline ）的 CSS 样式，如果使用单独文件可用 styleUrls。</li>\n<li>providers 列出会在此模块中 “ 注入 ” 的服务 (service)- 依赖注入</li>\n<li>bootstrap 指明哪个组件为引导组件 ( 比如 AppComponent), 当 angular 引导应用时，它会在 Dom 中渲染这个引导性组件，并把结果放进 index.html 的该组件的标签中。</li>\n</ul>\n<h2 id=\"NgModule\"><a href=\"#NgModule\" class=\"headerlink\" title=\"@NgModule\"></a>@NgModule</h2><p>@NgModule 装饰器用来为模块定义元数据。declarations 列出了应用中的顶层组件，在 module 里面声明的组件在 module 范围内都可以直接使用，也就是说在同一 module 里面的任何 Component 都可以在其模板文件中直接使用声明的组件，就想我们在 AppComponent 的模板末尾加上 <app-login></app-login> 一样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; HttpModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/http&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app.component&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; LoginComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./login/login.component&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">@NgModule(&#123;</span><br><span class=\"line\">  declarations: [AppComponent, LoginComponent],</span><br><span class=\"line\">  imports: [BrowserModule, FormsModule, HttpModule],</span><br><span class=\"line\">  providers: [],</span><br><span class=\"line\">  bootstrap: [AppComponent]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>NgModule 装饰器用来为模块定义元数据。</p>\n<ul>\n<li>declarations 列出了应用中的顶层组件。</li>\n<li>BrowerModule 提供了运行在浏览器中的应用所需要的关键服务 (service) 和指令 (Directive), 这个模块所在需要在浏览器中跑的应用都应用引用。</li>\n<li>FormsModule 提供了表单处理和双向绑定等服务和指令。</li>\n<li>HttpModule 提供 Htpp 请求和响应的服务。</li>\n<li>providers 列出会在此模版中 “ 注入 ” 的服务（service ）。</li>\n<li>bootstrap 指明哪个组件为引导性组件，并把结果放到 index.html 的该组件的元素标签中。</li>\n<li>静态引导 AppModuleNgFactory platformBrowser().bootstrapModuleFactory(AppModuleNgFactory);</li>\n</ul>\n<hr>\n<h2 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a>依赖注入</h2><p>如果不使用依赖注入，则需要 // 声明成员变量，其类型为 service 里面自定义的方法</p>\n<pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第一种：</span></span><br><span class=\"line\">service:AuthService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.service = <span class=\"keyword\">new</span> AuthService();<span class=\"comment\">//在构造中初始化service</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//第二种：</span></span><br><span class=\"line\"></span><br><span class=\"line\">providers: [</span><br><span class=\"line\">&#123;<span class=\"attr\">provide</span>: <span class=\"string\">&#x27;auth&#x27;</span>,  <span class=\"attr\">useClass</span>: AuthService&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n</code></pre>\n<ul>\n<li>第一种：由于实例化是在组件中进行的，意味着我们如果更改 service 的构造函数的话，组件也需要更改。如果使用依赖注入的话，就不需要显示声明成员变量 service。当 import 相关的服务后，这是 import 将类型引入进来，而 provider 里面会配置这个类型的实例。</li>\n<li>provider 是一个数组，这里配置将要注入到其他组件中的服务配置。provide 定义了这个服务的名称，有需要注入这个服务的就引用这个名称就好。useClass 指明这个名称对应的服务是一个类。这样定义之后就能在任意组件中注入这个依赖了。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"title\">onstructor</span>(<span class=\"params\">@Inject(<span class=\"string\">&#x27;auth&#x27;</span>) private service</span>)</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>@inject(‘auth’), 这个修饰符的意思是请到系统配置中找到名称为 auth 的那个依赖注入到我修饰的变量中。</li>\n</ul>\n<h2 id=\"双向数据绑定\"><a href=\"#双向数据绑定\" class=\"headerlink\" title=\"双向数据绑定\"></a>双向数据绑定</h2><ul>\n<li>[(ngModel)]=”username” ,[] 的作用是将等号后面当成表达式来解析而不是当成字符串，如果去掉 [] 就是将 ngModel 赋值成 username 这个字符串。[] 的含义是单向绑定，就是将组件中给 model 赋的值会设置到 HTML 的 input 控件中。[()]是双向绑定。ngModel 是 FormModule 中提供的指令，它负责从 Domain Model 中创建一个 FormControl 的实例，并将这个实例和表单控件绑定 .</li>\n<li>@Input() 是输入型绑定的修饰符，用于从数据从父组件传到子组件。</li>\n</ul>\n<hr>\n<h2 id=\"表单验证\"><a href=\"#表单验证\" class=\"headerlink\" title=\"表单验证\"></a>表单验证</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">required</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;username&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        #<span class=\"attr\">usernameRef</span>=<span class=\"string\">&quot;ngModel&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        /&gt;</span></span><br><span class=\"line\">        &#123;&#123;usernameRef.valid&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">required</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;password&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        #<span class=\"attr\">passwordRef</span>=<span class=\"string\">&quot;ngModel&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        /&gt;</span></span><br><span class=\"line\">        &#123;&#123;passwordRef.valid&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onClick()&quot;</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> #<span class=\"attr\">usernameRef</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onClick(usernameRef.value)&quot;</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>通过 #usernameRef = ‘ngModel’ 重新加入了引用，这个引用指向了 ngModel, 这个引用是要在模板中使用的所以加入这个引用。</li>\n<li>在输入框中加入 #usernameRef，这个叫引用，引用的是 input 对象，如果想要传递 input 的值，可以用 usernameRef.value.</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;username&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        #<span class=\"attr\">usernameRef</span>=<span class=\"string\">&quot;ngModel&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">required</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">minlength</span>=<span class=\"string\">&quot;3&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        /&gt;</span></span><br><span class=\"line\">        &#123;&#123; usernameRef.errors | json &#125;&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;usernameRef.errors?.required&quot;</span>&gt;</span>this is required<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;usernameRef.errors?.minlength&quot;</span>&gt;</span>should be at least 3 charactors<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">required</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;password&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        #<span class=\"attr\">passwordRef</span>=<span class=\"string\">&quot;ngModel&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;passwordRef.errors?.required&quot;</span>&gt;</span>this is required<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onClick()&quot;</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>*ngIf = “usernameRef.error?.required” 的意思是当 usernameRef.error.required 为 true 的时候显示 div 标签</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> #<span class=\"attr\">formRef</span>=<span class=\"string\">&quot;ngForm&quot;</span> (<span class=\"attr\">ngSubmit</span>)=<span class=\"string\">&quot;onSubmit(formRef.value)&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fieldset</span> <span class=\"attr\">ngModelGroup</span>=<span class=\"string\">&quot;login&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;username&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        #<span class=\"attr\">usernameRef</span>=<span class=\"string\">&quot;ngModel&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">required</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">minlength</span>=<span class=\"string\">&quot;3&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;usernameRef.errors?.required&quot;</span>&gt;</span>this is required<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;usernameRef.errors?.minlength&quot;</span>&gt;</span>should be at least 3 charactors<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;password&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        #<span class=\"attr\">passwordRef</span>=<span class=\"string\">&quot;ngModel&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">required</span></span></span><br><span class=\"line\"><span class=\"tag\">        /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;passwordRef.errors?.required&quot;</span>&gt;</span>this is required<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onClick()&quot;</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>ngModel 会注册成 Form 的子控件，注册控件需要 name ，这个要求我们显示的指定对应控件的 name ，因此需要为 input 增加 name 属性，在 formREF.value 中包含了表单所有填写项的值</p>\n</li>\n<li><p>有时在表单相中表单项过多时，就使用 HTML 中的 fieldset 标签用来处理。<fieldset ngModelGroup=\"login\"> 意味着我们对于 fieldset 之内的数据都分组到了 login 对象中。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><p>路径配置的顺序是非常重要的，angular2 使用 “ 先匹配优先 ” 的原则。</p>\n<ul>\n<li>redirectTo 重定向<h2 id=\"service\"><a href=\"#service\" class=\"headerlink\" title=\"service\"></a>service</h2></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//post /todos</span></span><br><span class=\"line\">addTodo(desc:string):<span class=\"built_in\">Promise</span>&lt;Todo&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> todo=&#123;</span><br><span class=\"line\">        id:UUID.UUID(),</span><br><span class=\"line\">        desc:desc,</span><br><span class=\"line\">        completed:<span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.http</span><br><span class=\"line\">        .post(<span class=\"built_in\">this</span>.api_url,<span class=\"built_in\">JSON</span>.stringfy(todo),&#123;<span class=\"attr\">header</span>:<span class=\"built_in\">this</span>.headers&#125;)</span><br><span class=\"line\">        .toPromise()</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json().data <span class=\"keyword\">as</span> Todo)</span><br><span class=\"line\">        .catch(<span class=\"built_in\">this</span>.handleError);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    inputValue: string = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    @Input() placeholder: string = <span class=\"string\">&#x27;What needs to be done?&#x27;</span>;</span><br><span class=\"line\">    @Input() delay: number = <span class=\"number\">300</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//detect the input value and output this to parent</span></span><br><span class=\"line\">    @Output() textChanges = <span class=\"keyword\">new</span> EventEmitter&lt;string&gt;();</span><br><span class=\"line\">    <span class=\"comment\">//detect the enter keyup event and output this to parent</span></span><br><span class=\"line\">    @Output() onEnterUp = <span class=\"keyword\">new</span> EventEmitter&lt;boolean&gt;();</span><br><span class=\"line\">    <span class=\"string\">``</span><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">- placeholder和delay作为2个输入型变量，这样在引入标签中就可以设置这两个属性了。</span></span><br><span class=\"line\"><span class=\"string\">- 由@Output修饰的onTextChanges 和 onEnterUp，这两个变量都定义了EventEmitter(事件发射器)。</span></span><br><span class=\"line\"><span class=\"string\">- export const routing = RouterModule.forChild(routes);，用的是forChild而不是forRoot,因为forRoot只能用于根目录，所有非跟模块的其他模块都只能用forChild.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">--------------------------</span></span><br><span class=\"line\"><span class=\"string\">## 验证用户帐户的流程</span></span><br><span class=\"line\"><span class=\"string\">- UserService:用于通过用户名查找用户并返回用户</span></span><br><span class=\"line\"><span class=\"string\">- AuthService:用于认证用户，其中需要利用UserService 的方法。</span></span><br><span class=\"line\"><span class=\"string\">- AuthGuard:路由拦截器，用于拦截到路由后通过Authservice来知道此用户是否有权限访问路由。根据结果导航到不同路径。</span></span><br><span class=\"line\"><span class=\"string\">- @SkipSelf装饰器意味着在当前注入器的所有祖先注入器中寻找，如果注入器找不到想要的提供商时就会抛出一个错误。但是@Optional装饰器表示找不到该服务则会返回null,</span></span><br><span class=\"line\"><span class=\"string\">parentModule参数也就被赋值为空。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">----------------</span></span><br><span class=\"line\"><span class=\"string\">## 路由守卫</span></span><br><span class=\"line\"><span class=\"string\">应用场景如下:</span></span><br><span class=\"line\"><span class=\"string\">该用户可能无权导航到目标组件。导航前需要用户先登录。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">路由器支持多种守卫：</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">- 用CanActivate来处理导航到某路由的情况。</span></span><br><span class=\"line\"><span class=\"string\">- 用CanActivateChild处理导航到子路由的情况。</span></span><br><span class=\"line\"><span class=\"string\">- 用CanDeactivate来处理从当前路由离开的情况。</span></span><br><span class=\"line\"><span class=\"string\">- 用Resolve在路由激活之前获取路由数据。</span></span><br><span class=\"line\"><span class=\"string\">- 用CanLoad来处理异步导航到某特性模块的情况。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">----------------------</span></span><br><span class=\"line\"><span class=\"string\">## 模块优化</span></span><br><span class=\"line\"><span class=\"string\"> 各个模块定义，发现我们不断地重复引入了CommonModule、FormsModule、MdlModule,这些组件常用，就可以建立一个ShareModule(src\\app\\shared\\shared.module.ts)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>javascript</span><br><span class=\"line\">    <span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">import</span> &#123; CommonModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">import</span> &#123; FormsModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">import</span> &#123; MdlModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;angular2-mdl&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    @NgModule(&#123;</span><br><span class=\"line\">    imports: [</span><br><span class=\"line\">        CommonModule,</span><br><span class=\"line\">        FormsModule,</span><br><span class=\"line\">        MdlModule</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"built_in\">exports</span>: [</span><br><span class=\"line\">        CommonModule,</span><br><span class=\"line\">        FormsModule,</span><br><span class=\"line\">        MdlModule</span><br><span class=\"line\">    ]</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SharedModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个模块的作用是将常用的模块打包起来，将常用的模块导入又导出，这样在其他模块中值需引入这个模块即可</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"angular-与-vue-的区别\"><a href=\"#angular-与-vue-的区别\" class=\"headerlink\" title=\"angular 与 vue 的区别\"></a>angular 与 vue 的区别</h2><ul>\n<li>angular2 全部采用 TypeScript 编写，TypeScript （编译工具），它为 JS 带来了类似于 Java 和 C# 的静态类型，</li>\n<li>vue 的双向绑定基于 ES5 的 getter/setter 来实现的，而 angular 是由自己实现一套模板编译规则们需要进行 “ 脏 ” 检查，而 vue 不需要，因此 vue 在性能上更高效。</li>\n<li>angular 中，当 watcher 越来越多时会越来越慢，因为作用域的每一次变化</li>\n</ul>","more":"<h2 id=\"angular\"><a href=\"#angular\" class=\"headerlink\" title=\"angular\"></a>angular</h2><ul>\n<li>组件化，数据的单向中心。es6 的语法。angular.js 是通过脏值检测的方式比对数据是否有变更，来决定是否更新视图，最简单的方式就是通过 setInterval() 定时轮询检测数据变动，当然 Google 不会这么 low，angular 只有在指定的事件触发时进入脏值检测，大致如下：</li>\n<li>DOM 事件，譬如用户输入文本，点击按钮等。( ng-click )</li>\n<li>XHR 响应事件 ( $http )</li>\n<li>浏览器 Location 变更事件 ( $location )</li>\n<li>Timer 事件 ( $timeout , $interval )</li>\n<li>执行 $digest() 或 $apply()</li>\n</ul>\n<h2 id=\"react\"><a href=\"#react\" class=\"headerlink\" title=\"react\"></a>react</h2><ul>\n<li>速度很快：来源于虚拟 DOM，只有在调用 get 和 set 的时候才会更新 DOM，而且是先更新虚拟 DOM 再更新实际的 DOM，由此更新 DOM 的次数少内容也会少很多。</li>\n<li>FLUX 架构，react 更关注 UI 的组件化和数据的单向更新。可以直接有 es6 的一些语法。</li>\n<li>服务器端渲染，单页应用的缺陷是对于搜索引擎有很大的限制。react 的解决的方案是在服务器上预渲染应用然后发送到服务端，但是爬虫是依赖的服务端的响应而不是 web 的执行。</li>\n<li>目标是 UI。</li>\n<li>本身是一个 MVC 中的 V。</li>\n</ul>\n<hr>\n<h2 id=\"Angular-为表单内置了-4-种-css-样式\"><a href=\"#Angular-为表单内置了-4-种-css-样式\" class=\"headerlink\" title=\"Angular 为表单内置了 4 种 css 样式\"></a>Angular 为表单内置了 4 种 css 样式</h2><ul>\n<li>ng-valid 校验合法状态</li>\n<li>ng-invalid 校验非法状态</li>\n<li>ng-pristine 如果要使用原生的 form，需要设置这个值</li>\n<li>ng-dirty 表单处于脏数据状态</li>\n</ul>\n<hr>\n<h2 id=\"Component\"><a href=\"#Component\" class=\"headerlink\" title=\"@Component\"></a>@Component</h2><ul>\n<li>@Component 是 Angular 提供的装饰函数，用来描述 Component 的元数据</li>\n<li>selector 指这个组件在 HTML 模板中的标签是什么</li>\n<li>template 是嵌入（inline ）的 HTML 模板，如果使用单独文件可用 templateUrl。</li>\n<li>styles 是嵌入（inline ）的 CSS 样式，如果使用单独文件可用 styleUrls。</li>\n<li>providers 列出会在此模块中 “ 注入 ” 的服务 (service)- 依赖注入</li>\n<li>bootstrap 指明哪个组件为引导组件 ( 比如 AppComponent), 当 angular 引导应用时，它会在 Dom 中渲染这个引导性组件，并把结果放进 index.html 的该组件的标签中。</li>\n</ul>\n<h2 id=\"NgModule\"><a href=\"#NgModule\" class=\"headerlink\" title=\"@NgModule\"></a>@NgModule</h2><p>@NgModule 装饰器用来为模块定义元数据。declarations 列出了应用中的顶层组件，在 module 里面声明的组件在 module 范围内都可以直接使用，也就是说在同一 module 里面的任何 Component 都可以在其模板文件中直接使用声明的组件，就想我们在 AppComponent 的模板末尾加上 <app-login></app-login> 一样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; HttpModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/http&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app.component&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; LoginComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./login/login.component&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">@NgModule(&#123;</span><br><span class=\"line\">  declarations: [AppComponent, LoginComponent],</span><br><span class=\"line\">  imports: [BrowserModule, FormsModule, HttpModule],</span><br><span class=\"line\">  providers: [],</span><br><span class=\"line\">  bootstrap: [AppComponent]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>NgModule 装饰器用来为模块定义元数据。</p>\n<ul>\n<li>declarations 列出了应用中的顶层组件。</li>\n<li>BrowerModule 提供了运行在浏览器中的应用所需要的关键服务 (service) 和指令 (Directive), 这个模块所在需要在浏览器中跑的应用都应用引用。</li>\n<li>FormsModule 提供了表单处理和双向绑定等服务和指令。</li>\n<li>HttpModule 提供 Htpp 请求和响应的服务。</li>\n<li>providers 列出会在此模版中 “ 注入 ” 的服务（service ）。</li>\n<li>bootstrap 指明哪个组件为引导性组件，并把结果放到 index.html 的该组件的元素标签中。</li>\n<li>静态引导 AppModuleNgFactory platformBrowser().bootstrapModuleFactory(AppModuleNgFactory);</li>\n</ul>\n<hr>\n<h2 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a>依赖注入</h2><p>如果不使用依赖注入，则需要 // 声明成员变量，其类型为 service 里面自定义的方法</p>\n<pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第一种：</span></span><br><span class=\"line\">service:AuthService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.service = <span class=\"keyword\">new</span> AuthService();<span class=\"comment\">//在构造中初始化service</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//第二种：</span></span><br><span class=\"line\"></span><br><span class=\"line\">providers: [</span><br><span class=\"line\">&#123;<span class=\"attr\">provide</span>: <span class=\"string\">&#x27;auth&#x27;</span>,  <span class=\"attr\">useClass</span>: AuthService&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n</code></pre>\n<ul>\n<li>第一种：由于实例化是在组件中进行的，意味着我们如果更改 service 的构造函数的话，组件也需要更改。如果使用依赖注入的话，就不需要显示声明成员变量 service。当 import 相关的服务后，这是 import 将类型引入进来，而 provider 里面会配置这个类型的实例。</li>\n<li>provider 是一个数组，这里配置将要注入到其他组件中的服务配置。provide 定义了这个服务的名称，有需要注入这个服务的就引用这个名称就好。useClass 指明这个名称对应的服务是一个类。这样定义之后就能在任意组件中注入这个依赖了。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"title\">onstructor</span>(<span class=\"params\">@Inject(<span class=\"string\">&#x27;auth&#x27;</span>) private service</span>)</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>@inject(‘auth’), 这个修饰符的意思是请到系统配置中找到名称为 auth 的那个依赖注入到我修饰的变量中。</li>\n</ul>\n<h2 id=\"双向数据绑定\"><a href=\"#双向数据绑定\" class=\"headerlink\" title=\"双向数据绑定\"></a>双向数据绑定</h2><ul>\n<li>[(ngModel)]=”username” ,[] 的作用是将等号后面当成表达式来解析而不是当成字符串，如果去掉 [] 就是将 ngModel 赋值成 username 这个字符串。[] 的含义是单向绑定，就是将组件中给 model 赋的值会设置到 HTML 的 input 控件中。[()]是双向绑定。ngModel 是 FormModule 中提供的指令，它负责从 Domain Model 中创建一个 FormControl 的实例，并将这个实例和表单控件绑定 .</li>\n<li>@Input() 是输入型绑定的修饰符，用于从数据从父组件传到子组件。</li>\n</ul>\n<hr>\n<h2 id=\"表单验证\"><a href=\"#表单验证\" class=\"headerlink\" title=\"表单验证\"></a>表单验证</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">required</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;username&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        #<span class=\"attr\">usernameRef</span>=<span class=\"string\">&quot;ngModel&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        /&gt;</span></span><br><span class=\"line\">        &#123;&#123;usernameRef.valid&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">required</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;password&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        #<span class=\"attr\">passwordRef</span>=<span class=\"string\">&quot;ngModel&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        /&gt;</span></span><br><span class=\"line\">        &#123;&#123;passwordRef.valid&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onClick()&quot;</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> #<span class=\"attr\">usernameRef</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onClick(usernameRef.value)&quot;</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>通过 #usernameRef = ‘ngModel’ 重新加入了引用，这个引用指向了 ngModel, 这个引用是要在模板中使用的所以加入这个引用。</li>\n<li>在输入框中加入 #usernameRef，这个叫引用，引用的是 input 对象，如果想要传递 input 的值，可以用 usernameRef.value.</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;username&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        #<span class=\"attr\">usernameRef</span>=<span class=\"string\">&quot;ngModel&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">required</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">minlength</span>=<span class=\"string\">&quot;3&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        /&gt;</span></span><br><span class=\"line\">        &#123;&#123; usernameRef.errors | json &#125;&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;usernameRef.errors?.required&quot;</span>&gt;</span>this is required<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;usernameRef.errors?.minlength&quot;</span>&gt;</span>should be at least 3 charactors<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">required</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;password&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        #<span class=\"attr\">passwordRef</span>=<span class=\"string\">&quot;ngModel&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;passwordRef.errors?.required&quot;</span>&gt;</span>this is required<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onClick()&quot;</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>*ngIf = “usernameRef.error?.required” 的意思是当 usernameRef.error.required 为 true 的时候显示 div 标签</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> #<span class=\"attr\">formRef</span>=<span class=\"string\">&quot;ngForm&quot;</span> (<span class=\"attr\">ngSubmit</span>)=<span class=\"string\">&quot;onSubmit(formRef.value)&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fieldset</span> <span class=\"attr\">ngModelGroup</span>=<span class=\"string\">&quot;login&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;username&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        #<span class=\"attr\">usernameRef</span>=<span class=\"string\">&quot;ngModel&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">required</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">minlength</span>=<span class=\"string\">&quot;3&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;usernameRef.errors?.required&quot;</span>&gt;</span>this is required<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;usernameRef.errors?.minlength&quot;</span>&gt;</span>should be at least 3 charactors<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;password&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        #<span class=\"attr\">passwordRef</span>=<span class=\"string\">&quot;ngModel&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">required</span></span></span><br><span class=\"line\"><span class=\"tag\">        /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;passwordRef.errors?.required&quot;</span>&gt;</span>this is required<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onClick()&quot;</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>ngModel 会注册成 Form 的子控件，注册控件需要 name ，这个要求我们显示的指定对应控件的 name ，因此需要为 input 增加 name 属性，在 formREF.value 中包含了表单所有填写项的值</p>\n</li>\n<li><p>有时在表单相中表单项过多时，就使用 HTML 中的 fieldset 标签用来处理。<fieldset ngModelGroup=\"login\"> 意味着我们对于 fieldset 之内的数据都分组到了 login 对象中。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><p>路径配置的顺序是非常重要的，angular2 使用 “ 先匹配优先 ” 的原则。</p>\n<ul>\n<li>redirectTo 重定向<h2 id=\"service\"><a href=\"#service\" class=\"headerlink\" title=\"service\"></a>service</h2></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//post /todos</span></span><br><span class=\"line\">addTodo(desc:string):<span class=\"built_in\">Promise</span>&lt;Todo&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> todo=&#123;</span><br><span class=\"line\">        id:UUID.UUID(),</span><br><span class=\"line\">        desc:desc,</span><br><span class=\"line\">        completed:<span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.http</span><br><span class=\"line\">        .post(<span class=\"built_in\">this</span>.api_url,<span class=\"built_in\">JSON</span>.stringfy(todo),&#123;<span class=\"attr\">header</span>:<span class=\"built_in\">this</span>.headers&#125;)</span><br><span class=\"line\">        .toPromise()</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json().data <span class=\"keyword\">as</span> Todo)</span><br><span class=\"line\">        .catch(<span class=\"built_in\">this</span>.handleError);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    inputValue: string = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    @Input() placeholder: string = <span class=\"string\">&#x27;What needs to be done?&#x27;</span>;</span><br><span class=\"line\">    @Input() delay: number = <span class=\"number\">300</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//detect the input value and output this to parent</span></span><br><span class=\"line\">    @Output() textChanges = <span class=\"keyword\">new</span> EventEmitter&lt;string&gt;();</span><br><span class=\"line\">    <span class=\"comment\">//detect the enter keyup event and output this to parent</span></span><br><span class=\"line\">    @Output() onEnterUp = <span class=\"keyword\">new</span> EventEmitter&lt;boolean&gt;();</span><br><span class=\"line\">    <span class=\"string\">``</span><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">- placeholder和delay作为2个输入型变量，这样在引入标签中就可以设置这两个属性了。</span></span><br><span class=\"line\"><span class=\"string\">- 由@Output修饰的onTextChanges 和 onEnterUp，这两个变量都定义了EventEmitter(事件发射器)。</span></span><br><span class=\"line\"><span class=\"string\">- export const routing = RouterModule.forChild(routes);，用的是forChild而不是forRoot,因为forRoot只能用于根目录，所有非跟模块的其他模块都只能用forChild.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">--------------------------</span></span><br><span class=\"line\"><span class=\"string\">## 验证用户帐户的流程</span></span><br><span class=\"line\"><span class=\"string\">- UserService:用于通过用户名查找用户并返回用户</span></span><br><span class=\"line\"><span class=\"string\">- AuthService:用于认证用户，其中需要利用UserService 的方法。</span></span><br><span class=\"line\"><span class=\"string\">- AuthGuard:路由拦截器，用于拦截到路由后通过Authservice来知道此用户是否有权限访问路由。根据结果导航到不同路径。</span></span><br><span class=\"line\"><span class=\"string\">- @SkipSelf装饰器意味着在当前注入器的所有祖先注入器中寻找，如果注入器找不到想要的提供商时就会抛出一个错误。但是@Optional装饰器表示找不到该服务则会返回null,</span></span><br><span class=\"line\"><span class=\"string\">parentModule参数也就被赋值为空。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">----------------</span></span><br><span class=\"line\"><span class=\"string\">## 路由守卫</span></span><br><span class=\"line\"><span class=\"string\">应用场景如下:</span></span><br><span class=\"line\"><span class=\"string\">该用户可能无权导航到目标组件。导航前需要用户先登录。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">路由器支持多种守卫：</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">- 用CanActivate来处理导航到某路由的情况。</span></span><br><span class=\"line\"><span class=\"string\">- 用CanActivateChild处理导航到子路由的情况。</span></span><br><span class=\"line\"><span class=\"string\">- 用CanDeactivate来处理从当前路由离开的情况。</span></span><br><span class=\"line\"><span class=\"string\">- 用Resolve在路由激活之前获取路由数据。</span></span><br><span class=\"line\"><span class=\"string\">- 用CanLoad来处理异步导航到某特性模块的情况。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">----------------------</span></span><br><span class=\"line\"><span class=\"string\">## 模块优化</span></span><br><span class=\"line\"><span class=\"string\"> 各个模块定义，发现我们不断地重复引入了CommonModule、FormsModule、MdlModule,这些组件常用，就可以建立一个ShareModule(src\\app\\shared\\shared.module.ts)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>javascript</span><br><span class=\"line\">    <span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">import</span> &#123; CommonModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">import</span> &#123; FormsModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">import</span> &#123; MdlModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;angular2-mdl&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    @NgModule(&#123;</span><br><span class=\"line\">    imports: [</span><br><span class=\"line\">        CommonModule,</span><br><span class=\"line\">        FormsModule,</span><br><span class=\"line\">        MdlModule</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"built_in\">exports</span>: [</span><br><span class=\"line\">        CommonModule,</span><br><span class=\"line\">        FormsModule,</span><br><span class=\"line\">        MdlModule</span><br><span class=\"line\">    ]</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SharedModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个模块的作用是将常用的模块打包起来，将常用的模块导入又导出，这样在其他模块中值需引入这个模块即可</p>"},{"title":"Vue小知识点运用","date":"2019-07-09T06:56:06.000Z","_content":"\nVue API 中的小知识点运用与总结\n\n<!--more-->\n\n# 状态共享\n\n随着组件的细化，就会遇到多组件状态共享的情况，Vuex 当然可以解决这些问题，但是如果应用不够大，为避免代码繁琐冗余，最好不要使用它。我们可以通过使用 Observable API 应对一些简单的跨组件数据状态共享的情况。\n\n## Observable\n\n让一个对象可响应。Vue 内部会用它来处理 data 函数返回的对象。可以实现简单的 store 管理。\n\n返回的对象可以直接在渲染函数和计算属性中使用，并在编译时触发适当的更新。它还可以用作简单场景的最小跨组件状态存储：\n\nstore.js\n\n```javascript\nimport vue from 'vue'\nexport const store = vue.observable({ count: 0 })\nexport const mutation = {\n  setCount(count) {\n    store.count = count\n  }\n}\n```\n\n应用组件：\n\n```html\n<template>\n  <div class=\"hello\">\n    <p @click=\"setCount(testCount + 1)\">+</p>\n    <p @click=\"setCount(testCount - 1)\">-</p>\n    <test />\n    <p>{{testCount}}</p>\n  </div>\n</template>\n\n<script>\n  import test from './test'\n  import { store, mutation } from '@/store'\n  export default {\n    name: 'HelloWorld',\n    data() {\n      return {\n        msg: 'Welcome to Your Vue.js App'\n      }\n    },\n    components: {\n      test\n    },\n    methods: {\n      setCount: mutation.setCount\n    },\n    computed: {\n      testCount() {\n        return store.count\n      }\n    }\n  }\n</script>\n```\n\ntest 组件\n\n```html\n<template>\n  <div>test{{testCount}}</div>\n</template>\n<script>\n  import { store } from '@/store'\n  export default {\n    computed: {\n      testCount() {\n        return store.count\n      }\n    }\n  }\n</script>\n```\n\n# 长列表性能优化\n\nvue 是通过 object.defineProperty 对数据进行劫持，来实现视图响应数据的变化，然而有些时候我们的组件就是纯粹的展示，不需要 vue 劫持我们的数据，在大量数据展示的情况下，这能够很明显的减少组件初始化的时间，**我们可以通过`object.freeze`方法来冻结一个对象，一旦被冻结的对象就再也不能被修改了**。\n\n```html\nexport default { data: () => ({ user: {} }), async created() { const users =\nawait axios.get(\"api/users\"); this.users = Object.freeze(users); } };\n```\n\n这里仅仅是冻结了 user 的值，引用不会被冻结，当我们需要 reactive 数据的时候，我们可以重新给 users 赋值。\n\n```html\nexport default { data: () => ({ users: [] }), async created() { const users =\nawait axios.get(\"/api/users\"); this.users = Object.freeze(users); }, methods: {\na() { //改变值不会触发视图响应 this.users[0] = newValue;\n//改变引用依然会触发视图响应 this.users = newValue; } } };\n```\n\n# 函数式组件\n\nApp.vue\n\n```html\n<template>\n  <div id=\"app\">\n    <List\n      :items=\"['Wonderwoman', 'Ironman']\"\n      :item-click=\"item => (clicked = item)\"\n    />\n    <p>Clicked hero: {{ clicked }}</p>\n  </div>\n</template>\n\n<script>\n  import List from './List'\n\n  export default {\n    name: 'App',\n    data: () => ({ clicked: '' }),\n    components: { List }\n  }\n</script>\n```\n\nList.vue\n\n```html\n<template functional>\n  <div>\n    <p v-for=\"item in props.items\" @click=\"props.itemClick(item);\">\n      {{ item }}\n    </p>\n  </div>\n</template>\n```\n\n# 监听组件的生命周期\n\n比如有父组件 Parent 和子组件 Child，如果父组件监听到子组件挂载 mounted 就做一些逻辑处理，常规写法可能如下：\n\n```html\n// Parent.vue\n<Child @mounted=\"doSomething\" />\n\n// Child.vue mounted() { this.$emit(\"mounted\"); }\n```\n\n# 混入\n\n分发 Vue 组件中的可复用功能\n当我们开发应用时，经常会遇到一些功能和逻辑，需要在不同的组件间多次使用，比如同样的方法逻辑，两个组件都要用到，但我们又不想也不应该完全复制两遍，这个时候就该用 mixins 了。\n这意味着，如果我创建了一个组件，它有 X 个不同的方法、周期逻辑、本地的状态等，我想复用它们，我就可以创建个 mixins，让其他的组件扩展这个 mixins，就可以在这些新的组件里使用原本它们没有的方法了\n\n# 前端路由和后端路由\n\n对于路由这快的认知有一个盲点，好像都没有考虑过一直以来 jquery 等应用的页面的路由是怎么样的，webpack 管理的多页应用的路由又是怎么样实现的。\n\n## 后端路由\n\n对于普通的网站，所有超链接都是 URL 地址，所有 URL 地址都对应服务器上对应的资源。\n\n## 前端路由\n\n对于单页应用来说，主要通过 url 中的 hash（#号）来传值，来实现不同网页之间的切换。在单页面应用程序中，这种通过 hash 改变来切换页面的方式，称作前端路由（区别于后端路由）。\n\n### 前端路由实现\n\n#### 1、Pjax(PushState+Ajax)\n\n原理：利用 ajax 请求替代了 a 标签的默认跳转，然后利用 html5 中的 API 修改了 url。\n\n**API：history.pushState 和 history.replaceSate。**\n\nhistory.pushState 和 history.replaceSate 是 HTML5 的新接口,他们可以做到改变网址却不需要刷新页面，这个特性后来就运用到了单页应用，比如：vue-router,react-router-dom 里面，pushSate 会增加一条新的历史记录，而 replaceState 则会替换当前的历史记录。（Ajax 可以实现页面的无刷新操作，于是，返回的时候，通过 url 或者其他传参，我们就可以还原到 Ajax 之前的模样）\n\n浏览器的前进和后退，会触发 window.onpopstate 事件，通过绑定 popstate 事件，就可以根据当前 url 地址中的查询内容让对应的菜单执行 Ajax 载入，实现 Ajax 的前进和后退效果。\n\n页面首次载入的时候，如果没有查询地址、或查询地址不匹配，则使用第一个菜单的 Ajax 地址的查询内容，并使用 history.replaceSate 更改当前的浏览器历史，然后触发 Ajax 操作。\n\n```javascript\nwindow.history.pushSate(null, null, 'name/blue')\nwindow.history.pushSate(null, null, 'name/orange')\n```\n\n#### Hjax(Hash+Ajax)\n\n原理：url 中常会出现# ，一可以表示锚点（如回到顶部的按钮的原理），而是路由里的锚点（hash）,web 服务器并不会解析 hash，也就是说#后的内容 web 服务都会自动忽略，但是 javascript 是可以通过 window.loacation.hash 读取到的，读取到路径加以解析之后就可以响应不同路径的逻辑处理。\n\n### 前端路由的缺陷\n\n使用浏览器的前进后退键时，会重新发出请求，没有合理的利用缓存。\n\n# react/vue 列表组件中的 key 值。其作用是什么。\n\n在没有绑定 key 的情况下，并且在遍历模板简单的情况下（只读模式），会导致虚拟新旧节点对比更快，节点也会被复用，这种复用就是就地复用。\n\n```html\n<div id=\"app\">\n  <div v-for=\"i in dataList\">{{ i }}</div>\n</div>\n<script>\n  var vm = new Vue({\n    el: '#app',\n    data: {\n      dataList: [1, 2, 3, 4, 5]\n    }\n  })\n</script>\n```\n\n以上的例子，v-for 的内容会生成以下的 dom 节点数组：\n\n```javascript\n;[\n  '<div>1</div>', // id： A\n  '<div>2</div>', // id:  B\n  '<div>3</div>', // id:  C\n  '<div>4</div>', // id:  D\n  '<div>5</div>' // id:  E\n]\n```\n\n改变 dataList 数据，进行数据位置替换，对比改变后的数据\n\n# 组件内导航之 beforeRouteUpdate 的使用\n\n使用场景：\n\n组件复用；路由跳转；\n\n```javascript\nbeforeRouteUpdate (to, from, next) {\n    // 在当前路由改变，但是该组件被复用时调用\n    // 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，\n    // 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。\n    // 可以访问组件实例 `this`\n  },\n```\n","source":"_posts/Vue小知识点运用.md","raw":"---\ntitle: Vue小知识点运用\ndate: 2019-07-09 14:56:06\ncategories: Vue\n---\n\nVue API 中的小知识点运用与总结\n\n<!--more-->\n\n# 状态共享\n\n随着组件的细化，就会遇到多组件状态共享的情况，Vuex 当然可以解决这些问题，但是如果应用不够大，为避免代码繁琐冗余，最好不要使用它。我们可以通过使用 Observable API 应对一些简单的跨组件数据状态共享的情况。\n\n## Observable\n\n让一个对象可响应。Vue 内部会用它来处理 data 函数返回的对象。可以实现简单的 store 管理。\n\n返回的对象可以直接在渲染函数和计算属性中使用，并在编译时触发适当的更新。它还可以用作简单场景的最小跨组件状态存储：\n\nstore.js\n\n```javascript\nimport vue from 'vue'\nexport const store = vue.observable({ count: 0 })\nexport const mutation = {\n  setCount(count) {\n    store.count = count\n  }\n}\n```\n\n应用组件：\n\n```html\n<template>\n  <div class=\"hello\">\n    <p @click=\"setCount(testCount + 1)\">+</p>\n    <p @click=\"setCount(testCount - 1)\">-</p>\n    <test />\n    <p>{{testCount}}</p>\n  </div>\n</template>\n\n<script>\n  import test from './test'\n  import { store, mutation } from '@/store'\n  export default {\n    name: 'HelloWorld',\n    data() {\n      return {\n        msg: 'Welcome to Your Vue.js App'\n      }\n    },\n    components: {\n      test\n    },\n    methods: {\n      setCount: mutation.setCount\n    },\n    computed: {\n      testCount() {\n        return store.count\n      }\n    }\n  }\n</script>\n```\n\ntest 组件\n\n```html\n<template>\n  <div>test{{testCount}}</div>\n</template>\n<script>\n  import { store } from '@/store'\n  export default {\n    computed: {\n      testCount() {\n        return store.count\n      }\n    }\n  }\n</script>\n```\n\n# 长列表性能优化\n\nvue 是通过 object.defineProperty 对数据进行劫持，来实现视图响应数据的变化，然而有些时候我们的组件就是纯粹的展示，不需要 vue 劫持我们的数据，在大量数据展示的情况下，这能够很明显的减少组件初始化的时间，**我们可以通过`object.freeze`方法来冻结一个对象，一旦被冻结的对象就再也不能被修改了**。\n\n```html\nexport default { data: () => ({ user: {} }), async created() { const users =\nawait axios.get(\"api/users\"); this.users = Object.freeze(users); } };\n```\n\n这里仅仅是冻结了 user 的值，引用不会被冻结，当我们需要 reactive 数据的时候，我们可以重新给 users 赋值。\n\n```html\nexport default { data: () => ({ users: [] }), async created() { const users =\nawait axios.get(\"/api/users\"); this.users = Object.freeze(users); }, methods: {\na() { //改变值不会触发视图响应 this.users[0] = newValue;\n//改变引用依然会触发视图响应 this.users = newValue; } } };\n```\n\n# 函数式组件\n\nApp.vue\n\n```html\n<template>\n  <div id=\"app\">\n    <List\n      :items=\"['Wonderwoman', 'Ironman']\"\n      :item-click=\"item => (clicked = item)\"\n    />\n    <p>Clicked hero: {{ clicked }}</p>\n  </div>\n</template>\n\n<script>\n  import List from './List'\n\n  export default {\n    name: 'App',\n    data: () => ({ clicked: '' }),\n    components: { List }\n  }\n</script>\n```\n\nList.vue\n\n```html\n<template functional>\n  <div>\n    <p v-for=\"item in props.items\" @click=\"props.itemClick(item);\">\n      {{ item }}\n    </p>\n  </div>\n</template>\n```\n\n# 监听组件的生命周期\n\n比如有父组件 Parent 和子组件 Child，如果父组件监听到子组件挂载 mounted 就做一些逻辑处理，常规写法可能如下：\n\n```html\n// Parent.vue\n<Child @mounted=\"doSomething\" />\n\n// Child.vue mounted() { this.$emit(\"mounted\"); }\n```\n\n# 混入\n\n分发 Vue 组件中的可复用功能\n当我们开发应用时，经常会遇到一些功能和逻辑，需要在不同的组件间多次使用，比如同样的方法逻辑，两个组件都要用到，但我们又不想也不应该完全复制两遍，这个时候就该用 mixins 了。\n这意味着，如果我创建了一个组件，它有 X 个不同的方法、周期逻辑、本地的状态等，我想复用它们，我就可以创建个 mixins，让其他的组件扩展这个 mixins，就可以在这些新的组件里使用原本它们没有的方法了\n\n# 前端路由和后端路由\n\n对于路由这快的认知有一个盲点，好像都没有考虑过一直以来 jquery 等应用的页面的路由是怎么样的，webpack 管理的多页应用的路由又是怎么样实现的。\n\n## 后端路由\n\n对于普通的网站，所有超链接都是 URL 地址，所有 URL 地址都对应服务器上对应的资源。\n\n## 前端路由\n\n对于单页应用来说，主要通过 url 中的 hash（#号）来传值，来实现不同网页之间的切换。在单页面应用程序中，这种通过 hash 改变来切换页面的方式，称作前端路由（区别于后端路由）。\n\n### 前端路由实现\n\n#### 1、Pjax(PushState+Ajax)\n\n原理：利用 ajax 请求替代了 a 标签的默认跳转，然后利用 html5 中的 API 修改了 url。\n\n**API：history.pushState 和 history.replaceSate。**\n\nhistory.pushState 和 history.replaceSate 是 HTML5 的新接口,他们可以做到改变网址却不需要刷新页面，这个特性后来就运用到了单页应用，比如：vue-router,react-router-dom 里面，pushSate 会增加一条新的历史记录，而 replaceState 则会替换当前的历史记录。（Ajax 可以实现页面的无刷新操作，于是，返回的时候，通过 url 或者其他传参，我们就可以还原到 Ajax 之前的模样）\n\n浏览器的前进和后退，会触发 window.onpopstate 事件，通过绑定 popstate 事件，就可以根据当前 url 地址中的查询内容让对应的菜单执行 Ajax 载入，实现 Ajax 的前进和后退效果。\n\n页面首次载入的时候，如果没有查询地址、或查询地址不匹配，则使用第一个菜单的 Ajax 地址的查询内容，并使用 history.replaceSate 更改当前的浏览器历史，然后触发 Ajax 操作。\n\n```javascript\nwindow.history.pushSate(null, null, 'name/blue')\nwindow.history.pushSate(null, null, 'name/orange')\n```\n\n#### Hjax(Hash+Ajax)\n\n原理：url 中常会出现# ，一可以表示锚点（如回到顶部的按钮的原理），而是路由里的锚点（hash）,web 服务器并不会解析 hash，也就是说#后的内容 web 服务都会自动忽略，但是 javascript 是可以通过 window.loacation.hash 读取到的，读取到路径加以解析之后就可以响应不同路径的逻辑处理。\n\n### 前端路由的缺陷\n\n使用浏览器的前进后退键时，会重新发出请求，没有合理的利用缓存。\n\n# react/vue 列表组件中的 key 值。其作用是什么。\n\n在没有绑定 key 的情况下，并且在遍历模板简单的情况下（只读模式），会导致虚拟新旧节点对比更快，节点也会被复用，这种复用就是就地复用。\n\n```html\n<div id=\"app\">\n  <div v-for=\"i in dataList\">{{ i }}</div>\n</div>\n<script>\n  var vm = new Vue({\n    el: '#app',\n    data: {\n      dataList: [1, 2, 3, 4, 5]\n    }\n  })\n</script>\n```\n\n以上的例子，v-for 的内容会生成以下的 dom 节点数组：\n\n```javascript\n;[\n  '<div>1</div>', // id： A\n  '<div>2</div>', // id:  B\n  '<div>3</div>', // id:  C\n  '<div>4</div>', // id:  D\n  '<div>5</div>' // id:  E\n]\n```\n\n改变 dataList 数据，进行数据位置替换，对比改变后的数据\n\n# 组件内导航之 beforeRouteUpdate 的使用\n\n使用场景：\n\n组件复用；路由跳转；\n\n```javascript\nbeforeRouteUpdate (to, from, next) {\n    // 在当前路由改变，但是该组件被复用时调用\n    // 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，\n    // 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。\n    // 可以访问组件实例 `this`\n  },\n```\n","slug":"Vue小知识点运用","published":1,"updated":"2020-03-09T11:01:16.011Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmejaes10010xcvrbc4464r8","content":"<p>Vue API 中的小知识点运用与总结</p>\n<span id=\"more\"></span>\n\n<h1 id=\"状态共享\"><a href=\"#状态共享\" class=\"headerlink\" title=\"状态共享\"></a>状态共享</h1><p>随着组件的细化，就会遇到多组件状态共享的情况，Vuex 当然可以解决这些问题，但是如果应用不够大，为避免代码繁琐冗余，最好不要使用它。我们可以通过使用 Observable API 应对一些简单的跨组件数据状态共享的情况。</p>\n<h2 id=\"Observable\"><a href=\"#Observable\" class=\"headerlink\" title=\"Observable\"></a>Observable</h2><p>让一个对象可响应。Vue 内部会用它来处理 data 函数返回的对象。可以实现简单的 store 管理。</p>\n<p>返回的对象可以直接在渲染函数和计算属性中使用，并在编译时触发适当的更新。它还可以用作简单场景的最小跨组件状态存储：</p>\n<p>store.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> store = vue.observable(&#123; <span class=\"attr\">count</span>: <span class=\"number\">0</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> mutation = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setCount</span>(<span class=\"params\">count</span>)</span> &#123;</span><br><span class=\"line\">    store.count = count</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>应用组件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;hello&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;setCount(testCount + 1)&quot;</span>&gt;</span>+<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;setCount(testCount - 1)&quot;</span>&gt;</span>-<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">test</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;testCount&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> test <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./test&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> &#123; store, mutation &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/store&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    name: <span class=\"string\">&#x27;HelloWorld&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        msg: <span class=\"string\">&#x27;Welcome to Your Vue.js App&#x27;</span></span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">      test</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      setCount: mutation.setCount</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    computed: &#123;</span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"function\"><span class=\"title\">testCount</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> store.count</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>test 组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>test&#123;&#123;testCount&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> &#123; store &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/store&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    computed: &#123;</span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"function\"><span class=\"title\">testCount</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> store.count</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"长列表性能优化\"><a href=\"#长列表性能优化\" class=\"headerlink\" title=\"长列表性能优化\"></a>长列表性能优化</h1><p>vue 是通过 object.defineProperty 对数据进行劫持，来实现视图响应数据的变化，然而有些时候我们的组件就是纯粹的展示，不需要 vue 劫持我们的数据，在大量数据展示的情况下，这能够很明显的减少组件初始化的时间，<strong>我们可以通过<code>object.freeze</code>方法来冻结一个对象，一旦被冻结的对象就再也不能被修改了</strong>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default &#123; data: () =&gt; (&#123; user: &#123;&#125; &#125;), async created() &#123; const users =</span><br><span class=\"line\">await axios.get(&quot;api/users&quot;); this.users = Object.freeze(users); &#125; &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这里仅仅是冻结了 user 的值，引用不会被冻结，当我们需要 reactive 数据的时候，我们可以重新给 users 赋值。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default &#123; data: () =&gt; (&#123; users: [] &#125;), async created() &#123; const users =</span><br><span class=\"line\">await axios.get(&quot;/api/users&quot;); this.users = Object.freeze(users); &#125;, methods: &#123;</span><br><span class=\"line\">a() &#123; //改变值不会触发视图响应 this.users[0] = newValue;</span><br><span class=\"line\">//改变引用依然会触发视图响应 this.users = newValue; &#125; &#125; &#125;;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"函数式组件\"><a href=\"#函数式组件\" class=\"headerlink\" title=\"函数式组件\"></a>函数式组件</h1><p>App.vue</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    &lt;List</span><br><span class=\"line\">      :items=&quot;[&#x27;Wonderwoman&#x27;, &#x27;Ironman&#x27;]&quot;</span><br><span class=\"line\">      :item-click=&quot;item =&gt; (clicked = item)&quot;</span><br><span class=\"line\">    /&gt;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Clicked hero: &#123;&#123; clicked &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> List <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./List&#x27;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    name: <span class=\"string\">&#x27;App&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    data: <span class=\"function\">() =&gt;</span> (&#123; <span class=\"attr\">clicked</span>: <span class=\"string\">&#x27;&#x27;</span> &#125;),</span></span><br><span class=\"line\">    components: &#123; List &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>List.vue</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">functional</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;item in props.items&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;props.itemClick(item);&quot;</span>&gt;</span></span><br><span class=\"line\">      &#123;&#123; item &#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"监听组件的生命周期\"><a href=\"#监听组件的生命周期\" class=\"headerlink\" title=\"监听组件的生命周期\"></a>监听组件的生命周期</h1><p>比如有父组件 Parent 和子组件 Child，如果父组件监听到子组件挂载 mounted 就做一些逻辑处理，常规写法可能如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Parent.vue</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Child</span> @<span class=\"attr\">mounted</span>=<span class=\"string\">&quot;doSomething&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">// Child.vue mounted() &#123; this.$emit(&quot;mounted&quot;); &#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"混入\"><a href=\"#混入\" class=\"headerlink\" title=\"混入\"></a>混入</h1><p>分发 Vue 组件中的可复用功能<br>当我们开发应用时，经常会遇到一些功能和逻辑，需要在不同的组件间多次使用，比如同样的方法逻辑，两个组件都要用到，但我们又不想也不应该完全复制两遍，这个时候就该用 mixins 了。<br>这意味着，如果我创建了一个组件，它有 X 个不同的方法、周期逻辑、本地的状态等，我想复用它们，我就可以创建个 mixins，让其他的组件扩展这个 mixins，就可以在这些新的组件里使用原本它们没有的方法了</p>\n<h1 id=\"前端路由和后端路由\"><a href=\"#前端路由和后端路由\" class=\"headerlink\" title=\"前端路由和后端路由\"></a>前端路由和后端路由</h1><p>对于路由这快的认知有一个盲点，好像都没有考虑过一直以来 jquery 等应用的页面的路由是怎么样的，webpack 管理的多页应用的路由又是怎么样实现的。</p>\n<h2 id=\"后端路由\"><a href=\"#后端路由\" class=\"headerlink\" title=\"后端路由\"></a>后端路由</h2><p>对于普通的网站，所有超链接都是 URL 地址，所有 URL 地址都对应服务器上对应的资源。</p>\n<h2 id=\"前端路由\"><a href=\"#前端路由\" class=\"headerlink\" title=\"前端路由\"></a>前端路由</h2><p>对于单页应用来说，主要通过 url 中的 hash（#号）来传值，来实现不同网页之间的切换。在单页面应用程序中，这种通过 hash 改变来切换页面的方式，称作前端路由（区别于后端路由）。</p>\n<h3 id=\"前端路由实现\"><a href=\"#前端路由实现\" class=\"headerlink\" title=\"前端路由实现\"></a>前端路由实现</h3><h4 id=\"1、Pjax-PushState-Ajax\"><a href=\"#1、Pjax-PushState-Ajax\" class=\"headerlink\" title=\"1、Pjax(PushState+Ajax)\"></a>1、Pjax(PushState+Ajax)</h4><p>原理：利用 ajax 请求替代了 a 标签的默认跳转，然后利用 html5 中的 API 修改了 url。</p>\n<p><strong>API：history.pushState 和 history.replaceSate。</strong></p>\n<p>history.pushState 和 history.replaceSate 是 HTML5 的新接口,他们可以做到改变网址却不需要刷新页面，这个特性后来就运用到了单页应用，比如：vue-router,react-router-dom 里面，pushSate 会增加一条新的历史记录，而 replaceState 则会替换当前的历史记录。（Ajax 可以实现页面的无刷新操作，于是，返回的时候，通过 url 或者其他传参，我们就可以还原到 Ajax 之前的模样）</p>\n<p>浏览器的前进和后退，会触发 window.onpopstate 事件，通过绑定 popstate 事件，就可以根据当前 url 地址中的查询内容让对应的菜单执行 Ajax 载入，实现 Ajax 的前进和后退效果。</p>\n<p>页面首次载入的时候，如果没有查询地址、或查询地址不匹配，则使用第一个菜单的 Ajax 地址的查询内容，并使用 history.replaceSate 更改当前的浏览器历史，然后触发 Ajax 操作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.history.pushSate(<span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"string\">&#x27;name/blue&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.history.pushSate(<span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"string\">&#x27;name/orange&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Hjax-Hash-Ajax\"><a href=\"#Hjax-Hash-Ajax\" class=\"headerlink\" title=\"Hjax(Hash+Ajax)\"></a>Hjax(Hash+Ajax)</h4><p>原理：url 中常会出现# ，一可以表示锚点（如回到顶部的按钮的原理），而是路由里的锚点（hash）,web 服务器并不会解析 hash，也就是说#后的内容 web 服务都会自动忽略，但是 javascript 是可以通过 window.loacation.hash 读取到的，读取到路径加以解析之后就可以响应不同路径的逻辑处理。</p>\n<h3 id=\"前端路由的缺陷\"><a href=\"#前端路由的缺陷\" class=\"headerlink\" title=\"前端路由的缺陷\"></a>前端路由的缺陷</h3><p>使用浏览器的前进后退键时，会重新发出请求，没有合理的利用缓存。</p>\n<h1 id=\"react-vue-列表组件中的-key-值。其作用是什么。\"><a href=\"#react-vue-列表组件中的-key-值。其作用是什么。\" class=\"headerlink\" title=\"react/vue 列表组件中的 key 值。其作用是什么。\"></a>react/vue 列表组件中的 key 值。其作用是什么。</h1><p>在没有绑定 key 的情况下，并且在遍历模板简单的情况下（只读模式），会导致虚拟新旧节点对比更快，节点也会被复用，这种复用就是就地复用。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;i in dataList&quot;</span>&gt;</span>&#123;&#123; i &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      dataList: [1, 2, 3, 4, 5]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>以上的例子，v-for 的内容会生成以下的 dom 节点数组：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;[</span><br><span class=\"line\">  <span class=\"string\">&#x27;&lt;div&gt;1&lt;/div&gt;&#x27;</span>, <span class=\"comment\">// id： A</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;&lt;div&gt;2&lt;/div&gt;&#x27;</span>, <span class=\"comment\">// id:  B</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;&lt;div&gt;3&lt;/div&gt;&#x27;</span>, <span class=\"comment\">// id:  C</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;&lt;div&gt;4&lt;/div&gt;&#x27;</span>, <span class=\"comment\">// id:  D</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;&lt;div&gt;5&lt;/div&gt;&#x27;</span> <span class=\"comment\">// id:  E</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>改变 dataList 数据，进行数据位置替换，对比改变后的数据</p>\n<h1 id=\"组件内导航之-beforeRouteUpdate-的使用\"><a href=\"#组件内导航之-beforeRouteUpdate-的使用\" class=\"headerlink\" title=\"组件内导航之 beforeRouteUpdate 的使用\"></a>组件内导航之 beforeRouteUpdate 的使用</h1><p>使用场景：</p>\n<p>组件复用；路由跳转；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeRouteUpdate (to, <span class=\"keyword\">from</span>, next) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在当前路由改变，但是该组件被复用时调用</span></span><br><span class=\"line\">    <span class=\"comment\">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span></span><br><span class=\"line\">    <span class=\"comment\">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span><br><span class=\"line\">    <span class=\"comment\">// 可以访问组件实例 `this`</span></span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>Vue API 中的小知识点运用与总结</p>","more":"<h1 id=\"状态共享\"><a href=\"#状态共享\" class=\"headerlink\" title=\"状态共享\"></a>状态共享</h1><p>随着组件的细化，就会遇到多组件状态共享的情况，Vuex 当然可以解决这些问题，但是如果应用不够大，为避免代码繁琐冗余，最好不要使用它。我们可以通过使用 Observable API 应对一些简单的跨组件数据状态共享的情况。</p>\n<h2 id=\"Observable\"><a href=\"#Observable\" class=\"headerlink\" title=\"Observable\"></a>Observable</h2><p>让一个对象可响应。Vue 内部会用它来处理 data 函数返回的对象。可以实现简单的 store 管理。</p>\n<p>返回的对象可以直接在渲染函数和计算属性中使用，并在编译时触发适当的更新。它还可以用作简单场景的最小跨组件状态存储：</p>\n<p>store.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> store = vue.observable(&#123; <span class=\"attr\">count</span>: <span class=\"number\">0</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> mutation = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setCount</span>(<span class=\"params\">count</span>)</span> &#123;</span><br><span class=\"line\">    store.count = count</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>应用组件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;hello&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;setCount(testCount + 1)&quot;</span>&gt;</span>+<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;setCount(testCount - 1)&quot;</span>&gt;</span>-<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">test</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;testCount&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> test <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./test&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> &#123; store, mutation &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/store&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    name: <span class=\"string\">&#x27;HelloWorld&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        msg: <span class=\"string\">&#x27;Welcome to Your Vue.js App&#x27;</span></span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">      test</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      setCount: mutation.setCount</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    computed: &#123;</span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"function\"><span class=\"title\">testCount</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> store.count</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>test 组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>test&#123;&#123;testCount&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> &#123; store &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/store&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    computed: &#123;</span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"function\"><span class=\"title\">testCount</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> store.count</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"长列表性能优化\"><a href=\"#长列表性能优化\" class=\"headerlink\" title=\"长列表性能优化\"></a>长列表性能优化</h1><p>vue 是通过 object.defineProperty 对数据进行劫持，来实现视图响应数据的变化，然而有些时候我们的组件就是纯粹的展示，不需要 vue 劫持我们的数据，在大量数据展示的情况下，这能够很明显的减少组件初始化的时间，<strong>我们可以通过<code>object.freeze</code>方法来冻结一个对象，一旦被冻结的对象就再也不能被修改了</strong>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default &#123; data: () =&gt; (&#123; user: &#123;&#125; &#125;), async created() &#123; const users =</span><br><span class=\"line\">await axios.get(&quot;api/users&quot;); this.users = Object.freeze(users); &#125; &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这里仅仅是冻结了 user 的值，引用不会被冻结，当我们需要 reactive 数据的时候，我们可以重新给 users 赋值。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default &#123; data: () =&gt; (&#123; users: [] &#125;), async created() &#123; const users =</span><br><span class=\"line\">await axios.get(&quot;/api/users&quot;); this.users = Object.freeze(users); &#125;, methods: &#123;</span><br><span class=\"line\">a() &#123; //改变值不会触发视图响应 this.users[0] = newValue;</span><br><span class=\"line\">//改变引用依然会触发视图响应 this.users = newValue; &#125; &#125; &#125;;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"函数式组件\"><a href=\"#函数式组件\" class=\"headerlink\" title=\"函数式组件\"></a>函数式组件</h1><p>App.vue</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    &lt;List</span><br><span class=\"line\">      :items=&quot;[&#x27;Wonderwoman&#x27;, &#x27;Ironman&#x27;]&quot;</span><br><span class=\"line\">      :item-click=&quot;item =&gt; (clicked = item)&quot;</span><br><span class=\"line\">    /&gt;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Clicked hero: &#123;&#123; clicked &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> List <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./List&#x27;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    name: <span class=\"string\">&#x27;App&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    data: <span class=\"function\">() =&gt;</span> (&#123; <span class=\"attr\">clicked</span>: <span class=\"string\">&#x27;&#x27;</span> &#125;),</span></span><br><span class=\"line\">    components: &#123; List &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>List.vue</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">functional</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;item in props.items&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;props.itemClick(item);&quot;</span>&gt;</span></span><br><span class=\"line\">      &#123;&#123; item &#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"监听组件的生命周期\"><a href=\"#监听组件的生命周期\" class=\"headerlink\" title=\"监听组件的生命周期\"></a>监听组件的生命周期</h1><p>比如有父组件 Parent 和子组件 Child，如果父组件监听到子组件挂载 mounted 就做一些逻辑处理，常规写法可能如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Parent.vue</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Child</span> @<span class=\"attr\">mounted</span>=<span class=\"string\">&quot;doSomething&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">// Child.vue mounted() &#123; this.$emit(&quot;mounted&quot;); &#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"混入\"><a href=\"#混入\" class=\"headerlink\" title=\"混入\"></a>混入</h1><p>分发 Vue 组件中的可复用功能<br>当我们开发应用时，经常会遇到一些功能和逻辑，需要在不同的组件间多次使用，比如同样的方法逻辑，两个组件都要用到，但我们又不想也不应该完全复制两遍，这个时候就该用 mixins 了。<br>这意味着，如果我创建了一个组件，它有 X 个不同的方法、周期逻辑、本地的状态等，我想复用它们，我就可以创建个 mixins，让其他的组件扩展这个 mixins，就可以在这些新的组件里使用原本它们没有的方法了</p>\n<h1 id=\"前端路由和后端路由\"><a href=\"#前端路由和后端路由\" class=\"headerlink\" title=\"前端路由和后端路由\"></a>前端路由和后端路由</h1><p>对于路由这快的认知有一个盲点，好像都没有考虑过一直以来 jquery 等应用的页面的路由是怎么样的，webpack 管理的多页应用的路由又是怎么样实现的。</p>\n<h2 id=\"后端路由\"><a href=\"#后端路由\" class=\"headerlink\" title=\"后端路由\"></a>后端路由</h2><p>对于普通的网站，所有超链接都是 URL 地址，所有 URL 地址都对应服务器上对应的资源。</p>\n<h2 id=\"前端路由\"><a href=\"#前端路由\" class=\"headerlink\" title=\"前端路由\"></a>前端路由</h2><p>对于单页应用来说，主要通过 url 中的 hash（#号）来传值，来实现不同网页之间的切换。在单页面应用程序中，这种通过 hash 改变来切换页面的方式，称作前端路由（区别于后端路由）。</p>\n<h3 id=\"前端路由实现\"><a href=\"#前端路由实现\" class=\"headerlink\" title=\"前端路由实现\"></a>前端路由实现</h3><h4 id=\"1、Pjax-PushState-Ajax\"><a href=\"#1、Pjax-PushState-Ajax\" class=\"headerlink\" title=\"1、Pjax(PushState+Ajax)\"></a>1、Pjax(PushState+Ajax)</h4><p>原理：利用 ajax 请求替代了 a 标签的默认跳转，然后利用 html5 中的 API 修改了 url。</p>\n<p><strong>API：history.pushState 和 history.replaceSate。</strong></p>\n<p>history.pushState 和 history.replaceSate 是 HTML5 的新接口,他们可以做到改变网址却不需要刷新页面，这个特性后来就运用到了单页应用，比如：vue-router,react-router-dom 里面，pushSate 会增加一条新的历史记录，而 replaceState 则会替换当前的历史记录。（Ajax 可以实现页面的无刷新操作，于是，返回的时候，通过 url 或者其他传参，我们就可以还原到 Ajax 之前的模样）</p>\n<p>浏览器的前进和后退，会触发 window.onpopstate 事件，通过绑定 popstate 事件，就可以根据当前 url 地址中的查询内容让对应的菜单执行 Ajax 载入，实现 Ajax 的前进和后退效果。</p>\n<p>页面首次载入的时候，如果没有查询地址、或查询地址不匹配，则使用第一个菜单的 Ajax 地址的查询内容，并使用 history.replaceSate 更改当前的浏览器历史，然后触发 Ajax 操作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.history.pushSate(<span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"string\">&#x27;name/blue&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.history.pushSate(<span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"string\">&#x27;name/orange&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Hjax-Hash-Ajax\"><a href=\"#Hjax-Hash-Ajax\" class=\"headerlink\" title=\"Hjax(Hash+Ajax)\"></a>Hjax(Hash+Ajax)</h4><p>原理：url 中常会出现# ，一可以表示锚点（如回到顶部的按钮的原理），而是路由里的锚点（hash）,web 服务器并不会解析 hash，也就是说#后的内容 web 服务都会自动忽略，但是 javascript 是可以通过 window.loacation.hash 读取到的，读取到路径加以解析之后就可以响应不同路径的逻辑处理。</p>\n<h3 id=\"前端路由的缺陷\"><a href=\"#前端路由的缺陷\" class=\"headerlink\" title=\"前端路由的缺陷\"></a>前端路由的缺陷</h3><p>使用浏览器的前进后退键时，会重新发出请求，没有合理的利用缓存。</p>\n<h1 id=\"react-vue-列表组件中的-key-值。其作用是什么。\"><a href=\"#react-vue-列表组件中的-key-值。其作用是什么。\" class=\"headerlink\" title=\"react/vue 列表组件中的 key 值。其作用是什么。\"></a>react/vue 列表组件中的 key 值。其作用是什么。</h1><p>在没有绑定 key 的情况下，并且在遍历模板简单的情况下（只读模式），会导致虚拟新旧节点对比更快，节点也会被复用，这种复用就是就地复用。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;i in dataList&quot;</span>&gt;</span>&#123;&#123; i &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      dataList: [1, 2, 3, 4, 5]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>以上的例子，v-for 的内容会生成以下的 dom 节点数组：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;[</span><br><span class=\"line\">  <span class=\"string\">&#x27;&lt;div&gt;1&lt;/div&gt;&#x27;</span>, <span class=\"comment\">// id： A</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;&lt;div&gt;2&lt;/div&gt;&#x27;</span>, <span class=\"comment\">// id:  B</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;&lt;div&gt;3&lt;/div&gt;&#x27;</span>, <span class=\"comment\">// id:  C</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;&lt;div&gt;4&lt;/div&gt;&#x27;</span>, <span class=\"comment\">// id:  D</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;&lt;div&gt;5&lt;/div&gt;&#x27;</span> <span class=\"comment\">// id:  E</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>改变 dataList 数据，进行数据位置替换，对比改变后的数据</p>\n<h1 id=\"组件内导航之-beforeRouteUpdate-的使用\"><a href=\"#组件内导航之-beforeRouteUpdate-的使用\" class=\"headerlink\" title=\"组件内导航之 beforeRouteUpdate 的使用\"></a>组件内导航之 beforeRouteUpdate 的使用</h1><p>使用场景：</p>\n<p>组件复用；路由跳转；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeRouteUpdate (to, <span class=\"keyword\">from</span>, next) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在当前路由改变，但是该组件被复用时调用</span></span><br><span class=\"line\">    <span class=\"comment\">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span></span><br><span class=\"line\">    <span class=\"comment\">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span><br><span class=\"line\">    <span class=\"comment\">// 可以访问组件实例 `this`</span></span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>"},{"title":"call、applay、 bind","date":"2019-04-13T09:36:56.000Z","_content":"\n- 都是用来改变函数的 this 对象的指向的。\n- 第一个参数都是 this 要指向的对象。\n- 参数、绑定规则（显示绑定和强绑定），运行效率（最终都会转换成一个一个的参数去运行）、运行情况（call ， apply 立即执行，bind 是 return 出一个 this “ 固定 ” 的函数，这也是为什么 bind 是强绑定的一个原因）。\n- 在`javascipt`中，`call`和`apply`都是为了改变某个函数运行时的上下文而存在的，换句话说就是为了改变函数体内部`this`的指向。\n  <!--more-->\n\n## call()\n\n```javascript\nfunction class1() {\n  this.name = function() {\n    console.log(this.names);\n    console.log('我是class1内的方法');\n  };\n}\nfunction class2() {\n  this.names = 'class2内部变量';\n  class1.call(this); //此行代码执行后，当前的this指向了class1（也可以说class2继承了class1）\n}\n\nvar f = new class2();\nf.name(); //调用的是class1内的方法，将class1的name方法交给class2使用\n```\n\n```javascript\nfunction eat(x, y) {\n  console.log(x + y);\n}\nfunction drink(x, y) {\n  console.log(x - y);\n}\neat.call(drink, 3, 2); //5\n```\n\n这个例子中的意思就是用 eat 来替换 drink，eat.call(drink,3,2) == eat(3,2)\n\n```javascript\nfunction Animal() {\n  this.name = 'animal';\n  this.showName = function() {\n    console.log(this.name);\n  };\n}\nfunction Dog() {\n  this.name = 'dog';\n}\nvar animal = new Animal();\nvar dog = new Dog();\n\nanimal.showName.call(dog); //dog\n```\n\n意思是把 animal 的方法放到 dog 上执行，也可以说，把 animal 的 showName() 方法放到 dog 上来执行，所以 this.name 应该是 dog。\n\n```javascript\nfunction fruits() {}\nfruits.prototype = {\n  color: 'red',\n  say: function(a, b) {\n    console.log('my color is ' + this.color + ' ' + a + '' + b);\n  }\n};\n\nvar apple = new fruits();\napple.say(); //my color is red undefinedundefined\n\nbanana = {\n  color: 'yellow'\n};\napple.say.call(banana, 'red', 'blue'); //my color is yellowredblue\napple.say.apply(banana); //my color is yellow undefinedundefined\n```\n\n所以可以看出`call`和`apply`是为了动态改变 this 二存在的，当一个 object 没有某个方法。但是其他的有。我们可以借助 call 或 apply 用其他对象的方法来操作。\n\n```javascript\nfunc.call(this, arg1, arg2);\nfunc.apply(this, [arg1, arg2]);\n```\n\n**查找数组中的最大值**\n\n```javascript\nvar numbers = [5, 458, 120, -215];\nMath.max.apply(Math, numbers); //458\nMath.max.call(Math, 5, 458, 120, -215); //458\n\n// ES6\nMath.max.call(Math, ...numbers); // 458\n\n//或者\nvar arr = [1, 2, 3];\nvar max = Math.max(...arr);\n```\n\n### 继承\n\n```javascript\nfunction Animal(name) {\n  this.name = name;\n  this.showName = function() {\n    console.log(this.name);\n  };\n}\nfunction Dog(name) {\n  Animal.call(this, name);\n}\nvar dog = new Dog('Crazy dog');\ndog.showName();\n```\n\nAnimal.call(this) 的意思就是使用 Animal 对象代替 this 对象，那么 Dog 就能直接调用 Animal 的所有属性和方法。\n\n## apply\n\n```javascript\nfunction class1(args1, args2) {\n  this.name = function() {\n    console.log(args, args);\n  };\n}\nfunction class2() {\n  var args1 = '1';\n  var args2 = '2';\n  class1.call(this, args1, args2);\n  /*或*/\n  class1.apply(this, [args1, args2]);\n}\n\nvar c = new class2();\nc.name();\n```\n\n## bind\n\nbind 是在 EcmaScript5 中扩展的方法（IE6,7,8 不支持。)\n\nbind() 方法会创建一个新函数，称为绑定函数，当调用这个绑定函数时，绑定函数会以创建它时传入 bind() 方法的第一个参数作为 this，传入 bind() 方法的第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数。\n\n```javascript\nvar bar = function() {\n  console.log(this.x);\n};\nvar foo = {\n  x: 3\n};\nbar();\nbar.bind(foo)(); //undefined 3\n/*或*/\nvar func = bar.bind(foo);\nfunc();\n```\n","source":"_posts/call、applay、bind.md","raw":"---\ntitle: call、applay、 bind\ndate: 2019-04-13 17:36:56\ncategories: 原生JS\n---\n\n- 都是用来改变函数的 this 对象的指向的。\n- 第一个参数都是 this 要指向的对象。\n- 参数、绑定规则（显示绑定和强绑定），运行效率（最终都会转换成一个一个的参数去运行）、运行情况（call ， apply 立即执行，bind 是 return 出一个 this “ 固定 ” 的函数，这也是为什么 bind 是强绑定的一个原因）。\n- 在`javascipt`中，`call`和`apply`都是为了改变某个函数运行时的上下文而存在的，换句话说就是为了改变函数体内部`this`的指向。\n  <!--more-->\n\n## call()\n\n```javascript\nfunction class1() {\n  this.name = function() {\n    console.log(this.names);\n    console.log('我是class1内的方法');\n  };\n}\nfunction class2() {\n  this.names = 'class2内部变量';\n  class1.call(this); //此行代码执行后，当前的this指向了class1（也可以说class2继承了class1）\n}\n\nvar f = new class2();\nf.name(); //调用的是class1内的方法，将class1的name方法交给class2使用\n```\n\n```javascript\nfunction eat(x, y) {\n  console.log(x + y);\n}\nfunction drink(x, y) {\n  console.log(x - y);\n}\neat.call(drink, 3, 2); //5\n```\n\n这个例子中的意思就是用 eat 来替换 drink，eat.call(drink,3,2) == eat(3,2)\n\n```javascript\nfunction Animal() {\n  this.name = 'animal';\n  this.showName = function() {\n    console.log(this.name);\n  };\n}\nfunction Dog() {\n  this.name = 'dog';\n}\nvar animal = new Animal();\nvar dog = new Dog();\n\nanimal.showName.call(dog); //dog\n```\n\n意思是把 animal 的方法放到 dog 上执行，也可以说，把 animal 的 showName() 方法放到 dog 上来执行，所以 this.name 应该是 dog。\n\n```javascript\nfunction fruits() {}\nfruits.prototype = {\n  color: 'red',\n  say: function(a, b) {\n    console.log('my color is ' + this.color + ' ' + a + '' + b);\n  }\n};\n\nvar apple = new fruits();\napple.say(); //my color is red undefinedundefined\n\nbanana = {\n  color: 'yellow'\n};\napple.say.call(banana, 'red', 'blue'); //my color is yellowredblue\napple.say.apply(banana); //my color is yellow undefinedundefined\n```\n\n所以可以看出`call`和`apply`是为了动态改变 this 二存在的，当一个 object 没有某个方法。但是其他的有。我们可以借助 call 或 apply 用其他对象的方法来操作。\n\n```javascript\nfunc.call(this, arg1, arg2);\nfunc.apply(this, [arg1, arg2]);\n```\n\n**查找数组中的最大值**\n\n```javascript\nvar numbers = [5, 458, 120, -215];\nMath.max.apply(Math, numbers); //458\nMath.max.call(Math, 5, 458, 120, -215); //458\n\n// ES6\nMath.max.call(Math, ...numbers); // 458\n\n//或者\nvar arr = [1, 2, 3];\nvar max = Math.max(...arr);\n```\n\n### 继承\n\n```javascript\nfunction Animal(name) {\n  this.name = name;\n  this.showName = function() {\n    console.log(this.name);\n  };\n}\nfunction Dog(name) {\n  Animal.call(this, name);\n}\nvar dog = new Dog('Crazy dog');\ndog.showName();\n```\n\nAnimal.call(this) 的意思就是使用 Animal 对象代替 this 对象，那么 Dog 就能直接调用 Animal 的所有属性和方法。\n\n## apply\n\n```javascript\nfunction class1(args1, args2) {\n  this.name = function() {\n    console.log(args, args);\n  };\n}\nfunction class2() {\n  var args1 = '1';\n  var args2 = '2';\n  class1.call(this, args1, args2);\n  /*或*/\n  class1.apply(this, [args1, args2]);\n}\n\nvar c = new class2();\nc.name();\n```\n\n## bind\n\nbind 是在 EcmaScript5 中扩展的方法（IE6,7,8 不支持。)\n\nbind() 方法会创建一个新函数，称为绑定函数，当调用这个绑定函数时，绑定函数会以创建它时传入 bind() 方法的第一个参数作为 this，传入 bind() 方法的第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数。\n\n```javascript\nvar bar = function() {\n  console.log(this.x);\n};\nvar foo = {\n  x: 3\n};\nbar();\nbar.bind(foo)(); //undefined 3\n/*或*/\nvar func = bar.bind(foo);\nfunc();\n```\n","slug":"call、applay、bind","published":1,"updated":"2019-05-20T03:02:38.446Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmejaes20013xcvr21xhdpg1","content":"<ul>\n<li>都是用来改变函数的 this 对象的指向的。</li>\n<li>第一个参数都是 this 要指向的对象。</li>\n<li>参数、绑定规则（显示绑定和强绑定），运行效率（最终都会转换成一个一个的参数去运行）、运行情况（call ， apply 立即执行，bind 是 return 出一个 this “ 固定 ” 的函数，这也是为什么 bind 是强绑定的一个原因）。</li>\n<li>在<code>javascipt</code>中，<code>call</code>和<code>apply</code>都是为了改变某个函数运行时的上下文而存在的，换句话说就是为了改变函数体内部<code>this</code>的指向。<span id=\"more\"></span>\n\n</li>\n</ul>\n<h2 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call()\"></a>call()</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">class1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.names);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;我是class1内的方法&#x27;</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">class2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.names = <span class=\"string\">&#x27;class2内部变量&#x27;</span>;</span><br><span class=\"line\">  class1.call(<span class=\"built_in\">this</span>); <span class=\"comment\">//此行代码执行后，当前的this指向了class1（也可以说class2继承了class1）</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"keyword\">new</span> class2();</span><br><span class=\"line\">f.name(); <span class=\"comment\">//调用的是class1内的方法，将class1的name方法交给class2使用</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eat</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x + y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drink</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x - y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">eat.call(drink, <span class=\"number\">3</span>, <span class=\"number\">2</span>); <span class=\"comment\">//5</span></span><br></pre></td></tr></table></figure>\n\n<p>这个例子中的意思就是用 eat 来替换 drink，eat.call(drink,3,2) == eat(3,2)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;animal&#x27;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.showName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;dog&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> animal = <span class=\"keyword\">new</span> Animal();</span><br><span class=\"line\"><span class=\"keyword\">var</span> dog = <span class=\"keyword\">new</span> Dog();</span><br><span class=\"line\"></span><br><span class=\"line\">animal.showName.call(dog); <span class=\"comment\">//dog</span></span><br></pre></td></tr></table></figure>\n\n<p>意思是把 animal 的方法放到 dog 上执行，也可以说，把 animal 的 showName() 方法放到 dog 上来执行，所以 this.name 应该是 dog。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fruits</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">fruits.prototype = &#123;</span><br><span class=\"line\">  color: <span class=\"string\">&#x27;red&#x27;</span>,</span><br><span class=\"line\">  say: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;my color is &#x27;</span> + <span class=\"built_in\">this</span>.color + <span class=\"string\">&#x27; &#x27;</span> + a + <span class=\"string\">&#x27;&#x27;</span> + b);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> apple = <span class=\"keyword\">new</span> fruits();</span><br><span class=\"line\">apple.say(); <span class=\"comment\">//my color is red undefinedundefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">banana = &#123;</span><br><span class=\"line\">  color: <span class=\"string\">&#x27;yellow&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">apple.say.call(banana, <span class=\"string\">&#x27;red&#x27;</span>, <span class=\"string\">&#x27;blue&#x27;</span>); <span class=\"comment\">//my color is yellowredblue</span></span><br><span class=\"line\">apple.say.apply(banana); <span class=\"comment\">//my color is yellow undefinedundefined</span></span><br></pre></td></tr></table></figure>\n\n<p>所以可以看出<code>call</code>和<code>apply</code>是为了动态改变 this 二存在的，当一个 object 没有某个方法。但是其他的有。我们可以借助 call 或 apply 用其他对象的方法来操作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func.call(<span class=\"built_in\">this</span>, arg1, arg2);</span><br><span class=\"line\">func.apply(<span class=\"built_in\">this</span>, [arg1, arg2]);</span><br></pre></td></tr></table></figure>\n\n<p><strong>查找数组中的最大值</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">5</span>, <span class=\"number\">458</span>, <span class=\"number\">120</span>, -<span class=\"number\">215</span>];</span><br><span class=\"line\"><span class=\"built_in\">Math</span>.max.apply(<span class=\"built_in\">Math</span>, numbers); <span class=\"comment\">//458</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.max.call(<span class=\"built_in\">Math</span>, <span class=\"number\">5</span>, <span class=\"number\">458</span>, <span class=\"number\">120</span>, -<span class=\"number\">215</span>); <span class=\"comment\">//458</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.max.call(<span class=\"built_in\">Math</span>, ...numbers); <span class=\"comment\">// 458</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//或者</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> max = <span class=\"built_in\">Math</span>.max(...arr);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.showName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  Animal.call(<span class=\"built_in\">this</span>, name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> dog = <span class=\"keyword\">new</span> Dog(<span class=\"string\">&#x27;Crazy dog&#x27;</span>);</span><br><span class=\"line\">dog.showName();</span><br></pre></td></tr></table></figure>\n\n<p>Animal.call(this) 的意思就是使用 Animal 对象代替 this 对象，那么 Dog 就能直接调用 Animal 的所有属性和方法。</p>\n<h2 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">class1</span>(<span class=\"params\">args1, args2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(args, args);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">class2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> args1 = <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> args2 = <span class=\"string\">&#x27;2&#x27;</span>;</span><br><span class=\"line\">  class1.call(<span class=\"built_in\">this</span>, args1, args2);</span><br><span class=\"line\">  <span class=\"comment\">/*或*/</span></span><br><span class=\"line\">  class1.apply(<span class=\"built_in\">this</span>, [args1, args2]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> class2();</span><br><span class=\"line\">c.name();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h2><p>bind 是在 EcmaScript5 中扩展的方法（IE6,7,8 不支持。)</p>\n<p>bind() 方法会创建一个新函数，称为绑定函数，当调用这个绑定函数时，绑定函数会以创建它时传入 bind() 方法的第一个参数作为 this，传入 bind() 方法的第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.x);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">  x: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">bar();</span><br><span class=\"line\">bar.bind(foo)(); <span class=\"comment\">//undefined 3</span></span><br><span class=\"line\"><span class=\"comment\">/*或*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> func = bar.bind(foo);</span><br><span class=\"line\">func();</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<ul>\n<li>都是用来改变函数的 this 对象的指向的。</li>\n<li>第一个参数都是 this 要指向的对象。</li>\n<li>参数、绑定规则（显示绑定和强绑定），运行效率（最终都会转换成一个一个的参数去运行）、运行情况（call ， apply 立即执行，bind 是 return 出一个 this “ 固定 ” 的函数，这也是为什么 bind 是强绑定的一个原因）。</li>\n<li>在<code>javascipt</code>中，<code>call</code>和<code>apply</code>都是为了改变某个函数运行时的上下文而存在的，换句话说就是为了改变函数体内部<code>this</code>的指向。","more":"</li>\n</ul>\n<h2 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call()\"></a>call()</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">class1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.names);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;我是class1内的方法&#x27;</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">class2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.names = <span class=\"string\">&#x27;class2内部变量&#x27;</span>;</span><br><span class=\"line\">  class1.call(<span class=\"built_in\">this</span>); <span class=\"comment\">//此行代码执行后，当前的this指向了class1（也可以说class2继承了class1）</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"keyword\">new</span> class2();</span><br><span class=\"line\">f.name(); <span class=\"comment\">//调用的是class1内的方法，将class1的name方法交给class2使用</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eat</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x + y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drink</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x - y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">eat.call(drink, <span class=\"number\">3</span>, <span class=\"number\">2</span>); <span class=\"comment\">//5</span></span><br></pre></td></tr></table></figure>\n\n<p>这个例子中的意思就是用 eat 来替换 drink，eat.call(drink,3,2) == eat(3,2)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;animal&#x27;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.showName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;dog&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> animal = <span class=\"keyword\">new</span> Animal();</span><br><span class=\"line\"><span class=\"keyword\">var</span> dog = <span class=\"keyword\">new</span> Dog();</span><br><span class=\"line\"></span><br><span class=\"line\">animal.showName.call(dog); <span class=\"comment\">//dog</span></span><br></pre></td></tr></table></figure>\n\n<p>意思是把 animal 的方法放到 dog 上执行，也可以说，把 animal 的 showName() 方法放到 dog 上来执行，所以 this.name 应该是 dog。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fruits</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">fruits.prototype = &#123;</span><br><span class=\"line\">  color: <span class=\"string\">&#x27;red&#x27;</span>,</span><br><span class=\"line\">  say: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;my color is &#x27;</span> + <span class=\"built_in\">this</span>.color + <span class=\"string\">&#x27; &#x27;</span> + a + <span class=\"string\">&#x27;&#x27;</span> + b);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> apple = <span class=\"keyword\">new</span> fruits();</span><br><span class=\"line\">apple.say(); <span class=\"comment\">//my color is red undefinedundefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">banana = &#123;</span><br><span class=\"line\">  color: <span class=\"string\">&#x27;yellow&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">apple.say.call(banana, <span class=\"string\">&#x27;red&#x27;</span>, <span class=\"string\">&#x27;blue&#x27;</span>); <span class=\"comment\">//my color is yellowredblue</span></span><br><span class=\"line\">apple.say.apply(banana); <span class=\"comment\">//my color is yellow undefinedundefined</span></span><br></pre></td></tr></table></figure>\n\n<p>所以可以看出<code>call</code>和<code>apply</code>是为了动态改变 this 二存在的，当一个 object 没有某个方法。但是其他的有。我们可以借助 call 或 apply 用其他对象的方法来操作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func.call(<span class=\"built_in\">this</span>, arg1, arg2);</span><br><span class=\"line\">func.apply(<span class=\"built_in\">this</span>, [arg1, arg2]);</span><br></pre></td></tr></table></figure>\n\n<p><strong>查找数组中的最大值</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">5</span>, <span class=\"number\">458</span>, <span class=\"number\">120</span>, -<span class=\"number\">215</span>];</span><br><span class=\"line\"><span class=\"built_in\">Math</span>.max.apply(<span class=\"built_in\">Math</span>, numbers); <span class=\"comment\">//458</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.max.call(<span class=\"built_in\">Math</span>, <span class=\"number\">5</span>, <span class=\"number\">458</span>, <span class=\"number\">120</span>, -<span class=\"number\">215</span>); <span class=\"comment\">//458</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.max.call(<span class=\"built_in\">Math</span>, ...numbers); <span class=\"comment\">// 458</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//或者</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> max = <span class=\"built_in\">Math</span>.max(...arr);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.showName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  Animal.call(<span class=\"built_in\">this</span>, name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> dog = <span class=\"keyword\">new</span> Dog(<span class=\"string\">&#x27;Crazy dog&#x27;</span>);</span><br><span class=\"line\">dog.showName();</span><br></pre></td></tr></table></figure>\n\n<p>Animal.call(this) 的意思就是使用 Animal 对象代替 this 对象，那么 Dog 就能直接调用 Animal 的所有属性和方法。</p>\n<h2 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">class1</span>(<span class=\"params\">args1, args2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(args, args);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">class2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> args1 = <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> args2 = <span class=\"string\">&#x27;2&#x27;</span>;</span><br><span class=\"line\">  class1.call(<span class=\"built_in\">this</span>, args1, args2);</span><br><span class=\"line\">  <span class=\"comment\">/*或*/</span></span><br><span class=\"line\">  class1.apply(<span class=\"built_in\">this</span>, [args1, args2]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> class2();</span><br><span class=\"line\">c.name();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h2><p>bind 是在 EcmaScript5 中扩展的方法（IE6,7,8 不支持。)</p>\n<p>bind() 方法会创建一个新函数，称为绑定函数，当调用这个绑定函数时，绑定函数会以创建它时传入 bind() 方法的第一个参数作为 this，传入 bind() 方法的第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.x);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">  x: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">bar();</span><br><span class=\"line\">bar.bind(foo)(); <span class=\"comment\">//undefined 3</span></span><br><span class=\"line\"><span class=\"comment\">/*或*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> func = bar.bind(foo);</span><br><span class=\"line\">func();</span><br></pre></td></tr></table></figure>"},{"title":"css 小知识","date":"2019-04-03T03:30:11.000Z","_content":"\ncss 在开发中的填坑总结\n\n<!--more-->\n\n## 利用 css 的 content 属性 attr 抓取资料\n\n想要获取伪元素，可以用以下写法：\n\n```html\n<div data-msg=\"open\"></div>\ndiv:hover:after{ content:attr(data-mag); }\n```\n\n## 利用：valid 和：invalid 来做表单即使校验\n\n-   :required 伪类指定具有 required 属性的表单元素\n-   :valid 伪类指定一个通过匹配正确的所要求的表单元素\n-   :invalid 伪类指定一个不匹配指定要求的表单元素\n\n## writing-mode\n\n使用 writing-mode 这个 CSS 属性实现容器的文字从上往下排列。 writing-mode: vertical-rl;\n\n## 实现鼠标悬浮内容自动撑开的过渡动画\n\n需要为一个列表添加个动画，容器的高度是不确定的，也就是高度为 auto，悬浮时候撑开内容有个过渡动画。而用 CSS3 实现的话，由于高度的不确定，而 transtion 是需要具体的数值，所以设置 height:auto 是无法实现效果的，可以通过 max-height 这个属性间接的实现这么个效果，css 样式是这样的：\n\n```html\n<ul>\n    <li>\n        <div class=\"hd\">列表1</div>\n        <div class=\"bd\">\n            列表内容<br />内容列表内容<br />内容列表内容<br />内容\n        </div>\n    </li>\n    <li>\n        <div class=\"hd\">列表1</div>\n        <div class=\"bd\">\n            列表内容<br />内容列表内容<br />内容列表内容<br />内容\n        </div>\n    </li>\n    <li>\n        <div class=\"hd\">列表1</div>\n        <div class=\"bd\">\n            列表内容<br />内容列表内容<br />内容列表内容<br />内容\n        </div>\n    </li>\n</ul>\n.bd { max-height:0; overflow:hidden; transition: all 1s ease-out; } li:hover .bd\n{ max-height: 600px; transition-timing-function: ease-in; }\n```\n\n## 移动端 web 页面支持弹性滚动\n\n-webkit-overflow-scrolling: touch;\n\n## 美化浏览器自带的 radio ，checkbox 属性\n\n```html\n<div class=\"radio-beauty-container\">\n    <label>\n        <span class=\"radio-name\">前端工程师</span>\n        <input type=\"radio\" name=\"radioName\" id=\"radioName1\" hidden />\n        <label for=\"radioName1\" class=\"radio-beauty\"></label>\n    </label>\n    <label>\n        <span class=\"radio-name\">后端工程师</span>\n        <input type=\"radio\" name=\"radioName\" id=\"radioName2\" hidden />\n        <label for=\"radioName2\" class=\"radio-beauty\"></label>\n    </label>\n    <label>\n        <span class=\"radio-name\">全栈工程师</span>\n        <input type=\"radio\" name=\"radioName\" id=\"radioName3\" hidden />\n        <label for=\"radioName3\" class=\"radio-beauty\"></label>\n    </label>\n</div>\n.radio-beauty-container { font-size: 0; $bgc: green; %common { padding: 2px;\nbackground-color: $bgc; background-clip: content-box; } .radio-name {\nvertical-align: middle; font-size: 16px; } .radio-beauty { width: 18px; height:\n18px; box-sizing: border-box; display: inline-block; border: 1px solid $bgc;\nvertical-align: middle; margin: 0 15px 0 3px; border-radius: 50%; &:hover {\nbox-shadow: 0 0 7px $bgc; @extend %common; } }\ninput[type=\"radio\"]:checked+.radio-beauty { @extend %common; } }\n```\n\n## 改变 input 焦点光标的颜色\n\n```html\n<input value=\"This field uses a default caret.\" />\n<input class=\"custom\" value=\"I have a custom caret color!\" />\ninput { caret-color: auto; display: block; margin-bottom: .5em; } input.custom {\ncaret-color: red; }\n```\n\n## rem 布局不再使用 JavaScript 设置\n\n现在移动端 css3 单位 vw ,wh 兼容性已经很不错了，在不需要兼容太低版本的安卓机情况下可以这样来：\n\n```css\nhtml {\n    font-size: 100vw / 750;\n}\n```\n\n## 切角效果实现\n\n切角效果是时下非常流行的一种设计风格，并广泛运用于平面设计中，它最常见的形态就是把元素的一个或多个切成 45° 的切口，尤其是在最近几年，扁平化设计盖过拟物化设计后，这种切脚设计更为流行，例如下图就是通过切角实现的一个导航栏，在后面将详细论述起实现。\n\n![network](https://camo.githubusercontent.com/b07ae76cf4ce21d62ef2a4ce97932d831e723c50/687474703a2f2f636f6e74656e742d6d616e6167656d656e742e62302e7570616979756e2e636f6d2f313437323739393439333539332e706e67)\n\n## BFC（快格式化上下文）\n\n它决定了元素如何对其内容进行定位，以及与其他元素的关系的相互作用。当涉及到可视化布局时，BFC 提供了一个环境，HTML 元素在这个环境中按照一定规则进行布局。一个环境元素不会影响到其他环境中的布局。\n\n### BFC 的作用：\n\n-   可以包含浮动元素\n-   不被浮动元素覆盖\n-   阻止父子元素的 margin 折叠\n\n### BFC 的特征：\n\n-   内部的 BOX 会在垂直方向，一个接一个地放置。\n-   BOX 垂直方向的距离由 margin 决定。属于同一个 BFC 的两个 BOX 的 margin 会发生重叠。\n-   BFC 的区域不会与 float BOX 重叠。\n-   BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也是如此。\n-   计算 BFC 的高度时，float 元素也会参与计算。\n\n### 如何触发 BFC？\n\n-   float 的值部位 none。\n-   position 的值不为 static 或者是 relative。\n-   display 的值为 table-cell,table-caption,inline-block,flex,或者 inline-flex 中的一个。\n-   overflow 的值不为 visible。\n\n## 响应式页面开发\n\n在页头`head`标签内添加`viewoport meta`是实现响应式页面的第一步。\n\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n```\n\n### 使用`Media Queries`\n\n-   使用 link 标签 ，根据指定特性引入特定的外部样式文件\n\n    ```html\n    <link rel=\"stylesheet\" media=\"(max-width:640px)\" href=\"max-640px.css\" />\n    ```\n\n-   直接在 style 标签或样式文件内使用`@media`规则\n\n### 样式断点\n\n-   moblie 移动设备断点 ，视窗宽度<=768px\n-   tablet 平板电脑设备断点，视窗宽度>=769px\n-   desktop 桌面电脑断点，视窗宽度>=1024px\n-   widescreen 宽屏电脑断点，视窗宽度>=1216px\n-   fullhd 高清宽屏电脑断点，视窗宽度>=1408px\n\n## 1px 细线（普通屏幕下 1px，高清屏下 0.5px 的情况）\n\n```css\n.mod_grid {\n    position: relative;\n    &::after {\n        // 实现1物理像素的下边框线\n        content: '';\n        position: absolute;\n        z-index: 1;\n        pointer-events: none;\n        background-color: #ddd;\n        height: 1px;\n        left: 0;\n        right: 0;\n        top: 0;\n        @media only screen and (-webkit-min-device-pixel-ratio: 2) {\n            -webkit-transform: scaleY(0.5);\n            -webkit-transform-origin: 50% 0%;\n        }\n    }\n    ...\n}...\n```\n\n## 需要保持宽高比的图，应该用 padding-top 实现\n\n```css\n.mod_banner {\n    position: relative;\n    /* 使用padding-top 实现宽高比为 100:750 的图片区域 */\n    padding-top: percentage(100/750);\n    height: 0;\n    overflow: hidden;\n    img {\n        width: 100%;\n        height: auto;\n        position: absolute;\n        left: 0;\n        top: 0;\n    }\n}\n```\n\n## `input type=file onchange`\n\n-   上传同一张图片失效\n-   在微信浏览器内无法上传图片 (经测试是不支持`input type=file` 就算支持也无法上传 camera 目录下的文件 )\n\n```javascript\n$fileInput.on(\"change\", function(e) {\n    e.target.value = \"\";\n});\n```\n\n第二个问题实在没有找到方法 准备使用带有 flash 的插件\n使用百度网盘，饿了么的网页在微信中有同样的问题\n\n## `meta viewport`\n\n```html\n<!DOCTYPE html> H5标准声明，使用 HTML5 doctype，不区分大小写\n<head lang=\"”en”\">\n    标准的 lang 属性写法\n    <meta charset=\"’utf-8′\" />\n    声明文档使用的字符编码 <meta http-equiv=”X-UA-Compatible”\n    content=”IE=edge,chrome=1″/> 优先使用 IE 最新版本和 Chrome\n    <meta name=\"”description”\" content=\"”不超过150个字符”\" />\n    页面描述\n    <meta name=\"”keywords”\" content=\"””\" />\n    页面关键词\n    <meta name=\"”author”\" content=\"”name,\" email@gmail.com” />\n    网页作者\n    <meta name=\"”robots”\" content=\"”index,follow”\" />\n    搜索引擎抓取 <meta name=”viewport” content=”initial-scale=1,\n    maximum-scale=3, minimum-scale=1, user-scalable=no”> 为移动设备添加 viewport\n    <meta name=\"”apple-mobile-web-app-title”\" content=\"”标题”\" />\n    iOS 设备 begin\n    <meta name=\"”apple-mobile-web-app-capable”\" content=\"”yes”\" />\n    添加到主屏后的标题（iOS 6 新增）是否启用 WebApp\n    全屏模式，删除苹果默认的工具栏和菜单栏 <meta name=”apple-itunes-app”\n    content=”app-id=myAppStoreID, affiliate-data=myAffiliateData,\n    app-argument=myURL”>添加智能 App 广告条 Smart App Banner（iOS 6+ Safari）\n    <meta name=\"”apple-mobile-web-app-status-bar-style”\" content=\"”black”\" />\n    <meta name=”format-detection” content=”telphone=no, email=no”/>\n    设置苹果工具栏颜色\n    <meta name=\"”renderer”\" content=\"”webkit”\" />\n    启用360浏览器的极速模式(webkit) <meta http-equiv=”X-UA-Compatible”\n    content=”IE=edge”> 避免IE使用兼容模式\n    <meta http-equiv=\"”Cache-Control”\" content=\"”no-siteapp”\" />\n    不让百度转码\n    <meta name=\"”HandheldFriendly”\" content=\"”true”\" />\n    针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓\n    <meta name=\"”MobileOptimized”\" content=\"”320″\" />\n    微软的老式浏览器\n    <meta name=\"”screen-orientation”\" content=\"”portrait”\" />\n    uc强制竖屏\n    <meta name=\"”x5-orientation”\" content=\"”portrait”\" />\n    QQ强制竖屏\n    <meta name=\"”full-screen”\" content=\"”yes”\" />\n    UC强制全屏\n    <meta name=\"”x5-fullscreen”\" content=\"”true”\" />\n    QQ强制全屏\n    <meta name=\"”browsermode”\" content=\"”application”\" />\n    UC应用模式\n    <meta name=\"”x5-page-mode”\" content=\"”app”\" />\n    QQ应用模式\n    <meta name=\"”msapplication-tap-highlight”\" content=\"”no”\" />\n    windows phone 点击无高光设置页面不缓存\n    <meta http-equiv=\"”pragma”\" content=\"”no-cache”\" />\n    <meta http-equiv=\"”cache-control”\" content=\"”no-cache”\" />\n    <meta http-equiv=\"”expires”\" content=\"”0″\" />\n</head>\n```\n\n## 字少时居中，多时靠左\n\n```html\n<div class=\"box\">\n    <p class=\"content\"></p>\n</div>\n\n<!-- CSS -->\n<style>\n    .box {\n        text-align: center;\n    }\n    .content {\n        display: inline-block;\n        text-align: left;\n        word-break: break-all;\n    }\n</style>\n```\n\n## CSS 权重\n\n权重分为 4 级，分别是：\n\n-   内联样式:1000\n-   id:100\n-   类，伪类和属性选择器 `:hover`,`[attributer]`,权值为 10\n-   代表元素选择器和伪元素选择器，`div`\n\n** 需要注意的是：通用选择器（\\*），子选择器（>）和相邻通报选择器并不在这四个等级中，所以他们的权值为 0**\n\n## CSS3 动画\n\n-   `animation-name`:对应的动画名称\n-   `animation-duration`:是动画时长\n-   `animation-timing-function`:规定动画的速度曲线。默认是 ease\n-   `animation-delay`:规定动画何时开始。默认是 0\n-   `animation-iteration-count`:规定动画播放的次数。默认是 1\n-   `animation-diraction`:规定动画是否在下一周期逆向地播放。默认是 normal\n-   `animation-play-state`:规定动画是否正在运行或暂停。默认是 running\n-   `animation-fill-mode`:规定动画执行之前和之后如何给动画的目标应用，默认是 none，保留在最后一帧可以用 forwords\n\n### 实现动画暂停\n\n使用`animation-play-state`可以实现动画暂停\n\n```html\n.play-state { width: 100px; height: 100px; margin: 40px; text-align: center;\nline-height: 94px; border: 3px solid #e1efde; border-radius: 50%; animation:\nplay-state 3s linear infinite; cursor: pointer; } .play-state:hover {\nanimation-play-state: paused; } @keyframes play-state { 0% { margin-left: 0; }\n100% { margin-left: 200px } }\n```\n\n## 重绘和回流\n\n-   重绘：指的是当前页面中的元素不脱离文档流。而简单的样式的变化，比如修改颜色，背景等，浏览器重新绘制样式\n-   回流：指的是处于文档流中 DOM 的尺寸大小，位置或者默写属性变化时，导致浏览器重新渲染部分或全部文档的情况\n\n## 首行缩进\n\n```css\ntext-indent: 2em;\n```\n\n## 一种奇妙的绝对居中办法\n\n```html\n<style>\n    .wp {\n        writing-mode: vertical-lr;\n        text-align: center;\n    }\n    .wp-inner {\n        writing-mode: horizontal-tb;\n        display: inline-block;\n        text-align: center;\n        width: 100%;\n    }\n    .box {\n        display: inline-block;\n        margin: auto;\n        text-align: left;\n    }\n</style>\n<div class=\"wp\">\n    <div class=\"wp-inner\">\n        <div class=\"box\">123123</div>\n    </div>\n</div>\n```\n","source":"_posts/css-小知识.md","raw":"---\ntitle: css 小知识\ndate: 2019-04-03 11:30:11\ncategories: css\n---\n\ncss 在开发中的填坑总结\n\n<!--more-->\n\n## 利用 css 的 content 属性 attr 抓取资料\n\n想要获取伪元素，可以用以下写法：\n\n```html\n<div data-msg=\"open\"></div>\ndiv:hover:after{ content:attr(data-mag); }\n```\n\n## 利用：valid 和：invalid 来做表单即使校验\n\n-   :required 伪类指定具有 required 属性的表单元素\n-   :valid 伪类指定一个通过匹配正确的所要求的表单元素\n-   :invalid 伪类指定一个不匹配指定要求的表单元素\n\n## writing-mode\n\n使用 writing-mode 这个 CSS 属性实现容器的文字从上往下排列。 writing-mode: vertical-rl;\n\n## 实现鼠标悬浮内容自动撑开的过渡动画\n\n需要为一个列表添加个动画，容器的高度是不确定的，也就是高度为 auto，悬浮时候撑开内容有个过渡动画。而用 CSS3 实现的话，由于高度的不确定，而 transtion 是需要具体的数值，所以设置 height:auto 是无法实现效果的，可以通过 max-height 这个属性间接的实现这么个效果，css 样式是这样的：\n\n```html\n<ul>\n    <li>\n        <div class=\"hd\">列表1</div>\n        <div class=\"bd\">\n            列表内容<br />内容列表内容<br />内容列表内容<br />内容\n        </div>\n    </li>\n    <li>\n        <div class=\"hd\">列表1</div>\n        <div class=\"bd\">\n            列表内容<br />内容列表内容<br />内容列表内容<br />内容\n        </div>\n    </li>\n    <li>\n        <div class=\"hd\">列表1</div>\n        <div class=\"bd\">\n            列表内容<br />内容列表内容<br />内容列表内容<br />内容\n        </div>\n    </li>\n</ul>\n.bd { max-height:0; overflow:hidden; transition: all 1s ease-out; } li:hover .bd\n{ max-height: 600px; transition-timing-function: ease-in; }\n```\n\n## 移动端 web 页面支持弹性滚动\n\n-webkit-overflow-scrolling: touch;\n\n## 美化浏览器自带的 radio ，checkbox 属性\n\n```html\n<div class=\"radio-beauty-container\">\n    <label>\n        <span class=\"radio-name\">前端工程师</span>\n        <input type=\"radio\" name=\"radioName\" id=\"radioName1\" hidden />\n        <label for=\"radioName1\" class=\"radio-beauty\"></label>\n    </label>\n    <label>\n        <span class=\"radio-name\">后端工程师</span>\n        <input type=\"radio\" name=\"radioName\" id=\"radioName2\" hidden />\n        <label for=\"radioName2\" class=\"radio-beauty\"></label>\n    </label>\n    <label>\n        <span class=\"radio-name\">全栈工程师</span>\n        <input type=\"radio\" name=\"radioName\" id=\"radioName3\" hidden />\n        <label for=\"radioName3\" class=\"radio-beauty\"></label>\n    </label>\n</div>\n.radio-beauty-container { font-size: 0; $bgc: green; %common { padding: 2px;\nbackground-color: $bgc; background-clip: content-box; } .radio-name {\nvertical-align: middle; font-size: 16px; } .radio-beauty { width: 18px; height:\n18px; box-sizing: border-box; display: inline-block; border: 1px solid $bgc;\nvertical-align: middle; margin: 0 15px 0 3px; border-radius: 50%; &:hover {\nbox-shadow: 0 0 7px $bgc; @extend %common; } }\ninput[type=\"radio\"]:checked+.radio-beauty { @extend %common; } }\n```\n\n## 改变 input 焦点光标的颜色\n\n```html\n<input value=\"This field uses a default caret.\" />\n<input class=\"custom\" value=\"I have a custom caret color!\" />\ninput { caret-color: auto; display: block; margin-bottom: .5em; } input.custom {\ncaret-color: red; }\n```\n\n## rem 布局不再使用 JavaScript 设置\n\n现在移动端 css3 单位 vw ,wh 兼容性已经很不错了，在不需要兼容太低版本的安卓机情况下可以这样来：\n\n```css\nhtml {\n    font-size: 100vw / 750;\n}\n```\n\n## 切角效果实现\n\n切角效果是时下非常流行的一种设计风格，并广泛运用于平面设计中，它最常见的形态就是把元素的一个或多个切成 45° 的切口，尤其是在最近几年，扁平化设计盖过拟物化设计后，这种切脚设计更为流行，例如下图就是通过切角实现的一个导航栏，在后面将详细论述起实现。\n\n![network](https://camo.githubusercontent.com/b07ae76cf4ce21d62ef2a4ce97932d831e723c50/687474703a2f2f636f6e74656e742d6d616e6167656d656e742e62302e7570616979756e2e636f6d2f313437323739393439333539332e706e67)\n\n## BFC（快格式化上下文）\n\n它决定了元素如何对其内容进行定位，以及与其他元素的关系的相互作用。当涉及到可视化布局时，BFC 提供了一个环境，HTML 元素在这个环境中按照一定规则进行布局。一个环境元素不会影响到其他环境中的布局。\n\n### BFC 的作用：\n\n-   可以包含浮动元素\n-   不被浮动元素覆盖\n-   阻止父子元素的 margin 折叠\n\n### BFC 的特征：\n\n-   内部的 BOX 会在垂直方向，一个接一个地放置。\n-   BOX 垂直方向的距离由 margin 决定。属于同一个 BFC 的两个 BOX 的 margin 会发生重叠。\n-   BFC 的区域不会与 float BOX 重叠。\n-   BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也是如此。\n-   计算 BFC 的高度时，float 元素也会参与计算。\n\n### 如何触发 BFC？\n\n-   float 的值部位 none。\n-   position 的值不为 static 或者是 relative。\n-   display 的值为 table-cell,table-caption,inline-block,flex,或者 inline-flex 中的一个。\n-   overflow 的值不为 visible。\n\n## 响应式页面开发\n\n在页头`head`标签内添加`viewoport meta`是实现响应式页面的第一步。\n\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n```\n\n### 使用`Media Queries`\n\n-   使用 link 标签 ，根据指定特性引入特定的外部样式文件\n\n    ```html\n    <link rel=\"stylesheet\" media=\"(max-width:640px)\" href=\"max-640px.css\" />\n    ```\n\n-   直接在 style 标签或样式文件内使用`@media`规则\n\n### 样式断点\n\n-   moblie 移动设备断点 ，视窗宽度<=768px\n-   tablet 平板电脑设备断点，视窗宽度>=769px\n-   desktop 桌面电脑断点，视窗宽度>=1024px\n-   widescreen 宽屏电脑断点，视窗宽度>=1216px\n-   fullhd 高清宽屏电脑断点，视窗宽度>=1408px\n\n## 1px 细线（普通屏幕下 1px，高清屏下 0.5px 的情况）\n\n```css\n.mod_grid {\n    position: relative;\n    &::after {\n        // 实现1物理像素的下边框线\n        content: '';\n        position: absolute;\n        z-index: 1;\n        pointer-events: none;\n        background-color: #ddd;\n        height: 1px;\n        left: 0;\n        right: 0;\n        top: 0;\n        @media only screen and (-webkit-min-device-pixel-ratio: 2) {\n            -webkit-transform: scaleY(0.5);\n            -webkit-transform-origin: 50% 0%;\n        }\n    }\n    ...\n}...\n```\n\n## 需要保持宽高比的图，应该用 padding-top 实现\n\n```css\n.mod_banner {\n    position: relative;\n    /* 使用padding-top 实现宽高比为 100:750 的图片区域 */\n    padding-top: percentage(100/750);\n    height: 0;\n    overflow: hidden;\n    img {\n        width: 100%;\n        height: auto;\n        position: absolute;\n        left: 0;\n        top: 0;\n    }\n}\n```\n\n## `input type=file onchange`\n\n-   上传同一张图片失效\n-   在微信浏览器内无法上传图片 (经测试是不支持`input type=file` 就算支持也无法上传 camera 目录下的文件 )\n\n```javascript\n$fileInput.on(\"change\", function(e) {\n    e.target.value = \"\";\n});\n```\n\n第二个问题实在没有找到方法 准备使用带有 flash 的插件\n使用百度网盘，饿了么的网页在微信中有同样的问题\n\n## `meta viewport`\n\n```html\n<!DOCTYPE html> H5标准声明，使用 HTML5 doctype，不区分大小写\n<head lang=\"”en”\">\n    标准的 lang 属性写法\n    <meta charset=\"’utf-8′\" />\n    声明文档使用的字符编码 <meta http-equiv=”X-UA-Compatible”\n    content=”IE=edge,chrome=1″/> 优先使用 IE 最新版本和 Chrome\n    <meta name=\"”description”\" content=\"”不超过150个字符”\" />\n    页面描述\n    <meta name=\"”keywords”\" content=\"””\" />\n    页面关键词\n    <meta name=\"”author”\" content=\"”name,\" email@gmail.com” />\n    网页作者\n    <meta name=\"”robots”\" content=\"”index,follow”\" />\n    搜索引擎抓取 <meta name=”viewport” content=”initial-scale=1,\n    maximum-scale=3, minimum-scale=1, user-scalable=no”> 为移动设备添加 viewport\n    <meta name=\"”apple-mobile-web-app-title”\" content=\"”标题”\" />\n    iOS 设备 begin\n    <meta name=\"”apple-mobile-web-app-capable”\" content=\"”yes”\" />\n    添加到主屏后的标题（iOS 6 新增）是否启用 WebApp\n    全屏模式，删除苹果默认的工具栏和菜单栏 <meta name=”apple-itunes-app”\n    content=”app-id=myAppStoreID, affiliate-data=myAffiliateData,\n    app-argument=myURL”>添加智能 App 广告条 Smart App Banner（iOS 6+ Safari）\n    <meta name=\"”apple-mobile-web-app-status-bar-style”\" content=\"”black”\" />\n    <meta name=”format-detection” content=”telphone=no, email=no”/>\n    设置苹果工具栏颜色\n    <meta name=\"”renderer”\" content=\"”webkit”\" />\n    启用360浏览器的极速模式(webkit) <meta http-equiv=”X-UA-Compatible”\n    content=”IE=edge”> 避免IE使用兼容模式\n    <meta http-equiv=\"”Cache-Control”\" content=\"”no-siteapp”\" />\n    不让百度转码\n    <meta name=\"”HandheldFriendly”\" content=\"”true”\" />\n    针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓\n    <meta name=\"”MobileOptimized”\" content=\"”320″\" />\n    微软的老式浏览器\n    <meta name=\"”screen-orientation”\" content=\"”portrait”\" />\n    uc强制竖屏\n    <meta name=\"”x5-orientation”\" content=\"”portrait”\" />\n    QQ强制竖屏\n    <meta name=\"”full-screen”\" content=\"”yes”\" />\n    UC强制全屏\n    <meta name=\"”x5-fullscreen”\" content=\"”true”\" />\n    QQ强制全屏\n    <meta name=\"”browsermode”\" content=\"”application”\" />\n    UC应用模式\n    <meta name=\"”x5-page-mode”\" content=\"”app”\" />\n    QQ应用模式\n    <meta name=\"”msapplication-tap-highlight”\" content=\"”no”\" />\n    windows phone 点击无高光设置页面不缓存\n    <meta http-equiv=\"”pragma”\" content=\"”no-cache”\" />\n    <meta http-equiv=\"”cache-control”\" content=\"”no-cache”\" />\n    <meta http-equiv=\"”expires”\" content=\"”0″\" />\n</head>\n```\n\n## 字少时居中，多时靠左\n\n```html\n<div class=\"box\">\n    <p class=\"content\"></p>\n</div>\n\n<!-- CSS -->\n<style>\n    .box {\n        text-align: center;\n    }\n    .content {\n        display: inline-block;\n        text-align: left;\n        word-break: break-all;\n    }\n</style>\n```\n\n## CSS 权重\n\n权重分为 4 级，分别是：\n\n-   内联样式:1000\n-   id:100\n-   类，伪类和属性选择器 `:hover`,`[attributer]`,权值为 10\n-   代表元素选择器和伪元素选择器，`div`\n\n** 需要注意的是：通用选择器（\\*），子选择器（>）和相邻通报选择器并不在这四个等级中，所以他们的权值为 0**\n\n## CSS3 动画\n\n-   `animation-name`:对应的动画名称\n-   `animation-duration`:是动画时长\n-   `animation-timing-function`:规定动画的速度曲线。默认是 ease\n-   `animation-delay`:规定动画何时开始。默认是 0\n-   `animation-iteration-count`:规定动画播放的次数。默认是 1\n-   `animation-diraction`:规定动画是否在下一周期逆向地播放。默认是 normal\n-   `animation-play-state`:规定动画是否正在运行或暂停。默认是 running\n-   `animation-fill-mode`:规定动画执行之前和之后如何给动画的目标应用，默认是 none，保留在最后一帧可以用 forwords\n\n### 实现动画暂停\n\n使用`animation-play-state`可以实现动画暂停\n\n```html\n.play-state { width: 100px; height: 100px; margin: 40px; text-align: center;\nline-height: 94px; border: 3px solid #e1efde; border-radius: 50%; animation:\nplay-state 3s linear infinite; cursor: pointer; } .play-state:hover {\nanimation-play-state: paused; } @keyframes play-state { 0% { margin-left: 0; }\n100% { margin-left: 200px } }\n```\n\n## 重绘和回流\n\n-   重绘：指的是当前页面中的元素不脱离文档流。而简单的样式的变化，比如修改颜色，背景等，浏览器重新绘制样式\n-   回流：指的是处于文档流中 DOM 的尺寸大小，位置或者默写属性变化时，导致浏览器重新渲染部分或全部文档的情况\n\n## 首行缩进\n\n```css\ntext-indent: 2em;\n```\n\n## 一种奇妙的绝对居中办法\n\n```html\n<style>\n    .wp {\n        writing-mode: vertical-lr;\n        text-align: center;\n    }\n    .wp-inner {\n        writing-mode: horizontal-tb;\n        display: inline-block;\n        text-align: center;\n        width: 100%;\n    }\n    .box {\n        display: inline-block;\n        margin: auto;\n        text-align: left;\n    }\n</style>\n<div class=\"wp\">\n    <div class=\"wp-inner\">\n        <div class=\"box\">123123</div>\n    </div>\n</div>\n```\n","slug":"css-小知识","published":1,"updated":"2021-03-04T02:23:59.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmejaes30015xcvrfyd9d0am","content":"<p>css 在开发中的填坑总结</p>\n<span id=\"more\"></span>\n\n<h2 id=\"利用-css-的-content-属性-attr-抓取资料\"><a href=\"#利用-css-的-content-属性-attr-抓取资料\" class=\"headerlink\" title=\"利用 css 的 content 属性 attr 抓取资料\"></a>利用 css 的 content 属性 attr 抓取资料</h2><p>想要获取伪元素，可以用以下写法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-msg</span>=<span class=\"string\">&quot;open&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">div:hover:after&#123; content:attr(data-mag); &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"利用：valid-和：invalid-来做表单即使校验\"><a href=\"#利用：valid-和：invalid-来做表单即使校验\" class=\"headerlink\" title=\"利用：valid 和：invalid 来做表单即使校验\"></a>利用：valid 和：invalid 来做表单即使校验</h2><ul>\n<li>  :required 伪类指定具有 required 属性的表单元素</li>\n<li>  :valid 伪类指定一个通过匹配正确的所要求的表单元素</li>\n<li>  :invalid 伪类指定一个不匹配指定要求的表单元素</li>\n</ul>\n<h2 id=\"writing-mode\"><a href=\"#writing-mode\" class=\"headerlink\" title=\"writing-mode\"></a>writing-mode</h2><p>使用 writing-mode 这个 CSS 属性实现容器的文字从上往下排列。 writing-mode: vertical-rl;</p>\n<h2 id=\"实现鼠标悬浮内容自动撑开的过渡动画\"><a href=\"#实现鼠标悬浮内容自动撑开的过渡动画\" class=\"headerlink\" title=\"实现鼠标悬浮内容自动撑开的过渡动画\"></a>实现鼠标悬浮内容自动撑开的过渡动画</h2><p>需要为一个列表添加个动画，容器的高度是不确定的，也就是高度为 auto，悬浮时候撑开内容有个过渡动画。而用 CSS3 实现的话，由于高度的不确定，而 transtion 是需要具体的数值，所以设置 height:auto 是无法实现效果的，可以通过 max-height 这个属性间接的实现这么个效果，css 样式是这样的：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;hd&quot;</span>&gt;</span>列表1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;bd&quot;</span>&gt;</span></span><br><span class=\"line\">            列表内容<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>内容列表内容<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>内容列表内容<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>内容</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;hd&quot;</span>&gt;</span>列表1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;bd&quot;</span>&gt;</span></span><br><span class=\"line\">            列表内容<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>内容列表内容<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>内容列表内容<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>内容</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;hd&quot;</span>&gt;</span>列表1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;bd&quot;</span>&gt;</span></span><br><span class=\"line\">            列表内容<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>内容列表内容<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>内容列表内容<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>内容</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">.bd &#123; max-height:0; overflow:hidden; transition: all 1s ease-out; &#125; li:hover .bd</span><br><span class=\"line\">&#123; max-height: 600px; transition-timing-function: ease-in; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"移动端-web-页面支持弹性滚动\"><a href=\"#移动端-web-页面支持弹性滚动\" class=\"headerlink\" title=\"移动端 web 页面支持弹性滚动\"></a>移动端 web 页面支持弹性滚动</h2><p>-webkit-overflow-scrolling: touch;</p>\n<h2 id=\"美化浏览器自带的-radio-，checkbox-属性\"><a href=\"#美化浏览器自带的-radio-，checkbox-属性\" class=\"headerlink\" title=\"美化浏览器自带的 radio ，checkbox 属性\"></a>美化浏览器自带的 radio ，checkbox 属性</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;radio-beauty-container&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;radio-name&quot;</span>&gt;</span>前端工程师<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;radioName&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;radioName1&quot;</span> <span class=\"attr\">hidden</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;radioName1&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;radio-beauty&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;radio-name&quot;</span>&gt;</span>后端工程师<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;radioName&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;radioName2&quot;</span> <span class=\"attr\">hidden</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;radioName2&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;radio-beauty&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;radio-name&quot;</span>&gt;</span>全栈工程师<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;radioName&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;radioName3&quot;</span> <span class=\"attr\">hidden</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;radioName3&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;radio-beauty&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">.radio-beauty-container &#123; font-size: 0; $bgc: green; %common &#123; padding: 2px;</span><br><span class=\"line\">background-color: $bgc; background-clip: content-box; &#125; .radio-name &#123;</span><br><span class=\"line\">vertical-align: middle; font-size: 16px; &#125; .radio-beauty &#123; width: 18px; height:</span><br><span class=\"line\">18px; box-sizing: border-box; display: inline-block; border: 1px solid $bgc;</span><br><span class=\"line\">vertical-align: middle; margin: 0 15px 0 3px; border-radius: 50%; &amp;:hover &#123;</span><br><span class=\"line\">box-shadow: 0 0 7px $bgc; @extend %common; &#125; &#125;</span><br><span class=\"line\">input[type=&quot;radio&quot;]:checked+.radio-beauty &#123; @extend %common; &#125; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"改变-input-焦点光标的颜色\"><a href=\"#改变-input-焦点光标的颜色\" class=\"headerlink\" title=\"改变 input 焦点光标的颜色\"></a>改变 input 焦点光标的颜色</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;This field uses a default caret.&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;custom&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;I have a custom caret color!&quot;</span> /&gt;</span></span><br><span class=\"line\">input &#123; caret-color: auto; display: block; margin-bottom: .5em; &#125; input.custom &#123;</span><br><span class=\"line\">caret-color: red; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"rem-布局不再使用-JavaScript-设置\"><a href=\"#rem-布局不再使用-JavaScript-设置\" class=\"headerlink\" title=\"rem 布局不再使用 JavaScript 设置\"></a>rem 布局不再使用 JavaScript 设置</h2><p>现在移动端 css3 单位 vw ,wh 兼容性已经很不错了，在不需要兼容太低版本的安卓机情况下可以这样来：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">100vw</span> / <span class=\"number\">750</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"切角效果实现\"><a href=\"#切角效果实现\" class=\"headerlink\" title=\"切角效果实现\"></a>切角效果实现</h2><p>切角效果是时下非常流行的一种设计风格，并广泛运用于平面设计中，它最常见的形态就是把元素的一个或多个切成 45° 的切口，尤其是在最近几年，扁平化设计盖过拟物化设计后，这种切脚设计更为流行，例如下图就是通过切角实现的一个导航栏，在后面将详细论述起实现。</p>\n<p><img src=\"https://camo.githubusercontent.com/b07ae76cf4ce21d62ef2a4ce97932d831e723c50/687474703a2f2f636f6e74656e742d6d616e6167656d656e742e62302e7570616979756e2e636f6d2f313437323739393439333539332e706e67\" alt=\"network\"></p>\n<h2 id=\"BFC（快格式化上下文）\"><a href=\"#BFC（快格式化上下文）\" class=\"headerlink\" title=\"BFC（快格式化上下文）\"></a>BFC（快格式化上下文）</h2><p>它决定了元素如何对其内容进行定位，以及与其他元素的关系的相互作用。当涉及到可视化布局时，BFC 提供了一个环境，HTML 元素在这个环境中按照一定规则进行布局。一个环境元素不会影响到其他环境中的布局。</p>\n<h3 id=\"BFC-的作用：\"><a href=\"#BFC-的作用：\" class=\"headerlink\" title=\"BFC 的作用：\"></a>BFC 的作用：</h3><ul>\n<li>  可以包含浮动元素</li>\n<li>  不被浮动元素覆盖</li>\n<li>  阻止父子元素的 margin 折叠</li>\n</ul>\n<h3 id=\"BFC-的特征：\"><a href=\"#BFC-的特征：\" class=\"headerlink\" title=\"BFC 的特征：\"></a>BFC 的特征：</h3><ul>\n<li>  内部的 BOX 会在垂直方向，一个接一个地放置。</li>\n<li>  BOX 垂直方向的距离由 margin 决定。属于同一个 BFC 的两个 BOX 的 margin 会发生重叠。</li>\n<li>  BFC 的区域不会与 float BOX 重叠。</li>\n<li>  BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也是如此。</li>\n<li>  计算 BFC 的高度时，float 元素也会参与计算。</li>\n</ul>\n<h3 id=\"如何触发-BFC？\"><a href=\"#如何触发-BFC？\" class=\"headerlink\" title=\"如何触发 BFC？\"></a>如何触发 BFC？</h3><ul>\n<li>  float 的值部位 none。</li>\n<li>  position 的值不为 static 或者是 relative。</li>\n<li>  display 的值为 table-cell,table-caption,inline-block,flex,或者 inline-flex 中的一个。</li>\n<li>  overflow 的值不为 visible。</li>\n</ul>\n<h2 id=\"响应式页面开发\"><a href=\"#响应式页面开发\" class=\"headerlink\" title=\"响应式页面开发\"></a>响应式页面开发</h2><p>在页头<code>head</code>标签内添加<code>viewoport meta</code>是实现响应式页面的第一步。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用Media-Queries\"><a href=\"#使用Media-Queries\" class=\"headerlink\" title=\"使用Media Queries\"></a>使用<code>Media Queries</code></h3><ul>\n<li><p>使用 link 标签 ，根据指定特性引入特定的外部样式文件</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">media</span>=<span class=\"string\">&quot;(max-width:640px)&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;max-640px.css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>  直接在 style 标签或样式文件内使用<code>@media</code>规则</p>\n</li>\n</ul>\n<h3 id=\"样式断点\"><a href=\"#样式断点\" class=\"headerlink\" title=\"样式断点\"></a>样式断点</h3><ul>\n<li>  moblie 移动设备断点 ，视窗宽度&lt;=768px</li>\n<li>  tablet 平板电脑设备断点，视窗宽度&gt;=769px</li>\n<li>  desktop 桌面电脑断点，视窗宽度&gt;=1024px</li>\n<li>  widescreen 宽屏电脑断点，视窗宽度&gt;=1216px</li>\n<li>  fullhd 高清宽屏电脑断点，视窗宽度&gt;=1408px</li>\n</ul>\n<h2 id=\"1px-细线（普通屏幕下-1px，高清屏下-0-5px-的情况）\"><a href=\"#1px-细线（普通屏幕下-1px，高清屏下-0-5px-的情况）\" class=\"headerlink\" title=\"1px 细线（普通屏幕下 1px，高清屏下 0.5px 的情况）\"></a>1px 细线（普通屏幕下 1px，高清屏下 0.5px 的情况）</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.mod_grid</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    &amp;<span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\">        // 实现<span class=\"number\">1</span>物理像素的下边框线</span><br><span class=\"line\">        <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">        <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">        <span class=\"attribute\">z-index</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"attribute\">pointer-events</span>: none;</span><br><span class=\"line\">        <span class=\"attribute\">background-color</span>: <span class=\"number\">#ddd</span>;</span><br><span class=\"line\">        <span class=\"attribute\">height</span>: <span class=\"number\">1px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">@media</span> <span class=\"keyword\">only</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">-webkit-min-device-pixel-ratio</span>: <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            -webkit-<span class=\"attribute\">transform</span>: <span class=\"built_in\">scaleY</span>(<span class=\"number\">0.5</span>);</span><br><span class=\"line\">            -webkit-<span class=\"attribute\">transform-origin</span>: <span class=\"number\">50%</span> <span class=\"number\">0%</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"需要保持宽高比的图，应该用-padding-top-实现\"><a href=\"#需要保持宽高比的图，应该用-padding-top-实现\" class=\"headerlink\" title=\"需要保持宽高比的图，应该用 padding-top 实现\"></a>需要保持宽高比的图，应该用 padding-top 实现</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.mod_banner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"comment\">/* 使用padding-top 实现宽高比为 100:750 的图片区域 */</span></span><br><span class=\"line\">    <span class=\"attribute\">padding-top</span>: <span class=\"built_in\">percentage</span>(<span class=\"number\">100</span>/<span class=\"number\">750</span>);</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    <span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">        <span class=\"attribute\">height</span>: auto;</span><br><span class=\"line\">        <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">        <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"input-type-file-onchange\"><a href=\"#input-type-file-onchange\" class=\"headerlink\" title=\"input type=file onchange\"></a><code>input type=file onchange</code></h2><ul>\n<li>  上传同一张图片失效</li>\n<li>  在微信浏览器内无法上传图片 (经测试是不支持<code>input type=file</code> 就算支持也无法上传 camera 目录下的文件 )</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$fileInput.on(<span class=\"string\">&quot;change&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    e.target.value = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>第二个问题实在没有找到方法 准备使用带有 flash 的插件<br>使用百度网盘，饿了么的网页在微信中有同样的问题</p>\n<h2 id=\"meta-viewport\"><a href=\"#meta-viewport\" class=\"headerlink\" title=\"meta viewport\"></a><code>meta viewport</code></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span> H5标准声明，使用 HTML5 doctype，不区分大小写</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;”en”&quot;</span>&gt;</span></span><br><span class=\"line\">    标准的 lang 属性写法</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;’utf-8′&quot;</span> /&gt;</span></span><br><span class=\"line\">    声明文档使用的字符编码 <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">”X-UA-Compatible”</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">content</span>=<span class=\"string\">”IE</span>=<span class=\"string\">edge,chrome</span>=<span class=\"string\">1″/</span>&gt;</span> 优先使用 IE 最新版本和 Chrome</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;”description”&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;”不超过150个字符”&quot;</span> /&gt;</span></span><br><span class=\"line\">    页面描述</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;”keywords”&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;””&quot;</span> /&gt;</span></span><br><span class=\"line\">    页面关键词</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;”author”&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;”name,&quot;</span> <span class=\"attr\">email</span>@<span class=\"attr\">gmail.com</span>” /&gt;</span></span><br><span class=\"line\">    网页作者</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;”robots”&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;”index,follow”&quot;</span> /&gt;</span></span><br><span class=\"line\">    搜索引擎抓取 <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”viewport”</span> <span class=\"attr\">content</span>=<span class=\"string\">”initial-scale</span>=<span class=\"string\">1,</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">maximum-scale</span>=<span class=\"string\">3,</span> <span class=\"attr\">minimum-scale</span>=<span class=\"string\">1,</span> <span class=\"attr\">user-scalable</span>=<span class=\"string\">no”</span>&gt;</span> 为移动设备添加 viewport</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;”apple-mobile-web-app-title”&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;”标题”&quot;</span> /&gt;</span></span><br><span class=\"line\">    iOS 设备 begin</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;”apple-mobile-web-app-capable”&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;”yes”&quot;</span> /&gt;</span></span><br><span class=\"line\">    添加到主屏后的标题（iOS 6 新增）是否启用 WebApp</span><br><span class=\"line\">    全屏模式，删除苹果默认的工具栏和菜单栏 <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”apple-itunes-app”</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">content</span>=<span class=\"string\">”app-id</span>=<span class=\"string\">myAppStoreID,</span> <span class=\"attr\">affiliate-data</span>=<span class=\"string\">myAffiliateData,</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app-argument</span>=<span class=\"string\">myURL”</span>&gt;</span>添加智能 App 广告条 Smart App Banner（iOS 6+ Safari）</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;”apple-mobile-web-app-status-bar-style”&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;”black”&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”format-detection”</span> <span class=\"attr\">content</span>=<span class=\"string\">”telphone</span>=<span class=\"string\">no,</span> <span class=\"attr\">email</span>=<span class=\"string\">no”/</span>&gt;</span></span><br><span class=\"line\">    设置苹果工具栏颜色</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;”renderer”&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;”webkit”&quot;</span> /&gt;</span></span><br><span class=\"line\">    启用360浏览器的极速模式(webkit) <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">”X-UA-Compatible”</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">content</span>=<span class=\"string\">”IE</span>=<span class=\"string\">edge”</span>&gt;</span> 避免IE使用兼容模式</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;”Cache-Control”&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;”no-siteapp”&quot;</span> /&gt;</span></span><br><span class=\"line\">    不让百度转码</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;”HandheldFriendly”&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;”true”&quot;</span> /&gt;</span></span><br><span class=\"line\">    针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;”MobileOptimized”&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;”320″&quot;</span> /&gt;</span></span><br><span class=\"line\">    微软的老式浏览器</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;”screen-orientation”&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;”portrait”&quot;</span> /&gt;</span></span><br><span class=\"line\">    uc强制竖屏</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;”x5-orientation”&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;”portrait”&quot;</span> /&gt;</span></span><br><span class=\"line\">    QQ强制竖屏</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;”full-screen”&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;”yes”&quot;</span> /&gt;</span></span><br><span class=\"line\">    UC强制全屏</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;”x5-fullscreen”&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;”true”&quot;</span> /&gt;</span></span><br><span class=\"line\">    QQ强制全屏</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;”browsermode”&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;”application”&quot;</span> /&gt;</span></span><br><span class=\"line\">    UC应用模式</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;”x5-page-mode”&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;”app”&quot;</span> /&gt;</span></span><br><span class=\"line\">    QQ应用模式</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;”msapplication-tap-highlight”&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;”no”&quot;</span> /&gt;</span></span><br><span class=\"line\">    windows phone 点击无高光设置页面不缓存</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;”pragma”&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;”no-cache”&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;”cache-control”&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;”no-cache”&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;”expires”&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;”0″&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字少时居中，多时靠左\"><a href=\"#字少时居中，多时靠左\" class=\"headerlink\" title=\"字少时居中，多时靠左\"></a>字少时居中，多时靠左</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- CSS --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    .box &#123;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .content &#123;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">display</span>: inline-block;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">text-align</span>: left;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">word-break</span>: break-all;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CSS-权重\"><a href=\"#CSS-权重\" class=\"headerlink\" title=\"CSS 权重\"></a>CSS 权重</h2><p>权重分为 4 级，分别是：</p>\n<ul>\n<li>  内联样式:1000</li>\n<li>  id:100</li>\n<li>  类，伪类和属性选择器 <code>:hover</code>,<code>[attributer]</code>,权值为 10</li>\n<li>  代表元素选择器和伪元素选择器，<code>div</code></li>\n</ul>\n<p>** 需要注意的是：通用选择器（*），子选择器（&gt;）和相邻通报选择器并不在这四个等级中，所以他们的权值为 0**</p>\n<h2 id=\"CSS3-动画\"><a href=\"#CSS3-动画\" class=\"headerlink\" title=\"CSS3 动画\"></a>CSS3 动画</h2><ul>\n<li>  <code>animation-name</code>:对应的动画名称</li>\n<li>  <code>animation-duration</code>:是动画时长</li>\n<li>  <code>animation-timing-function</code>:规定动画的速度曲线。默认是 ease</li>\n<li>  <code>animation-delay</code>:规定动画何时开始。默认是 0</li>\n<li>  <code>animation-iteration-count</code>:规定动画播放的次数。默认是 1</li>\n<li>  <code>animation-diraction</code>:规定动画是否在下一周期逆向地播放。默认是 normal</li>\n<li>  <code>animation-play-state</code>:规定动画是否正在运行或暂停。默认是 running</li>\n<li>  <code>animation-fill-mode</code>:规定动画执行之前和之后如何给动画的目标应用，默认是 none，保留在最后一帧可以用 forwords</li>\n</ul>\n<h3 id=\"实现动画暂停\"><a href=\"#实现动画暂停\" class=\"headerlink\" title=\"实现动画暂停\"></a>实现动画暂停</h3><p>使用<code>animation-play-state</code>可以实现动画暂停</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.play-state &#123; width: 100px; height: 100px; margin: 40px; text-align: center;</span><br><span class=\"line\">line-height: 94px; border: 3px solid #e1efde; border-radius: 50%; animation:</span><br><span class=\"line\">play-state 3s linear infinite; cursor: pointer; &#125; .play-state:hover &#123;</span><br><span class=\"line\">animation-play-state: paused; &#125; @keyframes play-state &#123; 0% &#123; margin-left: 0; &#125;</span><br><span class=\"line\">100% &#123; margin-left: 200px &#125; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重绘和回流\"><a href=\"#重绘和回流\" class=\"headerlink\" title=\"重绘和回流\"></a>重绘和回流</h2><ul>\n<li>  重绘：指的是当前页面中的元素不脱离文档流。而简单的样式的变化，比如修改颜色，背景等，浏览器重新绘制样式</li>\n<li>  回流：指的是处于文档流中 DOM 的尺寸大小，位置或者默写属性变化时，导致浏览器重新渲染部分或全部文档的情况</li>\n</ul>\n<h2 id=\"首行缩进\"><a href=\"#首行缩进\" class=\"headerlink\" title=\"首行缩进\"></a>首行缩进</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">text-indent</span>: <span class=\"number\">2em</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"一种奇妙的绝对居中办法\"><a href=\"#一种奇妙的绝对居中办法\" class=\"headerlink\" title=\"一种奇妙的绝对居中办法\"></a>一种奇妙的绝对居中办法</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    .wp &#123;</span><br><span class=\"line\"><span class=\"css\">        writing-mode: vertical-lr;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .wp-inner &#123;</span><br><span class=\"line\"><span class=\"css\">        writing-mode: horizontal-tb;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">display</span>: inline-block;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .box &#123;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">display</span>: inline-block;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">margin</span>: auto;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">text-align</span>: left;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;wp&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;wp-inner&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>123123<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>css 在开发中的填坑总结</p>","more":"<h2 id=\"利用-css-的-content-属性-attr-抓取资料\"><a href=\"#利用-css-的-content-属性-attr-抓取资料\" class=\"headerlink\" title=\"利用 css 的 content 属性 attr 抓取资料\"></a>利用 css 的 content 属性 attr 抓取资料</h2><p>想要获取伪元素，可以用以下写法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-msg</span>=<span class=\"string\">&quot;open&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">div:hover:after&#123; content:attr(data-mag); &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"利用：valid-和：invalid-来做表单即使校验\"><a href=\"#利用：valid-和：invalid-来做表单即使校验\" class=\"headerlink\" title=\"利用：valid 和：invalid 来做表单即使校验\"></a>利用：valid 和：invalid 来做表单即使校验</h2><ul>\n<li>  :required 伪类指定具有 required 属性的表单元素</li>\n<li>  :valid 伪类指定一个通过匹配正确的所要求的表单元素</li>\n<li>  :invalid 伪类指定一个不匹配指定要求的表单元素</li>\n</ul>\n<h2 id=\"writing-mode\"><a href=\"#writing-mode\" class=\"headerlink\" title=\"writing-mode\"></a>writing-mode</h2><p>使用 writing-mode 这个 CSS 属性实现容器的文字从上往下排列。 writing-mode: vertical-rl;</p>\n<h2 id=\"实现鼠标悬浮内容自动撑开的过渡动画\"><a href=\"#实现鼠标悬浮内容自动撑开的过渡动画\" class=\"headerlink\" title=\"实现鼠标悬浮内容自动撑开的过渡动画\"></a>实现鼠标悬浮内容自动撑开的过渡动画</h2><p>需要为一个列表添加个动画，容器的高度是不确定的，也就是高度为 auto，悬浮时候撑开内容有个过渡动画。而用 CSS3 实现的话，由于高度的不确定，而 transtion 是需要具体的数值，所以设置 height:auto 是无法实现效果的，可以通过 max-height 这个属性间接的实现这么个效果，css 样式是这样的：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;hd&quot;</span>&gt;</span>列表1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;bd&quot;</span>&gt;</span></span><br><span class=\"line\">            列表内容<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>内容列表内容<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>内容列表内容<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>内容</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;hd&quot;</span>&gt;</span>列表1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;bd&quot;</span>&gt;</span></span><br><span class=\"line\">            列表内容<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>内容列表内容<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>内容列表内容<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>内容</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;hd&quot;</span>&gt;</span>列表1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;bd&quot;</span>&gt;</span></span><br><span class=\"line\">            列表内容<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>内容列表内容<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>内容列表内容<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>内容</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">.bd &#123; max-height:0; overflow:hidden; transition: all 1s ease-out; &#125; li:hover .bd</span><br><span class=\"line\">&#123; max-height: 600px; transition-timing-function: ease-in; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"移动端-web-页面支持弹性滚动\"><a href=\"#移动端-web-页面支持弹性滚动\" class=\"headerlink\" title=\"移动端 web 页面支持弹性滚动\"></a>移动端 web 页面支持弹性滚动</h2><p>-webkit-overflow-scrolling: touch;</p>\n<h2 id=\"美化浏览器自带的-radio-，checkbox-属性\"><a href=\"#美化浏览器自带的-radio-，checkbox-属性\" class=\"headerlink\" title=\"美化浏览器自带的 radio ，checkbox 属性\"></a>美化浏览器自带的 radio ，checkbox 属性</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;radio-beauty-container&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;radio-name&quot;</span>&gt;</span>前端工程师<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;radioName&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;radioName1&quot;</span> <span class=\"attr\">hidden</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;radioName1&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;radio-beauty&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;radio-name&quot;</span>&gt;</span>后端工程师<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;radioName&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;radioName2&quot;</span> <span class=\"attr\">hidden</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;radioName2&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;radio-beauty&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;radio-name&quot;</span>&gt;</span>全栈工程师<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;radioName&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;radioName3&quot;</span> <span class=\"attr\">hidden</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;radioName3&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;radio-beauty&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">.radio-beauty-container &#123; font-size: 0; $bgc: green; %common &#123; padding: 2px;</span><br><span class=\"line\">background-color: $bgc; background-clip: content-box; &#125; .radio-name &#123;</span><br><span class=\"line\">vertical-align: middle; font-size: 16px; &#125; .radio-beauty &#123; width: 18px; height:</span><br><span class=\"line\">18px; box-sizing: border-box; display: inline-block; border: 1px solid $bgc;</span><br><span class=\"line\">vertical-align: middle; margin: 0 15px 0 3px; border-radius: 50%; &amp;:hover &#123;</span><br><span class=\"line\">box-shadow: 0 0 7px $bgc; @extend %common; &#125; &#125;</span><br><span class=\"line\">input[type=&quot;radio&quot;]:checked+.radio-beauty &#123; @extend %common; &#125; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"改变-input-焦点光标的颜色\"><a href=\"#改变-input-焦点光标的颜色\" class=\"headerlink\" title=\"改变 input 焦点光标的颜色\"></a>改变 input 焦点光标的颜色</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;This field uses a default caret.&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;custom&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;I have a custom caret color!&quot;</span> /&gt;</span></span><br><span class=\"line\">input &#123; caret-color: auto; display: block; margin-bottom: .5em; &#125; input.custom &#123;</span><br><span class=\"line\">caret-color: red; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"rem-布局不再使用-JavaScript-设置\"><a href=\"#rem-布局不再使用-JavaScript-设置\" class=\"headerlink\" title=\"rem 布局不再使用 JavaScript 设置\"></a>rem 布局不再使用 JavaScript 设置</h2><p>现在移动端 css3 单位 vw ,wh 兼容性已经很不错了，在不需要兼容太低版本的安卓机情况下可以这样来：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">100vw</span> / <span class=\"number\">750</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"切角效果实现\"><a href=\"#切角效果实现\" class=\"headerlink\" title=\"切角效果实现\"></a>切角效果实现</h2><p>切角效果是时下非常流行的一种设计风格，并广泛运用于平面设计中，它最常见的形态就是把元素的一个或多个切成 45° 的切口，尤其是在最近几年，扁平化设计盖过拟物化设计后，这种切脚设计更为流行，例如下图就是通过切角实现的一个导航栏，在后面将详细论述起实现。</p>\n<p><img src=\"https://camo.githubusercontent.com/b07ae76cf4ce21d62ef2a4ce97932d831e723c50/687474703a2f2f636f6e74656e742d6d616e6167656d656e742e62302e7570616979756e2e636f6d2f313437323739393439333539332e706e67\" alt=\"network\"></p>\n<h2 id=\"BFC（快格式化上下文）\"><a href=\"#BFC（快格式化上下文）\" class=\"headerlink\" title=\"BFC（快格式化上下文）\"></a>BFC（快格式化上下文）</h2><p>它决定了元素如何对其内容进行定位，以及与其他元素的关系的相互作用。当涉及到可视化布局时，BFC 提供了一个环境，HTML 元素在这个环境中按照一定规则进行布局。一个环境元素不会影响到其他环境中的布局。</p>\n<h3 id=\"BFC-的作用：\"><a href=\"#BFC-的作用：\" class=\"headerlink\" title=\"BFC 的作用：\"></a>BFC 的作用：</h3><ul>\n<li>  可以包含浮动元素</li>\n<li>  不被浮动元素覆盖</li>\n<li>  阻止父子元素的 margin 折叠</li>\n</ul>\n<h3 id=\"BFC-的特征：\"><a href=\"#BFC-的特征：\" class=\"headerlink\" title=\"BFC 的特征：\"></a>BFC 的特征：</h3><ul>\n<li>  内部的 BOX 会在垂直方向，一个接一个地放置。</li>\n<li>  BOX 垂直方向的距离由 margin 决定。属于同一个 BFC 的两个 BOX 的 margin 会发生重叠。</li>\n<li>  BFC 的区域不会与 float BOX 重叠。</li>\n<li>  BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也是如此。</li>\n<li>  计算 BFC 的高度时，float 元素也会参与计算。</li>\n</ul>\n<h3 id=\"如何触发-BFC？\"><a href=\"#如何触发-BFC？\" class=\"headerlink\" title=\"如何触发 BFC？\"></a>如何触发 BFC？</h3><ul>\n<li>  float 的值部位 none。</li>\n<li>  position 的值不为 static 或者是 relative。</li>\n<li>  display 的值为 table-cell,table-caption,inline-block,flex,或者 inline-flex 中的一个。</li>\n<li>  overflow 的值不为 visible。</li>\n</ul>\n<h2 id=\"响应式页面开发\"><a href=\"#响应式页面开发\" class=\"headerlink\" title=\"响应式页面开发\"></a>响应式页面开发</h2><p>在页头<code>head</code>标签内添加<code>viewoport meta</code>是实现响应式页面的第一步。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用Media-Queries\"><a href=\"#使用Media-Queries\" class=\"headerlink\" title=\"使用Media Queries\"></a>使用<code>Media Queries</code></h3><ul>\n<li><p>使用 link 标签 ，根据指定特性引入特定的外部样式文件</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">media</span>=<span class=\"string\">&quot;(max-width:640px)&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;max-640px.css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>  直接在 style 标签或样式文件内使用<code>@media</code>规则</p>\n</li>\n</ul>\n<h3 id=\"样式断点\"><a href=\"#样式断点\" class=\"headerlink\" title=\"样式断点\"></a>样式断点</h3><ul>\n<li>  moblie 移动设备断点 ，视窗宽度&lt;=768px</li>\n<li>  tablet 平板电脑设备断点，视窗宽度&gt;=769px</li>\n<li>  desktop 桌面电脑断点，视窗宽度&gt;=1024px</li>\n<li>  widescreen 宽屏电脑断点，视窗宽度&gt;=1216px</li>\n<li>  fullhd 高清宽屏电脑断点，视窗宽度&gt;=1408px</li>\n</ul>\n<h2 id=\"1px-细线（普通屏幕下-1px，高清屏下-0-5px-的情况）\"><a href=\"#1px-细线（普通屏幕下-1px，高清屏下-0-5px-的情况）\" class=\"headerlink\" title=\"1px 细线（普通屏幕下 1px，高清屏下 0.5px 的情况）\"></a>1px 细线（普通屏幕下 1px，高清屏下 0.5px 的情况）</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.mod_grid</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    &amp;<span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\">        // 实现<span class=\"number\">1</span>物理像素的下边框线</span><br><span class=\"line\">        <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">        <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">        <span class=\"attribute\">z-index</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"attribute\">pointer-events</span>: none;</span><br><span class=\"line\">        <span class=\"attribute\">background-color</span>: <span class=\"number\">#ddd</span>;</span><br><span class=\"line\">        <span class=\"attribute\">height</span>: <span class=\"number\">1px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">@media</span> <span class=\"keyword\">only</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">-webkit-min-device-pixel-ratio</span>: <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            -webkit-<span class=\"attribute\">transform</span>: <span class=\"built_in\">scaleY</span>(<span class=\"number\">0.5</span>);</span><br><span class=\"line\">            -webkit-<span class=\"attribute\">transform-origin</span>: <span class=\"number\">50%</span> <span class=\"number\">0%</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"需要保持宽高比的图，应该用-padding-top-实现\"><a href=\"#需要保持宽高比的图，应该用-padding-top-实现\" class=\"headerlink\" title=\"需要保持宽高比的图，应该用 padding-top 实现\"></a>需要保持宽高比的图，应该用 padding-top 实现</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.mod_banner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"comment\">/* 使用padding-top 实现宽高比为 100:750 的图片区域 */</span></span><br><span class=\"line\">    <span class=\"attribute\">padding-top</span>: <span class=\"built_in\">percentage</span>(<span class=\"number\">100</span>/<span class=\"number\">750</span>);</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    <span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">        <span class=\"attribute\">height</span>: auto;</span><br><span class=\"line\">        <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">        <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"input-type-file-onchange\"><a href=\"#input-type-file-onchange\" class=\"headerlink\" title=\"input type=file onchange\"></a><code>input type=file onchange</code></h2><ul>\n<li>  上传同一张图片失效</li>\n<li>  在微信浏览器内无法上传图片 (经测试是不支持<code>input type=file</code> 就算支持也无法上传 camera 目录下的文件 )</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$fileInput.on(<span class=\"string\">&quot;change&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    e.target.value = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>第二个问题实在没有找到方法 准备使用带有 flash 的插件<br>使用百度网盘，饿了么的网页在微信中有同样的问题</p>\n<h2 id=\"meta-viewport\"><a href=\"#meta-viewport\" class=\"headerlink\" title=\"meta viewport\"></a><code>meta viewport</code></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span> H5标准声明，使用 HTML5 doctype，不区分大小写</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;”en”&quot;</span>&gt;</span></span><br><span class=\"line\">    标准的 lang 属性写法</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;’utf-8′&quot;</span> /&gt;</span></span><br><span class=\"line\">    声明文档使用的字符编码 <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">”X-UA-Compatible”</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">content</span>=<span class=\"string\">”IE</span>=<span class=\"string\">edge,chrome</span>=<span class=\"string\">1″/</span>&gt;</span> 优先使用 IE 最新版本和 Chrome</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;”description”&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;”不超过150个字符”&quot;</span> /&gt;</span></span><br><span class=\"line\">    页面描述</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;”keywords”&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;””&quot;</span> /&gt;</span></span><br><span class=\"line\">    页面关键词</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;”author”&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;”name,&quot;</span> <span class=\"attr\">email</span>@<span class=\"attr\">gmail.com</span>” /&gt;</span></span><br><span class=\"line\">    网页作者</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;”robots”&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;”index,follow”&quot;</span> /&gt;</span></span><br><span class=\"line\">    搜索引擎抓取 <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”viewport”</span> <span class=\"attr\">content</span>=<span class=\"string\">”initial-scale</span>=<span class=\"string\">1,</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">maximum-scale</span>=<span class=\"string\">3,</span> <span class=\"attr\">minimum-scale</span>=<span class=\"string\">1,</span> <span class=\"attr\">user-scalable</span>=<span class=\"string\">no”</span>&gt;</span> 为移动设备添加 viewport</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;”apple-mobile-web-app-title”&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;”标题”&quot;</span> /&gt;</span></span><br><span class=\"line\">    iOS 设备 begin</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;”apple-mobile-web-app-capable”&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;”yes”&quot;</span> /&gt;</span></span><br><span class=\"line\">    添加到主屏后的标题（iOS 6 新增）是否启用 WebApp</span><br><span class=\"line\">    全屏模式，删除苹果默认的工具栏和菜单栏 <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”apple-itunes-app”</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">content</span>=<span class=\"string\">”app-id</span>=<span class=\"string\">myAppStoreID,</span> <span class=\"attr\">affiliate-data</span>=<span class=\"string\">myAffiliateData,</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app-argument</span>=<span class=\"string\">myURL”</span>&gt;</span>添加智能 App 广告条 Smart App Banner（iOS 6+ Safari）</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;”apple-mobile-web-app-status-bar-style”&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;”black”&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">”format-detection”</span> <span class=\"attr\">content</span>=<span class=\"string\">”telphone</span>=<span class=\"string\">no,</span> <span class=\"attr\">email</span>=<span class=\"string\">no”/</span>&gt;</span></span><br><span class=\"line\">    设置苹果工具栏颜色</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;”renderer”&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;”webkit”&quot;</span> /&gt;</span></span><br><span class=\"line\">    启用360浏览器的极速模式(webkit) <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">”X-UA-Compatible”</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">content</span>=<span class=\"string\">”IE</span>=<span class=\"string\">edge”</span>&gt;</span> 避免IE使用兼容模式</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;”Cache-Control”&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;”no-siteapp”&quot;</span> /&gt;</span></span><br><span class=\"line\">    不让百度转码</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;”HandheldFriendly”&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;”true”&quot;</span> /&gt;</span></span><br><span class=\"line\">    针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;”MobileOptimized”&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;”320″&quot;</span> /&gt;</span></span><br><span class=\"line\">    微软的老式浏览器</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;”screen-orientation”&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;”portrait”&quot;</span> /&gt;</span></span><br><span class=\"line\">    uc强制竖屏</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;”x5-orientation”&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;”portrait”&quot;</span> /&gt;</span></span><br><span class=\"line\">    QQ强制竖屏</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;”full-screen”&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;”yes”&quot;</span> /&gt;</span></span><br><span class=\"line\">    UC强制全屏</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;”x5-fullscreen”&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;”true”&quot;</span> /&gt;</span></span><br><span class=\"line\">    QQ强制全屏</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;”browsermode”&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;”application”&quot;</span> /&gt;</span></span><br><span class=\"line\">    UC应用模式</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;”x5-page-mode”&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;”app”&quot;</span> /&gt;</span></span><br><span class=\"line\">    QQ应用模式</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;”msapplication-tap-highlight”&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;”no”&quot;</span> /&gt;</span></span><br><span class=\"line\">    windows phone 点击无高光设置页面不缓存</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;”pragma”&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;”no-cache”&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;”cache-control”&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;”no-cache”&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;”expires”&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;”0″&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字少时居中，多时靠左\"><a href=\"#字少时居中，多时靠左\" class=\"headerlink\" title=\"字少时居中，多时靠左\"></a>字少时居中，多时靠左</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- CSS --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    .box &#123;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .content &#123;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">display</span>: inline-block;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">text-align</span>: left;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">word-break</span>: break-all;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CSS-权重\"><a href=\"#CSS-权重\" class=\"headerlink\" title=\"CSS 权重\"></a>CSS 权重</h2><p>权重分为 4 级，分别是：</p>\n<ul>\n<li>  内联样式:1000</li>\n<li>  id:100</li>\n<li>  类，伪类和属性选择器 <code>:hover</code>,<code>[attributer]</code>,权值为 10</li>\n<li>  代表元素选择器和伪元素选择器，<code>div</code></li>\n</ul>\n<p>** 需要注意的是：通用选择器（*），子选择器（&gt;）和相邻通报选择器并不在这四个等级中，所以他们的权值为 0**</p>\n<h2 id=\"CSS3-动画\"><a href=\"#CSS3-动画\" class=\"headerlink\" title=\"CSS3 动画\"></a>CSS3 动画</h2><ul>\n<li>  <code>animation-name</code>:对应的动画名称</li>\n<li>  <code>animation-duration</code>:是动画时长</li>\n<li>  <code>animation-timing-function</code>:规定动画的速度曲线。默认是 ease</li>\n<li>  <code>animation-delay</code>:规定动画何时开始。默认是 0</li>\n<li>  <code>animation-iteration-count</code>:规定动画播放的次数。默认是 1</li>\n<li>  <code>animation-diraction</code>:规定动画是否在下一周期逆向地播放。默认是 normal</li>\n<li>  <code>animation-play-state</code>:规定动画是否正在运行或暂停。默认是 running</li>\n<li>  <code>animation-fill-mode</code>:规定动画执行之前和之后如何给动画的目标应用，默认是 none，保留在最后一帧可以用 forwords</li>\n</ul>\n<h3 id=\"实现动画暂停\"><a href=\"#实现动画暂停\" class=\"headerlink\" title=\"实现动画暂停\"></a>实现动画暂停</h3><p>使用<code>animation-play-state</code>可以实现动画暂停</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.play-state &#123; width: 100px; height: 100px; margin: 40px; text-align: center;</span><br><span class=\"line\">line-height: 94px; border: 3px solid #e1efde; border-radius: 50%; animation:</span><br><span class=\"line\">play-state 3s linear infinite; cursor: pointer; &#125; .play-state:hover &#123;</span><br><span class=\"line\">animation-play-state: paused; &#125; @keyframes play-state &#123; 0% &#123; margin-left: 0; &#125;</span><br><span class=\"line\">100% &#123; margin-left: 200px &#125; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重绘和回流\"><a href=\"#重绘和回流\" class=\"headerlink\" title=\"重绘和回流\"></a>重绘和回流</h2><ul>\n<li>  重绘：指的是当前页面中的元素不脱离文档流。而简单的样式的变化，比如修改颜色，背景等，浏览器重新绘制样式</li>\n<li>  回流：指的是处于文档流中 DOM 的尺寸大小，位置或者默写属性变化时，导致浏览器重新渲染部分或全部文档的情况</li>\n</ul>\n<h2 id=\"首行缩进\"><a href=\"#首行缩进\" class=\"headerlink\" title=\"首行缩进\"></a>首行缩进</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">text-indent</span>: <span class=\"number\">2em</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"一种奇妙的绝对居中办法\"><a href=\"#一种奇妙的绝对居中办法\" class=\"headerlink\" title=\"一种奇妙的绝对居中办法\"></a>一种奇妙的绝对居中办法</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    .wp &#123;</span><br><span class=\"line\"><span class=\"css\">        writing-mode: vertical-lr;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .wp-inner &#123;</span><br><span class=\"line\"><span class=\"css\">        writing-mode: horizontal-tb;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">display</span>: inline-block;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .box &#123;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">display</span>: inline-block;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">margin</span>: auto;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">text-align</span>: left;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;wp&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;wp-inner&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>123123<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"innerHTML与createElement","date":"2018-05-11T07:05:13.000Z","_content":"\n最近看到一道海量渲染的面试题的答案，看到他用的是`createElement`然后`appendChild`感觉无法理解为什么要这样使用，难道`innerHTML`比这种方法的性能差吗？\n由此自己做了一些实验\n<!--more-->\n\n自测代码如下：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n</head>\n<body>\n    <div id=\"a\"></div>\n    <div id=\"b\"></div>\n</body>\n\n</html>\n<script>\n        var $a = document.getElementById(\"a\");\n        var $b = document.getElementById(\"b\");\n        var html1='',html2='';\n        function test1(){\n            console.time(\"html1:\")\n           for(let i = 0;i<1000;i++){\n            html1 +='<p>'+i+'</p>';\n           }\n           $a.innerHTML = html1;\n           console.timeEnd(\"html1:\")\n        }\n\n        function test2(){\n            console.time(\"html2:\")\n            let fragment = document.createDocumentFragment();\n           for(let i = 0;i<1000;i++){\n               let p = document.createElement(\"p\");\n               p.innerHTML = i;\n               fragment.appendChild(p);\n           }\n           $b.appendChild(fragment);\n           console.timeEnd(\"html2:\")\n        }\n        test1(); //html1:: 3.000244140625ms\n        test2(); //html2:: 10.999755859375ms \n</script>\n```\n最后得出的结论是`innerHTML`的方法明显会比 `createElement`这种 办法好，就算是先`appendChild`到虚拟节点里面，也仍然性能不好。那为什么那些大佬们会用第二种办法？难道就是为了使用`createDocumentFragment`这个API？\n\n那么究竟`createElement`会比`innerHTML`好在哪里呢？\n\n看到一位大佬的答案是因为觉得拼接字符串丑陋。。。emmmmmm\n\n### `createElement`\n在创建节点后就能直接事件监听事件，可是这种大量渲染，使用事件委托不是更完美吗？何必每一个都要绑定事件监听？\n```javascript\nvar oButton = document.createElement(\"input\");\n    oButton.type = \"button\";\n    oButton.value = \"xxxxx\";\n    aaa.appendChild(oButton);\n ```\n","source":"_posts/innerHTML与createElement.md","raw":"---\ntitle: innerHTML与createElement\ndate: 2018-05-11 15:05:13\ncategories: JavaScript\n---\n\n最近看到一道海量渲染的面试题的答案，看到他用的是`createElement`然后`appendChild`感觉无法理解为什么要这样使用，难道`innerHTML`比这种方法的性能差吗？\n由此自己做了一些实验\n<!--more-->\n\n自测代码如下：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n</head>\n<body>\n    <div id=\"a\"></div>\n    <div id=\"b\"></div>\n</body>\n\n</html>\n<script>\n        var $a = document.getElementById(\"a\");\n        var $b = document.getElementById(\"b\");\n        var html1='',html2='';\n        function test1(){\n            console.time(\"html1:\")\n           for(let i = 0;i<1000;i++){\n            html1 +='<p>'+i+'</p>';\n           }\n           $a.innerHTML = html1;\n           console.timeEnd(\"html1:\")\n        }\n\n        function test2(){\n            console.time(\"html2:\")\n            let fragment = document.createDocumentFragment();\n           for(let i = 0;i<1000;i++){\n               let p = document.createElement(\"p\");\n               p.innerHTML = i;\n               fragment.appendChild(p);\n           }\n           $b.appendChild(fragment);\n           console.timeEnd(\"html2:\")\n        }\n        test1(); //html1:: 3.000244140625ms\n        test2(); //html2:: 10.999755859375ms \n</script>\n```\n最后得出的结论是`innerHTML`的方法明显会比 `createElement`这种 办法好，就算是先`appendChild`到虚拟节点里面，也仍然性能不好。那为什么那些大佬们会用第二种办法？难道就是为了使用`createDocumentFragment`这个API？\n\n那么究竟`createElement`会比`innerHTML`好在哪里呢？\n\n看到一位大佬的答案是因为觉得拼接字符串丑陋。。。emmmmmm\n\n### `createElement`\n在创建节点后就能直接事件监听事件，可是这种大量渲染，使用事件委托不是更完美吗？何必每一个都要绑定事件监听？\n```javascript\nvar oButton = document.createElement(\"input\");\n    oButton.type = \"button\";\n    oButton.value = \"xxxxx\";\n    aaa.appendChild(oButton);\n ```\n","slug":"innerHTML与createElement","published":1,"updated":"2019-07-09T06:59:47.281Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmejaes50018xcvr5xo87qhr","content":"<p>最近看到一道海量渲染的面试题的答案，看到他用的是<code>createElement</code>然后<code>appendChild</code>感觉无法理解为什么要这样使用，难道<code>innerHTML</code>比这种方法的性能差吗？<br>由此自己做了一些实验</p>\n<span id=\"more\"></span>\n\n<p>自测代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;a&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;b&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> $a = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;a&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> $b = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;b&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> html1=<span class=\"string\">&#x27;&#x27;</span>,html2=<span class=\"string\">&#x27;&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test1</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.time(<span class=\"string\">&quot;html1:&quot;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">           <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"number\">1000</span>;i++)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            html1 +=<span class=\"string\">&#x27;&lt;p&gt;&#x27;</span>+i+<span class=\"string\">&#x27;&lt;/p&gt;&#x27;</span>;</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           $a.innerHTML = html1;</span><br><span class=\"line\"><span class=\"javascript\">           <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">&quot;html1:&quot;</span>)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test2</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.time(<span class=\"string\">&quot;html2:&quot;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">let</span> fragment = <span class=\"built_in\">document</span>.createDocumentFragment();</span></span><br><span class=\"line\"><span class=\"javascript\">           <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"number\">1000</span>;i++)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">               <span class=\"keyword\">let</span> p = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&quot;p&quot;</span>);</span></span><br><span class=\"line\">               p.innerHTML = i;</span><br><span class=\"line\">               fragment.appendChild(p);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           $b.appendChild(fragment);</span><br><span class=\"line\"><span class=\"javascript\">           <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">&quot;html2:&quot;</span>)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"javascript\">        test1(); <span class=\"comment\">//html1:: 3.000244140625ms</span></span></span><br><span class=\"line\"><span class=\"javascript\">        test2(); <span class=\"comment\">//html2:: 10.999755859375ms </span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>最后得出的结论是<code>innerHTML</code>的方法明显会比 <code>createElement</code>这种 办法好，就算是先<code>appendChild</code>到虚拟节点里面，也仍然性能不好。那为什么那些大佬们会用第二种办法？难道就是为了使用<code>createDocumentFragment</code>这个API？</p>\n<p>那么究竟<code>createElement</code>会比<code>innerHTML</code>好在哪里呢？</p>\n<p>看到一位大佬的答案是因为觉得拼接字符串丑陋。。。emmmmmm</p>\n<h3 id=\"createElement\"><a href=\"#createElement\" class=\"headerlink\" title=\"createElement\"></a><code>createElement</code></h3><p>在创建节点后就能直接事件监听事件，可是这种大量渲染，使用事件委托不是更完美吗？何必每一个都要绑定事件监听？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> oButton = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&quot;input&quot;</span>);</span><br><span class=\"line\">    oButton.type = <span class=\"string\">&quot;button&quot;</span>;</span><br><span class=\"line\">    oButton.value = <span class=\"string\">&quot;xxxxx&quot;</span>;</span><br><span class=\"line\">    aaa.appendChild(oButton);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>最近看到一道海量渲染的面试题的答案，看到他用的是<code>createElement</code>然后<code>appendChild</code>感觉无法理解为什么要这样使用，难道<code>innerHTML</code>比这种方法的性能差吗？<br>由此自己做了一些实验</p>","more":"<p>自测代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;a&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;b&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> $a = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;a&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> $b = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;b&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> html1=<span class=\"string\">&#x27;&#x27;</span>,html2=<span class=\"string\">&#x27;&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test1</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.time(<span class=\"string\">&quot;html1:&quot;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">           <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"number\">1000</span>;i++)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            html1 +=<span class=\"string\">&#x27;&lt;p&gt;&#x27;</span>+i+<span class=\"string\">&#x27;&lt;/p&gt;&#x27;</span>;</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           $a.innerHTML = html1;</span><br><span class=\"line\"><span class=\"javascript\">           <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">&quot;html1:&quot;</span>)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test2</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.time(<span class=\"string\">&quot;html2:&quot;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">let</span> fragment = <span class=\"built_in\">document</span>.createDocumentFragment();</span></span><br><span class=\"line\"><span class=\"javascript\">           <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"number\">1000</span>;i++)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">               <span class=\"keyword\">let</span> p = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&quot;p&quot;</span>);</span></span><br><span class=\"line\">               p.innerHTML = i;</span><br><span class=\"line\">               fragment.appendChild(p);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           $b.appendChild(fragment);</span><br><span class=\"line\"><span class=\"javascript\">           <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">&quot;html2:&quot;</span>)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"javascript\">        test1(); <span class=\"comment\">//html1:: 3.000244140625ms</span></span></span><br><span class=\"line\"><span class=\"javascript\">        test2(); <span class=\"comment\">//html2:: 10.999755859375ms </span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>最后得出的结论是<code>innerHTML</code>的方法明显会比 <code>createElement</code>这种 办法好，就算是先<code>appendChild</code>到虚拟节点里面，也仍然性能不好。那为什么那些大佬们会用第二种办法？难道就是为了使用<code>createDocumentFragment</code>这个API？</p>\n<p>那么究竟<code>createElement</code>会比<code>innerHTML</code>好在哪里呢？</p>\n<p>看到一位大佬的答案是因为觉得拼接字符串丑陋。。。emmmmmm</p>\n<h3 id=\"createElement\"><a href=\"#createElement\" class=\"headerlink\" title=\"createElement\"></a><code>createElement</code></h3><p>在创建节点后就能直接事件监听事件，可是这种大量渲染，使用事件委托不是更完美吗？何必每一个都要绑定事件监听？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> oButton = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&quot;input&quot;</span>);</span><br><span class=\"line\">    oButton.type = <span class=\"string\">&quot;button&quot;</span>;</span><br><span class=\"line\">    oButton.value = <span class=\"string\">&quot;xxxxx&quot;</span>;</span><br><span class=\"line\">    aaa.appendChild(oButton);</span><br></pre></td></tr></table></figure>"},{"title":"jQuery-源码学习（一）","date":"2018-06-22T03:45:06.000Z","_content":"\n\n感觉自己的很多的代码质量不够好，最近在频繁的使用 jQuery,感觉 jQuery 中的一些函数的思想是应该去学习的，尤其是设计模式的思想，在以后的 vue 开发中，在不引用 jQuery 的情况下，能借鉴 jQuery 的思想封装一些不依赖 DOM 的公共函数。也觉得自己对一些设计模式之内的了解甚少，所以学习 jQuery 源码势在必行。\n\n<!--more-->\n\n\n# jQuery框架的核心\n\n任何库与框架设计的第一要点就是解决命名空间与变量污染的问题。jQuery 就是利用 js 函数作用域的特性，采用立即调用表达式包裹自身的方法解决。\n\n- 匹配`HTML`文档中元素并对其执行操作。\n- 链式调用。\n\n# jQuery 对象的构建方式\n\n常规构建方式：\n```javascript\nvar aquery = function(selector, context){\n  //构造函数\n}\naquery.prototype = {\n  //原型\n  name:function(){},\n  age:function(){}\n}\nvar a = new aquery();\na.name();\n```\n原因：我猜想是因为更好的封装吧。\n\n```javascript\n(function(window, undefined) {\n  function jQuery(selector) {\n    return new jQuery.fn.init(selector);\n    // 若是return jQuery.fn.init(selector) 则init中的this是指向jQuery，只有new 后才能隔离作用域\n  }\n  jQuery.fn = jQuery.prototype = {\n    init: function() {\n      this.age = 18\n      return this\n    },\n    name:function(){\n      console.log(this.age)\n    }\n    age:20\n  };\n  jQuery().age //18\n  jQuery.fn.init.prototype = jQuery.fn; \n  //主要是将jQuery原型链下的方法挂载在 jQuery.fn.init的原型链下\n  window.jQuery = window.$ = jQuery;\n})(window);\n```\n- 闭包结构传参 window\n  - 闭包结构传入实参 window,然后里面用形参接收\n    - 减少内部每次引用 window 的查询时间\n    - 方便压缩代码\n- 形参 undefined\n  - 因为 ie 低版本的浏览器可以给 undefined 赋值成功，所以为了保证 undefined 一定是 undefined\n- jQuery 传参 selector\n  - selector 可以是一对标签，可以是 id、类 、后代、子代等等，可以是 jQuery 对象\n- jQuery 原型对象赋值给 jQuery 原型方法 init 的原型\n- 给 window 暴露可利用成员。\n\n**javascript 中的 undefined 并不是作为一个关键字，因此可以允许用户对其赋值。**\n\n## `jQuery.fn.init.prototype = jQuery.fn` 的作用\n\n** 既能隔离作用域还能使用jQuery原型对象的作用域，在返回实例中访问jQuery的原型对象**\n\n`jQuery.fn.init.prototype = jQuery.fn`使得jQuery的原型对象覆盖了init 构造器的原型对象。\n\n\n## 对象的构建\n\n类一：\n\n```javascript\nfunction aQuery() {\n  this.name = 'jQuery';\n  this.sayName = function() {\n    return this.name;\n  };\n}\n\nvar a = new aQuery();\nvar b = new aQuery();\nvar c = new aQuery();\n```\n\n类二：\n\n```javascript\nfunction aQuery() {\n  this.name = 'jQuery';\n}\n\naQuery.prototype = {\n  sayName: function() {\n    return this.name;\n  }\n};\n\nvar a = new aQuery();\nvar b = new aQuery();\nvar c = new aQuery();\n```\n\n类二 new 产生的 a、b、c 三个实例对象共享了原型的 sayName 方法，这样的好处是节省了内存空间，类一则是要为每一个实例复制 sayName 方法，每个方法属性都占用一定的内存空间，所以如果把所有属性方法都声明在构造函数中，就会无形的增大很多开销。除此之外类一的所有方法都是拷贝到当前实例对象上。类二则是要通过 scope 连接到原型链上查找，这样就无形中多一层作用域链的查找。\n\n\n## 分离构造器\n\n通过 new 操作符构建一个对象，一般经过 4 步：\n\n- 创建一个新对象\n- 将构造函数的作用域给新对象（所以 this 就指向了这个新对象）\n- 执行构造函数中的代码\n- 返回这个新对象\n\n其实 new 操作符主要是把原型链跟实例的 this 关联起来，所以我们如果需要原型链就必须要 new 操作符来进行处理。否则 this 则变成 window 对象了。\n\n```javascript\nvar $$ = (ajQuery = function(selsctor) {\n  this.selector = selector;\n  return this;\n});\n\najQuery.fn = ajQuery.prototype = {\n  selectorName: function() {\n    return this.selector;\n  },\n  constructor: ajQuery\n};\n\nvar a = new $$('aaa'); //实例化\na.selectorName(); //aaa //得到选择器名字\n```\n\n首先改造 jQuery 无 new 的格式，我们可以通过 instanceof 来判断 this 是否是当前实例：\n\n```javascript\nvar $$ = (ajQuery = function(selector) {\n  if (!(this instanceof ajQuery)) {\n    return new ajQuery(selector);\n  }\n  this.selector = selector;\n  return this;\n});\n```\n# 链式调用\nDOM 链式调用的处理：\n1. 节约JS代码\n2. 所返回的都是同一个对象，可以提高代码效率。\n\n```javascript\n  jQuery.prototype = {\n    init:function(){\n      return this\n    },\n    name:function(){\n      return this\n    }\n  }\n\n  jQuery.init().name()\n\n```\n\n# 静态与实例方法共享设计\n\n遍历方法：\n\n```javascript\n$('.aaron').each(); //作为实例方法存在\n$.each(); //作为静态方法存在\n```\n\n第一条语句是给指定的上下文调用的，就是获取('.aaron')获取的 DOM 合集，第二条语句\\$.each()函数可用于得带任何集合，无论是“名/值”对象 或是数组。在迭代数组的情况下，回调函数每次都会传递一个数组索引和相应的数组值作为参数。\n\n```javascript\njQuery.prototype = {\n  each: function(callback, args) {\n    return jQuery.each(this, callback, args);\n  }\n};\n```\n\n实例方法取于静态方法，静态方法挂在 jQuery 构造器上，原型方法呢？jQuery 通过 new 原型 prototype 上 init 方法当成构造器，那么 init 原型链方法就是实例的方法了，所以 jQuery 通过 2 个构造器划分 2 种不同的调用方式，一种是静态，一种是原型。\n\n# 事件绑定\n\njQuery对事件的绑定分别有几个API `.bind(),.live(),.delegate(),.on()`\n不管是用什么方式绑定，归根到底还是用的`addEventListener/attachEvent`处理的，正如选择器不管如何匹配最终还是那些个浏览器接口处理\n\n不管是是用click/bind/delegate之中的哪个方法，最终都是jQuery底层都是调用on方法来完成最终的事件绑定。\n","source":"_posts/jQuery-源码学习（一）.md","raw":"---\ntitle: jQuery-源码学习（一）\ndate: 2018-06-22 11:45:06\ncategories: jQuery\n---\n\n\n感觉自己的很多的代码质量不够好，最近在频繁的使用 jQuery,感觉 jQuery 中的一些函数的思想是应该去学习的，尤其是设计模式的思想，在以后的 vue 开发中，在不引用 jQuery 的情况下，能借鉴 jQuery 的思想封装一些不依赖 DOM 的公共函数。也觉得自己对一些设计模式之内的了解甚少，所以学习 jQuery 源码势在必行。\n\n<!--more-->\n\n\n# jQuery框架的核心\n\n任何库与框架设计的第一要点就是解决命名空间与变量污染的问题。jQuery 就是利用 js 函数作用域的特性，采用立即调用表达式包裹自身的方法解决。\n\n- 匹配`HTML`文档中元素并对其执行操作。\n- 链式调用。\n\n# jQuery 对象的构建方式\n\n常规构建方式：\n```javascript\nvar aquery = function(selector, context){\n  //构造函数\n}\naquery.prototype = {\n  //原型\n  name:function(){},\n  age:function(){}\n}\nvar a = new aquery();\na.name();\n```\n原因：我猜想是因为更好的封装吧。\n\n```javascript\n(function(window, undefined) {\n  function jQuery(selector) {\n    return new jQuery.fn.init(selector);\n    // 若是return jQuery.fn.init(selector) 则init中的this是指向jQuery，只有new 后才能隔离作用域\n  }\n  jQuery.fn = jQuery.prototype = {\n    init: function() {\n      this.age = 18\n      return this\n    },\n    name:function(){\n      console.log(this.age)\n    }\n    age:20\n  };\n  jQuery().age //18\n  jQuery.fn.init.prototype = jQuery.fn; \n  //主要是将jQuery原型链下的方法挂载在 jQuery.fn.init的原型链下\n  window.jQuery = window.$ = jQuery;\n})(window);\n```\n- 闭包结构传参 window\n  - 闭包结构传入实参 window,然后里面用形参接收\n    - 减少内部每次引用 window 的查询时间\n    - 方便压缩代码\n- 形参 undefined\n  - 因为 ie 低版本的浏览器可以给 undefined 赋值成功，所以为了保证 undefined 一定是 undefined\n- jQuery 传参 selector\n  - selector 可以是一对标签，可以是 id、类 、后代、子代等等，可以是 jQuery 对象\n- jQuery 原型对象赋值给 jQuery 原型方法 init 的原型\n- 给 window 暴露可利用成员。\n\n**javascript 中的 undefined 并不是作为一个关键字，因此可以允许用户对其赋值。**\n\n## `jQuery.fn.init.prototype = jQuery.fn` 的作用\n\n** 既能隔离作用域还能使用jQuery原型对象的作用域，在返回实例中访问jQuery的原型对象**\n\n`jQuery.fn.init.prototype = jQuery.fn`使得jQuery的原型对象覆盖了init 构造器的原型对象。\n\n\n## 对象的构建\n\n类一：\n\n```javascript\nfunction aQuery() {\n  this.name = 'jQuery';\n  this.sayName = function() {\n    return this.name;\n  };\n}\n\nvar a = new aQuery();\nvar b = new aQuery();\nvar c = new aQuery();\n```\n\n类二：\n\n```javascript\nfunction aQuery() {\n  this.name = 'jQuery';\n}\n\naQuery.prototype = {\n  sayName: function() {\n    return this.name;\n  }\n};\n\nvar a = new aQuery();\nvar b = new aQuery();\nvar c = new aQuery();\n```\n\n类二 new 产生的 a、b、c 三个实例对象共享了原型的 sayName 方法，这样的好处是节省了内存空间，类一则是要为每一个实例复制 sayName 方法，每个方法属性都占用一定的内存空间，所以如果把所有属性方法都声明在构造函数中，就会无形的增大很多开销。除此之外类一的所有方法都是拷贝到当前实例对象上。类二则是要通过 scope 连接到原型链上查找，这样就无形中多一层作用域链的查找。\n\n\n## 分离构造器\n\n通过 new 操作符构建一个对象，一般经过 4 步：\n\n- 创建一个新对象\n- 将构造函数的作用域给新对象（所以 this 就指向了这个新对象）\n- 执行构造函数中的代码\n- 返回这个新对象\n\n其实 new 操作符主要是把原型链跟实例的 this 关联起来，所以我们如果需要原型链就必须要 new 操作符来进行处理。否则 this 则变成 window 对象了。\n\n```javascript\nvar $$ = (ajQuery = function(selsctor) {\n  this.selector = selector;\n  return this;\n});\n\najQuery.fn = ajQuery.prototype = {\n  selectorName: function() {\n    return this.selector;\n  },\n  constructor: ajQuery\n};\n\nvar a = new $$('aaa'); //实例化\na.selectorName(); //aaa //得到选择器名字\n```\n\n首先改造 jQuery 无 new 的格式，我们可以通过 instanceof 来判断 this 是否是当前实例：\n\n```javascript\nvar $$ = (ajQuery = function(selector) {\n  if (!(this instanceof ajQuery)) {\n    return new ajQuery(selector);\n  }\n  this.selector = selector;\n  return this;\n});\n```\n# 链式调用\nDOM 链式调用的处理：\n1. 节约JS代码\n2. 所返回的都是同一个对象，可以提高代码效率。\n\n```javascript\n  jQuery.prototype = {\n    init:function(){\n      return this\n    },\n    name:function(){\n      return this\n    }\n  }\n\n  jQuery.init().name()\n\n```\n\n# 静态与实例方法共享设计\n\n遍历方法：\n\n```javascript\n$('.aaron').each(); //作为实例方法存在\n$.each(); //作为静态方法存在\n```\n\n第一条语句是给指定的上下文调用的，就是获取('.aaron')获取的 DOM 合集，第二条语句\\$.each()函数可用于得带任何集合，无论是“名/值”对象 或是数组。在迭代数组的情况下，回调函数每次都会传递一个数组索引和相应的数组值作为参数。\n\n```javascript\njQuery.prototype = {\n  each: function(callback, args) {\n    return jQuery.each(this, callback, args);\n  }\n};\n```\n\n实例方法取于静态方法，静态方法挂在 jQuery 构造器上，原型方法呢？jQuery 通过 new 原型 prototype 上 init 方法当成构造器，那么 init 原型链方法就是实例的方法了，所以 jQuery 通过 2 个构造器划分 2 种不同的调用方式，一种是静态，一种是原型。\n\n# 事件绑定\n\njQuery对事件的绑定分别有几个API `.bind(),.live(),.delegate(),.on()`\n不管是用什么方式绑定，归根到底还是用的`addEventListener/attachEvent`处理的，正如选择器不管如何匹配最终还是那些个浏览器接口处理\n\n不管是是用click/bind/delegate之中的哪个方法，最终都是jQuery底层都是调用on方法来完成最终的事件绑定。\n","slug":"jQuery-源码学习（一）","published":1,"updated":"2019-12-26T02:40:07.293Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmejaes6001bxcvr8nombje8","content":"<p>感觉自己的很多的代码质量不够好，最近在频繁的使用 jQuery,感觉 jQuery 中的一些函数的思想是应该去学习的，尤其是设计模式的思想，在以后的 vue 开发中，在不引用 jQuery 的情况下，能借鉴 jQuery 的思想封装一些不依赖 DOM 的公共函数。也觉得自己对一些设计模式之内的了解甚少，所以学习 jQuery 源码势在必行。</p>\n<span id=\"more\"></span>\n\n\n<h1 id=\"jQuery框架的核心\"><a href=\"#jQuery框架的核心\" class=\"headerlink\" title=\"jQuery框架的核心\"></a>jQuery框架的核心</h1><p>任何库与框架设计的第一要点就是解决命名空间与变量污染的问题。jQuery 就是利用 js 函数作用域的特性，采用立即调用表达式包裹自身的方法解决。</p>\n<ul>\n<li>匹配<code>HTML</code>文档中元素并对其执行操作。</li>\n<li>链式调用。</li>\n</ul>\n<h1 id=\"jQuery-对象的构建方式\"><a href=\"#jQuery-对象的构建方式\" class=\"headerlink\" title=\"jQuery 对象的构建方式\"></a>jQuery 对象的构建方式</h1><p>常规构建方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> aquery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector, context</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//构造函数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">aquery.prototype = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//原型</span></span><br><span class=\"line\">  name:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,</span><br><span class=\"line\">  age:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> aquery();</span><br><span class=\"line\">a.name();</span><br></pre></td></tr></table></figure>\n<p>原因：我猜想是因为更好的封装吧。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"built_in\">window</span>, <span class=\"literal\">undefined</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jQuery</span>(<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> jQuery.fn.init(selector);</span><br><span class=\"line\">    <span class=\"comment\">// 若是return jQuery.fn.init(selector) 则init中的this是指向jQuery，只有new 后才能隔离作用域</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  jQuery.fn = jQuery.prototype = &#123;</span><br><span class=\"line\">    init: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.age = <span class=\"number\">18</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    name:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.age)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    age:<span class=\"number\">20</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  jQuery().age <span class=\"comment\">//18</span></span><br><span class=\"line\">  jQuery.fn.init.prototype = jQuery.fn; </span><br><span class=\"line\">  <span class=\"comment\">//主要是将jQuery原型链下的方法挂载在 jQuery.fn.init的原型链下</span></span><br><span class=\"line\">  <span class=\"built_in\">window</span>.jQuery = <span class=\"built_in\">window</span>.$ = jQuery;</span><br><span class=\"line\">&#125;)(<span class=\"built_in\">window</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>闭包结构传参 window<ul>\n<li>闭包结构传入实参 window,然后里面用形参接收<ul>\n<li>减少内部每次引用 window 的查询时间</li>\n<li>方便压缩代码</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>形参 undefined<ul>\n<li>因为 ie 低版本的浏览器可以给 undefined 赋值成功，所以为了保证 undefined 一定是 undefined</li>\n</ul>\n</li>\n<li>jQuery 传参 selector<ul>\n<li>selector 可以是一对标签，可以是 id、类 、后代、子代等等，可以是 jQuery 对象</li>\n</ul>\n</li>\n<li>jQuery 原型对象赋值给 jQuery 原型方法 init 的原型</li>\n<li>给 window 暴露可利用成员。</li>\n</ul>\n<p><strong>javascript 中的 undefined 并不是作为一个关键字，因此可以允许用户对其赋值。</strong></p>\n<h2 id=\"jQuery-fn-init-prototype-jQuery-fn-的作用\"><a href=\"#jQuery-fn-init-prototype-jQuery-fn-的作用\" class=\"headerlink\" title=\"jQuery.fn.init.prototype = jQuery.fn 的作用\"></a><code>jQuery.fn.init.prototype = jQuery.fn</code> 的作用</h2><p>** 既能隔离作用域还能使用jQuery原型对象的作用域，在返回实例中访问jQuery的原型对象**</p>\n<p><code>jQuery.fn.init.prototype = jQuery.fn</code>使得jQuery的原型对象覆盖了init 构造器的原型对象。</p>\n<h2 id=\"对象的构建\"><a href=\"#对象的构建\" class=\"headerlink\" title=\"对象的构建\"></a>对象的构建</h2><p>类一：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">aQuery</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;jQuery&#x27;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> aQuery();</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> aQuery();</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> aQuery();</span><br></pre></td></tr></table></figure>\n\n<p>类二：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">aQuery</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;jQuery&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">aQuery.prototype = &#123;</span><br><span class=\"line\">  sayName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> aQuery();</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> aQuery();</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> aQuery();</span><br></pre></td></tr></table></figure>\n\n<p>类二 new 产生的 a、b、c 三个实例对象共享了原型的 sayName 方法，这样的好处是节省了内存空间，类一则是要为每一个实例复制 sayName 方法，每个方法属性都占用一定的内存空间，所以如果把所有属性方法都声明在构造函数中，就会无形的增大很多开销。除此之外类一的所有方法都是拷贝到当前实例对象上。类二则是要通过 scope 连接到原型链上查找，这样就无形中多一层作用域链的查找。</p>\n<h2 id=\"分离构造器\"><a href=\"#分离构造器\" class=\"headerlink\" title=\"分离构造器\"></a>分离构造器</h2><p>通过 new 操作符构建一个对象，一般经过 4 步：</p>\n<ul>\n<li>创建一个新对象</li>\n<li>将构造函数的作用域给新对象（所以 this 就指向了这个新对象）</li>\n<li>执行构造函数中的代码</li>\n<li>返回这个新对象</li>\n</ul>\n<p>其实 new 操作符主要是把原型链跟实例的 this 关联起来，所以我们如果需要原型链就必须要 new 操作符来进行处理。否则 this 则变成 window 对象了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> $$ = (ajQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selsctor</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.selector = selector;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">ajQuery.fn = ajQuery.prototype = &#123;</span><br><span class=\"line\">  selectorName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.selector;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title\">constructor</span>: <span class=\"title\">ajQuery</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> $$(<span class=\"string\">&#x27;aaa&#x27;</span>); <span class=\"comment\">//实例化</span></span><br><span class=\"line\">a.selectorName(); <span class=\"comment\">//aaa //得到选择器名字</span></span><br></pre></td></tr></table></figure>\n\n<p>首先改造 jQuery 无 new 的格式，我们可以通过 instanceof 来判断 this 是否是当前实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> $$ = (ajQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(<span class=\"built_in\">this</span> <span class=\"keyword\">instanceof</span> ajQuery)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ajQuery(selector);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.selector = selector;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"链式调用\"><a href=\"#链式调用\" class=\"headerlink\" title=\"链式调用\"></a>链式调用</h1><p>DOM 链式调用的处理：</p>\n<ol>\n<li>节约JS代码</li>\n<li>所返回的都是同一个对象，可以提高代码效率。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.prototype = &#123;</span><br><span class=\"line\">  init:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  name:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">jQuery.init().name()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"静态与实例方法共享设计\"><a href=\"#静态与实例方法共享设计\" class=\"headerlink\" title=\"静态与实例方法共享设计\"></a>静态与实例方法共享设计</h1><p>遍历方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;.aaron&#x27;</span>).each(); <span class=\"comment\">//作为实例方法存在</span></span><br><span class=\"line\">$.each(); <span class=\"comment\">//作为静态方法存在</span></span><br></pre></td></tr></table></figure>\n\n<p>第一条语句是给指定的上下文调用的，就是获取(‘.aaron’)获取的 DOM 合集，第二条语句$.each()函数可用于得带任何集合，无论是“名/值”对象 或是数组。在迭代数组的情况下，回调函数每次都会传递一个数组索引和相应的数组值作为参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.prototype = &#123;</span><br><span class=\"line\">  each: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback, args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> jQuery.each(<span class=\"built_in\">this</span>, callback, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>实例方法取于静态方法，静态方法挂在 jQuery 构造器上，原型方法呢？jQuery 通过 new 原型 prototype 上 init 方法当成构造器，那么 init 原型链方法就是实例的方法了，所以 jQuery 通过 2 个构造器划分 2 种不同的调用方式，一种是静态，一种是原型。</p>\n<h1 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h1><p>jQuery对事件的绑定分别有几个API <code>.bind(),.live(),.delegate(),.on()</code><br>不管是用什么方式绑定，归根到底还是用的<code>addEventListener/attachEvent</code>处理的，正如选择器不管如何匹配最终还是那些个浏览器接口处理</p>\n<p>不管是是用click/bind/delegate之中的哪个方法，最终都是jQuery底层都是调用on方法来完成最终的事件绑定。</p>\n","site":{"data":{}},"excerpt":"<p>感觉自己的很多的代码质量不够好，最近在频繁的使用 jQuery,感觉 jQuery 中的一些函数的思想是应该去学习的，尤其是设计模式的思想，在以后的 vue 开发中，在不引用 jQuery 的情况下，能借鉴 jQuery 的思想封装一些不依赖 DOM 的公共函数。也觉得自己对一些设计模式之内的了解甚少，所以学习 jQuery 源码势在必行。</p>","more":"<h1 id=\"jQuery框架的核心\"><a href=\"#jQuery框架的核心\" class=\"headerlink\" title=\"jQuery框架的核心\"></a>jQuery框架的核心</h1><p>任何库与框架设计的第一要点就是解决命名空间与变量污染的问题。jQuery 就是利用 js 函数作用域的特性，采用立即调用表达式包裹自身的方法解决。</p>\n<ul>\n<li>匹配<code>HTML</code>文档中元素并对其执行操作。</li>\n<li>链式调用。</li>\n</ul>\n<h1 id=\"jQuery-对象的构建方式\"><a href=\"#jQuery-对象的构建方式\" class=\"headerlink\" title=\"jQuery 对象的构建方式\"></a>jQuery 对象的构建方式</h1><p>常规构建方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> aquery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector, context</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//构造函数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">aquery.prototype = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//原型</span></span><br><span class=\"line\">  name:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,</span><br><span class=\"line\">  age:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> aquery();</span><br><span class=\"line\">a.name();</span><br></pre></td></tr></table></figure>\n<p>原因：我猜想是因为更好的封装吧。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"built_in\">window</span>, <span class=\"literal\">undefined</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jQuery</span>(<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> jQuery.fn.init(selector);</span><br><span class=\"line\">    <span class=\"comment\">// 若是return jQuery.fn.init(selector) 则init中的this是指向jQuery，只有new 后才能隔离作用域</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  jQuery.fn = jQuery.prototype = &#123;</span><br><span class=\"line\">    init: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.age = <span class=\"number\">18</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    name:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.age)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    age:<span class=\"number\">20</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  jQuery().age <span class=\"comment\">//18</span></span><br><span class=\"line\">  jQuery.fn.init.prototype = jQuery.fn; </span><br><span class=\"line\">  <span class=\"comment\">//主要是将jQuery原型链下的方法挂载在 jQuery.fn.init的原型链下</span></span><br><span class=\"line\">  <span class=\"built_in\">window</span>.jQuery = <span class=\"built_in\">window</span>.$ = jQuery;</span><br><span class=\"line\">&#125;)(<span class=\"built_in\">window</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>闭包结构传参 window<ul>\n<li>闭包结构传入实参 window,然后里面用形参接收<ul>\n<li>减少内部每次引用 window 的查询时间</li>\n<li>方便压缩代码</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>形参 undefined<ul>\n<li>因为 ie 低版本的浏览器可以给 undefined 赋值成功，所以为了保证 undefined 一定是 undefined</li>\n</ul>\n</li>\n<li>jQuery 传参 selector<ul>\n<li>selector 可以是一对标签，可以是 id、类 、后代、子代等等，可以是 jQuery 对象</li>\n</ul>\n</li>\n<li>jQuery 原型对象赋值给 jQuery 原型方法 init 的原型</li>\n<li>给 window 暴露可利用成员。</li>\n</ul>\n<p><strong>javascript 中的 undefined 并不是作为一个关键字，因此可以允许用户对其赋值。</strong></p>\n<h2 id=\"jQuery-fn-init-prototype-jQuery-fn-的作用\"><a href=\"#jQuery-fn-init-prototype-jQuery-fn-的作用\" class=\"headerlink\" title=\"jQuery.fn.init.prototype = jQuery.fn 的作用\"></a><code>jQuery.fn.init.prototype = jQuery.fn</code> 的作用</h2><p>** 既能隔离作用域还能使用jQuery原型对象的作用域，在返回实例中访问jQuery的原型对象**</p>\n<p><code>jQuery.fn.init.prototype = jQuery.fn</code>使得jQuery的原型对象覆盖了init 构造器的原型对象。</p>\n<h2 id=\"对象的构建\"><a href=\"#对象的构建\" class=\"headerlink\" title=\"对象的构建\"></a>对象的构建</h2><p>类一：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">aQuery</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;jQuery&#x27;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> aQuery();</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> aQuery();</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> aQuery();</span><br></pre></td></tr></table></figure>\n\n<p>类二：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">aQuery</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;jQuery&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">aQuery.prototype = &#123;</span><br><span class=\"line\">  sayName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> aQuery();</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> aQuery();</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> aQuery();</span><br></pre></td></tr></table></figure>\n\n<p>类二 new 产生的 a、b、c 三个实例对象共享了原型的 sayName 方法，这样的好处是节省了内存空间，类一则是要为每一个实例复制 sayName 方法，每个方法属性都占用一定的内存空间，所以如果把所有属性方法都声明在构造函数中，就会无形的增大很多开销。除此之外类一的所有方法都是拷贝到当前实例对象上。类二则是要通过 scope 连接到原型链上查找，这样就无形中多一层作用域链的查找。</p>\n<h2 id=\"分离构造器\"><a href=\"#分离构造器\" class=\"headerlink\" title=\"分离构造器\"></a>分离构造器</h2><p>通过 new 操作符构建一个对象，一般经过 4 步：</p>\n<ul>\n<li>创建一个新对象</li>\n<li>将构造函数的作用域给新对象（所以 this 就指向了这个新对象）</li>\n<li>执行构造函数中的代码</li>\n<li>返回这个新对象</li>\n</ul>\n<p>其实 new 操作符主要是把原型链跟实例的 this 关联起来，所以我们如果需要原型链就必须要 new 操作符来进行处理。否则 this 则变成 window 对象了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> $$ = (ajQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selsctor</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.selector = selector;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">ajQuery.fn = ajQuery.prototype = &#123;</span><br><span class=\"line\">  selectorName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.selector;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title\">constructor</span>: <span class=\"title\">ajQuery</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> $$(<span class=\"string\">&#x27;aaa&#x27;</span>); <span class=\"comment\">//实例化</span></span><br><span class=\"line\">a.selectorName(); <span class=\"comment\">//aaa //得到选择器名字</span></span><br></pre></td></tr></table></figure>\n\n<p>首先改造 jQuery 无 new 的格式，我们可以通过 instanceof 来判断 this 是否是当前实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> $$ = (ajQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(<span class=\"built_in\">this</span> <span class=\"keyword\">instanceof</span> ajQuery)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ajQuery(selector);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.selector = selector;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"链式调用\"><a href=\"#链式调用\" class=\"headerlink\" title=\"链式调用\"></a>链式调用</h1><p>DOM 链式调用的处理：</p>\n<ol>\n<li>节约JS代码</li>\n<li>所返回的都是同一个对象，可以提高代码效率。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.prototype = &#123;</span><br><span class=\"line\">  init:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  name:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">jQuery.init().name()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"静态与实例方法共享设计\"><a href=\"#静态与实例方法共享设计\" class=\"headerlink\" title=\"静态与实例方法共享设计\"></a>静态与实例方法共享设计</h1><p>遍历方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;.aaron&#x27;</span>).each(); <span class=\"comment\">//作为实例方法存在</span></span><br><span class=\"line\">$.each(); <span class=\"comment\">//作为静态方法存在</span></span><br></pre></td></tr></table></figure>\n\n<p>第一条语句是给指定的上下文调用的，就是获取(‘.aaron’)获取的 DOM 合集，第二条语句$.each()函数可用于得带任何集合，无论是“名/值”对象 或是数组。在迭代数组的情况下，回调函数每次都会传递一个数组索引和相应的数组值作为参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.prototype = &#123;</span><br><span class=\"line\">  each: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback, args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> jQuery.each(<span class=\"built_in\">this</span>, callback, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>实例方法取于静态方法，静态方法挂在 jQuery 构造器上，原型方法呢？jQuery 通过 new 原型 prototype 上 init 方法当成构造器，那么 init 原型链方法就是实例的方法了，所以 jQuery 通过 2 个构造器划分 2 种不同的调用方式，一种是静态，一种是原型。</p>\n<h1 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h1><p>jQuery对事件的绑定分别有几个API <code>.bind(),.live(),.delegate(),.on()</code><br>不管是用什么方式绑定，归根到底还是用的<code>addEventListener/attachEvent</code>处理的，正如选择器不管如何匹配最终还是那些个浏览器接口处理</p>\n<p>不管是是用click/bind/delegate之中的哪个方法，最终都是jQuery底层都是调用on方法来完成最终的事件绑定。</p>"},{"title":"jQuery-组件封装","date":"2019-04-19T03:32:25.000Z","_content":"\n总结在 jQuery 项目开发中所使用到的组件封装技巧，封装一些频繁被使用的功能。\n\n<!--more-->\n\n# JQuery 中封装组件的两种方法\n\n- 使用`$.extend`来扩展 JQuery\n- 通过`$.fn`向 JQuery 添加新的方法\n\n## `$.extend`\n\n```javascript\n(function() {\n  $.extend({\n    Alert: function(str) {\n      if (!str) return;\n      alert(str);\n      console.log(str);\n    }\n  });\n})(JQuery);\n$.Alert();\n$.Alert('Hello');\n```\n\n但是这种方式的弊端是无法使用`$(\"div\").Alert()` 这种形式\n\n## `$.fn`\n\n基本语法：\n\n```javascript\n$.fn.pluginName = function() {};\n```\n\n在插件名字定义的这个函数内部， this 指代的是我们在调用该插件时，用 jQuery 选择器选中的元素\n\n```javascript\n$(function() {\n  $.fn.bgColor = function(cor) {\n    $(this).css('background-color', cor);\n  };\n});\n$('div').bgColor('red');\n```\n","source":"_posts/jQuery-组件封装.md","raw":"---\ntitle: jQuery-组件封装\ndate: 2019-04-19 11:32:25\ncategories: jQuery\n---\n\n总结在 jQuery 项目开发中所使用到的组件封装技巧，封装一些频繁被使用的功能。\n\n<!--more-->\n\n# JQuery 中封装组件的两种方法\n\n- 使用`$.extend`来扩展 JQuery\n- 通过`$.fn`向 JQuery 添加新的方法\n\n## `$.extend`\n\n```javascript\n(function() {\n  $.extend({\n    Alert: function(str) {\n      if (!str) return;\n      alert(str);\n      console.log(str);\n    }\n  });\n})(JQuery);\n$.Alert();\n$.Alert('Hello');\n```\n\n但是这种方式的弊端是无法使用`$(\"div\").Alert()` 这种形式\n\n## `$.fn`\n\n基本语法：\n\n```javascript\n$.fn.pluginName = function() {};\n```\n\n在插件名字定义的这个函数内部， this 指代的是我们在调用该插件时，用 jQuery 选择器选中的元素\n\n```javascript\n$(function() {\n  $.fn.bgColor = function(cor) {\n    $(this).css('background-color', cor);\n  };\n});\n$('div').bgColor('red');\n```\n","slug":"jQuery-组件封装","published":1,"updated":"2019-05-20T03:02:38.450Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmejaes7001cxcvrciv4ea7c","content":"<p>总结在 jQuery 项目开发中所使用到的组件封装技巧，封装一些频繁被使用的功能。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"JQuery-中封装组件的两种方法\"><a href=\"#JQuery-中封装组件的两种方法\" class=\"headerlink\" title=\"JQuery 中封装组件的两种方法\"></a>JQuery 中封装组件的两种方法</h1><ul>\n<li>使用<code>$.extend</code>来扩展 JQuery</li>\n<li>通过<code>$.fn</code>向 JQuery 添加新的方法</li>\n</ul>\n<h2 id=\"extend\"><a href=\"#extend\" class=\"headerlink\" title=\"$.extend\"></a><code>$.extend</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $.extend(&#123;</span><br><span class=\"line\">    Alert: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!str) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      alert(str);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;)(JQuery);</span><br><span class=\"line\">$.Alert();</span><br><span class=\"line\">$.Alert(<span class=\"string\">&#x27;Hello&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>但是这种方式的弊端是无法使用<code>$(&quot;div&quot;).Alert()</code> 这种形式</p>\n<h2 id=\"fn\"><a href=\"#fn\" class=\"headerlink\" title=\"$.fn\"></a><code>$.fn</code></h2><p>基本语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.fn.pluginName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在插件名字定义的这个函数内部， this 指代的是我们在调用该插件时，用 jQuery 选择器选中的元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $.fn.bgColor = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cor</span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"built_in\">this</span>).css(<span class=\"string\">&#x27;background-color&#x27;</span>, cor);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$(<span class=\"string\">&#x27;div&#x27;</span>).bgColor(<span class=\"string\">&#x27;red&#x27;</span>);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>总结在 jQuery 项目开发中所使用到的组件封装技巧，封装一些频繁被使用的功能。</p>","more":"<h1 id=\"JQuery-中封装组件的两种方法\"><a href=\"#JQuery-中封装组件的两种方法\" class=\"headerlink\" title=\"JQuery 中封装组件的两种方法\"></a>JQuery 中封装组件的两种方法</h1><ul>\n<li>使用<code>$.extend</code>来扩展 JQuery</li>\n<li>通过<code>$.fn</code>向 JQuery 添加新的方法</li>\n</ul>\n<h2 id=\"extend\"><a href=\"#extend\" class=\"headerlink\" title=\"$.extend\"></a><code>$.extend</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $.extend(&#123;</span><br><span class=\"line\">    Alert: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!str) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      alert(str);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;)(JQuery);</span><br><span class=\"line\">$.Alert();</span><br><span class=\"line\">$.Alert(<span class=\"string\">&#x27;Hello&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>但是这种方式的弊端是无法使用<code>$(&quot;div&quot;).Alert()</code> 这种形式</p>\n<h2 id=\"fn\"><a href=\"#fn\" class=\"headerlink\" title=\"$.fn\"></a><code>$.fn</code></h2><p>基本语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.fn.pluginName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在插件名字定义的这个函数内部， this 指代的是我们在调用该插件时，用 jQuery 选择器选中的元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $.fn.bgColor = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cor</span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"built_in\">this</span>).css(<span class=\"string\">&#x27;background-color&#x27;</span>, cor);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$(<span class=\"string\">&#x27;div&#x27;</span>).bgColor(<span class=\"string\">&#x27;red&#x27;</span>);</span><br></pre></td></tr></table></figure>"},{"title":"keep-alive小知识","date":"2020-03-09T03:28:03.000Z","_content":"keep-alive 使用的小知识点\n\n<!--more-->\n\n- 在动态组件中的应用\n```html\n<keep-alive :include=\"whiteList\" :exclude=\"blackList\" :max=\"amount\">\n     <component :is=\"currentComponent\"></component>\n</keep-alive>\n```\n- include 定义白名单\n- exclude定义黑名单\n- max 定义缓存组件的上限，超出上限使用LRU的策略置换缓存数据\n\nLRU:\n内存管理的一种置换算法，对于在内存中但又不用数据块（内存块）叫做LRU，造作系统会根据那些数据属于LRU而将其移出内存而腾出空间来加载另外的数据。\n\n\n只有当组件在keep-alive 内被切换，才会有actived和deactived 这两个钩子函数。\n\n## keep-alive 组件的渲染\n","source":"_posts/keep-alive小知识.md","raw":"---\ntitle: keep-alive小知识\ndate: 2020-03-09 11:28:03\ncategories: Vue\n---\nkeep-alive 使用的小知识点\n\n<!--more-->\n\n- 在动态组件中的应用\n```html\n<keep-alive :include=\"whiteList\" :exclude=\"blackList\" :max=\"amount\">\n     <component :is=\"currentComponent\"></component>\n</keep-alive>\n```\n- include 定义白名单\n- exclude定义黑名单\n- max 定义缓存组件的上限，超出上限使用LRU的策略置换缓存数据\n\nLRU:\n内存管理的一种置换算法，对于在内存中但又不用数据块（内存块）叫做LRU，造作系统会根据那些数据属于LRU而将其移出内存而腾出空间来加载另外的数据。\n\n\n只有当组件在keep-alive 内被切换，才会有actived和deactived 这两个钩子函数。\n\n## keep-alive 组件的渲染\n","slug":"keep-alive小知识","published":1,"updated":"2020-03-13T03:09:12.812Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmejaes8001fxcvr5xg8d9aw","content":"<p>keep-alive 使用的小知识点</p>\n<span id=\"more\"></span>\n\n<ul>\n<li>在动态组件中的应用<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span> <span class=\"attr\">:include</span>=<span class=\"string\">&quot;whiteList&quot;</span> <span class=\"attr\">:exclude</span>=<span class=\"string\">&quot;blackList&quot;</span> <span class=\"attr\">:max</span>=<span class=\"string\">&quot;amount&quot;</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">&quot;currentComponent&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>include 定义白名单</li>\n<li>exclude定义黑名单</li>\n<li>max 定义缓存组件的上限，超出上限使用LRU的策略置换缓存数据</li>\n</ul>\n<p>LRU:<br>内存管理的一种置换算法，对于在内存中但又不用数据块（内存块）叫做LRU，造作系统会根据那些数据属于LRU而将其移出内存而腾出空间来加载另外的数据。</p>\n<p>只有当组件在keep-alive 内被切换，才会有actived和deactived 这两个钩子函数。</p>\n<h2 id=\"keep-alive-组件的渲染\"><a href=\"#keep-alive-组件的渲染\" class=\"headerlink\" title=\"keep-alive 组件的渲染\"></a>keep-alive 组件的渲染</h2>","site":{"data":{}},"excerpt":"<p>keep-alive 使用的小知识点</p>","more":"<ul>\n<li>在动态组件中的应用<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span> <span class=\"attr\">:include</span>=<span class=\"string\">&quot;whiteList&quot;</span> <span class=\"attr\">:exclude</span>=<span class=\"string\">&quot;blackList&quot;</span> <span class=\"attr\">:max</span>=<span class=\"string\">&quot;amount&quot;</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">&quot;currentComponent&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>include 定义白名单</li>\n<li>exclude定义黑名单</li>\n<li>max 定义缓存组件的上限，超出上限使用LRU的策略置换缓存数据</li>\n</ul>\n<p>LRU:<br>内存管理的一种置换算法，对于在内存中但又不用数据块（内存块）叫做LRU，造作系统会根据那些数据属于LRU而将其移出内存而腾出空间来加载另外的数据。</p>\n<p>只有当组件在keep-alive 内被切换，才会有actived和deactived 这两个钩子函数。</p>\n<h2 id=\"keep-alive-组件的渲染\"><a href=\"#keep-alive-组件的渲染\" class=\"headerlink\" title=\"keep-alive 组件的渲染\"></a>keep-alive 组件的渲染</h2>"},{"title":"require与import 的区别","date":"2018-04-04T08:24:01.000Z","_content":"以前没有深究的问题，仔细思考之后发现自己并不清楚，然后记个笔记。\n\n<!--more-->\n\n## 遵循的模块化规范不一样\n\n模块化规范：即为JavaScript提供一种模块化编写、模块依赖和模块运行的方案。最初的JavaScript没有模块化规范，所以很多都是全局变量。\n\n## require 和 import/export 形式不一样\nrequire/exports 的用法只有以下3种简单的写法。\n\n```javascript\nconst fs = require('fs')\nexports.fs = fs\nmodule.exports = fs\n```\n\n而import/export的写法是：\n```javascript\nimport fs from 'fs'\nimport {default as fs} from 'fs'\nimport * as fs from 'fs'\nimport {readFile} from 'fs'\nimport {readFile as read} from 'fs'\nimport fs, {readFile} from 'fs'\n\nexport default fs\nexport const fs\nexport function readFile\nexport {readFile, read}\nexport * from 'fs'\n```\n## 一些不同点\n\n- import静态编译，import的地址不能通过计算\n\n- require就可以，例如 const url = \"a\" + \"b\"; \n\n- Import url 直接报错了\n\n- require(url)不会报错\n\n- 所以require都会用在动态加载的时候\n\n- 从规范与实现定义来讲，require是动态加载，import 是静态加载，从底层的运行来讲，require 是在程序运行时去解析而import 是在编译 的时候去做解析请求包，require是请求整个包对象而import是只请求模块中需要的请求的部分。**现在import应该还只算是ES6的语法规范，babel打包的还是require**\n\n","source":"_posts/require与import-的区别.md","raw":"---\ntitle: require与import 的区别\ndate: 2018-04-04 16:24:01\ncategories: JavaScript\n---\n以前没有深究的问题，仔细思考之后发现自己并不清楚，然后记个笔记。\n\n<!--more-->\n\n## 遵循的模块化规范不一样\n\n模块化规范：即为JavaScript提供一种模块化编写、模块依赖和模块运行的方案。最初的JavaScript没有模块化规范，所以很多都是全局变量。\n\n## require 和 import/export 形式不一样\nrequire/exports 的用法只有以下3种简单的写法。\n\n```javascript\nconst fs = require('fs')\nexports.fs = fs\nmodule.exports = fs\n```\n\n而import/export的写法是：\n```javascript\nimport fs from 'fs'\nimport {default as fs} from 'fs'\nimport * as fs from 'fs'\nimport {readFile} from 'fs'\nimport {readFile as read} from 'fs'\nimport fs, {readFile} from 'fs'\n\nexport default fs\nexport const fs\nexport function readFile\nexport {readFile, read}\nexport * from 'fs'\n```\n## 一些不同点\n\n- import静态编译，import的地址不能通过计算\n\n- require就可以，例如 const url = \"a\" + \"b\"; \n\n- Import url 直接报错了\n\n- require(url)不会报错\n\n- 所以require都会用在动态加载的时候\n\n- 从规范与实现定义来讲，require是动态加载，import 是静态加载，从底层的运行来讲，require 是在程序运行时去解析而import 是在编译 的时候去做解析请求包，require是请求整个包对象而import是只请求模块中需要的请求的部分。**现在import应该还只算是ES6的语法规范，babel打包的还是require**\n\n","slug":"require与import-的区别","published":1,"updated":"2019-07-09T07:02:00.046Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmejaes9001hxcvrhq0u8lgw","content":"<p>以前没有深究的问题，仔细思考之后发现自己并不清楚，然后记个笔记。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"遵循的模块化规范不一样\"><a href=\"#遵循的模块化规范不一样\" class=\"headerlink\" title=\"遵循的模块化规范不一样\"></a>遵循的模块化规范不一样</h2><p>模块化规范：即为JavaScript提供一种模块化编写、模块依赖和模块运行的方案。最初的JavaScript没有模块化规范，所以很多都是全局变量。</p>\n<h2 id=\"require-和-import-export-形式不一样\"><a href=\"#require-和-import-export-形式不一样\" class=\"headerlink\" title=\"require 和 import/export 形式不一样\"></a>require 和 import/export 形式不一样</h2><p>require/exports 的用法只有以下3种简单的写法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.fs = fs</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = fs</span><br></pre></td></tr></table></figure>\n\n<p>而import/export的写法是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fs <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"keyword\">default</span> <span class=\"keyword\">as</span> fs&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> fs <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;readFile&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;readFile <span class=\"keyword\">as</span> read&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> fs, &#123;readFile&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> fs</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fs</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readFile</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">export</span> </span>&#123;readFile, read&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"一些不同点\"><a href=\"#一些不同点\" class=\"headerlink\" title=\"一些不同点\"></a>一些不同点</h2><ul>\n<li><p>import静态编译，import的地址不能通过计算</p>\n</li>\n<li><p>require就可以，例如 const url = “a” + “b”; </p>\n</li>\n<li><p>Import url 直接报错了</p>\n</li>\n<li><p>require(url)不会报错</p>\n</li>\n<li><p>所以require都会用在动态加载的时候</p>\n</li>\n<li><p>从规范与实现定义来讲，require是动态加载，import 是静态加载，从底层的运行来讲，require 是在程序运行时去解析而import 是在编译 的时候去做解析请求包，require是请求整个包对象而import是只请求模块中需要的请求的部分。<strong>现在import应该还只算是ES6的语法规范，babel打包的还是require</strong></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>以前没有深究的问题，仔细思考之后发现自己并不清楚，然后记个笔记。</p>","more":"<h2 id=\"遵循的模块化规范不一样\"><a href=\"#遵循的模块化规范不一样\" class=\"headerlink\" title=\"遵循的模块化规范不一样\"></a>遵循的模块化规范不一样</h2><p>模块化规范：即为JavaScript提供一种模块化编写、模块依赖和模块运行的方案。最初的JavaScript没有模块化规范，所以很多都是全局变量。</p>\n<h2 id=\"require-和-import-export-形式不一样\"><a href=\"#require-和-import-export-形式不一样\" class=\"headerlink\" title=\"require 和 import/export 形式不一样\"></a>require 和 import/export 形式不一样</h2><p>require/exports 的用法只有以下3种简单的写法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.fs = fs</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = fs</span><br></pre></td></tr></table></figure>\n\n<p>而import/export的写法是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fs <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"keyword\">default</span> <span class=\"keyword\">as</span> fs&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> fs <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;readFile&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;readFile <span class=\"keyword\">as</span> read&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> fs, &#123;readFile&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> fs</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fs</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readFile</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">export</span> </span>&#123;readFile, read&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"一些不同点\"><a href=\"#一些不同点\" class=\"headerlink\" title=\"一些不同点\"></a>一些不同点</h2><ul>\n<li><p>import静态编译，import的地址不能通过计算</p>\n</li>\n<li><p>require就可以，例如 const url = “a” + “b”; </p>\n</li>\n<li><p>Import url 直接报错了</p>\n</li>\n<li><p>require(url)不会报错</p>\n</li>\n<li><p>所以require都会用在动态加载的时候</p>\n</li>\n<li><p>从规范与实现定义来讲，require是动态加载，import 是静态加载，从底层的运行来讲，require 是在程序运行时去解析而import 是在编译 的时候去做解析请求包，require是请求整个包对象而import是只请求模块中需要的请求的部分。<strong>现在import应该还只算是ES6的语法规范，babel打包的还是require</strong></p>\n</li>\n</ul>"},{"title":"vue懒加载与分组打包","date":"2020-04-01T10:28:07.000Z","_content":"\nvue 打包优化小知识点\n\n<!--more-->\n\n在 vue-router 的 index.js 文件中\n将原来的组件引入方式改变如下：\n\n```javascript\nimport Test from '@/component/test1'\n```\n\n变为\n\n```javascript\nconst Test1 = r =>\n  require.ensure([], () => r(rquire('../components/test1')), 'chunkname1')\n```\n\n示例代码：\n\n```javascript\nconst HelloWorld = r =>\n  require.ensure([], () => r(require('../components/HelloWorld')), 'chunkname1')\nconst Test1 = r =>\n  require.ensure([], () => r(require('../components/test1')), 'chunkname1')\nconst Test2 = r =>\n  require.ensure([], () => r(require('../components/test2')), 'chunkname3')\n```\n","source":"_posts/vue懒加载与分组打包.md","raw":"---\ntitle: vue懒加载与分组打包\ndate: 2020-04-01 18:28:07\ncategories: vue\n---\n\nvue 打包优化小知识点\n\n<!--more-->\n\n在 vue-router 的 index.js 文件中\n将原来的组件引入方式改变如下：\n\n```javascript\nimport Test from '@/component/test1'\n```\n\n变为\n\n```javascript\nconst Test1 = r =>\n  require.ensure([], () => r(rquire('../components/test1')), 'chunkname1')\n```\n\n示例代码：\n\n```javascript\nconst HelloWorld = r =>\n  require.ensure([], () => r(require('../components/HelloWorld')), 'chunkname1')\nconst Test1 = r =>\n  require.ensure([], () => r(require('../components/test1')), 'chunkname1')\nconst Test2 = r =>\n  require.ensure([], () => r(require('../components/test2')), 'chunkname3')\n```\n","slug":"vue懒加载与分组打包","published":1,"updated":"2020-04-01T10:35:41.117Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmejaesa001kxcvrcu027t3q","content":"<p>vue 打包优化小知识点</p>\n<span id=\"more\"></span>\n\n<p>在 vue-router 的 index.js 文件中<br>将原来的组件引入方式改变如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Test <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/component/test1&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>变为</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Test1 = <span class=\"function\"><span class=\"params\">r</span> =&gt;</span></span><br><span class=\"line\">  <span class=\"built_in\">require</span>.ensure([], <span class=\"function\">() =&gt;</span> r(rquire(<span class=\"string\">&#x27;../components/test1&#x27;</span>)), <span class=\"string\">&#x27;chunkname1&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>示例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> HelloWorld = <span class=\"function\"><span class=\"params\">r</span> =&gt;</span></span><br><span class=\"line\">  <span class=\"built_in\">require</span>.ensure([], <span class=\"function\">() =&gt;</span> r(<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../components/HelloWorld&#x27;</span>)), <span class=\"string\">&#x27;chunkname1&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> Test1 = <span class=\"function\"><span class=\"params\">r</span> =&gt;</span></span><br><span class=\"line\">  <span class=\"built_in\">require</span>.ensure([], <span class=\"function\">() =&gt;</span> r(<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../components/test1&#x27;</span>)), <span class=\"string\">&#x27;chunkname1&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> Test2 = <span class=\"function\"><span class=\"params\">r</span> =&gt;</span></span><br><span class=\"line\">  <span class=\"built_in\">require</span>.ensure([], <span class=\"function\">() =&gt;</span> r(<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../components/test2&#x27;</span>)), <span class=\"string\">&#x27;chunkname3&#x27;</span>)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>vue 打包优化小知识点</p>","more":"<p>在 vue-router 的 index.js 文件中<br>将原来的组件引入方式改变如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Test <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/component/test1&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>变为</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Test1 = <span class=\"function\"><span class=\"params\">r</span> =&gt;</span></span><br><span class=\"line\">  <span class=\"built_in\">require</span>.ensure([], <span class=\"function\">() =&gt;</span> r(rquire(<span class=\"string\">&#x27;../components/test1&#x27;</span>)), <span class=\"string\">&#x27;chunkname1&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>示例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> HelloWorld = <span class=\"function\"><span class=\"params\">r</span> =&gt;</span></span><br><span class=\"line\">  <span class=\"built_in\">require</span>.ensure([], <span class=\"function\">() =&gt;</span> r(<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../components/HelloWorld&#x27;</span>)), <span class=\"string\">&#x27;chunkname1&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> Test1 = <span class=\"function\"><span class=\"params\">r</span> =&gt;</span></span><br><span class=\"line\">  <span class=\"built_in\">require</span>.ensure([], <span class=\"function\">() =&gt;</span> r(<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../components/test1&#x27;</span>)), <span class=\"string\">&#x27;chunkname1&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> Test2 = <span class=\"function\"><span class=\"params\">r</span> =&gt;</span></span><br><span class=\"line\">  <span class=\"built_in\">require</span>.ensure([], <span class=\"function\">() =&gt;</span> r(<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../components/test2&#x27;</span>)), <span class=\"string\">&#x27;chunkname3&#x27;</span>)</span><br></pre></td></tr></table></figure>"},{"title":"webpack优化之preload和prefetch","date":"2019-08-16T09:26:11.000Z","_content":"\n链接预取是一种浏览器机制，其利用浏览器空闲时间来下载或预取用户在不久的将来可能访问的文档。网页向浏览器提供一组预取提示，并在浏览器完成当前页面的加载后开始静默地拉取指定的文档并将其存储在缓存中。当用户访问其中一个预取文档时，便可以快速的从浏览器缓存中得到。\n\n<!--more-->\n\n# prefetch\n\nprefetch 的设计初衷是为了让当前页面的关键资源尽早被发现和加载，从而提升首屏渲染性能。\n\n当我们使用 webpack 构建页面时，就会在页面中发现有很多使用`link`引入的 JS 资源。\n\n![network](https://img.hacpai.com/file/2019/08/15659449621-5fea8870.jpg)\n\n这段代码告诉浏览器，这段资源将会在未来某个导航或者功能要用到，但是本资源的下载顺序权重比较低。也就是说 prefetch 通常用于加速下一次导航，而不是本次的。\n\n被标记为 prefetch 的资源，将会被浏览器在空闲时间加载。prefetch 指示的是**下一次**导航可能需要的资源。浏览器识别到 Prefetch 时，应该加载该资源（且不执行），等到真正请求相同资源时，就能够得到更快的响应。\n\n![network]](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Link_prefetching_FAQ)\n\n# preload\n\n```\n<link rel=\"preload\" href=\"late_discovered_thing.js\" as=\"script\">\n```\n\nas 属性的作用是告诉浏览器被加载的是什么资源，可能的 as 值包括：\n\n-   \"script\"\n-   \"style\"\n-   \"image\"\n-   \"media\"\n-   \"document\"\n\n忽略 as 属性，或者错误的 as 属性会使 preload 等同于 XHR 请求，浏览器不知道加载的是什么，因此会赋予此类资源非常低的加载优先级。\n\npreload 通常用于本页面要用到的关键资源，包括关键 js、字体、css 文件。preload 将会把资源得下载顺序权重提高，使得关键数据提前下载好，优化页面打开速度。\n\n# 什么时候使用 preload 和 prefetch\n\n```\n对于当前页面很有必要的资源使用 `preload`，对于可能在将来的页面中使用的资源使用 `prefetch`。\n```\n\n-   `preload`  是对浏览器指示预先请求当前页需要的资源（关键的脚本，字体，主要图片）。\n\n-   `prefetch`  应用场景稍微又些不同 —— 用户将来可能在其他部分（比如视图或页面）使用到的资源。如果  `A`  页面发起一个  `B`  页面的  `prefetch`  请求，这个资源获取过程和导航请求可能是同步进行的，而如果我们用  `preload`  的话，页面  `A`  离开时它会立即停止。\n\n使用  `preload`和  `prefetch`，我们有了对当前页面和将来页面加载关键资源的解决办法。\n\n# preload 和  prefetch  的缓存行为\n\nchrome 有四种缓存：HTTP 缓存，内存缓存，Service Worker 缓存和 Push 缓存，preload 和 prefetch 都被缓存在 HTTP 缓存中。\n\n当一个资源被  `preload`  或者  `prefetch`  获取后，它可以从 HTTP 缓存移动至渲染器的内存缓存中。如果资源可以被缓存（比如说存在有效的[`cache-control`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control)  和  `max-age`），它被存储在 HTTP 缓存中可以被现在或将来的任务使用，如果资源不能被缓存在 HTTP 缓存中，作为代替，它被放在内存缓存中直到被使用。\n\n# webpack 搭配 prefetch 优化单页面应用 code-splitting\n\n单页面应用由于页面过多，可能会导致代码体积过大，从而使得首页打开速度过慢。所以切分代码，优化首屏打开速度尤为重要。\n\n但是所有的技术手段都不是完美的。当我们切割代码后，首屏的 js 文件体积减少了好多。但是也有一个突出的问题：\n那就是当跳转其他页面的时候，需要下载相应页面的 js 文件，这就导致体验极其不好，每一次点击访问新页面都要等待 js 文件下载，然后再去请求接口获取数据。频繁出现 loading 动画的体验真的不好.\n\n所以如果我们在进入首页后，在浏览器的空闲时间提前下好用户可能会点击页面的 js 文件，这样首屏的 js 文件大小得到了控制，而且再点击新页面的时候，相关的 js 文件已经下载好了，就不再会出现 loading 动画。\n\n动态引入 js 文件，实现 code-splitting，减少首屏打开时间\n\n```javascript\n**// 代码分割后的react组件\nconst Brand = asyncComponent(() => import(\n/*webpackChunkName: 'mp-supports'*/\n'./views/Brand' )) // 路由引入\n<Route path=\"/\" component={App}>\n<Route path=\"/brand\" component={Brand} /> </Route>\n```\n\n首页组件的生命周期：\n\n```javascript\n// 在接口取的数据后，进行prefetch\ncomponentDidUpdate({ topics }) {\n  if( topics.length === 0 && this.props.topics.length > 0 ) {\n   // 实行prefetch，注意只有webpack 4版本才支持prefetch功能。\n    import(\n        /* webpackPrefetch: true */\n        /*webpackChunkName: 'topic'*/\n        \"../topic\"\n      )\n  }\n}\n```\n\n关键点：\n1、 `_webpackChunkName: 'chunk-name'_`\n2、 componentDidUpdate\n\n## 这里有两个关键点：\n\n1. webpack 的动态 import()需要指定包命，如果不在注释中说明包名，那么用了几次 import() , webpack 就会给同一个文件打包多少次。使得我们 prefetch 的文件和路由中要用到的文件并不是同一个文件。\n2. prefetch 会在浏览器空闲时，下载相应文件。这是一个很笼统的定义，在我的使用中，我发现在接口没有返回数据，以及图片等还没有请求成功时，prefetch 就会请求数据了。这一点是很不好的，最起码 prefetch 不能影响首页接口的获取速度。所以我把 prefetch 的执行事件放在了 componentDidUpdate 生命周期内。保障了 prefetch 的执行，不会影响到关键的首页数据获取。\n\n当然 prefetch 在服务端渲染的页面并不会有影响接口的问题，是一个比较好的技术选择\n\n# 参考文献\n\n1. [Prefetch 和预加载实践](https://www.itcodemonkey.com/article/9707.html)\n1. [关于 Preload, 你应该知道些什么](https://www.jianshu.com/p/24ffa6d45087)\n1. [Preload，Prefetch 和它们在 Chrome 之中的优先级)](https://www.w3cplus.com/performance/reloading/preload-prefetch-and-priorities-in-chrome.html)\n","source":"_posts/webpack优化之preload和prefetch.md","raw":"---\ntitle: webpack优化之preload和prefetch\ndate: 2019-08-16 17:26:11\ncategories: HTML5\n---\n\n链接预取是一种浏览器机制，其利用浏览器空闲时间来下载或预取用户在不久的将来可能访问的文档。网页向浏览器提供一组预取提示，并在浏览器完成当前页面的加载后开始静默地拉取指定的文档并将其存储在缓存中。当用户访问其中一个预取文档时，便可以快速的从浏览器缓存中得到。\n\n<!--more-->\n\n# prefetch\n\nprefetch 的设计初衷是为了让当前页面的关键资源尽早被发现和加载，从而提升首屏渲染性能。\n\n当我们使用 webpack 构建页面时，就会在页面中发现有很多使用`link`引入的 JS 资源。\n\n![network](https://img.hacpai.com/file/2019/08/15659449621-5fea8870.jpg)\n\n这段代码告诉浏览器，这段资源将会在未来某个导航或者功能要用到，但是本资源的下载顺序权重比较低。也就是说 prefetch 通常用于加速下一次导航，而不是本次的。\n\n被标记为 prefetch 的资源，将会被浏览器在空闲时间加载。prefetch 指示的是**下一次**导航可能需要的资源。浏览器识别到 Prefetch 时，应该加载该资源（且不执行），等到真正请求相同资源时，就能够得到更快的响应。\n\n![network]](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Link_prefetching_FAQ)\n\n# preload\n\n```\n<link rel=\"preload\" href=\"late_discovered_thing.js\" as=\"script\">\n```\n\nas 属性的作用是告诉浏览器被加载的是什么资源，可能的 as 值包括：\n\n-   \"script\"\n-   \"style\"\n-   \"image\"\n-   \"media\"\n-   \"document\"\n\n忽略 as 属性，或者错误的 as 属性会使 preload 等同于 XHR 请求，浏览器不知道加载的是什么，因此会赋予此类资源非常低的加载优先级。\n\npreload 通常用于本页面要用到的关键资源，包括关键 js、字体、css 文件。preload 将会把资源得下载顺序权重提高，使得关键数据提前下载好，优化页面打开速度。\n\n# 什么时候使用 preload 和 prefetch\n\n```\n对于当前页面很有必要的资源使用 `preload`，对于可能在将来的页面中使用的资源使用 `prefetch`。\n```\n\n-   `preload`  是对浏览器指示预先请求当前页需要的资源（关键的脚本，字体，主要图片）。\n\n-   `prefetch`  应用场景稍微又些不同 —— 用户将来可能在其他部分（比如视图或页面）使用到的资源。如果  `A`  页面发起一个  `B`  页面的  `prefetch`  请求，这个资源获取过程和导航请求可能是同步进行的，而如果我们用  `preload`  的话，页面  `A`  离开时它会立即停止。\n\n使用  `preload`和  `prefetch`，我们有了对当前页面和将来页面加载关键资源的解决办法。\n\n# preload 和  prefetch  的缓存行为\n\nchrome 有四种缓存：HTTP 缓存，内存缓存，Service Worker 缓存和 Push 缓存，preload 和 prefetch 都被缓存在 HTTP 缓存中。\n\n当一个资源被  `preload`  或者  `prefetch`  获取后，它可以从 HTTP 缓存移动至渲染器的内存缓存中。如果资源可以被缓存（比如说存在有效的[`cache-control`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control)  和  `max-age`），它被存储在 HTTP 缓存中可以被现在或将来的任务使用，如果资源不能被缓存在 HTTP 缓存中，作为代替，它被放在内存缓存中直到被使用。\n\n# webpack 搭配 prefetch 优化单页面应用 code-splitting\n\n单页面应用由于页面过多，可能会导致代码体积过大，从而使得首页打开速度过慢。所以切分代码，优化首屏打开速度尤为重要。\n\n但是所有的技术手段都不是完美的。当我们切割代码后，首屏的 js 文件体积减少了好多。但是也有一个突出的问题：\n那就是当跳转其他页面的时候，需要下载相应页面的 js 文件，这就导致体验极其不好，每一次点击访问新页面都要等待 js 文件下载，然后再去请求接口获取数据。频繁出现 loading 动画的体验真的不好.\n\n所以如果我们在进入首页后，在浏览器的空闲时间提前下好用户可能会点击页面的 js 文件，这样首屏的 js 文件大小得到了控制，而且再点击新页面的时候，相关的 js 文件已经下载好了，就不再会出现 loading 动画。\n\n动态引入 js 文件，实现 code-splitting，减少首屏打开时间\n\n```javascript\n**// 代码分割后的react组件\nconst Brand = asyncComponent(() => import(\n/*webpackChunkName: 'mp-supports'*/\n'./views/Brand' )) // 路由引入\n<Route path=\"/\" component={App}>\n<Route path=\"/brand\" component={Brand} /> </Route>\n```\n\n首页组件的生命周期：\n\n```javascript\n// 在接口取的数据后，进行prefetch\ncomponentDidUpdate({ topics }) {\n  if( topics.length === 0 && this.props.topics.length > 0 ) {\n   // 实行prefetch，注意只有webpack 4版本才支持prefetch功能。\n    import(\n        /* webpackPrefetch: true */\n        /*webpackChunkName: 'topic'*/\n        \"../topic\"\n      )\n  }\n}\n```\n\n关键点：\n1、 `_webpackChunkName: 'chunk-name'_`\n2、 componentDidUpdate\n\n## 这里有两个关键点：\n\n1. webpack 的动态 import()需要指定包命，如果不在注释中说明包名，那么用了几次 import() , webpack 就会给同一个文件打包多少次。使得我们 prefetch 的文件和路由中要用到的文件并不是同一个文件。\n2. prefetch 会在浏览器空闲时，下载相应文件。这是一个很笼统的定义，在我的使用中，我发现在接口没有返回数据，以及图片等还没有请求成功时，prefetch 就会请求数据了。这一点是很不好的，最起码 prefetch 不能影响首页接口的获取速度。所以我把 prefetch 的执行事件放在了 componentDidUpdate 生命周期内。保障了 prefetch 的执行，不会影响到关键的首页数据获取。\n\n当然 prefetch 在服务端渲染的页面并不会有影响接口的问题，是一个比较好的技术选择\n\n# 参考文献\n\n1. [Prefetch 和预加载实践](https://www.itcodemonkey.com/article/9707.html)\n1. [关于 Preload, 你应该知道些什么](https://www.jianshu.com/p/24ffa6d45087)\n1. [Preload，Prefetch 和它们在 Chrome 之中的优先级)](https://www.w3cplus.com/performance/reloading/preload-prefetch-and-priorities-in-chrome.html)\n","slug":"webpack优化之preload和prefetch","published":1,"updated":"2021-03-04T02:24:48.139Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmejaesb001lxcvr1s6z6dtb","content":"<p>链接预取是一种浏览器机制，其利用浏览器空闲时间来下载或预取用户在不久的将来可能访问的文档。网页向浏览器提供一组预取提示，并在浏览器完成当前页面的加载后开始静默地拉取指定的文档并将其存储在缓存中。当用户访问其中一个预取文档时，便可以快速的从浏览器缓存中得到。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"prefetch\"><a href=\"#prefetch\" class=\"headerlink\" title=\"prefetch\"></a>prefetch</h1><p>prefetch 的设计初衷是为了让当前页面的关键资源尽早被发现和加载，从而提升首屏渲染性能。</p>\n<p>当我们使用 webpack 构建页面时，就会在页面中发现有很多使用<code>link</code>引入的 JS 资源。</p>\n<p><img src=\"https://img.hacpai.com/file/2019/08/15659449621-5fea8870.jpg\" alt=\"network\"></p>\n<p>这段代码告诉浏览器，这段资源将会在未来某个导航或者功能要用到，但是本资源的下载顺序权重比较低。也就是说 prefetch 通常用于加速下一次导航，而不是本次的。</p>\n<p>被标记为 prefetch 的资源，将会被浏览器在空闲时间加载。prefetch 指示的是<strong>下一次</strong>导航可能需要的资源。浏览器识别到 Prefetch 时，应该加载该资源（且不执行），等到真正请求相同资源时，就能够得到更快的响应。</p>\n<p>![network]](<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Link_prefetching_FAQ\">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Link_prefetching_FAQ</a>)</p>\n<h1 id=\"preload\"><a href=\"#preload\" class=\"headerlink\" title=\"preload\"></a>preload</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link rel&#x3D;&quot;preload&quot; href&#x3D;&quot;late_discovered_thing.js&quot; as&#x3D;&quot;script&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>as 属性的作用是告诉浏览器被加载的是什么资源，可能的 as 值包括：</p>\n<ul>\n<li>  “script”</li>\n<li>  “style”</li>\n<li>  “image”</li>\n<li>  “media”</li>\n<li>  “document”</li>\n</ul>\n<p>忽略 as 属性，或者错误的 as 属性会使 preload 等同于 XHR 请求，浏览器不知道加载的是什么，因此会赋予此类资源非常低的加载优先级。</p>\n<p>preload 通常用于本页面要用到的关键资源，包括关键 js、字体、css 文件。preload 将会把资源得下载顺序权重提高，使得关键数据提前下载好，优化页面打开速度。</p>\n<h1 id=\"什么时候使用-preload-和-prefetch\"><a href=\"#什么时候使用-preload-和-prefetch\" class=\"headerlink\" title=\"什么时候使用 preload 和 prefetch\"></a>什么时候使用 preload 和 prefetch</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对于当前页面很有必要的资源使用 &#96;preload&#96;，对于可能在将来的页面中使用的资源使用 &#96;prefetch&#96;。</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>  <code>preload</code>  是对浏览器指示预先请求当前页需要的资源（关键的脚本，字体，主要图片）。</p>\n</li>\n<li><p>  <code>prefetch</code>  应用场景稍微又些不同 —— 用户将来可能在其他部分（比如视图或页面）使用到的资源。如果  <code>A</code>  页面发起一个  <code>B</code>  页面的  <code>prefetch</code>  请求，这个资源获取过程和导航请求可能是同步进行的，而如果我们用  <code>preload</code>  的话，页面  <code>A</code>  离开时它会立即停止。</p>\n</li>\n</ul>\n<p>使用  <code>preload</code>和  <code>prefetch</code>，我们有了对当前页面和将来页面加载关键资源的解决办法。</p>\n<h1 id=\"preload-和-prefetch-的缓存行为\"><a href=\"#preload-和-prefetch-的缓存行为\" class=\"headerlink\" title=\"preload 和  prefetch  的缓存行为\"></a>preload 和  prefetch  的缓存行为</h1><p>chrome 有四种缓存：HTTP 缓存，内存缓存，Service Worker 缓存和 Push 缓存，preload 和 prefetch 都被缓存在 HTTP 缓存中。</p>\n<p>当一个资源被  <code>preload</code>  或者  <code>prefetch</code>  获取后，它可以从 HTTP 缓存移动至渲染器的内存缓存中。如果资源可以被缓存（比如说存在有效的<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\"><code>cache-control</code></a>  和  <code>max-age</code>），它被存储在 HTTP 缓存中可以被现在或将来的任务使用，如果资源不能被缓存在 HTTP 缓存中，作为代替，它被放在内存缓存中直到被使用。</p>\n<h1 id=\"webpack-搭配-prefetch-优化单页面应用-code-splitting\"><a href=\"#webpack-搭配-prefetch-优化单页面应用-code-splitting\" class=\"headerlink\" title=\"webpack 搭配 prefetch 优化单页面应用 code-splitting\"></a>webpack 搭配 prefetch 优化单页面应用 code-splitting</h1><p>单页面应用由于页面过多，可能会导致代码体积过大，从而使得首页打开速度过慢。所以切分代码，优化首屏打开速度尤为重要。</p>\n<p>但是所有的技术手段都不是完美的。当我们切割代码后，首屏的 js 文件体积减少了好多。但是也有一个突出的问题：<br>那就是当跳转其他页面的时候，需要下载相应页面的 js 文件，这就导致体验极其不好，每一次点击访问新页面都要等待 js 文件下载，然后再去请求接口获取数据。频繁出现 loading 动画的体验真的不好.</p>\n<p>所以如果我们在进入首页后，在浏览器的空闲时间提前下好用户可能会点击页面的 js 文件，这样首屏的 js 文件大小得到了控制，而且再点击新页面的时候，相关的 js 文件已经下载好了，就不再会出现 loading 动画。</p>\n<p>动态引入 js 文件，实现 code-splitting，减少首屏打开时间</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**<span class=\"comment\">// 代码分割后的react组件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Brand = asyncComponent(<span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(</span><br><span class=\"line\"><span class=\"comment\">/*webpackChunkName: &#x27;mp-supports&#x27;*/</span></span><br><span class=\"line\"><span class=\"string\">&#x27;./views/Brand&#x27;</span> )) <span class=\"comment\">// 路由引入</span></span><br><span class=\"line\">&lt;Route path=<span class=\"string\">&quot;/&quot;</span> component=&#123;App&#125;&gt;</span><br><span class=\"line\">&lt;Route path=<span class=\"string\">&quot;/brand&quot;</span> component=&#123;Brand&#125; /&gt; &lt;/Route&gt;</span><br></pre></td></tr></table></figure>\n\n<p>首页组件的生命周期：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在接口取的数据后，进行prefetch</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">componentDidUpdate</span>(<span class=\"params\">&#123; topics &#125;</span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>( topics.length === <span class=\"number\">0</span> &amp;&amp; <span class=\"built_in\">this</span>.props.topics.length &gt; <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 实行prefetch，注意只有webpack 4版本才支持prefetch功能。</span></span><br><span class=\"line\">    <span class=\"keyword\">import</span>(</span><br><span class=\"line\">        <span class=\"comment\">/* webpackPrefetch: true */</span></span><br><span class=\"line\">        <span class=\"comment\">/*webpackChunkName: &#x27;topic&#x27;*/</span></span><br><span class=\"line\">        <span class=\"string\">&quot;../topic&quot;</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>关键点：<br>1、 <code>_webpackChunkName: &#39;chunk-name&#39;_</code><br>2、 componentDidUpdate</p>\n<h2 id=\"这里有两个关键点：\"><a href=\"#这里有两个关键点：\" class=\"headerlink\" title=\"这里有两个关键点：\"></a>这里有两个关键点：</h2><ol>\n<li>webpack 的动态 import()需要指定包命，如果不在注释中说明包名，那么用了几次 import() , webpack 就会给同一个文件打包多少次。使得我们 prefetch 的文件和路由中要用到的文件并不是同一个文件。</li>\n<li>prefetch 会在浏览器空闲时，下载相应文件。这是一个很笼统的定义，在我的使用中，我发现在接口没有返回数据，以及图片等还没有请求成功时，prefetch 就会请求数据了。这一点是很不好的，最起码 prefetch 不能影响首页接口的获取速度。所以我把 prefetch 的执行事件放在了 componentDidUpdate 生命周期内。保障了 prefetch 的执行，不会影响到关键的首页数据获取。</li>\n</ol>\n<p>当然 prefetch 在服务端渲染的页面并不会有影响接口的问题，是一个比较好的技术选择</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><ol>\n<li><a href=\"https://www.itcodemonkey.com/article/9707.html\">Prefetch 和预加载实践</a></li>\n<li><a href=\"https://www.jianshu.com/p/24ffa6d45087\">关于 Preload, 你应该知道些什么</a></li>\n<li><a href=\"https://www.w3cplus.com/performance/reloading/preload-prefetch-and-priorities-in-chrome.html\">Preload，Prefetch 和它们在 Chrome 之中的优先级)</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>链接预取是一种浏览器机制，其利用浏览器空闲时间来下载或预取用户在不久的将来可能访问的文档。网页向浏览器提供一组预取提示，并在浏览器完成当前页面的加载后开始静默地拉取指定的文档并将其存储在缓存中。当用户访问其中一个预取文档时，便可以快速的从浏览器缓存中得到。</p>","more":"<h1 id=\"prefetch\"><a href=\"#prefetch\" class=\"headerlink\" title=\"prefetch\"></a>prefetch</h1><p>prefetch 的设计初衷是为了让当前页面的关键资源尽早被发现和加载，从而提升首屏渲染性能。</p>\n<p>当我们使用 webpack 构建页面时，就会在页面中发现有很多使用<code>link</code>引入的 JS 资源。</p>\n<p><img src=\"https://img.hacpai.com/file/2019/08/15659449621-5fea8870.jpg\" alt=\"network\"></p>\n<p>这段代码告诉浏览器，这段资源将会在未来某个导航或者功能要用到，但是本资源的下载顺序权重比较低。也就是说 prefetch 通常用于加速下一次导航，而不是本次的。</p>\n<p>被标记为 prefetch 的资源，将会被浏览器在空闲时间加载。prefetch 指示的是<strong>下一次</strong>导航可能需要的资源。浏览器识别到 Prefetch 时，应该加载该资源（且不执行），等到真正请求相同资源时，就能够得到更快的响应。</p>\n<p>![network]](<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Link_prefetching_FAQ\">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Link_prefetching_FAQ</a>)</p>\n<h1 id=\"preload\"><a href=\"#preload\" class=\"headerlink\" title=\"preload\"></a>preload</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link rel&#x3D;&quot;preload&quot; href&#x3D;&quot;late_discovered_thing.js&quot; as&#x3D;&quot;script&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>as 属性的作用是告诉浏览器被加载的是什么资源，可能的 as 值包括：</p>\n<ul>\n<li>  “script”</li>\n<li>  “style”</li>\n<li>  “image”</li>\n<li>  “media”</li>\n<li>  “document”</li>\n</ul>\n<p>忽略 as 属性，或者错误的 as 属性会使 preload 等同于 XHR 请求，浏览器不知道加载的是什么，因此会赋予此类资源非常低的加载优先级。</p>\n<p>preload 通常用于本页面要用到的关键资源，包括关键 js、字体、css 文件。preload 将会把资源得下载顺序权重提高，使得关键数据提前下载好，优化页面打开速度。</p>\n<h1 id=\"什么时候使用-preload-和-prefetch\"><a href=\"#什么时候使用-preload-和-prefetch\" class=\"headerlink\" title=\"什么时候使用 preload 和 prefetch\"></a>什么时候使用 preload 和 prefetch</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对于当前页面很有必要的资源使用 &#96;preload&#96;，对于可能在将来的页面中使用的资源使用 &#96;prefetch&#96;。</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>  <code>preload</code>  是对浏览器指示预先请求当前页需要的资源（关键的脚本，字体，主要图片）。</p>\n</li>\n<li><p>  <code>prefetch</code>  应用场景稍微又些不同 —— 用户将来可能在其他部分（比如视图或页面）使用到的资源。如果  <code>A</code>  页面发起一个  <code>B</code>  页面的  <code>prefetch</code>  请求，这个资源获取过程和导航请求可能是同步进行的，而如果我们用  <code>preload</code>  的话，页面  <code>A</code>  离开时它会立即停止。</p>\n</li>\n</ul>\n<p>使用  <code>preload</code>和  <code>prefetch</code>，我们有了对当前页面和将来页面加载关键资源的解决办法。</p>\n<h1 id=\"preload-和-prefetch-的缓存行为\"><a href=\"#preload-和-prefetch-的缓存行为\" class=\"headerlink\" title=\"preload 和  prefetch  的缓存行为\"></a>preload 和  prefetch  的缓存行为</h1><p>chrome 有四种缓存：HTTP 缓存，内存缓存，Service Worker 缓存和 Push 缓存，preload 和 prefetch 都被缓存在 HTTP 缓存中。</p>\n<p>当一个资源被  <code>preload</code>  或者  <code>prefetch</code>  获取后，它可以从 HTTP 缓存移动至渲染器的内存缓存中。如果资源可以被缓存（比如说存在有效的<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\"><code>cache-control</code></a>  和  <code>max-age</code>），它被存储在 HTTP 缓存中可以被现在或将来的任务使用，如果资源不能被缓存在 HTTP 缓存中，作为代替，它被放在内存缓存中直到被使用。</p>\n<h1 id=\"webpack-搭配-prefetch-优化单页面应用-code-splitting\"><a href=\"#webpack-搭配-prefetch-优化单页面应用-code-splitting\" class=\"headerlink\" title=\"webpack 搭配 prefetch 优化单页面应用 code-splitting\"></a>webpack 搭配 prefetch 优化单页面应用 code-splitting</h1><p>单页面应用由于页面过多，可能会导致代码体积过大，从而使得首页打开速度过慢。所以切分代码，优化首屏打开速度尤为重要。</p>\n<p>但是所有的技术手段都不是完美的。当我们切割代码后，首屏的 js 文件体积减少了好多。但是也有一个突出的问题：<br>那就是当跳转其他页面的时候，需要下载相应页面的 js 文件，这就导致体验极其不好，每一次点击访问新页面都要等待 js 文件下载，然后再去请求接口获取数据。频繁出现 loading 动画的体验真的不好.</p>\n<p>所以如果我们在进入首页后，在浏览器的空闲时间提前下好用户可能会点击页面的 js 文件，这样首屏的 js 文件大小得到了控制，而且再点击新页面的时候，相关的 js 文件已经下载好了，就不再会出现 loading 动画。</p>\n<p>动态引入 js 文件，实现 code-splitting，减少首屏打开时间</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**<span class=\"comment\">// 代码分割后的react组件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Brand = asyncComponent(<span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(</span><br><span class=\"line\"><span class=\"comment\">/*webpackChunkName: &#x27;mp-supports&#x27;*/</span></span><br><span class=\"line\"><span class=\"string\">&#x27;./views/Brand&#x27;</span> )) <span class=\"comment\">// 路由引入</span></span><br><span class=\"line\">&lt;Route path=<span class=\"string\">&quot;/&quot;</span> component=&#123;App&#125;&gt;</span><br><span class=\"line\">&lt;Route path=<span class=\"string\">&quot;/brand&quot;</span> component=&#123;Brand&#125; /&gt; &lt;/Route&gt;</span><br></pre></td></tr></table></figure>\n\n<p>首页组件的生命周期：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在接口取的数据后，进行prefetch</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">componentDidUpdate</span>(<span class=\"params\">&#123; topics &#125;</span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>( topics.length === <span class=\"number\">0</span> &amp;&amp; <span class=\"built_in\">this</span>.props.topics.length &gt; <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 实行prefetch，注意只有webpack 4版本才支持prefetch功能。</span></span><br><span class=\"line\">    <span class=\"keyword\">import</span>(</span><br><span class=\"line\">        <span class=\"comment\">/* webpackPrefetch: true */</span></span><br><span class=\"line\">        <span class=\"comment\">/*webpackChunkName: &#x27;topic&#x27;*/</span></span><br><span class=\"line\">        <span class=\"string\">&quot;../topic&quot;</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>关键点：<br>1、 <code>_webpackChunkName: &#39;chunk-name&#39;_</code><br>2、 componentDidUpdate</p>\n<h2 id=\"这里有两个关键点：\"><a href=\"#这里有两个关键点：\" class=\"headerlink\" title=\"这里有两个关键点：\"></a>这里有两个关键点：</h2><ol>\n<li>webpack 的动态 import()需要指定包命，如果不在注释中说明包名，那么用了几次 import() , webpack 就会给同一个文件打包多少次。使得我们 prefetch 的文件和路由中要用到的文件并不是同一个文件。</li>\n<li>prefetch 会在浏览器空闲时，下载相应文件。这是一个很笼统的定义，在我的使用中，我发现在接口没有返回数据，以及图片等还没有请求成功时，prefetch 就会请求数据了。这一点是很不好的，最起码 prefetch 不能影响首页接口的获取速度。所以我把 prefetch 的执行事件放在了 componentDidUpdate 生命周期内。保障了 prefetch 的执行，不会影响到关键的首页数据获取。</li>\n</ol>\n<p>当然 prefetch 在服务端渲染的页面并不会有影响接口的问题，是一个比较好的技术选择</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><ol>\n<li><a href=\"https://www.itcodemonkey.com/article/9707.html\">Prefetch 和预加载实践</a></li>\n<li><a href=\"https://www.jianshu.com/p/24ffa6d45087\">关于 Preload, 你应该知道些什么</a></li>\n<li><a href=\"https://www.w3cplus.com/performance/reloading/preload-prefetch-and-priorities-in-chrome.html\">Preload，Prefetch 和它们在 Chrome 之中的优先级)</a></li>\n</ol>"},{"title":"webpack项目配置","date":"2018-01-31T09:15:07.000Z","_content":"\nwebpack 做的就是分析代码，转换代码，编译代码，输出代码。webpack 本身是一个 node 的模块，所以 webpack.config.js 是一一 commonjs 形式书写的\n\n<!--more-->\n\nwebpack 是模块化管理工具，使用 webpack 可以对模块进行压缩，预处理，按需打包，按需加载等。\nBrowsersify、webpack 一开始的目的就是打包 commonJS 模块。\n\nwebpack 是一个现代 Javascript 应用程序的模块打包器，当 webpack 处理应用程序时，它会递归的构建一个依赖关系图，其中包含应用程序需要的每个模块，然后将这些模块打包成少量的 bundle- 通常只有一个，有浏览器加载。\n\n\n\n## webpack 的特征\n\n- 插件化：webpack 本身非常灵活，提供了丰富插件接口。基于这些接口，webpack 开发了很多插件作为内置功能。\n- 速度快：webpack 使用异步 IO 以及多级缓存机制。所以 webpack 的速度是很快的，尤其是增量更新。\n- 丰富的 loaders：loaders 用来做预处理。这样 webpack 就可以打包任何静态文件。\n- 高适配性：webpack 同时支持 AMD/CommonJS/ES6 模块方案。webpack 会静态解析你的代码，自动帮你管理他们的依赖关系。且对第 - 方库的兼容贼好。\n- 代码拆分：webpack 提供了很多优化机制来减少打包输出的文件大小，不仅如此它还提供了 hash 机制，来解决浏览器缓存。\n- 开发模式友好：webpack 为开发模式也是提供了很多辅助功能。比如 sourceMap、热更新等。\n- 适用于很多场景。\n\n## webpack 简单介绍\n\n它会递归地构建一个依赖关系图，其中包含程序需要的每一个模块，然后将所有模块打包成一个或多个 bundle.\n\n### 包含四个核心概念\n\n- 入口(entey):指示 webpack 应该使用哪个模块，来作为构建内部依赖图开始。进入入口起点后，webpack 会造出哪些模块和库是入口起点（直接或是间接）依赖的。\n- 出口(output):告诉 webpack 在哪里输出他所创建的 bundles，以及如何命名这些文件。默认值为./dist\n- loader:让 webpack 能够去处理那些非 javascript 文件(webpack 只能理解 javascript 和 json)\n- 插件(plugins):插件则可以用于执行范围更广的任务。插件范围包括，从打包优化和压缩，一直到重新定义环境中的变量。[插件接口](https://www.webpackjs.com/api/plugins/) 功能及其强大，可以用来处理各种各样的任务\n- Chunk：coding split 的产物，我们可以对一些代码打包成一个单独的 chunk，比如某些公共模块，去重，更好的利用缓存。或者按需加载某些功能模块，优化加载时间。在 webpack3 及以前我们都利用 CommonsChunkPlugin 将一些公共代码分割成一个 chunk，实现单独加载。在 webpack4 中 CommonsChunkPlugin 被废弃，使用 SplitChunksPlugin\n\n### 配置分离：webpack 配置文件说明\n\n位于根目录的 config 文件夹下：\n\n- webpack.base.conf.js:主要配置打包所需 entry 入口、module 的 rules、external 配置 jquery 等常用开发库、公用的 plugins（静态资源输出、消除冗余 css/js 代码、自动生成 HTML 模板等）\n- webpack.dev.conf.js:主要配置 mode 环境变量、DevServer 快速开发、HMR 模块热替换等等\n- webpack.prod.conf.js:主要配置 mode 环境变量、正式环境打包配置优化（html/js/css 压缩合并等）。\n- webpack.rules.conf.js:配置常规 loader\n\n## webpack 配置\n\n```javascript\nconst path = require('path');\nmodule.exports = {\n  entry: \"./app/entry\", // string | object | array\n  // Webpack打包的入口\n  output: {  // 定义webpack如何输出的选项\n    path: path.resolve(__dirname, \"dist\"), // string\n    // 所有输出文件的目标路径\n    filename: \"[chunkhash].js\", // string\n    // 「入口(entry chunk)」文件命名模版\n    publicPath: \"/assets/\", // string\n    // 构建文件的输出目录\n    /* 其它高级配置 */\n  },\n  module: {  // 模块相关配置\n    rules: [ // 配置模块loaders，解析规则\n      {\n        test: /\\.jsx?$/,  // RegExp | string\n        include: [ // 和test一样，必须匹配选项\n          path.resolve(__dirname, \"app\")\n        ],\n        exclude: [ // 必不匹配选项（优先级高于test和include）\n          path.resolve(__dirname, \"app/demo-files\")\n        ],\n        loader: \"babel-loader\", // 模块上下文解析\n        options: { // loader的可选项\n          presets: [\"es2015\"]\n        },\n      },\n  },\n  resolve: { //  解析模块的可选项\n    modules: [ // 模块的查找目录\n      \"node_modules\",\n      path.resolve(__dirname, \"app\")\n    ],\n    extensions: [\".js\", \".json\", \".jsx\", \".css\"], // 用到的文件的扩展\n    alias: { // 模块别名列表\n      \"module\": \"new-module\"\n\t  },\n  },\n  devtool: \"source-map\", // enum\n  // 为浏览器开发者工具添加元数据增强调试\n  plugins: [ // 附加插件列表\n    // ...\n  ],\n}\n\n```\n\n## publicPath\n\nwebpack 提供一个非常有用的配置，该配置能帮助你为项目中的所有资源指定一个基础路径，它被称为公共路径(publicPath)。\n其实这里说的所有资源的基础路径是指项目中引用 css，js，img 等资源时候的一个基础路径，这个基础路径要配合具体资源中指定的路径使用，所以其实打包后资源的访问路径可以用如下公式表示\n\n### output.publicPath\n\n`静态资源最终访问路径 = output.publicPath + 资源loader或插件等配置路径`\n\n忽然想起微前端中要配置 publicPath ,就是用到了这个原理吧，在没有生成该静态文件夹的情况去去访问路径，一般本地时，访问路径=文件夹绝对地址路径，但在特殊情况下，例如 nginx 转发情况下，访问路径 ≠ 绝对文件路径。\n\n### module.rules 中的 publicPath\n\n对于 url-loader 中的 outputPath，单独配置或者写在 name 里面，对于真实的目录结构来说，效果是一样的。但是在生成这个 cdn 路径上来说，效果是有区别的。最终的访问路径都是：publicPath+name。跟 outputPath 没有关系，所以，请注意路径配置。\n\n## mainFields\n\n有一些第三方模块会针对不同环境提供几分代码。 例如分别提供采用 ES5 和 ES6 的 2 份代码，这 2 份代码的位置写在 package.json 文件里，Webpack 会根据 mainFields 的配置去决定优先采用那份代码，mainFields 默认如下：\n\n```javascript\nmainFields: ['browser', 'main']\n```\n\nWebpack 会按照数组里的顺序去 package.json 文件里寻找，只会使用找到的第一个。\n\n假如你想优先采用 ES6 的那份代码，可以这样配置：\n\n```\nmainFields: ['jsnext:main', 'browser', 'main']\n```\n\n思考：这个可以用来配 vue 的 cdn 路径吗？dev 开发时 min.js 是无法调试的\n\n## babel 与 polyfill 的关系和区别\n\n### babel\n\n是一个广发使用的 ES6 的转码器，可以将 ES6 代码转为 ES5 代码。注意：babel 默认只转换新的 javascript 语法，而不转换新的 api\n@babel-preset-env 就整合了这些语法转义插件\n```javascript\nUsing plugins:\ntransform-template-literals {}\ntransform-literals {}\ntransform-function-name {}\ntransform-arrow-functions {}\ntransform-block-scoped-functions {}\ntransform-classes {}\ntransform-object-super {}\n```\n\n### polyfill\n\nBabel 默认只转换新的 JavaScript 句法（syntax），而不转换新的 API ，比如 Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise 等全局对象，以及一些定义在全局对象上的方法（比如 Object.assign）都不会转码。用于实现浏览器并不支持的原生 API 的代码\n这样就导致了一些新的 API 老版浏览器不兼容。如上述所说，对于新的 API，你可能需要引入 @babel-polyfill 来进行兼容\n\n```javascript\nmodule.exports = {\n  entry: ['@babel-polyfill', './src/index.js']\n}\n```\nyarn build 时发现文件体积大了很多，因为上面的代码表示将@babel-polyfill的代码也打包进去，如何进行按需编译呢？在JS中import @babel-polyfill\n\n修改.babelrc\n```javascript\n{\n  \"presets\": [[\"@babel/preset-env\", { \"useBuiltIns\": \"usage\" }]]\n}\n```\n\n## 使用自动刷新\n\nDecServer 刷新原理：\n往要开发的网页中注入代理客户端代码，通过代理客户端去刷新整个页面。使用webSocket链接，双工通信\n\nwebapck要完全启用HMR需要使用webpack.HotModuleReplacementPlugin。如果webpack或webpack-dev-server 通过命令添加--hot选项启动，这个插件会自动添加，所以不需要添加HotModuleReplacementPlugin到webpack.config.js中。\n\n但是，经实际使用 webpack-dev-server 时发现，在webpack.config.js中仅仅配置了devServer.hot:true，而未添加这个插件的状态下，仍然实现了HMR。\n\n项目启动之后，会进行首次构建打包，控制台中会输出征哥的构建过程，可以观察到一个hash值，每一次代码修改后，保存时都会在控制台上看到hash值更新。\n\n### webpack watch\n\n在项目启动之后，Webpack 会通过 Compiler 类的 Run 方法开启编译构建过程，编译完成后，调用 Watch 方法监听文件变更，当文件发生变化，重新编译，编译完成之后继续监听。\n\n可以看出所谓模块热替换指的是页面在尽量不经过刷新的情况下将页面所引用的js或css等模块进行热替换。这里之所以说是尽量不经过刷新页面是因为webpack在热替换检查失败的情况会刷新整个页面。\n\n**问题：**\nwebpack-dev-server好像是只监听webpack.config.js中entry入口下文件（如js、css等等）的变动，只有这些文件的变动才会触发实时编译打包与页面刷新，而对于不在entry入口下的html文件，却不进行监听与页面自动刷新。\n\n**解决方法：**\n\n 添加参数 watchContentBase: true，目录contentBase目录下的html文件变化也可监听并刷新\n\n```javascript\n  devServer: {\n    port: 9000,\n    hot: true,\n    contentBase: path.join(__dirname, '/example'), //本地服务器所加载文件的目录\n    watchContentBase: true,\n  }\n```\n\n### devServer.watchContentBase\n\n告诉 dev-server 监听 [devServer.contentBase]（＃devservercontentbase）选项提供的文件。 默认情况下禁用。 启用后，文件更改将触发整个页面重新加载。\n\n## 站外资料链接\n[深入浅出webpack](http://webpack.wuhaolin.cn/)","source":"_posts/webpack项目配置.md","raw":"---\ntitle: webpack项目配置\ndate: 2018-01-31 17:15:07\ncategories: webpack\n---\n\nwebpack 做的就是分析代码，转换代码，编译代码，输出代码。webpack 本身是一个 node 的模块，所以 webpack.config.js 是一一 commonjs 形式书写的\n\n<!--more-->\n\nwebpack 是模块化管理工具，使用 webpack 可以对模块进行压缩，预处理，按需打包，按需加载等。\nBrowsersify、webpack 一开始的目的就是打包 commonJS 模块。\n\nwebpack 是一个现代 Javascript 应用程序的模块打包器，当 webpack 处理应用程序时，它会递归的构建一个依赖关系图，其中包含应用程序需要的每个模块，然后将这些模块打包成少量的 bundle- 通常只有一个，有浏览器加载。\n\n\n\n## webpack 的特征\n\n- 插件化：webpack 本身非常灵活，提供了丰富插件接口。基于这些接口，webpack 开发了很多插件作为内置功能。\n- 速度快：webpack 使用异步 IO 以及多级缓存机制。所以 webpack 的速度是很快的，尤其是增量更新。\n- 丰富的 loaders：loaders 用来做预处理。这样 webpack 就可以打包任何静态文件。\n- 高适配性：webpack 同时支持 AMD/CommonJS/ES6 模块方案。webpack 会静态解析你的代码，自动帮你管理他们的依赖关系。且对第 - 方库的兼容贼好。\n- 代码拆分：webpack 提供了很多优化机制来减少打包输出的文件大小，不仅如此它还提供了 hash 机制，来解决浏览器缓存。\n- 开发模式友好：webpack 为开发模式也是提供了很多辅助功能。比如 sourceMap、热更新等。\n- 适用于很多场景。\n\n## webpack 简单介绍\n\n它会递归地构建一个依赖关系图，其中包含程序需要的每一个模块，然后将所有模块打包成一个或多个 bundle.\n\n### 包含四个核心概念\n\n- 入口(entey):指示 webpack 应该使用哪个模块，来作为构建内部依赖图开始。进入入口起点后，webpack 会造出哪些模块和库是入口起点（直接或是间接）依赖的。\n- 出口(output):告诉 webpack 在哪里输出他所创建的 bundles，以及如何命名这些文件。默认值为./dist\n- loader:让 webpack 能够去处理那些非 javascript 文件(webpack 只能理解 javascript 和 json)\n- 插件(plugins):插件则可以用于执行范围更广的任务。插件范围包括，从打包优化和压缩，一直到重新定义环境中的变量。[插件接口](https://www.webpackjs.com/api/plugins/) 功能及其强大，可以用来处理各种各样的任务\n- Chunk：coding split 的产物，我们可以对一些代码打包成一个单独的 chunk，比如某些公共模块，去重，更好的利用缓存。或者按需加载某些功能模块，优化加载时间。在 webpack3 及以前我们都利用 CommonsChunkPlugin 将一些公共代码分割成一个 chunk，实现单独加载。在 webpack4 中 CommonsChunkPlugin 被废弃，使用 SplitChunksPlugin\n\n### 配置分离：webpack 配置文件说明\n\n位于根目录的 config 文件夹下：\n\n- webpack.base.conf.js:主要配置打包所需 entry 入口、module 的 rules、external 配置 jquery 等常用开发库、公用的 plugins（静态资源输出、消除冗余 css/js 代码、自动生成 HTML 模板等）\n- webpack.dev.conf.js:主要配置 mode 环境变量、DevServer 快速开发、HMR 模块热替换等等\n- webpack.prod.conf.js:主要配置 mode 环境变量、正式环境打包配置优化（html/js/css 压缩合并等）。\n- webpack.rules.conf.js:配置常规 loader\n\n## webpack 配置\n\n```javascript\nconst path = require('path');\nmodule.exports = {\n  entry: \"./app/entry\", // string | object | array\n  // Webpack打包的入口\n  output: {  // 定义webpack如何输出的选项\n    path: path.resolve(__dirname, \"dist\"), // string\n    // 所有输出文件的目标路径\n    filename: \"[chunkhash].js\", // string\n    // 「入口(entry chunk)」文件命名模版\n    publicPath: \"/assets/\", // string\n    // 构建文件的输出目录\n    /* 其它高级配置 */\n  },\n  module: {  // 模块相关配置\n    rules: [ // 配置模块loaders，解析规则\n      {\n        test: /\\.jsx?$/,  // RegExp | string\n        include: [ // 和test一样，必须匹配选项\n          path.resolve(__dirname, \"app\")\n        ],\n        exclude: [ // 必不匹配选项（优先级高于test和include）\n          path.resolve(__dirname, \"app/demo-files\")\n        ],\n        loader: \"babel-loader\", // 模块上下文解析\n        options: { // loader的可选项\n          presets: [\"es2015\"]\n        },\n      },\n  },\n  resolve: { //  解析模块的可选项\n    modules: [ // 模块的查找目录\n      \"node_modules\",\n      path.resolve(__dirname, \"app\")\n    ],\n    extensions: [\".js\", \".json\", \".jsx\", \".css\"], // 用到的文件的扩展\n    alias: { // 模块别名列表\n      \"module\": \"new-module\"\n\t  },\n  },\n  devtool: \"source-map\", // enum\n  // 为浏览器开发者工具添加元数据增强调试\n  plugins: [ // 附加插件列表\n    // ...\n  ],\n}\n\n```\n\n## publicPath\n\nwebpack 提供一个非常有用的配置，该配置能帮助你为项目中的所有资源指定一个基础路径，它被称为公共路径(publicPath)。\n其实这里说的所有资源的基础路径是指项目中引用 css，js，img 等资源时候的一个基础路径，这个基础路径要配合具体资源中指定的路径使用，所以其实打包后资源的访问路径可以用如下公式表示\n\n### output.publicPath\n\n`静态资源最终访问路径 = output.publicPath + 资源loader或插件等配置路径`\n\n忽然想起微前端中要配置 publicPath ,就是用到了这个原理吧，在没有生成该静态文件夹的情况去去访问路径，一般本地时，访问路径=文件夹绝对地址路径，但在特殊情况下，例如 nginx 转发情况下，访问路径 ≠ 绝对文件路径。\n\n### module.rules 中的 publicPath\n\n对于 url-loader 中的 outputPath，单独配置或者写在 name 里面，对于真实的目录结构来说，效果是一样的。但是在生成这个 cdn 路径上来说，效果是有区别的。最终的访问路径都是：publicPath+name。跟 outputPath 没有关系，所以，请注意路径配置。\n\n## mainFields\n\n有一些第三方模块会针对不同环境提供几分代码。 例如分别提供采用 ES5 和 ES6 的 2 份代码，这 2 份代码的位置写在 package.json 文件里，Webpack 会根据 mainFields 的配置去决定优先采用那份代码，mainFields 默认如下：\n\n```javascript\nmainFields: ['browser', 'main']\n```\n\nWebpack 会按照数组里的顺序去 package.json 文件里寻找，只会使用找到的第一个。\n\n假如你想优先采用 ES6 的那份代码，可以这样配置：\n\n```\nmainFields: ['jsnext:main', 'browser', 'main']\n```\n\n思考：这个可以用来配 vue 的 cdn 路径吗？dev 开发时 min.js 是无法调试的\n\n## babel 与 polyfill 的关系和区别\n\n### babel\n\n是一个广发使用的 ES6 的转码器，可以将 ES6 代码转为 ES5 代码。注意：babel 默认只转换新的 javascript 语法，而不转换新的 api\n@babel-preset-env 就整合了这些语法转义插件\n```javascript\nUsing plugins:\ntransform-template-literals {}\ntransform-literals {}\ntransform-function-name {}\ntransform-arrow-functions {}\ntransform-block-scoped-functions {}\ntransform-classes {}\ntransform-object-super {}\n```\n\n### polyfill\n\nBabel 默认只转换新的 JavaScript 句法（syntax），而不转换新的 API ，比如 Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise 等全局对象，以及一些定义在全局对象上的方法（比如 Object.assign）都不会转码。用于实现浏览器并不支持的原生 API 的代码\n这样就导致了一些新的 API 老版浏览器不兼容。如上述所说，对于新的 API，你可能需要引入 @babel-polyfill 来进行兼容\n\n```javascript\nmodule.exports = {\n  entry: ['@babel-polyfill', './src/index.js']\n}\n```\nyarn build 时发现文件体积大了很多，因为上面的代码表示将@babel-polyfill的代码也打包进去，如何进行按需编译呢？在JS中import @babel-polyfill\n\n修改.babelrc\n```javascript\n{\n  \"presets\": [[\"@babel/preset-env\", { \"useBuiltIns\": \"usage\" }]]\n}\n```\n\n## 使用自动刷新\n\nDecServer 刷新原理：\n往要开发的网页中注入代理客户端代码，通过代理客户端去刷新整个页面。使用webSocket链接，双工通信\n\nwebapck要完全启用HMR需要使用webpack.HotModuleReplacementPlugin。如果webpack或webpack-dev-server 通过命令添加--hot选项启动，这个插件会自动添加，所以不需要添加HotModuleReplacementPlugin到webpack.config.js中。\n\n但是，经实际使用 webpack-dev-server 时发现，在webpack.config.js中仅仅配置了devServer.hot:true，而未添加这个插件的状态下，仍然实现了HMR。\n\n项目启动之后，会进行首次构建打包，控制台中会输出征哥的构建过程，可以观察到一个hash值，每一次代码修改后，保存时都会在控制台上看到hash值更新。\n\n### webpack watch\n\n在项目启动之后，Webpack 会通过 Compiler 类的 Run 方法开启编译构建过程，编译完成后，调用 Watch 方法监听文件变更，当文件发生变化，重新编译，编译完成之后继续监听。\n\n可以看出所谓模块热替换指的是页面在尽量不经过刷新的情况下将页面所引用的js或css等模块进行热替换。这里之所以说是尽量不经过刷新页面是因为webpack在热替换检查失败的情况会刷新整个页面。\n\n**问题：**\nwebpack-dev-server好像是只监听webpack.config.js中entry入口下文件（如js、css等等）的变动，只有这些文件的变动才会触发实时编译打包与页面刷新，而对于不在entry入口下的html文件，却不进行监听与页面自动刷新。\n\n**解决方法：**\n\n 添加参数 watchContentBase: true，目录contentBase目录下的html文件变化也可监听并刷新\n\n```javascript\n  devServer: {\n    port: 9000,\n    hot: true,\n    contentBase: path.join(__dirname, '/example'), //本地服务器所加载文件的目录\n    watchContentBase: true,\n  }\n```\n\n### devServer.watchContentBase\n\n告诉 dev-server 监听 [devServer.contentBase]（＃devservercontentbase）选项提供的文件。 默认情况下禁用。 启用后，文件更改将触发整个页面重新加载。\n\n## 站外资料链接\n[深入浅出webpack](http://webpack.wuhaolin.cn/)","slug":"webpack项目配置","published":1,"updated":"2021-03-25T10:00:56.599Z","_id":"ckmejaesd001oxcvrdyql4hfb","comments":1,"layout":"post","photos":[],"link":"","content":"<p>webpack 做的就是分析代码，转换代码，编译代码，输出代码。webpack 本身是一个 node 的模块，所以 webpack.config.js 是一一 commonjs 形式书写的</p>\n<span id=\"more\"></span>\n\n<p>webpack 是模块化管理工具，使用 webpack 可以对模块进行压缩，预处理，按需打包，按需加载等。<br>Browsersify、webpack 一开始的目的就是打包 commonJS 模块。</p>\n<p>webpack 是一个现代 Javascript 应用程序的模块打包器，当 webpack 处理应用程序时，它会递归的构建一个依赖关系图，其中包含应用程序需要的每个模块，然后将这些模块打包成少量的 bundle- 通常只有一个，有浏览器加载。</p>\n<h2 id=\"webpack-的特征\"><a href=\"#webpack-的特征\" class=\"headerlink\" title=\"webpack 的特征\"></a>webpack 的特征</h2><ul>\n<li>插件化：webpack 本身非常灵活，提供了丰富插件接口。基于这些接口，webpack 开发了很多插件作为内置功能。</li>\n<li>速度快：webpack 使用异步 IO 以及多级缓存机制。所以 webpack 的速度是很快的，尤其是增量更新。</li>\n<li>丰富的 loaders：loaders 用来做预处理。这样 webpack 就可以打包任何静态文件。</li>\n<li>高适配性：webpack 同时支持 AMD/CommonJS/ES6 模块方案。webpack 会静态解析你的代码，自动帮你管理他们的依赖关系。且对第 - 方库的兼容贼好。</li>\n<li>代码拆分：webpack 提供了很多优化机制来减少打包输出的文件大小，不仅如此它还提供了 hash 机制，来解决浏览器缓存。</li>\n<li>开发模式友好：webpack 为开发模式也是提供了很多辅助功能。比如 sourceMap、热更新等。</li>\n<li>适用于很多场景。</li>\n</ul>\n<h2 id=\"webpack-简单介绍\"><a href=\"#webpack-简单介绍\" class=\"headerlink\" title=\"webpack 简单介绍\"></a>webpack 简单介绍</h2><p>它会递归地构建一个依赖关系图，其中包含程序需要的每一个模块，然后将所有模块打包成一个或多个 bundle.</p>\n<h3 id=\"包含四个核心概念\"><a href=\"#包含四个核心概念\" class=\"headerlink\" title=\"包含四个核心概念\"></a>包含四个核心概念</h3><ul>\n<li>入口(entey):指示 webpack 应该使用哪个模块，来作为构建内部依赖图开始。进入入口起点后，webpack 会造出哪些模块和库是入口起点（直接或是间接）依赖的。</li>\n<li>出口(output):告诉 webpack 在哪里输出他所创建的 bundles，以及如何命名这些文件。默认值为./dist</li>\n<li>loader:让 webpack 能够去处理那些非 javascript 文件(webpack 只能理解 javascript 和 json)</li>\n<li>插件(plugins):插件则可以用于执行范围更广的任务。插件范围包括，从打包优化和压缩，一直到重新定义环境中的变量。<a href=\"https://www.webpackjs.com/api/plugins/\">插件接口</a> 功能及其强大，可以用来处理各种各样的任务</li>\n<li>Chunk：coding split 的产物，我们可以对一些代码打包成一个单独的 chunk，比如某些公共模块，去重，更好的利用缓存。或者按需加载某些功能模块，优化加载时间。在 webpack3 及以前我们都利用 CommonsChunkPlugin 将一些公共代码分割成一个 chunk，实现单独加载。在 webpack4 中 CommonsChunkPlugin 被废弃，使用 SplitChunksPlugin</li>\n</ul>\n<h3 id=\"配置分离：webpack-配置文件说明\"><a href=\"#配置分离：webpack-配置文件说明\" class=\"headerlink\" title=\"配置分离：webpack 配置文件说明\"></a>配置分离：webpack 配置文件说明</h3><p>位于根目录的 config 文件夹下：</p>\n<ul>\n<li>webpack.base.conf.js:主要配置打包所需 entry 入口、module 的 rules、external 配置 jquery 等常用开发库、公用的 plugins（静态资源输出、消除冗余 css/js 代码、自动生成 HTML 模板等）</li>\n<li>webpack.dev.conf.js:主要配置 mode 环境变量、DevServer 快速开发、HMR 模块热替换等等</li>\n<li>webpack.prod.conf.js:主要配置 mode 环境变量、正式环境打包配置优化（html/js/css 压缩合并等）。</li>\n<li>webpack.rules.conf.js:配置常规 loader</li>\n</ul>\n<h2 id=\"webpack-配置\"><a href=\"#webpack-配置\" class=\"headerlink\" title=\"webpack 配置\"></a>webpack 配置</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">&quot;./app/entry&quot;</span>, <span class=\"comment\">// string | object | array</span></span><br><span class=\"line\">  <span class=\"comment\">// Webpack打包的入口</span></span><br><span class=\"line\">  output: &#123;  <span class=\"comment\">// 定义webpack如何输出的选项</span></span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">&quot;dist&quot;</span>), <span class=\"comment\">// string</span></span><br><span class=\"line\">    <span class=\"comment\">// 所有输出文件的目标路径</span></span><br><span class=\"line\">    filename: <span class=\"string\">&quot;[chunkhash].js&quot;</span>, <span class=\"comment\">// string</span></span><br><span class=\"line\">    <span class=\"comment\">// 「入口(entry chunk)」文件命名模版</span></span><br><span class=\"line\">    publicPath: <span class=\"string\">&quot;/assets/&quot;</span>, <span class=\"comment\">// string</span></span><br><span class=\"line\">    <span class=\"comment\">// 构建文件的输出目录</span></span><br><span class=\"line\">    <span class=\"comment\">/* 其它高级配置 */</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;  <span class=\"comment\">// 模块相关配置</span></span><br><span class=\"line\">    rules: [ <span class=\"comment\">// 配置模块loaders，解析规则</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.jsx?$/</span>,  <span class=\"comment\">// RegExp | string</span></span><br><span class=\"line\">        include: [ <span class=\"comment\">// 和test一样，必须匹配选项</span></span><br><span class=\"line\">          path.resolve(__dirname, <span class=\"string\">&quot;app&quot;</span>)</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        exclude: [ <span class=\"comment\">// 必不匹配选项（优先级高于test和include）</span></span><br><span class=\"line\">          path.resolve(__dirname, <span class=\"string\">&quot;app/demo-files&quot;</span>)</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        loader: <span class=\"string\">&quot;babel-loader&quot;</span>, <span class=\"comment\">// 模块上下文解析</span></span><br><span class=\"line\">        options: &#123; <span class=\"comment\">// loader的可选项</span></span><br><span class=\"line\">          presets: [<span class=\"string\">&quot;es2015&quot;</span>]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  resolve: &#123; <span class=\"comment\">//  解析模块的可选项</span></span><br><span class=\"line\">    modules: [ <span class=\"comment\">// 模块的查找目录</span></span><br><span class=\"line\">      <span class=\"string\">&quot;node_modules&quot;</span>,</span><br><span class=\"line\">      path.resolve(__dirname, <span class=\"string\">&quot;app&quot;</span>)</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    extensions: [<span class=\"string\">&quot;.js&quot;</span>, <span class=\"string\">&quot;.json&quot;</span>, <span class=\"string\">&quot;.jsx&quot;</span>, <span class=\"string\">&quot;.css&quot;</span>], <span class=\"comment\">// 用到的文件的扩展</span></span><br><span class=\"line\">    alias: &#123; <span class=\"comment\">// 模块别名列表</span></span><br><span class=\"line\">      <span class=\"string\">&quot;module&quot;</span>: <span class=\"string\">&quot;new-module&quot;</span></span><br><span class=\"line\">\t  &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  devtool: <span class=\"string\">&quot;source-map&quot;</span>, <span class=\"comment\">// enum</span></span><br><span class=\"line\">  <span class=\"comment\">// 为浏览器开发者工具添加元数据增强调试</span></span><br><span class=\"line\">  plugins: [ <span class=\"comment\">// 附加插件列表</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"publicPath\"><a href=\"#publicPath\" class=\"headerlink\" title=\"publicPath\"></a>publicPath</h2><p>webpack 提供一个非常有用的配置，该配置能帮助你为项目中的所有资源指定一个基础路径，它被称为公共路径(publicPath)。<br>其实这里说的所有资源的基础路径是指项目中引用 css，js，img 等资源时候的一个基础路径，这个基础路径要配合具体资源中指定的路径使用，所以其实打包后资源的访问路径可以用如下公式表示</p>\n<h3 id=\"output-publicPath\"><a href=\"#output-publicPath\" class=\"headerlink\" title=\"output.publicPath\"></a>output.publicPath</h3><p><code>静态资源最终访问路径 = output.publicPath + 资源loader或插件等配置路径</code></p>\n<p>忽然想起微前端中要配置 publicPath ,就是用到了这个原理吧，在没有生成该静态文件夹的情况去去访问路径，一般本地时，访问路径=文件夹绝对地址路径，但在特殊情况下，例如 nginx 转发情况下，访问路径 ≠ 绝对文件路径。</p>\n<h3 id=\"module-rules-中的-publicPath\"><a href=\"#module-rules-中的-publicPath\" class=\"headerlink\" title=\"module.rules 中的 publicPath\"></a>module.rules 中的 publicPath</h3><p>对于 url-loader 中的 outputPath，单独配置或者写在 name 里面，对于真实的目录结构来说，效果是一样的。但是在生成这个 cdn 路径上来说，效果是有区别的。最终的访问路径都是：publicPath+name。跟 outputPath 没有关系，所以，请注意路径配置。</p>\n<h2 id=\"mainFields\"><a href=\"#mainFields\" class=\"headerlink\" title=\"mainFields\"></a>mainFields</h2><p>有一些第三方模块会针对不同环境提供几分代码。 例如分别提供采用 ES5 和 ES6 的 2 份代码，这 2 份代码的位置写在 package.json 文件里，Webpack 会根据 mainFields 的配置去决定优先采用那份代码，mainFields 默认如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mainFields: [<span class=\"string\">&#x27;browser&#x27;</span>, <span class=\"string\">&#x27;main&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>Webpack 会按照数组里的顺序去 package.json 文件里寻找，只会使用找到的第一个。</p>\n<p>假如你想优先采用 ES6 的那份代码，可以这样配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mainFields: [&#39;jsnext:main&#39;, &#39;browser&#39;, &#39;main&#39;]</span><br></pre></td></tr></table></figure>\n\n<p>思考：这个可以用来配 vue 的 cdn 路径吗？dev 开发时 min.js 是无法调试的</p>\n<h2 id=\"babel-与-polyfill-的关系和区别\"><a href=\"#babel-与-polyfill-的关系和区别\" class=\"headerlink\" title=\"babel 与 polyfill 的关系和区别\"></a>babel 与 polyfill 的关系和区别</h2><h3 id=\"babel\"><a href=\"#babel\" class=\"headerlink\" title=\"babel\"></a>babel</h3><p>是一个广发使用的 ES6 的转码器，可以将 ES6 代码转为 ES5 代码。注意：babel 默认只转换新的 javascript 语法，而不转换新的 api<br>@babel-preset-env 就整合了这些语法转义插件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Using plugins:</span><br><span class=\"line\">transform-template-literals &#123;&#125;</span><br><span class=\"line\">transform-literals &#123;&#125;</span><br><span class=\"line\">transform-<span class=\"function\"><span class=\"keyword\">function</span>-<span class=\"title\">name</span> </span>&#123;&#125;</span><br><span class=\"line\">transform-arrow-functions &#123;&#125;</span><br><span class=\"line\">transform-block-scoped-functions &#123;&#125;</span><br><span class=\"line\">transform-classes &#123;&#125;</span><br><span class=\"line\">transform-object-<span class=\"built_in\">super</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"polyfill\"><a href=\"#polyfill\" class=\"headerlink\" title=\"polyfill\"></a>polyfill</h3><p>Babel 默认只转换新的 JavaScript 句法（syntax），而不转换新的 API ，比如 Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise 等全局对象，以及一些定义在全局对象上的方法（比如 Object.assign）都不会转码。用于实现浏览器并不支持的原生 API 的代码<br>这样就导致了一些新的 API 老版浏览器不兼容。如上述所说，对于新的 API，你可能需要引入 @babel-polyfill 来进行兼容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: [<span class=\"string\">&#x27;@babel-polyfill&#x27;</span>, <span class=\"string\">&#x27;./src/index.js&#x27;</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>yarn build 时发现文件体积大了很多，因为上面的代码表示将@babel-polyfill的代码也打包进去，如何进行按需编译呢？在JS中import @babel-polyfill</p>\n<p>修改.babelrc</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;presets&quot;</span>: [[<span class=\"string\">&quot;@babel/preset-env&quot;</span>, &#123; <span class=\"string\">&quot;useBuiltIns&quot;</span>: <span class=\"string\">&quot;usage&quot;</span> &#125;]]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用自动刷新\"><a href=\"#使用自动刷新\" class=\"headerlink\" title=\"使用自动刷新\"></a>使用自动刷新</h2><p>DecServer 刷新原理：<br>往要开发的网页中注入代理客户端代码，通过代理客户端去刷新整个页面。使用webSocket链接，双工通信</p>\n<p>webapck要完全启用HMR需要使用webpack.HotModuleReplacementPlugin。如果webpack或webpack-dev-server 通过命令添加–hot选项启动，这个插件会自动添加，所以不需要添加HotModuleReplacementPlugin到webpack.config.js中。</p>\n<p>但是，经实际使用 webpack-dev-server 时发现，在webpack.config.js中仅仅配置了devServer.hot:true，而未添加这个插件的状态下，仍然实现了HMR。</p>\n<p>项目启动之后，会进行首次构建打包，控制台中会输出征哥的构建过程，可以观察到一个hash值，每一次代码修改后，保存时都会在控制台上看到hash值更新。</p>\n<h3 id=\"webpack-watch\"><a href=\"#webpack-watch\" class=\"headerlink\" title=\"webpack watch\"></a>webpack watch</h3><p>在项目启动之后，Webpack 会通过 Compiler 类的 Run 方法开启编译构建过程，编译完成后，调用 Watch 方法监听文件变更，当文件发生变化，重新编译，编译完成之后继续监听。</p>\n<p>可以看出所谓模块热替换指的是页面在尽量不经过刷新的情况下将页面所引用的js或css等模块进行热替换。这里之所以说是尽量不经过刷新页面是因为webpack在热替换检查失败的情况会刷新整个页面。</p>\n<p><strong>问题：</strong><br>webpack-dev-server好像是只监听webpack.config.js中entry入口下文件（如js、css等等）的变动，只有这些文件的变动才会触发实时编译打包与页面刷新，而对于不在entry入口下的html文件，却不进行监听与页面自动刷新。</p>\n<p><strong>解决方法：</strong></p>\n<p> 添加参数 watchContentBase: true，目录contentBase目录下的html文件变化也可监听并刷新</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">  port: <span class=\"number\">9000</span>,</span><br><span class=\"line\">  hot: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  contentBase: path.join(__dirname, <span class=\"string\">&#x27;/example&#x27;</span>), <span class=\"comment\">//本地服务器所加载文件的目录</span></span><br><span class=\"line\">  watchContentBase: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"devServer-watchContentBase\"><a href=\"#devServer-watchContentBase\" class=\"headerlink\" title=\"devServer.watchContentBase\"></a>devServer.watchContentBase</h3><p>告诉 dev-server 监听 [devServer.contentBase]（＃devservercontentbase）选项提供的文件。 默认情况下禁用。 启用后，文件更改将触发整个页面重新加载。</p>\n<h2 id=\"站外资料链接\"><a href=\"#站外资料链接\" class=\"headerlink\" title=\"站外资料链接\"></a>站外资料链接</h2><p><a href=\"http://webpack.wuhaolin.cn/\">深入浅出webpack</a></p>\n","site":{"data":{}},"excerpt":"<p>webpack 做的就是分析代码，转换代码，编译代码，输出代码。webpack 本身是一个 node 的模块，所以 webpack.config.js 是一一 commonjs 形式书写的</p>","more":"<p>webpack 是模块化管理工具，使用 webpack 可以对模块进行压缩，预处理，按需打包，按需加载等。<br>Browsersify、webpack 一开始的目的就是打包 commonJS 模块。</p>\n<p>webpack 是一个现代 Javascript 应用程序的模块打包器，当 webpack 处理应用程序时，它会递归的构建一个依赖关系图，其中包含应用程序需要的每个模块，然后将这些模块打包成少量的 bundle- 通常只有一个，有浏览器加载。</p>\n<h2 id=\"webpack-的特征\"><a href=\"#webpack-的特征\" class=\"headerlink\" title=\"webpack 的特征\"></a>webpack 的特征</h2><ul>\n<li>插件化：webpack 本身非常灵活，提供了丰富插件接口。基于这些接口，webpack 开发了很多插件作为内置功能。</li>\n<li>速度快：webpack 使用异步 IO 以及多级缓存机制。所以 webpack 的速度是很快的，尤其是增量更新。</li>\n<li>丰富的 loaders：loaders 用来做预处理。这样 webpack 就可以打包任何静态文件。</li>\n<li>高适配性：webpack 同时支持 AMD/CommonJS/ES6 模块方案。webpack 会静态解析你的代码，自动帮你管理他们的依赖关系。且对第 - 方库的兼容贼好。</li>\n<li>代码拆分：webpack 提供了很多优化机制来减少打包输出的文件大小，不仅如此它还提供了 hash 机制，来解决浏览器缓存。</li>\n<li>开发模式友好：webpack 为开发模式也是提供了很多辅助功能。比如 sourceMap、热更新等。</li>\n<li>适用于很多场景。</li>\n</ul>\n<h2 id=\"webpack-简单介绍\"><a href=\"#webpack-简单介绍\" class=\"headerlink\" title=\"webpack 简单介绍\"></a>webpack 简单介绍</h2><p>它会递归地构建一个依赖关系图，其中包含程序需要的每一个模块，然后将所有模块打包成一个或多个 bundle.</p>\n<h3 id=\"包含四个核心概念\"><a href=\"#包含四个核心概念\" class=\"headerlink\" title=\"包含四个核心概念\"></a>包含四个核心概念</h3><ul>\n<li>入口(entey):指示 webpack 应该使用哪个模块，来作为构建内部依赖图开始。进入入口起点后，webpack 会造出哪些模块和库是入口起点（直接或是间接）依赖的。</li>\n<li>出口(output):告诉 webpack 在哪里输出他所创建的 bundles，以及如何命名这些文件。默认值为./dist</li>\n<li>loader:让 webpack 能够去处理那些非 javascript 文件(webpack 只能理解 javascript 和 json)</li>\n<li>插件(plugins):插件则可以用于执行范围更广的任务。插件范围包括，从打包优化和压缩，一直到重新定义环境中的变量。<a href=\"https://www.webpackjs.com/api/plugins/\">插件接口</a> 功能及其强大，可以用来处理各种各样的任务</li>\n<li>Chunk：coding split 的产物，我们可以对一些代码打包成一个单独的 chunk，比如某些公共模块，去重，更好的利用缓存。或者按需加载某些功能模块，优化加载时间。在 webpack3 及以前我们都利用 CommonsChunkPlugin 将一些公共代码分割成一个 chunk，实现单独加载。在 webpack4 中 CommonsChunkPlugin 被废弃，使用 SplitChunksPlugin</li>\n</ul>\n<h3 id=\"配置分离：webpack-配置文件说明\"><a href=\"#配置分离：webpack-配置文件说明\" class=\"headerlink\" title=\"配置分离：webpack 配置文件说明\"></a>配置分离：webpack 配置文件说明</h3><p>位于根目录的 config 文件夹下：</p>\n<ul>\n<li>webpack.base.conf.js:主要配置打包所需 entry 入口、module 的 rules、external 配置 jquery 等常用开发库、公用的 plugins（静态资源输出、消除冗余 css/js 代码、自动生成 HTML 模板等）</li>\n<li>webpack.dev.conf.js:主要配置 mode 环境变量、DevServer 快速开发、HMR 模块热替换等等</li>\n<li>webpack.prod.conf.js:主要配置 mode 环境变量、正式环境打包配置优化（html/js/css 压缩合并等）。</li>\n<li>webpack.rules.conf.js:配置常规 loader</li>\n</ul>\n<h2 id=\"webpack-配置\"><a href=\"#webpack-配置\" class=\"headerlink\" title=\"webpack 配置\"></a>webpack 配置</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">&quot;./app/entry&quot;</span>, <span class=\"comment\">// string | object | array</span></span><br><span class=\"line\">  <span class=\"comment\">// Webpack打包的入口</span></span><br><span class=\"line\">  output: &#123;  <span class=\"comment\">// 定义webpack如何输出的选项</span></span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">&quot;dist&quot;</span>), <span class=\"comment\">// string</span></span><br><span class=\"line\">    <span class=\"comment\">// 所有输出文件的目标路径</span></span><br><span class=\"line\">    filename: <span class=\"string\">&quot;[chunkhash].js&quot;</span>, <span class=\"comment\">// string</span></span><br><span class=\"line\">    <span class=\"comment\">// 「入口(entry chunk)」文件命名模版</span></span><br><span class=\"line\">    publicPath: <span class=\"string\">&quot;/assets/&quot;</span>, <span class=\"comment\">// string</span></span><br><span class=\"line\">    <span class=\"comment\">// 构建文件的输出目录</span></span><br><span class=\"line\">    <span class=\"comment\">/* 其它高级配置 */</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;  <span class=\"comment\">// 模块相关配置</span></span><br><span class=\"line\">    rules: [ <span class=\"comment\">// 配置模块loaders，解析规则</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.jsx?$/</span>,  <span class=\"comment\">// RegExp | string</span></span><br><span class=\"line\">        include: [ <span class=\"comment\">// 和test一样，必须匹配选项</span></span><br><span class=\"line\">          path.resolve(__dirname, <span class=\"string\">&quot;app&quot;</span>)</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        exclude: [ <span class=\"comment\">// 必不匹配选项（优先级高于test和include）</span></span><br><span class=\"line\">          path.resolve(__dirname, <span class=\"string\">&quot;app/demo-files&quot;</span>)</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        loader: <span class=\"string\">&quot;babel-loader&quot;</span>, <span class=\"comment\">// 模块上下文解析</span></span><br><span class=\"line\">        options: &#123; <span class=\"comment\">// loader的可选项</span></span><br><span class=\"line\">          presets: [<span class=\"string\">&quot;es2015&quot;</span>]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  resolve: &#123; <span class=\"comment\">//  解析模块的可选项</span></span><br><span class=\"line\">    modules: [ <span class=\"comment\">// 模块的查找目录</span></span><br><span class=\"line\">      <span class=\"string\">&quot;node_modules&quot;</span>,</span><br><span class=\"line\">      path.resolve(__dirname, <span class=\"string\">&quot;app&quot;</span>)</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    extensions: [<span class=\"string\">&quot;.js&quot;</span>, <span class=\"string\">&quot;.json&quot;</span>, <span class=\"string\">&quot;.jsx&quot;</span>, <span class=\"string\">&quot;.css&quot;</span>], <span class=\"comment\">// 用到的文件的扩展</span></span><br><span class=\"line\">    alias: &#123; <span class=\"comment\">// 模块别名列表</span></span><br><span class=\"line\">      <span class=\"string\">&quot;module&quot;</span>: <span class=\"string\">&quot;new-module&quot;</span></span><br><span class=\"line\">\t  &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  devtool: <span class=\"string\">&quot;source-map&quot;</span>, <span class=\"comment\">// enum</span></span><br><span class=\"line\">  <span class=\"comment\">// 为浏览器开发者工具添加元数据增强调试</span></span><br><span class=\"line\">  plugins: [ <span class=\"comment\">// 附加插件列表</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"publicPath\"><a href=\"#publicPath\" class=\"headerlink\" title=\"publicPath\"></a>publicPath</h2><p>webpack 提供一个非常有用的配置，该配置能帮助你为项目中的所有资源指定一个基础路径，它被称为公共路径(publicPath)。<br>其实这里说的所有资源的基础路径是指项目中引用 css，js，img 等资源时候的一个基础路径，这个基础路径要配合具体资源中指定的路径使用，所以其实打包后资源的访问路径可以用如下公式表示</p>\n<h3 id=\"output-publicPath\"><a href=\"#output-publicPath\" class=\"headerlink\" title=\"output.publicPath\"></a>output.publicPath</h3><p><code>静态资源最终访问路径 = output.publicPath + 资源loader或插件等配置路径</code></p>\n<p>忽然想起微前端中要配置 publicPath ,就是用到了这个原理吧，在没有生成该静态文件夹的情况去去访问路径，一般本地时，访问路径=文件夹绝对地址路径，但在特殊情况下，例如 nginx 转发情况下，访问路径 ≠ 绝对文件路径。</p>\n<h3 id=\"module-rules-中的-publicPath\"><a href=\"#module-rules-中的-publicPath\" class=\"headerlink\" title=\"module.rules 中的 publicPath\"></a>module.rules 中的 publicPath</h3><p>对于 url-loader 中的 outputPath，单独配置或者写在 name 里面，对于真实的目录结构来说，效果是一样的。但是在生成这个 cdn 路径上来说，效果是有区别的。最终的访问路径都是：publicPath+name。跟 outputPath 没有关系，所以，请注意路径配置。</p>\n<h2 id=\"mainFields\"><a href=\"#mainFields\" class=\"headerlink\" title=\"mainFields\"></a>mainFields</h2><p>有一些第三方模块会针对不同环境提供几分代码。 例如分别提供采用 ES5 和 ES6 的 2 份代码，这 2 份代码的位置写在 package.json 文件里，Webpack 会根据 mainFields 的配置去决定优先采用那份代码，mainFields 默认如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mainFields: [<span class=\"string\">&#x27;browser&#x27;</span>, <span class=\"string\">&#x27;main&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>Webpack 会按照数组里的顺序去 package.json 文件里寻找，只会使用找到的第一个。</p>\n<p>假如你想优先采用 ES6 的那份代码，可以这样配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mainFields: [&#39;jsnext:main&#39;, &#39;browser&#39;, &#39;main&#39;]</span><br></pre></td></tr></table></figure>\n\n<p>思考：这个可以用来配 vue 的 cdn 路径吗？dev 开发时 min.js 是无法调试的</p>\n<h2 id=\"babel-与-polyfill-的关系和区别\"><a href=\"#babel-与-polyfill-的关系和区别\" class=\"headerlink\" title=\"babel 与 polyfill 的关系和区别\"></a>babel 与 polyfill 的关系和区别</h2><h3 id=\"babel\"><a href=\"#babel\" class=\"headerlink\" title=\"babel\"></a>babel</h3><p>是一个广发使用的 ES6 的转码器，可以将 ES6 代码转为 ES5 代码。注意：babel 默认只转换新的 javascript 语法，而不转换新的 api<br>@babel-preset-env 就整合了这些语法转义插件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Using plugins:</span><br><span class=\"line\">transform-template-literals &#123;&#125;</span><br><span class=\"line\">transform-literals &#123;&#125;</span><br><span class=\"line\">transform-<span class=\"function\"><span class=\"keyword\">function</span>-<span class=\"title\">name</span> </span>&#123;&#125;</span><br><span class=\"line\">transform-arrow-functions &#123;&#125;</span><br><span class=\"line\">transform-block-scoped-functions &#123;&#125;</span><br><span class=\"line\">transform-classes &#123;&#125;</span><br><span class=\"line\">transform-object-<span class=\"built_in\">super</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"polyfill\"><a href=\"#polyfill\" class=\"headerlink\" title=\"polyfill\"></a>polyfill</h3><p>Babel 默认只转换新的 JavaScript 句法（syntax），而不转换新的 API ，比如 Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise 等全局对象，以及一些定义在全局对象上的方法（比如 Object.assign）都不会转码。用于实现浏览器并不支持的原生 API 的代码<br>这样就导致了一些新的 API 老版浏览器不兼容。如上述所说，对于新的 API，你可能需要引入 @babel-polyfill 来进行兼容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: [<span class=\"string\">&#x27;@babel-polyfill&#x27;</span>, <span class=\"string\">&#x27;./src/index.js&#x27;</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>yarn build 时发现文件体积大了很多，因为上面的代码表示将@babel-polyfill的代码也打包进去，如何进行按需编译呢？在JS中import @babel-polyfill</p>\n<p>修改.babelrc</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;presets&quot;</span>: [[<span class=\"string\">&quot;@babel/preset-env&quot;</span>, &#123; <span class=\"string\">&quot;useBuiltIns&quot;</span>: <span class=\"string\">&quot;usage&quot;</span> &#125;]]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用自动刷新\"><a href=\"#使用自动刷新\" class=\"headerlink\" title=\"使用自动刷新\"></a>使用自动刷新</h2><p>DecServer 刷新原理：<br>往要开发的网页中注入代理客户端代码，通过代理客户端去刷新整个页面。使用webSocket链接，双工通信</p>\n<p>webapck要完全启用HMR需要使用webpack.HotModuleReplacementPlugin。如果webpack或webpack-dev-server 通过命令添加–hot选项启动，这个插件会自动添加，所以不需要添加HotModuleReplacementPlugin到webpack.config.js中。</p>\n<p>但是，经实际使用 webpack-dev-server 时发现，在webpack.config.js中仅仅配置了devServer.hot:true，而未添加这个插件的状态下，仍然实现了HMR。</p>\n<p>项目启动之后，会进行首次构建打包，控制台中会输出征哥的构建过程，可以观察到一个hash值，每一次代码修改后，保存时都会在控制台上看到hash值更新。</p>\n<h3 id=\"webpack-watch\"><a href=\"#webpack-watch\" class=\"headerlink\" title=\"webpack watch\"></a>webpack watch</h3><p>在项目启动之后，Webpack 会通过 Compiler 类的 Run 方法开启编译构建过程，编译完成后，调用 Watch 方法监听文件变更，当文件发生变化，重新编译，编译完成之后继续监听。</p>\n<p>可以看出所谓模块热替换指的是页面在尽量不经过刷新的情况下将页面所引用的js或css等模块进行热替换。这里之所以说是尽量不经过刷新页面是因为webpack在热替换检查失败的情况会刷新整个页面。</p>\n<p><strong>问题：</strong><br>webpack-dev-server好像是只监听webpack.config.js中entry入口下文件（如js、css等等）的变动，只有这些文件的变动才会触发实时编译打包与页面刷新，而对于不在entry入口下的html文件，却不进行监听与页面自动刷新。</p>\n<p><strong>解决方法：</strong></p>\n<p> 添加参数 watchContentBase: true，目录contentBase目录下的html文件变化也可监听并刷新</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">  port: <span class=\"number\">9000</span>,</span><br><span class=\"line\">  hot: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  contentBase: path.join(__dirname, <span class=\"string\">&#x27;/example&#x27;</span>), <span class=\"comment\">//本地服务器所加载文件的目录</span></span><br><span class=\"line\">  watchContentBase: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"devServer-watchContentBase\"><a href=\"#devServer-watchContentBase\" class=\"headerlink\" title=\"devServer.watchContentBase\"></a>devServer.watchContentBase</h3><p>告诉 dev-server 监听 [devServer.contentBase]（＃devservercontentbase）选项提供的文件。 默认情况下禁用。 启用后，文件更改将触发整个页面重新加载。</p>\n<h2 id=\"站外资料链接\"><a href=\"#站外资料链接\" class=\"headerlink\" title=\"站外资料链接\"></a>站外资料链接</h2><p><a href=\"http://webpack.wuhaolin.cn/\">深入浅出webpack</a></p>"},{"title":"优化-seo优化","date":"2018-03-08T09:05:51.000Z","_content":"\nseo 优化整合\n\n<!--more-->\n\n* 合理的 title、description、keywords：搜索对着三项的权重逐个减小，title 值强调重点即可，重要关键词出现不要超过 2 次，而且要靠前，不同页面 title 要有所不同；description 把页面内容高度概括，长度合适，不可过分堆砌关键词，不同页面 description 有所不同；keywords 列举出重要关键词即可\n* 语义化的 HTML 代码，符合 W3C 规范：语义化代码让搜索引擎容易理解网页\n* 重要内容 HTML 代码放在最前：搜索引擎抓取 HTML 顺序是从上到下，有的搜索引擎对抓取长度有限制，保证重要内容一定会被抓取重要内容不要用 js 输出：爬虫不会执行 js 获取内容\n* 少用 iframe：搜索引擎不会抓取 iframe 中的内容\n* 非装饰性图片必须加 alt\n* 提高网站速度：网站速度是搜索引擎排序的一个重要指标\n\n## WEB 开发中会话跟踪的方法有哪些\nHTTP 是一种无状态协议，当用户发出请求时，服务器就会做出响应，客户端与服务端的联系是离散的，非连续的，当用户在同一个网站的多个页面之间转换时，根本无法确定是否是同一个用户，会话跟踪就可以解决这个问题。当一个用户在多个页面间切换时，服务就会保存该用户的信息。\n1. cookie\n2. session\n3. url 重写\n4. 隐藏input\n5. ip地址\n\n","source":"_posts/优化.md","raw":"---\ntitle: 优化-seo优化\ndate: 2018-03-08 17:05:51\ncategories: WEB\n---\n\nseo 优化整合\n\n<!--more-->\n\n* 合理的 title、description、keywords：搜索对着三项的权重逐个减小，title 值强调重点即可，重要关键词出现不要超过 2 次，而且要靠前，不同页面 title 要有所不同；description 把页面内容高度概括，长度合适，不可过分堆砌关键词，不同页面 description 有所不同；keywords 列举出重要关键词即可\n* 语义化的 HTML 代码，符合 W3C 规范：语义化代码让搜索引擎容易理解网页\n* 重要内容 HTML 代码放在最前：搜索引擎抓取 HTML 顺序是从上到下，有的搜索引擎对抓取长度有限制，保证重要内容一定会被抓取重要内容不要用 js 输出：爬虫不会执行 js 获取内容\n* 少用 iframe：搜索引擎不会抓取 iframe 中的内容\n* 非装饰性图片必须加 alt\n* 提高网站速度：网站速度是搜索引擎排序的一个重要指标\n\n## WEB 开发中会话跟踪的方法有哪些\nHTTP 是一种无状态协议，当用户发出请求时，服务器就会做出响应，客户端与服务端的联系是离散的，非连续的，当用户在同一个网站的多个页面之间转换时，根本无法确定是否是同一个用户，会话跟踪就可以解决这个问题。当一个用户在多个页面间切换时，服务就会保存该用户的信息。\n1. cookie\n2. session\n3. url 重写\n4. 隐藏input\n5. ip地址\n\n","slug":"优化","published":1,"updated":"2019-07-09T07:02:37.063Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmejaesd001qxcvrgs9s041b","content":"<p>seo 优化整合</p>\n<span id=\"more\"></span>\n\n<ul>\n<li>合理的 title、description、keywords：搜索对着三项的权重逐个减小，title 值强调重点即可，重要关键词出现不要超过 2 次，而且要靠前，不同页面 title 要有所不同；description 把页面内容高度概括，长度合适，不可过分堆砌关键词，不同页面 description 有所不同；keywords 列举出重要关键词即可</li>\n<li>语义化的 HTML 代码，符合 W3C 规范：语义化代码让搜索引擎容易理解网页</li>\n<li>重要内容 HTML 代码放在最前：搜索引擎抓取 HTML 顺序是从上到下，有的搜索引擎对抓取长度有限制，保证重要内容一定会被抓取重要内容不要用 js 输出：爬虫不会执行 js 获取内容</li>\n<li>少用 iframe：搜索引擎不会抓取 iframe 中的内容</li>\n<li>非装饰性图片必须加 alt</li>\n<li>提高网站速度：网站速度是搜索引擎排序的一个重要指标</li>\n</ul>\n<h2 id=\"WEB-开发中会话跟踪的方法有哪些\"><a href=\"#WEB-开发中会话跟踪的方法有哪些\" class=\"headerlink\" title=\"WEB 开发中会话跟踪的方法有哪些\"></a>WEB 开发中会话跟踪的方法有哪些</h2><p>HTTP 是一种无状态协议，当用户发出请求时，服务器就会做出响应，客户端与服务端的联系是离散的，非连续的，当用户在同一个网站的多个页面之间转换时，根本无法确定是否是同一个用户，会话跟踪就可以解决这个问题。当一个用户在多个页面间切换时，服务就会保存该用户的信息。</p>\n<ol>\n<li>cookie</li>\n<li>session</li>\n<li>url 重写</li>\n<li>隐藏input</li>\n<li>ip地址</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>seo 优化整合</p>","more":"<ul>\n<li>合理的 title、description、keywords：搜索对着三项的权重逐个减小，title 值强调重点即可，重要关键词出现不要超过 2 次，而且要靠前，不同页面 title 要有所不同；description 把页面内容高度概括，长度合适，不可过分堆砌关键词，不同页面 description 有所不同；keywords 列举出重要关键词即可</li>\n<li>语义化的 HTML 代码，符合 W3C 规范：语义化代码让搜索引擎容易理解网页</li>\n<li>重要内容 HTML 代码放在最前：搜索引擎抓取 HTML 顺序是从上到下，有的搜索引擎对抓取长度有限制，保证重要内容一定会被抓取重要内容不要用 js 输出：爬虫不会执行 js 获取内容</li>\n<li>少用 iframe：搜索引擎不会抓取 iframe 中的内容</li>\n<li>非装饰性图片必须加 alt</li>\n<li>提高网站速度：网站速度是搜索引擎排序的一个重要指标</li>\n</ul>\n<h2 id=\"WEB-开发中会话跟踪的方法有哪些\"><a href=\"#WEB-开发中会话跟踪的方法有哪些\" class=\"headerlink\" title=\"WEB 开发中会话跟踪的方法有哪些\"></a>WEB 开发中会话跟踪的方法有哪些</h2><p>HTTP 是一种无状态协议，当用户发出请求时，服务器就会做出响应，客户端与服务端的联系是离散的，非连续的，当用户在同一个网站的多个页面之间转换时，根本无法确定是否是同一个用户，会话跟踪就可以解决这个问题。当一个用户在多个页面间切换时，服务就会保存该用户的信息。</p>\n<ol>\n<li>cookie</li>\n<li>session</li>\n<li>url 重写</li>\n<li>隐藏input</li>\n<li>ip地址</li>\n</ol>"},{"title":"作用域","date":"2018-01-23T03:30:11.000Z","_content":"\n1. 作用域是一套规则，用于确定在何处以及如何查找变量 ( 标识符 )。如果查找的目的是为变量进行赋值，那么就会使用 LHS，如果查找的目的是获取变量的值，就会使用 RHS 查询\n2. 无论函数在哪里被调用，也无论它如何被调用，它的词法作用域都只由函数被声明时所处的位置决定。\n\n<!--more-->\n\n## 欺骗词法作用域\n\n1. eval(), 可以接受一个字符串为参数，并将其中的内容视为好像在书写时就存在程序中这个位置的代码。通常被用来执行动态创建的代码。\n\n   ```javascript\n   function foo(str, a) {\n   eval( str ); // 欺骗！\n   console.log( a, b );\n   } v\n   ar b = 2;\n   foo( \"var b = 3;\", 1 ); // 1, 3\n   ```\n\n2. with ，通常被当做重复引用同一个对象中的多个属性的快捷方式，可以不需要重复引用对象本身。可以将一个没有或有多个属性的对象处理为一个完全隔离的词法作用域，因此这个对象的属性也会处理为定义在这个作用域中的词法标识符。\n3. js 引擎会在编译阶段进行属相的性能优化。其中有些优化依赖于能够根据代码的词法进行静态分析，并预先确定所有变量和函数的定义位置，才能在执行阶段快速找到标志符，如果引擎发现可 eval 和with，它只能简单的假设关于标识符位子的判断都是无效的，因为无法再词法分析阶段明确知道 eval() 会接受到什么代码，这些代码会如何对作用域进行修改，也无法知道传递给 with 用来创建新词法作用域的对象的内容到底是什么.\n\n## var a = 2\n\n编译器会进行如下的处理：\n\n1. 遇到 var a，编译器会询问作用域是否已经有一个该名称的变量存在于同一个作用域的集合中。如果是，编译器会忽略该声明，继续进行编译；否则它会要求作用域在当前作用域的集合中声明一个新的变量，并命名为 a。\n2. 接下来编译器会为引擎生成运行时所需的代码，这些代码被用来处理 a = 2 这个赋值操作。引擎运行时会首先询问作用域，在当前的作用域集合中是否存在一个叫作 a 的变量。如果否，引擎就会使用这个变量；如果不是，引擎会继续查找该变量，如果引擎最终找到了 a 变量，就会将 2 赋值给它。否则引擎就会举手示意并抛出一个异常！\n\n总结：变量的赋值操作会执行两个动作，首先编译器会在当前作用域中声明一个变量（如果之前没有声明过），然后在运行时引擎会在作用域中查找该变量，如果能够找到就会对它赋值。\n\n编译器在编译过程的第二步中生成了代码，引擎执行它时，会通过查找变量 a 来判断它是否已声明过。查找的过程由作用域进行协助，但是引擎执行怎样的查找，会影响最终的查找结果。\n\n在我们的例子中，引擎会为变量 a 进行 LHS 查询。另外一个查找类型叫做 RHS\n\n1. LHS: 赋值操作的目标是谁\n1. RHS：谁是赋值操作的源头\n\n---\n\n当一个块或者函数嵌套在另一个块或函数中时，就发生了作用于的嵌套。因此作用域中无法找到某个变量是，就会在外层嵌套的作用域中继续查找，知道找到该变量，或抵达最外层的作用域为 ( 也就是全局作用域 ) 止。\n\n遍历嵌套作用域链的规则很简单：引擎从当前的执行作用域开始查找变量，如果找不到，就向上一级继续查找。当抵达最外层的全局作用域时，无论找到还是没找到，查找过程都会停止。\n\n---\n\n## 函数作用域和块作用域\n\n函数作用域的含义是指，属于这个函数的全部变量都可以在整个函数的范围内使用及复用 ( 事实上在嵌套的作用用户中也可以使用 )\n\n1. 立即执行函数会被当做函数表达式而不是一个标准的函数声明来处理，函数声明和函数表达式之间最重要的区别是他们的名称标识符将会绑定在何处。\n2. 直接在全局中声明的函数是并绑定在全局作用域中，而立即执行函数被绑定在函数表达式自身的函数中而不是所在作用域中。\n3. 当使用 var 声明变量时，它写在哪儿都是一样的，因为它们最终都会属于外部作用域。\n\n**提升是指声明会被视为存在于其所出现的作用域的整个范围内。但是使用 let 进行的声明不会再块级作用域中进行提升。声明的代码被运行之前，声明并不 “ 存在 ”。**\n\n---\n\n## 提升\n\n任何声明在某个作用域内的变量，都将属于这个作用域\n\n包括变量和函数在内的所有声明都会在任何代码被执行前首先被处理。声明将被提升到顶部，而赋值语句将被留在原地等待执行阶段。只有声明本身会被提升，而赋值或其他运行逻辑会留在原地。如果提升改变了戴安执行的顺序，会照成非常严重的破坏。\n\n函数声明和变量声明都会被提升。但是函数会首先被提升，然后才是变量。尽管重复的声明会被忽略掉，但出现在后面的函数声明还是可以覆盖前面的。\n\nvar a = 2; 被分为两个阶段，一个是编译阶段的任务，而第二个是执行阶段的任务。\n\n---\n\n## 动态作用域\n\n```javascript\n词法作用域是一套关于引擎如何寻找变量以及会在何处找到变量的规则。动态作用域最重要的特征是它的定义过程发生在代码的书写阶段。\nfunction foo() {\nconsole.log( a ); // 2\n} f\nunction bar() {\nvar a = 3;\nfoo();\n} v\nar a = 2;\nbar();\n```\n\n此法作用域让 foo() 中的 a 通过 RHS 引用了全局作用域的 a，所以会输出 2;\n\n而动态作用域并不关心函数和作用域是如何声明以及在何处声明的，值关心它们从何处调用，换句话说，作用域链是基于调用栈的，而不是代码中的作用域嵌套。因此如果 js 具有动态作用域就会输出 3。什么会这样？因为当 foo() 无法找到 a 的变量引用时，会顺着调用栈在调用 foo() 的地方查找 a，而不是在嵌套的词法作用域链中向上查找。由于 foo() 是在 bar() 中调用的，引擎会检查 bar() 的作用域，并在其中找到值为 3 的变量 a。\n\n事实上 js 并不具备动态作用域。它只有词法作用域，但是 this 机制某种程度上很像动态作用域。\n\n**词法作用域是在写代码或者说定义时确定的**，而动态作用域是在运动时确定的。(this 也是 )，词法作用域关注函数在何处声明，而动态作用域关注函数从何处调用。\n","source":"_posts/作用域.md","raw":"---\ntitle: 作用域\ndate: 2018-01-23 11:30:11\ncategories: JavaScript\n---\n\n1. 作用域是一套规则，用于确定在何处以及如何查找变量 ( 标识符 )。如果查找的目的是为变量进行赋值，那么就会使用 LHS，如果查找的目的是获取变量的值，就会使用 RHS 查询\n2. 无论函数在哪里被调用，也无论它如何被调用，它的词法作用域都只由函数被声明时所处的位置决定。\n\n<!--more-->\n\n## 欺骗词法作用域\n\n1. eval(), 可以接受一个字符串为参数，并将其中的内容视为好像在书写时就存在程序中这个位置的代码。通常被用来执行动态创建的代码。\n\n   ```javascript\n   function foo(str, a) {\n   eval( str ); // 欺骗！\n   console.log( a, b );\n   } v\n   ar b = 2;\n   foo( \"var b = 3;\", 1 ); // 1, 3\n   ```\n\n2. with ，通常被当做重复引用同一个对象中的多个属性的快捷方式，可以不需要重复引用对象本身。可以将一个没有或有多个属性的对象处理为一个完全隔离的词法作用域，因此这个对象的属性也会处理为定义在这个作用域中的词法标识符。\n3. js 引擎会在编译阶段进行属相的性能优化。其中有些优化依赖于能够根据代码的词法进行静态分析，并预先确定所有变量和函数的定义位置，才能在执行阶段快速找到标志符，如果引擎发现可 eval 和with，它只能简单的假设关于标识符位子的判断都是无效的，因为无法再词法分析阶段明确知道 eval() 会接受到什么代码，这些代码会如何对作用域进行修改，也无法知道传递给 with 用来创建新词法作用域的对象的内容到底是什么.\n\n## var a = 2\n\n编译器会进行如下的处理：\n\n1. 遇到 var a，编译器会询问作用域是否已经有一个该名称的变量存在于同一个作用域的集合中。如果是，编译器会忽略该声明，继续进行编译；否则它会要求作用域在当前作用域的集合中声明一个新的变量，并命名为 a。\n2. 接下来编译器会为引擎生成运行时所需的代码，这些代码被用来处理 a = 2 这个赋值操作。引擎运行时会首先询问作用域，在当前的作用域集合中是否存在一个叫作 a 的变量。如果否，引擎就会使用这个变量；如果不是，引擎会继续查找该变量，如果引擎最终找到了 a 变量，就会将 2 赋值给它。否则引擎就会举手示意并抛出一个异常！\n\n总结：变量的赋值操作会执行两个动作，首先编译器会在当前作用域中声明一个变量（如果之前没有声明过），然后在运行时引擎会在作用域中查找该变量，如果能够找到就会对它赋值。\n\n编译器在编译过程的第二步中生成了代码，引擎执行它时，会通过查找变量 a 来判断它是否已声明过。查找的过程由作用域进行协助，但是引擎执行怎样的查找，会影响最终的查找结果。\n\n在我们的例子中，引擎会为变量 a 进行 LHS 查询。另外一个查找类型叫做 RHS\n\n1. LHS: 赋值操作的目标是谁\n1. RHS：谁是赋值操作的源头\n\n---\n\n当一个块或者函数嵌套在另一个块或函数中时，就发生了作用于的嵌套。因此作用域中无法找到某个变量是，就会在外层嵌套的作用域中继续查找，知道找到该变量，或抵达最外层的作用域为 ( 也就是全局作用域 ) 止。\n\n遍历嵌套作用域链的规则很简单：引擎从当前的执行作用域开始查找变量，如果找不到，就向上一级继续查找。当抵达最外层的全局作用域时，无论找到还是没找到，查找过程都会停止。\n\n---\n\n## 函数作用域和块作用域\n\n函数作用域的含义是指，属于这个函数的全部变量都可以在整个函数的范围内使用及复用 ( 事实上在嵌套的作用用户中也可以使用 )\n\n1. 立即执行函数会被当做函数表达式而不是一个标准的函数声明来处理，函数声明和函数表达式之间最重要的区别是他们的名称标识符将会绑定在何处。\n2. 直接在全局中声明的函数是并绑定在全局作用域中，而立即执行函数被绑定在函数表达式自身的函数中而不是所在作用域中。\n3. 当使用 var 声明变量时，它写在哪儿都是一样的，因为它们最终都会属于外部作用域。\n\n**提升是指声明会被视为存在于其所出现的作用域的整个范围内。但是使用 let 进行的声明不会再块级作用域中进行提升。声明的代码被运行之前，声明并不 “ 存在 ”。**\n\n---\n\n## 提升\n\n任何声明在某个作用域内的变量，都将属于这个作用域\n\n包括变量和函数在内的所有声明都会在任何代码被执行前首先被处理。声明将被提升到顶部，而赋值语句将被留在原地等待执行阶段。只有声明本身会被提升，而赋值或其他运行逻辑会留在原地。如果提升改变了戴安执行的顺序，会照成非常严重的破坏。\n\n函数声明和变量声明都会被提升。但是函数会首先被提升，然后才是变量。尽管重复的声明会被忽略掉，但出现在后面的函数声明还是可以覆盖前面的。\n\nvar a = 2; 被分为两个阶段，一个是编译阶段的任务，而第二个是执行阶段的任务。\n\n---\n\n## 动态作用域\n\n```javascript\n词法作用域是一套关于引擎如何寻找变量以及会在何处找到变量的规则。动态作用域最重要的特征是它的定义过程发生在代码的书写阶段。\nfunction foo() {\nconsole.log( a ); // 2\n} f\nunction bar() {\nvar a = 3;\nfoo();\n} v\nar a = 2;\nbar();\n```\n\n此法作用域让 foo() 中的 a 通过 RHS 引用了全局作用域的 a，所以会输出 2;\n\n而动态作用域并不关心函数和作用域是如何声明以及在何处声明的，值关心它们从何处调用，换句话说，作用域链是基于调用栈的，而不是代码中的作用域嵌套。因此如果 js 具有动态作用域就会输出 3。什么会这样？因为当 foo() 无法找到 a 的变量引用时，会顺着调用栈在调用 foo() 的地方查找 a，而不是在嵌套的词法作用域链中向上查找。由于 foo() 是在 bar() 中调用的，引擎会检查 bar() 的作用域，并在其中找到值为 3 的变量 a。\n\n事实上 js 并不具备动态作用域。它只有词法作用域，但是 this 机制某种程度上很像动态作用域。\n\n**词法作用域是在写代码或者说定义时确定的**，而动态作用域是在运动时确定的。(this 也是 )，词法作用域关注函数在何处声明，而动态作用域关注函数从何处调用。\n","slug":"作用域","published":1,"updated":"2019-07-09T07:02:52.809Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmejaese001sxcvr4w2m6pgq","content":"<ol>\n<li>作用域是一套规则，用于确定在何处以及如何查找变量 ( 标识符 )。如果查找的目的是为变量进行赋值，那么就会使用 LHS，如果查找的目的是获取变量的值，就会使用 RHS 查询</li>\n<li>无论函数在哪里被调用，也无论它如何被调用，它的词法作用域都只由函数被声明时所处的位置决定。</li>\n</ol>\n<span id=\"more\"></span>\n\n<h2 id=\"欺骗词法作用域\"><a href=\"#欺骗词法作用域\" class=\"headerlink\" title=\"欺骗词法作用域\"></a>欺骗词法作用域</h2><ol>\n<li><p>eval(), 可以接受一个字符串为参数，并将其中的内容视为好像在书写时就存在程序中这个位置的代码。通常被用来执行动态创建的代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">str, a</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">eval</span>( str ); <span class=\"comment\">// 欺骗！</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( a, b );</span><br><span class=\"line\">&#125; v</span><br><span class=\"line\">ar b = <span class=\"number\">2</span>;</span><br><span class=\"line\">foo( <span class=\"string\">&quot;var b = 3;&quot;</span>, <span class=\"number\">1</span> ); <span class=\"comment\">// 1, 3</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>with ，通常被当做重复引用同一个对象中的多个属性的快捷方式，可以不需要重复引用对象本身。可以将一个没有或有多个属性的对象处理为一个完全隔离的词法作用域，因此这个对象的属性也会处理为定义在这个作用域中的词法标识符。</p>\n</li>\n<li><p>js 引擎会在编译阶段进行属相的性能优化。其中有些优化依赖于能够根据代码的词法进行静态分析，并预先确定所有变量和函数的定义位置，才能在执行阶段快速找到标志符，如果引擎发现可 eval 和with，它只能简单的假设关于标识符位子的判断都是无效的，因为无法再词法分析阶段明确知道 eval() 会接受到什么代码，这些代码会如何对作用域进行修改，也无法知道传递给 with 用来创建新词法作用域的对象的内容到底是什么.</p>\n</li>\n</ol>\n<h2 id=\"var-a-2\"><a href=\"#var-a-2\" class=\"headerlink\" title=\"var a = 2\"></a>var a = 2</h2><p>编译器会进行如下的处理：</p>\n<ol>\n<li>遇到 var a，编译器会询问作用域是否已经有一个该名称的变量存在于同一个作用域的集合中。如果是，编译器会忽略该声明，继续进行编译；否则它会要求作用域在当前作用域的集合中声明一个新的变量，并命名为 a。</li>\n<li>接下来编译器会为引擎生成运行时所需的代码，这些代码被用来处理 a = 2 这个赋值操作。引擎运行时会首先询问作用域，在当前的作用域集合中是否存在一个叫作 a 的变量。如果否，引擎就会使用这个变量；如果不是，引擎会继续查找该变量，如果引擎最终找到了 a 变量，就会将 2 赋值给它。否则引擎就会举手示意并抛出一个异常！</li>\n</ol>\n<p>总结：变量的赋值操作会执行两个动作，首先编译器会在当前作用域中声明一个变量（如果之前没有声明过），然后在运行时引擎会在作用域中查找该变量，如果能够找到就会对它赋值。</p>\n<p>编译器在编译过程的第二步中生成了代码，引擎执行它时，会通过查找变量 a 来判断它是否已声明过。查找的过程由作用域进行协助，但是引擎执行怎样的查找，会影响最终的查找结果。</p>\n<p>在我们的例子中，引擎会为变量 a 进行 LHS 查询。另外一个查找类型叫做 RHS</p>\n<ol>\n<li>LHS: 赋值操作的目标是谁</li>\n<li>RHS：谁是赋值操作的源头</li>\n</ol>\n<hr>\n<p>当一个块或者函数嵌套在另一个块或函数中时，就发生了作用于的嵌套。因此作用域中无法找到某个变量是，就会在外层嵌套的作用域中继续查找，知道找到该变量，或抵达最外层的作用域为 ( 也就是全局作用域 ) 止。</p>\n<p>遍历嵌套作用域链的规则很简单：引擎从当前的执行作用域开始查找变量，如果找不到，就向上一级继续查找。当抵达最外层的全局作用域时，无论找到还是没找到，查找过程都会停止。</p>\n<hr>\n<h2 id=\"函数作用域和块作用域\"><a href=\"#函数作用域和块作用域\" class=\"headerlink\" title=\"函数作用域和块作用域\"></a>函数作用域和块作用域</h2><p>函数作用域的含义是指，属于这个函数的全部变量都可以在整个函数的范围内使用及复用 ( 事实上在嵌套的作用用户中也可以使用 )</p>\n<ol>\n<li>立即执行函数会被当做函数表达式而不是一个标准的函数声明来处理，函数声明和函数表达式之间最重要的区别是他们的名称标识符将会绑定在何处。</li>\n<li>直接在全局中声明的函数是并绑定在全局作用域中，而立即执行函数被绑定在函数表达式自身的函数中而不是所在作用域中。</li>\n<li>当使用 var 声明变量时，它写在哪儿都是一样的，因为它们最终都会属于外部作用域。</li>\n</ol>\n<p><strong>提升是指声明会被视为存在于其所出现的作用域的整个范围内。但是使用 let 进行的声明不会再块级作用域中进行提升。声明的代码被运行之前，声明并不 “ 存在 ”。</strong></p>\n<hr>\n<h2 id=\"提升\"><a href=\"#提升\" class=\"headerlink\" title=\"提升\"></a>提升</h2><p>任何声明在某个作用域内的变量，都将属于这个作用域</p>\n<p>包括变量和函数在内的所有声明都会在任何代码被执行前首先被处理。声明将被提升到顶部，而赋值语句将被留在原地等待执行阶段。只有声明本身会被提升，而赋值或其他运行逻辑会留在原地。如果提升改变了戴安执行的顺序，会照成非常严重的破坏。</p>\n<p>函数声明和变量声明都会被提升。但是函数会首先被提升，然后才是变量。尽管重复的声明会被忽略掉，但出现在后面的函数声明还是可以覆盖前面的。</p>\n<p>var a = 2; 被分为两个阶段，一个是编译阶段的任务，而第二个是执行阶段的任务。</p>\n<hr>\n<h2 id=\"动态作用域\"><a href=\"#动态作用域\" class=\"headerlink\" title=\"动态作用域\"></a>动态作用域</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">词法作用域是一套关于引擎如何寻找变量以及会在何处找到变量的规则。动态作用域最重要的特征是它的定义过程发生在代码的书写阶段。</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( a ); <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125; f</span><br><span class=\"line\">unction <span class=\"function\"><span class=\"title\">bar</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\">foo();</span><br><span class=\"line\">&#125; v</span><br><span class=\"line\">ar a = <span class=\"number\">2</span>;</span><br><span class=\"line\">bar();</span><br></pre></td></tr></table></figure>\n\n<p>此法作用域让 foo() 中的 a 通过 RHS 引用了全局作用域的 a，所以会输出 2;</p>\n<p>而动态作用域并不关心函数和作用域是如何声明以及在何处声明的，值关心它们从何处调用，换句话说，作用域链是基于调用栈的，而不是代码中的作用域嵌套。因此如果 js 具有动态作用域就会输出 3。什么会这样？因为当 foo() 无法找到 a 的变量引用时，会顺着调用栈在调用 foo() 的地方查找 a，而不是在嵌套的词法作用域链中向上查找。由于 foo() 是在 bar() 中调用的，引擎会检查 bar() 的作用域，并在其中找到值为 3 的变量 a。</p>\n<p>事实上 js 并不具备动态作用域。它只有词法作用域，但是 this 机制某种程度上很像动态作用域。</p>\n<p><strong>词法作用域是在写代码或者说定义时确定的</strong>，而动态作用域是在运动时确定的。(this 也是 )，词法作用域关注函数在何处声明，而动态作用域关注函数从何处调用。</p>\n","site":{"data":{}},"excerpt":"<ol>\n<li>作用域是一套规则，用于确定在何处以及如何查找变量 ( 标识符 )。如果查找的目的是为变量进行赋值，那么就会使用 LHS，如果查找的目的是获取变量的值，就会使用 RHS 查询</li>\n<li>无论函数在哪里被调用，也无论它如何被调用，它的词法作用域都只由函数被声明时所处的位置决定。</li>\n</ol>","more":"<h2 id=\"欺骗词法作用域\"><a href=\"#欺骗词法作用域\" class=\"headerlink\" title=\"欺骗词法作用域\"></a>欺骗词法作用域</h2><ol>\n<li><p>eval(), 可以接受一个字符串为参数，并将其中的内容视为好像在书写时就存在程序中这个位置的代码。通常被用来执行动态创建的代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">str, a</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">eval</span>( str ); <span class=\"comment\">// 欺骗！</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( a, b );</span><br><span class=\"line\">&#125; v</span><br><span class=\"line\">ar b = <span class=\"number\">2</span>;</span><br><span class=\"line\">foo( <span class=\"string\">&quot;var b = 3;&quot;</span>, <span class=\"number\">1</span> ); <span class=\"comment\">// 1, 3</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>with ，通常被当做重复引用同一个对象中的多个属性的快捷方式，可以不需要重复引用对象本身。可以将一个没有或有多个属性的对象处理为一个完全隔离的词法作用域，因此这个对象的属性也会处理为定义在这个作用域中的词法标识符。</p>\n</li>\n<li><p>js 引擎会在编译阶段进行属相的性能优化。其中有些优化依赖于能够根据代码的词法进行静态分析，并预先确定所有变量和函数的定义位置，才能在执行阶段快速找到标志符，如果引擎发现可 eval 和with，它只能简单的假设关于标识符位子的判断都是无效的，因为无法再词法分析阶段明确知道 eval() 会接受到什么代码，这些代码会如何对作用域进行修改，也无法知道传递给 with 用来创建新词法作用域的对象的内容到底是什么.</p>\n</li>\n</ol>\n<h2 id=\"var-a-2\"><a href=\"#var-a-2\" class=\"headerlink\" title=\"var a = 2\"></a>var a = 2</h2><p>编译器会进行如下的处理：</p>\n<ol>\n<li>遇到 var a，编译器会询问作用域是否已经有一个该名称的变量存在于同一个作用域的集合中。如果是，编译器会忽略该声明，继续进行编译；否则它会要求作用域在当前作用域的集合中声明一个新的变量，并命名为 a。</li>\n<li>接下来编译器会为引擎生成运行时所需的代码，这些代码被用来处理 a = 2 这个赋值操作。引擎运行时会首先询问作用域，在当前的作用域集合中是否存在一个叫作 a 的变量。如果否，引擎就会使用这个变量；如果不是，引擎会继续查找该变量，如果引擎最终找到了 a 变量，就会将 2 赋值给它。否则引擎就会举手示意并抛出一个异常！</li>\n</ol>\n<p>总结：变量的赋值操作会执行两个动作，首先编译器会在当前作用域中声明一个变量（如果之前没有声明过），然后在运行时引擎会在作用域中查找该变量，如果能够找到就会对它赋值。</p>\n<p>编译器在编译过程的第二步中生成了代码，引擎执行它时，会通过查找变量 a 来判断它是否已声明过。查找的过程由作用域进行协助，但是引擎执行怎样的查找，会影响最终的查找结果。</p>\n<p>在我们的例子中，引擎会为变量 a 进行 LHS 查询。另外一个查找类型叫做 RHS</p>\n<ol>\n<li>LHS: 赋值操作的目标是谁</li>\n<li>RHS：谁是赋值操作的源头</li>\n</ol>\n<hr>\n<p>当一个块或者函数嵌套在另一个块或函数中时，就发生了作用于的嵌套。因此作用域中无法找到某个变量是，就会在外层嵌套的作用域中继续查找，知道找到该变量，或抵达最外层的作用域为 ( 也就是全局作用域 ) 止。</p>\n<p>遍历嵌套作用域链的规则很简单：引擎从当前的执行作用域开始查找变量，如果找不到，就向上一级继续查找。当抵达最外层的全局作用域时，无论找到还是没找到，查找过程都会停止。</p>\n<hr>\n<h2 id=\"函数作用域和块作用域\"><a href=\"#函数作用域和块作用域\" class=\"headerlink\" title=\"函数作用域和块作用域\"></a>函数作用域和块作用域</h2><p>函数作用域的含义是指，属于这个函数的全部变量都可以在整个函数的范围内使用及复用 ( 事实上在嵌套的作用用户中也可以使用 )</p>\n<ol>\n<li>立即执行函数会被当做函数表达式而不是一个标准的函数声明来处理，函数声明和函数表达式之间最重要的区别是他们的名称标识符将会绑定在何处。</li>\n<li>直接在全局中声明的函数是并绑定在全局作用域中，而立即执行函数被绑定在函数表达式自身的函数中而不是所在作用域中。</li>\n<li>当使用 var 声明变量时，它写在哪儿都是一样的，因为它们最终都会属于外部作用域。</li>\n</ol>\n<p><strong>提升是指声明会被视为存在于其所出现的作用域的整个范围内。但是使用 let 进行的声明不会再块级作用域中进行提升。声明的代码被运行之前，声明并不 “ 存在 ”。</strong></p>\n<hr>\n<h2 id=\"提升\"><a href=\"#提升\" class=\"headerlink\" title=\"提升\"></a>提升</h2><p>任何声明在某个作用域内的变量，都将属于这个作用域</p>\n<p>包括变量和函数在内的所有声明都会在任何代码被执行前首先被处理。声明将被提升到顶部，而赋值语句将被留在原地等待执行阶段。只有声明本身会被提升，而赋值或其他运行逻辑会留在原地。如果提升改变了戴安执行的顺序，会照成非常严重的破坏。</p>\n<p>函数声明和变量声明都会被提升。但是函数会首先被提升，然后才是变量。尽管重复的声明会被忽略掉，但出现在后面的函数声明还是可以覆盖前面的。</p>\n<p>var a = 2; 被分为两个阶段，一个是编译阶段的任务，而第二个是执行阶段的任务。</p>\n<hr>\n<h2 id=\"动态作用域\"><a href=\"#动态作用域\" class=\"headerlink\" title=\"动态作用域\"></a>动态作用域</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">词法作用域是一套关于引擎如何寻找变量以及会在何处找到变量的规则。动态作用域最重要的特征是它的定义过程发生在代码的书写阶段。</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( a ); <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125; f</span><br><span class=\"line\">unction <span class=\"function\"><span class=\"title\">bar</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\">foo();</span><br><span class=\"line\">&#125; v</span><br><span class=\"line\">ar a = <span class=\"number\">2</span>;</span><br><span class=\"line\">bar();</span><br></pre></td></tr></table></figure>\n\n<p>此法作用域让 foo() 中的 a 通过 RHS 引用了全局作用域的 a，所以会输出 2;</p>\n<p>而动态作用域并不关心函数和作用域是如何声明以及在何处声明的，值关心它们从何处调用，换句话说，作用域链是基于调用栈的，而不是代码中的作用域嵌套。因此如果 js 具有动态作用域就会输出 3。什么会这样？因为当 foo() 无法找到 a 的变量引用时，会顺着调用栈在调用 foo() 的地方查找 a，而不是在嵌套的词法作用域链中向上查找。由于 foo() 是在 bar() 中调用的，引擎会检查 bar() 的作用域，并在其中找到值为 3 的变量 a。</p>\n<p>事实上 js 并不具备动态作用域。它只有词法作用域，但是 this 机制某种程度上很像动态作用域。</p>\n<p><strong>词法作用域是在写代码或者说定义时确定的</strong>，而动态作用域是在运动时确定的。(this 也是 )，词法作用域关注函数在何处声明，而动态作用域关注函数从何处调用。</p>"},{"title":"函数柯里化","date":"2018-05-24T02:35:37.000Z","_content":"\n函数柯里化是把接受多个参数的函数转变成接受一个单一参数（最初函数的第一个参数），并且返回接受余下的参数而且返回结果的新函数的技术。\n\n<!--more-->\n\n# 理解函数柯里化\n\n通用函数解决兼容性问题，但是同时也会带来使用不便性，不同的应用场景旺旺要传递很多参数，已达到解决特定的目的，有时应用中，会对同一个规则进行反复使用，这样就造成了代码的重复性。\n\n```javascript\nfunction square(i) {\n  return i * i;\n}\nfunction dubble(i) {\n  return (i *= 2);\n}\nfunction map(handeler, list) {\n  return list.map(handeler);\n}\n// 数组的每一项平方\nmap(square, [1, 2, 3, 4, 5]);\nmap(square, [6, 7, 8, 9, 10]);\nmap(square, [10, 20, 30, 40, 50]);\n\n// 数组的每一项加倍\nmap(dubble, [1, 2, 3, 4, 5]);\nmap(dubble, [6, 7, 8, 9, 10]);\nmap(dubble, [10, 20, 30, 40, 50]);\n```\n\n例子中，创建了一个 map 通用函数，用于适应不同的应用场景。显然，通用性不用怀疑。同时，例子中重复传入了相同的处理函数：square 和 dubble。\n\n下面可以利用柯里化改造一下：\n\n```javascript\nfunction square(i) {\n  return i * 1;\n}\n\nfunction dubble(i) {\n  return (i *= 2);\n}\n\nfunction map(handeler, list) {\n  return list.map(handeler);\n}\n\nvar mapSQ = currying(map, square);\nmapSQ([1, 2, 3, 4, 5]);\nmapSQ([6, 7, 8, 9, 10]);\nmapSQ([10, 20, 30, 40, 50]);\n\nvar mapDB = currying(map, dubble);\nmapDB([1, 2, 3, 4, 5]);\nmapDB([6, 7, 8, 9, 10]);\nmapDB([10, 20, 30, 40, 50]);\n```\n\n```javascript\nvar currying = function(fn) {\n  var args = [].slice.call(arguments, 1); // 截取arguments中的第一个生成一个数组，也就是当前语境下的明面上的合法老婆\n  console.log(args); //合法老婆\n  return function() {\n    // 将已有的参数和新传进来的参数合并为一个数组，对应已有的合法老婆和新搞定的老婆\n    var newArgs = args.concat([].slice.call(arguments));\n    // 将所有的参数newArgs绑定给fn~\n    return fn.apply(null, newArgs);\n  };\n};\n\n// 下面为官员如何搞定7个老婆做测试\n// 获得合法老婆\nvar getWife = currying(function() {\n  var allWife = [].slice.call(arguments);\n  console.log(allWife.join(\",\"));\n}, \"合法老婆\");\n// 获得其他6个老婆\ngetWife(\"小老婆1\", \"小老婆2\", \"小老婆3\", \"小老婆4\", \"小老婆5\", \"小老婆6\"); //合法老婆,小老婆1\", \"小老婆2\", \"小老婆3\", \"小老婆4\", \"小老婆5\", \"小老婆6\"\n// 换一批老婆\ngetWife(\"大老婆\", \"小老婆\", \"俏老婆\", \"刁蛮老婆\", \"乖老婆\", \"送上门老婆\"); //合法老婆,\"大老婆\", \"小老婆\", \"俏老婆\", \"刁蛮老婆\", \"乖老婆\", \"送上门老婆\"\n// 再换一批老婆\ngetWife(\"超越韦小宝的老婆\"); //合法老婆\"大老婆\", \"小老婆\", \"俏老婆\", \"刁蛮老婆\", \"乖老婆\", \"送上门老婆\"\n```\n\n无论输入多少个参数嘛都会打印输出，且都会带第一个参数，上文代码`fn.applay(null,newArgs)`中的`null`本事应该制定 fn 中 this 的指向的对象，没有就用 null。\n\n## 实用场景\n\n* 参数复用（上文中的合法老婆）\n* 提前返回，下面是一个兼容现代浏览器以及 IE 浏览器的事件添加方法：\n\n### 事件添加处理\n\n```javascript\nvar addEvent = function(el, type, fn, capture) {\n  if (window.addEventListenner) {\n    el.addEventListenner(\n      type,\n      function(e) {\n        fn.call(el, e);\n      },\n      capture\n    );\n  } else if (window.attachEvent) {\n    el.attachEvent(\"on\" + type, function(e) {\n      fn.call(el, e);\n    });\n  }\n};\n```\n\n在使用 addEvent 为元素添加事件的时候，（eg.IE6/IE7）都会走一遍 if--else,其实只要判定一次就可以了。\n\n```javascript\nvar addEvent = (function() {\n  if (window.addEventListenner) {\n    return function(el, sType, fn, capture) {\n      el.addEventListenner(\n        sType,\n        function(e) {\n          fn.call(el, e);\n        },\n        capture\n      );\n    };\n  } else if (window.attachEvert) {\n    return function(el, sType, fn, capture) {\n      el.attachEvent(\"on\" + sType, function(e) {\n        fn.call(el, e);\n      });\n    };\n  }\n})();\n```\n\n### 延时计算\n\n```javascript\nvar curryWeigth = function(fn) {\n  var _weight = [];\n  return function() {\n    if (arguments.length == 0) {\n      return fn.applay(null, _weight);\n    } else {\n      _weight = _weight.concat([].slice.call(arguments));\n    }\n  };\n};\nvar weight = 0;\nvar addWeight = curryWeight(function() {\n  var i = 0;\n  len = arguments.length;\n  for (i; i < len; i += 1) {\n    weight += arguments[i];\n  }\n});\n\naddWeidht(2.3);\naddWeidht(6.5);\naddWeidht(1.2);\naddWeidht(); //到这里才开始计算\n\nconsole.log(weight);\n\n//实际上就是利用的闭包而已\n```\n","source":"_posts/函数柯里化.md","raw":"---\ntitle: 函数柯里化\ndate: 2018-05-24 10:35:37\ncategories: JavaScript\n---\n\n函数柯里化是把接受多个参数的函数转变成接受一个单一参数（最初函数的第一个参数），并且返回接受余下的参数而且返回结果的新函数的技术。\n\n<!--more-->\n\n# 理解函数柯里化\n\n通用函数解决兼容性问题，但是同时也会带来使用不便性，不同的应用场景旺旺要传递很多参数，已达到解决特定的目的，有时应用中，会对同一个规则进行反复使用，这样就造成了代码的重复性。\n\n```javascript\nfunction square(i) {\n  return i * i;\n}\nfunction dubble(i) {\n  return (i *= 2);\n}\nfunction map(handeler, list) {\n  return list.map(handeler);\n}\n// 数组的每一项平方\nmap(square, [1, 2, 3, 4, 5]);\nmap(square, [6, 7, 8, 9, 10]);\nmap(square, [10, 20, 30, 40, 50]);\n\n// 数组的每一项加倍\nmap(dubble, [1, 2, 3, 4, 5]);\nmap(dubble, [6, 7, 8, 9, 10]);\nmap(dubble, [10, 20, 30, 40, 50]);\n```\n\n例子中，创建了一个 map 通用函数，用于适应不同的应用场景。显然，通用性不用怀疑。同时，例子中重复传入了相同的处理函数：square 和 dubble。\n\n下面可以利用柯里化改造一下：\n\n```javascript\nfunction square(i) {\n  return i * 1;\n}\n\nfunction dubble(i) {\n  return (i *= 2);\n}\n\nfunction map(handeler, list) {\n  return list.map(handeler);\n}\n\nvar mapSQ = currying(map, square);\nmapSQ([1, 2, 3, 4, 5]);\nmapSQ([6, 7, 8, 9, 10]);\nmapSQ([10, 20, 30, 40, 50]);\n\nvar mapDB = currying(map, dubble);\nmapDB([1, 2, 3, 4, 5]);\nmapDB([6, 7, 8, 9, 10]);\nmapDB([10, 20, 30, 40, 50]);\n```\n\n```javascript\nvar currying = function(fn) {\n  var args = [].slice.call(arguments, 1); // 截取arguments中的第一个生成一个数组，也就是当前语境下的明面上的合法老婆\n  console.log(args); //合法老婆\n  return function() {\n    // 将已有的参数和新传进来的参数合并为一个数组，对应已有的合法老婆和新搞定的老婆\n    var newArgs = args.concat([].slice.call(arguments));\n    // 将所有的参数newArgs绑定给fn~\n    return fn.apply(null, newArgs);\n  };\n};\n\n// 下面为官员如何搞定7个老婆做测试\n// 获得合法老婆\nvar getWife = currying(function() {\n  var allWife = [].slice.call(arguments);\n  console.log(allWife.join(\",\"));\n}, \"合法老婆\");\n// 获得其他6个老婆\ngetWife(\"小老婆1\", \"小老婆2\", \"小老婆3\", \"小老婆4\", \"小老婆5\", \"小老婆6\"); //合法老婆,小老婆1\", \"小老婆2\", \"小老婆3\", \"小老婆4\", \"小老婆5\", \"小老婆6\"\n// 换一批老婆\ngetWife(\"大老婆\", \"小老婆\", \"俏老婆\", \"刁蛮老婆\", \"乖老婆\", \"送上门老婆\"); //合法老婆,\"大老婆\", \"小老婆\", \"俏老婆\", \"刁蛮老婆\", \"乖老婆\", \"送上门老婆\"\n// 再换一批老婆\ngetWife(\"超越韦小宝的老婆\"); //合法老婆\"大老婆\", \"小老婆\", \"俏老婆\", \"刁蛮老婆\", \"乖老婆\", \"送上门老婆\"\n```\n\n无论输入多少个参数嘛都会打印输出，且都会带第一个参数，上文代码`fn.applay(null,newArgs)`中的`null`本事应该制定 fn 中 this 的指向的对象，没有就用 null。\n\n## 实用场景\n\n* 参数复用（上文中的合法老婆）\n* 提前返回，下面是一个兼容现代浏览器以及 IE 浏览器的事件添加方法：\n\n### 事件添加处理\n\n```javascript\nvar addEvent = function(el, type, fn, capture) {\n  if (window.addEventListenner) {\n    el.addEventListenner(\n      type,\n      function(e) {\n        fn.call(el, e);\n      },\n      capture\n    );\n  } else if (window.attachEvent) {\n    el.attachEvent(\"on\" + type, function(e) {\n      fn.call(el, e);\n    });\n  }\n};\n```\n\n在使用 addEvent 为元素添加事件的时候，（eg.IE6/IE7）都会走一遍 if--else,其实只要判定一次就可以了。\n\n```javascript\nvar addEvent = (function() {\n  if (window.addEventListenner) {\n    return function(el, sType, fn, capture) {\n      el.addEventListenner(\n        sType,\n        function(e) {\n          fn.call(el, e);\n        },\n        capture\n      );\n    };\n  } else if (window.attachEvert) {\n    return function(el, sType, fn, capture) {\n      el.attachEvent(\"on\" + sType, function(e) {\n        fn.call(el, e);\n      });\n    };\n  }\n})();\n```\n\n### 延时计算\n\n```javascript\nvar curryWeigth = function(fn) {\n  var _weight = [];\n  return function() {\n    if (arguments.length == 0) {\n      return fn.applay(null, _weight);\n    } else {\n      _weight = _weight.concat([].slice.call(arguments));\n    }\n  };\n};\nvar weight = 0;\nvar addWeight = curryWeight(function() {\n  var i = 0;\n  len = arguments.length;\n  for (i; i < len; i += 1) {\n    weight += arguments[i];\n  }\n});\n\naddWeidht(2.3);\naddWeidht(6.5);\naddWeidht(1.2);\naddWeidht(); //到这里才开始计算\n\nconsole.log(weight);\n\n//实际上就是利用的闭包而已\n```\n","slug":"函数柯里化","published":1,"updated":"2019-07-09T07:03:10.522Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmejaesh001zxcvr4kzmcx61","content":"<p>函数柯里化是把接受多个参数的函数转变成接受一个单一参数（最初函数的第一个参数），并且返回接受余下的参数而且返回结果的新函数的技术。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"理解函数柯里化\"><a href=\"#理解函数柯里化\" class=\"headerlink\" title=\"理解函数柯里化\"></a>理解函数柯里化</h1><p>通用函数解决兼容性问题，但是同时也会带来使用不便性，不同的应用场景旺旺要传递很多参数，已达到解决特定的目的，有时应用中，会对同一个规则进行反复使用，这样就造成了代码的重复性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">square</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> i * i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dubble</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (i *= <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">map</span>(<span class=\"params\">handeler, list</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> list.map(handeler);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 数组的每一项平方</span></span><br><span class=\"line\">map(square, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);</span><br><span class=\"line\">map(square, [<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>]);</span><br><span class=\"line\">map(square, [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数组的每一项加倍</span></span><br><span class=\"line\">map(dubble, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);</span><br><span class=\"line\">map(dubble, [<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>]);</span><br><span class=\"line\">map(dubble, [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>]);</span><br></pre></td></tr></table></figure>\n\n<p>例子中，创建了一个 map 通用函数，用于适应不同的应用场景。显然，通用性不用怀疑。同时，例子中重复传入了相同的处理函数：square 和 dubble。</p>\n<p>下面可以利用柯里化改造一下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">square</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> i * <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dubble</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (i *= <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">map</span>(<span class=\"params\">handeler, list</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> list.map(handeler);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> mapSQ = currying(map, square);</span><br><span class=\"line\">mapSQ([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);</span><br><span class=\"line\">mapSQ([<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>]);</span><br><span class=\"line\">mapSQ([<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> mapDB = currying(map, dubble);</span><br><span class=\"line\">mapDB([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);</span><br><span class=\"line\">mapDB([<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>]);</span><br><span class=\"line\">mapDB([<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>]);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> currying = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> args = [].slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>); <span class=\"comment\">// 截取arguments中的第一个生成一个数组，也就是当前语境下的明面上的合法老婆</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(args); <span class=\"comment\">//合法老婆</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将已有的参数和新传进来的参数合并为一个数组，对应已有的合法老婆和新搞定的老婆</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> newArgs = args.concat([].slice.call(<span class=\"built_in\">arguments</span>));</span><br><span class=\"line\">    <span class=\"comment\">// 将所有的参数newArgs绑定给fn~</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> fn.apply(<span class=\"literal\">null</span>, newArgs);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下面为官员如何搞定7个老婆做测试</span></span><br><span class=\"line\"><span class=\"comment\">// 获得合法老婆</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getWife = currying(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> allWife = [].slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(allWife.join(<span class=\"string\">&quot;,&quot;</span>));</span><br><span class=\"line\">&#125;, <span class=\"string\">&quot;合法老婆&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 获得其他6个老婆</span></span><br><span class=\"line\">getWife(<span class=\"string\">&quot;小老婆1&quot;</span>, <span class=\"string\">&quot;小老婆2&quot;</span>, <span class=\"string\">&quot;小老婆3&quot;</span>, <span class=\"string\">&quot;小老婆4&quot;</span>, <span class=\"string\">&quot;小老婆5&quot;</span>, <span class=\"string\">&quot;小老婆6&quot;</span>); <span class=\"comment\">//合法老婆,小老婆1&quot;, &quot;小老婆2&quot;, &quot;小老婆3&quot;, &quot;小老婆4&quot;, &quot;小老婆5&quot;, &quot;小老婆6&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 换一批老婆</span></span><br><span class=\"line\">getWife(<span class=\"string\">&quot;大老婆&quot;</span>, <span class=\"string\">&quot;小老婆&quot;</span>, <span class=\"string\">&quot;俏老婆&quot;</span>, <span class=\"string\">&quot;刁蛮老婆&quot;</span>, <span class=\"string\">&quot;乖老婆&quot;</span>, <span class=\"string\">&quot;送上门老婆&quot;</span>); <span class=\"comment\">//合法老婆,&quot;大老婆&quot;, &quot;小老婆&quot;, &quot;俏老婆&quot;, &quot;刁蛮老婆&quot;, &quot;乖老婆&quot;, &quot;送上门老婆&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 再换一批老婆</span></span><br><span class=\"line\">getWife(<span class=\"string\">&quot;超越韦小宝的老婆&quot;</span>); <span class=\"comment\">//合法老婆&quot;大老婆&quot;, &quot;小老婆&quot;, &quot;俏老婆&quot;, &quot;刁蛮老婆&quot;, &quot;乖老婆&quot;, &quot;送上门老婆&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>无论输入多少个参数嘛都会打印输出，且都会带第一个参数，上文代码<code>fn.applay(null,newArgs)</code>中的<code>null</code>本事应该制定 fn 中 this 的指向的对象，没有就用 null。</p>\n<h2 id=\"实用场景\"><a href=\"#实用场景\" class=\"headerlink\" title=\"实用场景\"></a>实用场景</h2><ul>\n<li>参数复用（上文中的合法老婆）</li>\n<li>提前返回，下面是一个兼容现代浏览器以及 IE 浏览器的事件添加方法：</li>\n</ul>\n<h3 id=\"事件添加处理\"><a href=\"#事件添加处理\" class=\"headerlink\" title=\"事件添加处理\"></a>事件添加处理</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> addEvent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, type, fn, capture</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.addEventListenner) &#123;</span><br><span class=\"line\">    el.addEventListenner(</span><br><span class=\"line\">      type,</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        fn.call(el, e);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      capture</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.attachEvent) &#123;</span><br><span class=\"line\">    el.attachEvent(<span class=\"string\">&quot;on&quot;</span> + type, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      fn.call(el, e);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在使用 addEvent 为元素添加事件的时候，（eg.IE6/IE7）都会走一遍 if–else,其实只要判定一次就可以了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> addEvent = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.addEventListenner) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, sType, fn, capture</span>) </span>&#123;</span><br><span class=\"line\">      el.addEventListenner(</span><br><span class=\"line\">        sType,</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">          fn.call(el, e);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        capture</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.attachEvert) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, sType, fn, capture</span>) </span>&#123;</span><br><span class=\"line\">      el.attachEvent(<span class=\"string\">&quot;on&quot;</span> + sType, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        fn.call(el, e);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"延时计算\"><a href=\"#延时计算\" class=\"headerlink\" title=\"延时计算\"></a>延时计算</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> curryWeigth = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> _weight = [];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> fn.applay(<span class=\"literal\">null</span>, _weight);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      _weight = _weight.concat([].slice.call(<span class=\"built_in\">arguments</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> weight = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> addWeight = curryWeight(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  len = <span class=\"built_in\">arguments</span>.length;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i; i &lt; len; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    weight += <span class=\"built_in\">arguments</span>[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">addWeidht(<span class=\"number\">2.3</span>);</span><br><span class=\"line\">addWeidht(<span class=\"number\">6.5</span>);</span><br><span class=\"line\">addWeidht(<span class=\"number\">1.2</span>);</span><br><span class=\"line\">addWeidht(); <span class=\"comment\">//到这里才开始计算</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(weight);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实际上就是利用的闭包而已</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>函数柯里化是把接受多个参数的函数转变成接受一个单一参数（最初函数的第一个参数），并且返回接受余下的参数而且返回结果的新函数的技术。</p>","more":"<h1 id=\"理解函数柯里化\"><a href=\"#理解函数柯里化\" class=\"headerlink\" title=\"理解函数柯里化\"></a>理解函数柯里化</h1><p>通用函数解决兼容性问题，但是同时也会带来使用不便性，不同的应用场景旺旺要传递很多参数，已达到解决特定的目的，有时应用中，会对同一个规则进行反复使用，这样就造成了代码的重复性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">square</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> i * i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dubble</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (i *= <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">map</span>(<span class=\"params\">handeler, list</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> list.map(handeler);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 数组的每一项平方</span></span><br><span class=\"line\">map(square, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);</span><br><span class=\"line\">map(square, [<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>]);</span><br><span class=\"line\">map(square, [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数组的每一项加倍</span></span><br><span class=\"line\">map(dubble, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);</span><br><span class=\"line\">map(dubble, [<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>]);</span><br><span class=\"line\">map(dubble, [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>]);</span><br></pre></td></tr></table></figure>\n\n<p>例子中，创建了一个 map 通用函数，用于适应不同的应用场景。显然，通用性不用怀疑。同时，例子中重复传入了相同的处理函数：square 和 dubble。</p>\n<p>下面可以利用柯里化改造一下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">square</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> i * <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dubble</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (i *= <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">map</span>(<span class=\"params\">handeler, list</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> list.map(handeler);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> mapSQ = currying(map, square);</span><br><span class=\"line\">mapSQ([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);</span><br><span class=\"line\">mapSQ([<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>]);</span><br><span class=\"line\">mapSQ([<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> mapDB = currying(map, dubble);</span><br><span class=\"line\">mapDB([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);</span><br><span class=\"line\">mapDB([<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>]);</span><br><span class=\"line\">mapDB([<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>]);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> currying = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> args = [].slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>); <span class=\"comment\">// 截取arguments中的第一个生成一个数组，也就是当前语境下的明面上的合法老婆</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(args); <span class=\"comment\">//合法老婆</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将已有的参数和新传进来的参数合并为一个数组，对应已有的合法老婆和新搞定的老婆</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> newArgs = args.concat([].slice.call(<span class=\"built_in\">arguments</span>));</span><br><span class=\"line\">    <span class=\"comment\">// 将所有的参数newArgs绑定给fn~</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> fn.apply(<span class=\"literal\">null</span>, newArgs);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下面为官员如何搞定7个老婆做测试</span></span><br><span class=\"line\"><span class=\"comment\">// 获得合法老婆</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getWife = currying(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> allWife = [].slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(allWife.join(<span class=\"string\">&quot;,&quot;</span>));</span><br><span class=\"line\">&#125;, <span class=\"string\">&quot;合法老婆&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 获得其他6个老婆</span></span><br><span class=\"line\">getWife(<span class=\"string\">&quot;小老婆1&quot;</span>, <span class=\"string\">&quot;小老婆2&quot;</span>, <span class=\"string\">&quot;小老婆3&quot;</span>, <span class=\"string\">&quot;小老婆4&quot;</span>, <span class=\"string\">&quot;小老婆5&quot;</span>, <span class=\"string\">&quot;小老婆6&quot;</span>); <span class=\"comment\">//合法老婆,小老婆1&quot;, &quot;小老婆2&quot;, &quot;小老婆3&quot;, &quot;小老婆4&quot;, &quot;小老婆5&quot;, &quot;小老婆6&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 换一批老婆</span></span><br><span class=\"line\">getWife(<span class=\"string\">&quot;大老婆&quot;</span>, <span class=\"string\">&quot;小老婆&quot;</span>, <span class=\"string\">&quot;俏老婆&quot;</span>, <span class=\"string\">&quot;刁蛮老婆&quot;</span>, <span class=\"string\">&quot;乖老婆&quot;</span>, <span class=\"string\">&quot;送上门老婆&quot;</span>); <span class=\"comment\">//合法老婆,&quot;大老婆&quot;, &quot;小老婆&quot;, &quot;俏老婆&quot;, &quot;刁蛮老婆&quot;, &quot;乖老婆&quot;, &quot;送上门老婆&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 再换一批老婆</span></span><br><span class=\"line\">getWife(<span class=\"string\">&quot;超越韦小宝的老婆&quot;</span>); <span class=\"comment\">//合法老婆&quot;大老婆&quot;, &quot;小老婆&quot;, &quot;俏老婆&quot;, &quot;刁蛮老婆&quot;, &quot;乖老婆&quot;, &quot;送上门老婆&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>无论输入多少个参数嘛都会打印输出，且都会带第一个参数，上文代码<code>fn.applay(null,newArgs)</code>中的<code>null</code>本事应该制定 fn 中 this 的指向的对象，没有就用 null。</p>\n<h2 id=\"实用场景\"><a href=\"#实用场景\" class=\"headerlink\" title=\"实用场景\"></a>实用场景</h2><ul>\n<li>参数复用（上文中的合法老婆）</li>\n<li>提前返回，下面是一个兼容现代浏览器以及 IE 浏览器的事件添加方法：</li>\n</ul>\n<h3 id=\"事件添加处理\"><a href=\"#事件添加处理\" class=\"headerlink\" title=\"事件添加处理\"></a>事件添加处理</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> addEvent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, type, fn, capture</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.addEventListenner) &#123;</span><br><span class=\"line\">    el.addEventListenner(</span><br><span class=\"line\">      type,</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        fn.call(el, e);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      capture</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.attachEvent) &#123;</span><br><span class=\"line\">    el.attachEvent(<span class=\"string\">&quot;on&quot;</span> + type, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      fn.call(el, e);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在使用 addEvent 为元素添加事件的时候，（eg.IE6/IE7）都会走一遍 if–else,其实只要判定一次就可以了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> addEvent = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.addEventListenner) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, sType, fn, capture</span>) </span>&#123;</span><br><span class=\"line\">      el.addEventListenner(</span><br><span class=\"line\">        sType,</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">          fn.call(el, e);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        capture</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.attachEvert) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, sType, fn, capture</span>) </span>&#123;</span><br><span class=\"line\">      el.attachEvent(<span class=\"string\">&quot;on&quot;</span> + sType, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        fn.call(el, e);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"延时计算\"><a href=\"#延时计算\" class=\"headerlink\" title=\"延时计算\"></a>延时计算</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> curryWeigth = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> _weight = [];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> fn.applay(<span class=\"literal\">null</span>, _weight);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      _weight = _weight.concat([].slice.call(<span class=\"built_in\">arguments</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> weight = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> addWeight = curryWeight(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  len = <span class=\"built_in\">arguments</span>.length;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i; i &lt; len; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    weight += <span class=\"built_in\">arguments</span>[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">addWeidht(<span class=\"number\">2.3</span>);</span><br><span class=\"line\">addWeidht(<span class=\"number\">6.5</span>);</span><br><span class=\"line\">addWeidht(<span class=\"number\">1.2</span>);</span><br><span class=\"line\">addWeidht(); <span class=\"comment\">//到这里才开始计算</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(weight);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实际上就是利用的闭包而已</span></span><br></pre></td></tr></table></figure>"},{"title":"字符串操作方法","date":"2018-01-15T10:02:34.000Z","_content":"\n字符串常见操作方法总结\n\n<!--more-->\n\n## chartAt()\n\n返回特定位置的字符\n\n## charCodeAt()\n\n返回 0 到 65535 之间的整数，表示给定索引处的 UTF-16 代码单元。\n\n## concat()\n\n连接连个字符串文本，并返回一个新的字符串\n\n## includes()\n\n要在此字符串中搜索的字符串\n\n```javascript\n'Blue Whale'.includes('blue') //return false\nvar str = 'To be, or not to be, that is the question.';\n\nconsole.log(str.includes('To be'));       // true\n```\n\n## endsWidth()\n\n判断一个字符串的结尾收否包含其他字符串中的字符。\n\n```javascript\nvar str = 'To be,or not to be, that is the question.'\nalert(str.endsWith('question.')) // true\nalert(str.endsWith('to be')) // false\nalert(str.endsWith('to be', 19)) // true\nalert(str.endsWith('To be', 5)) // true\n```\n\n## indexOf()\n```javascript\n'Blue Whale'.indexOf('Blue');     // returns  0\n'Blue Whale'.indexOf('Blute');    // returns -1\n'Blue Whale'.indexOf('Whale', 0); // returns  5\n'Blue Whale'.indexOf('Whale', 5); // returns  5\n'Blue Whale'.indexOf('Whale', 7); // returns -1\n'Blue Whale'.indexOf('');         // returns  0\n'Blue Whale'.indexOf('', 9);      // returns  9\n'Blue Whale'.indexOf('', 10);     // returns 10\n'Blue Whale'.indexOf('', 11);     // returns 10\n'Blue Whale'.indexOf('blue'); // returns -1\n```\n## trim()\n该方法从字符串的两端删除空格。这里的空格是所有空格字符（空格，制表符，不间断空格等）和所有行结束符字符（LF，CR等）。\n```javascript\nvar orig = '   foo  ';\nconsole.log(orig.trim()); // 'foo'\n```","source":"_posts/字符串操作方法.md","raw":"---\ntitle: 字符串操作方法\ndate: 2018-01-15 18:02:34\ncategories: JavaScript\n---\n\n字符串常见操作方法总结\n\n<!--more-->\n\n## chartAt()\n\n返回特定位置的字符\n\n## charCodeAt()\n\n返回 0 到 65535 之间的整数，表示给定索引处的 UTF-16 代码单元。\n\n## concat()\n\n连接连个字符串文本，并返回一个新的字符串\n\n## includes()\n\n要在此字符串中搜索的字符串\n\n```javascript\n'Blue Whale'.includes('blue') //return false\nvar str = 'To be, or not to be, that is the question.';\n\nconsole.log(str.includes('To be'));       // true\n```\n\n## endsWidth()\n\n判断一个字符串的结尾收否包含其他字符串中的字符。\n\n```javascript\nvar str = 'To be,or not to be, that is the question.'\nalert(str.endsWith('question.')) // true\nalert(str.endsWith('to be')) // false\nalert(str.endsWith('to be', 19)) // true\nalert(str.endsWith('To be', 5)) // true\n```\n\n## indexOf()\n```javascript\n'Blue Whale'.indexOf('Blue');     // returns  0\n'Blue Whale'.indexOf('Blute');    // returns -1\n'Blue Whale'.indexOf('Whale', 0); // returns  5\n'Blue Whale'.indexOf('Whale', 5); // returns  5\n'Blue Whale'.indexOf('Whale', 7); // returns -1\n'Blue Whale'.indexOf('');         // returns  0\n'Blue Whale'.indexOf('', 9);      // returns  9\n'Blue Whale'.indexOf('', 10);     // returns 10\n'Blue Whale'.indexOf('', 11);     // returns 10\n'Blue Whale'.indexOf('blue'); // returns -1\n```\n## trim()\n该方法从字符串的两端删除空格。这里的空格是所有空格字符（空格，制表符，不间断空格等）和所有行结束符字符（LF，CR等）。\n```javascript\nvar orig = '   foo  ';\nconsole.log(orig.trim()); // 'foo'\n```","slug":"字符串操作方法","published":1,"updated":"2019-07-09T07:03:32.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmejaesi0022xcvr3ad01dtz","content":"<p>字符串常见操作方法总结</p>\n<span id=\"more\"></span>\n\n<h2 id=\"chartAt\"><a href=\"#chartAt\" class=\"headerlink\" title=\"chartAt()\"></a>chartAt()</h2><p>返回特定位置的字符</p>\n<h2 id=\"charCodeAt\"><a href=\"#charCodeAt\" class=\"headerlink\" title=\"charCodeAt()\"></a>charCodeAt()</h2><p>返回 0 到 65535 之间的整数，表示给定索引处的 UTF-16 代码单元。</p>\n<h2 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat()\"></a>concat()</h2><p>连接连个字符串文本，并返回一个新的字符串</p>\n<h2 id=\"includes\"><a href=\"#includes\" class=\"headerlink\" title=\"includes()\"></a>includes()</h2><p>要在此字符串中搜索的字符串</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;Blue Whale&#x27;</span>.includes(<span class=\"string\">&#x27;blue&#x27;</span>) <span class=\"comment\">//return false</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;To be, or not to be, that is the question.&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.includes(<span class=\"string\">&#x27;To be&#x27;</span>));       <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"endsWidth\"><a href=\"#endsWidth\" class=\"headerlink\" title=\"endsWidth()\"></a>endsWidth()</h2><p>判断一个字符串的结尾收否包含其他字符串中的字符。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;To be,or not to be, that is the question.&#x27;</span></span><br><span class=\"line\">alert(str.endsWith(<span class=\"string\">&#x27;question.&#x27;</span>)) <span class=\"comment\">// true</span></span><br><span class=\"line\">alert(str.endsWith(<span class=\"string\">&#x27;to be&#x27;</span>)) <span class=\"comment\">// false</span></span><br><span class=\"line\">alert(str.endsWith(<span class=\"string\">&#x27;to be&#x27;</span>, <span class=\"number\">19</span>)) <span class=\"comment\">// true</span></span><br><span class=\"line\">alert(str.endsWith(<span class=\"string\">&#x27;To be&#x27;</span>, <span class=\"number\">5</span>)) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"indexOf\"><a href=\"#indexOf\" class=\"headerlink\" title=\"indexOf()\"></a>indexOf()</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;Blue Whale&#x27;</span>.indexOf(<span class=\"string\">&#x27;Blue&#x27;</span>);     <span class=\"comment\">// returns  0</span></span><br><span class=\"line\"><span class=\"string\">&#x27;Blue Whale&#x27;</span>.indexOf(<span class=\"string\">&#x27;Blute&#x27;</span>);    <span class=\"comment\">// returns -1</span></span><br><span class=\"line\"><span class=\"string\">&#x27;Blue Whale&#x27;</span>.indexOf(<span class=\"string\">&#x27;Whale&#x27;</span>, <span class=\"number\">0</span>); <span class=\"comment\">// returns  5</span></span><br><span class=\"line\"><span class=\"string\">&#x27;Blue Whale&#x27;</span>.indexOf(<span class=\"string\">&#x27;Whale&#x27;</span>, <span class=\"number\">5</span>); <span class=\"comment\">// returns  5</span></span><br><span class=\"line\"><span class=\"string\">&#x27;Blue Whale&#x27;</span>.indexOf(<span class=\"string\">&#x27;Whale&#x27;</span>, <span class=\"number\">7</span>); <span class=\"comment\">// returns -1</span></span><br><span class=\"line\"><span class=\"string\">&#x27;Blue Whale&#x27;</span>.indexOf(<span class=\"string\">&#x27;&#x27;</span>);         <span class=\"comment\">// returns  0</span></span><br><span class=\"line\"><span class=\"string\">&#x27;Blue Whale&#x27;</span>.indexOf(<span class=\"string\">&#x27;&#x27;</span>, <span class=\"number\">9</span>);      <span class=\"comment\">// returns  9</span></span><br><span class=\"line\"><span class=\"string\">&#x27;Blue Whale&#x27;</span>.indexOf(<span class=\"string\">&#x27;&#x27;</span>, <span class=\"number\">10</span>);     <span class=\"comment\">// returns 10</span></span><br><span class=\"line\"><span class=\"string\">&#x27;Blue Whale&#x27;</span>.indexOf(<span class=\"string\">&#x27;&#x27;</span>, <span class=\"number\">11</span>);     <span class=\"comment\">// returns 10</span></span><br><span class=\"line\"><span class=\"string\">&#x27;Blue Whale&#x27;</span>.indexOf(<span class=\"string\">&#x27;blue&#x27;</span>); <span class=\"comment\">// returns -1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"trim\"><a href=\"#trim\" class=\"headerlink\" title=\"trim()\"></a>trim()</h2><p>该方法从字符串的两端删除空格。这里的空格是所有空格字符（空格，制表符，不间断空格等）和所有行结束符字符（LF，CR等）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> orig = <span class=\"string\">&#x27;   foo  &#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(orig.trim()); <span class=\"comment\">// &#x27;foo&#x27;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>字符串常见操作方法总结</p>","more":"<h2 id=\"chartAt\"><a href=\"#chartAt\" class=\"headerlink\" title=\"chartAt()\"></a>chartAt()</h2><p>返回特定位置的字符</p>\n<h2 id=\"charCodeAt\"><a href=\"#charCodeAt\" class=\"headerlink\" title=\"charCodeAt()\"></a>charCodeAt()</h2><p>返回 0 到 65535 之间的整数，表示给定索引处的 UTF-16 代码单元。</p>\n<h2 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat()\"></a>concat()</h2><p>连接连个字符串文本，并返回一个新的字符串</p>\n<h2 id=\"includes\"><a href=\"#includes\" class=\"headerlink\" title=\"includes()\"></a>includes()</h2><p>要在此字符串中搜索的字符串</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;Blue Whale&#x27;</span>.includes(<span class=\"string\">&#x27;blue&#x27;</span>) <span class=\"comment\">//return false</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;To be, or not to be, that is the question.&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.includes(<span class=\"string\">&#x27;To be&#x27;</span>));       <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"endsWidth\"><a href=\"#endsWidth\" class=\"headerlink\" title=\"endsWidth()\"></a>endsWidth()</h2><p>判断一个字符串的结尾收否包含其他字符串中的字符。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;To be,or not to be, that is the question.&#x27;</span></span><br><span class=\"line\">alert(str.endsWith(<span class=\"string\">&#x27;question.&#x27;</span>)) <span class=\"comment\">// true</span></span><br><span class=\"line\">alert(str.endsWith(<span class=\"string\">&#x27;to be&#x27;</span>)) <span class=\"comment\">// false</span></span><br><span class=\"line\">alert(str.endsWith(<span class=\"string\">&#x27;to be&#x27;</span>, <span class=\"number\">19</span>)) <span class=\"comment\">// true</span></span><br><span class=\"line\">alert(str.endsWith(<span class=\"string\">&#x27;To be&#x27;</span>, <span class=\"number\">5</span>)) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"indexOf\"><a href=\"#indexOf\" class=\"headerlink\" title=\"indexOf()\"></a>indexOf()</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;Blue Whale&#x27;</span>.indexOf(<span class=\"string\">&#x27;Blue&#x27;</span>);     <span class=\"comment\">// returns  0</span></span><br><span class=\"line\"><span class=\"string\">&#x27;Blue Whale&#x27;</span>.indexOf(<span class=\"string\">&#x27;Blute&#x27;</span>);    <span class=\"comment\">// returns -1</span></span><br><span class=\"line\"><span class=\"string\">&#x27;Blue Whale&#x27;</span>.indexOf(<span class=\"string\">&#x27;Whale&#x27;</span>, <span class=\"number\">0</span>); <span class=\"comment\">// returns  5</span></span><br><span class=\"line\"><span class=\"string\">&#x27;Blue Whale&#x27;</span>.indexOf(<span class=\"string\">&#x27;Whale&#x27;</span>, <span class=\"number\">5</span>); <span class=\"comment\">// returns  5</span></span><br><span class=\"line\"><span class=\"string\">&#x27;Blue Whale&#x27;</span>.indexOf(<span class=\"string\">&#x27;Whale&#x27;</span>, <span class=\"number\">7</span>); <span class=\"comment\">// returns -1</span></span><br><span class=\"line\"><span class=\"string\">&#x27;Blue Whale&#x27;</span>.indexOf(<span class=\"string\">&#x27;&#x27;</span>);         <span class=\"comment\">// returns  0</span></span><br><span class=\"line\"><span class=\"string\">&#x27;Blue Whale&#x27;</span>.indexOf(<span class=\"string\">&#x27;&#x27;</span>, <span class=\"number\">9</span>);      <span class=\"comment\">// returns  9</span></span><br><span class=\"line\"><span class=\"string\">&#x27;Blue Whale&#x27;</span>.indexOf(<span class=\"string\">&#x27;&#x27;</span>, <span class=\"number\">10</span>);     <span class=\"comment\">// returns 10</span></span><br><span class=\"line\"><span class=\"string\">&#x27;Blue Whale&#x27;</span>.indexOf(<span class=\"string\">&#x27;&#x27;</span>, <span class=\"number\">11</span>);     <span class=\"comment\">// returns 10</span></span><br><span class=\"line\"><span class=\"string\">&#x27;Blue Whale&#x27;</span>.indexOf(<span class=\"string\">&#x27;blue&#x27;</span>); <span class=\"comment\">// returns -1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"trim\"><a href=\"#trim\" class=\"headerlink\" title=\"trim()\"></a>trim()</h2><p>该方法从字符串的两端删除空格。这里的空格是所有空格字符（空格，制表符，不间断空格等）和所有行结束符字符（LF，CR等）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> orig = <span class=\"string\">&#x27;   foo  &#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(orig.trim()); <span class=\"comment\">// &#x27;foo&#x27;</span></span><br></pre></td></tr></table></figure>"},{"title":"如何实现双向数据绑定 mvvm","date":"2017-11-09T08:52:42.000Z","_content":"\n目前几种主流的 mvc(vm) 框架都实现了单向数据绑定，而我所理解的双向数据绑定无非就是在单向绑定的基础上给可输入元素（input 、 textare 等）添加了 change(input) 事件，来动态修改 model 和 view，并没有多高深。所以无需太过介怀是实现的单向或双向绑定。\n\n<!--more-->\n\n实现数据双向绑定的集中做法大致如下：\n\n- 发布者 - 订阅者模式（backbone.js ）\n\n- 脏值检查（angular.js ）\n\n- 数据劫持（vue.js ）\n\n## vue 的响应式原理\n\nvue 内部使用腊肉 object.defineProperty() 来实现数据响应式，通过这个函数可以监听到 set 和 get 的事件\n\n1. 首先利用 object.defineproperty()给 data 中的属性去设置 set,get 事件\n2. 递归的去把 data 中的每一个属性注册给被观察者。\n3. 解析模板时，在属性的 get 事件中去收集观察者依赖。\n4. 当属性的值发生改变时，在 set 时间中去通知每一个观察者，做到全部更新。\n\n## 数据劫持 :\n\nvue.js 则是采用数据劫持结合发布者 - 订阅者模式的方式，通过 Object.defineProperty() 来劫持各个属性的 setter，getter ，在数据变动时发布消息给订阅者，触发相应的监听回调。\n\n## 1 、实现 Observer\n\nok, 思路已经整理完毕，也已经比较明确相关逻辑和模块功能了，let’s do it\n\n### 实现监听\n\n我们知道可以利用 Obeject.defineProperty() 来监听属性变动那么将需要 observe 的数据对象进行递归遍历，包括子属性的属性，都加上 set 和 get 这样的话，给这个对象的某个值赋值，就会触发 set，那么就能监听到了数据变化。。相关代码可以是这样：\n\n```javascript\nvar data = {name:'kindeng'};\nobserve(data);\ndata.name = 'dmq'; //监听到值得变化 kindeng -->dmq\nfunction observe(data){\n  if(!data||typeof data !== 'object){\n    //[]、{}\n    return;\n  }\n  object.key(data).forEach(function(key)){\n    defineReactive(data,key,data[key]);\n  }\n}\n\nfunction defineReactive(data,key,val){\n  observe(val);//监听子属性\n\n  //循环将data 中的每一个元素都绑定上数据劫持\n  Object.defineProperty(data,key,{\n    enumerable:true,\n    //可枚举\n    configurable:false,\n    //如果为false，则任何尝试删除目标属性或修改属性以下特性（writable, configurable, enumerable）的行为将被无效化\n    get:function(){\n    return val;\n    },\n    set:function(){\n         console.log('值变');\n         val = newVal ;\n    }\n  })\n}\n```\n\n## 数据观测的实现\n\n### Angular\n\nAngular 的数据监测采用的是 “ 脏值检测 ”，每一个指令都会有一个对应的的用来观察到对象的变化，这个应用叫做叫做 watcher，一个作用域中可能有多个 watcher，当数据发生改变，页面更新，Angular 会遍历当前页面中的所有 watcher，对他们一一求值，与之前的值进行对比，如果求值的结果变化了，就会触发对应的更新，这个过程叫做 digest cycle。脏值检测的劣势有两点：\n\n1. 任何数据变动都意味着当前作用域的每一个 watcher 需要被重新求值，且同一时间只允许一个 digest 运行，因此当 watcher 庞大时，应用性能就不可避免的收到影响，并且很难优化。\n2. 当数据变化时，框架并不能主动监测到变化的产生，需要手动触发 digest cycle 才能触发相应的 DOM 更新。Angular 通过在 DOM 事件处理函数中自动触发 digest cycle 部分避免了这个问题，但还是有很多情况下需要用户手动进行触发。\n\n#### \\$watch 对象\n\nAngular 每一个绑定到 UI 的数据，就会有一 \\$watch 对象这个对象包含 3 个值\n\n```javascript\nwatch = {\n  name: '',\n  getNewValue: function($scope) {\n    //得到新值\n    return newValue;\n  },\n  listener: function(newValue, oldValue) {\n    //当数据发生变化时\n  }\n};\n```\n\ngetNewValue() 可以得到当前 \\$scope 上的最新值，listener 函数得到新值和旧值并进行一些操作。\n\n每当我们将数据绑定到 UI 上，angular 就会想你的 watchList 上插入一个 \\$watch\n\n\\*\\* 只有触发 UI 事件，ajax 请求或者 timeout 等回调操作，而数据到界面的呈现则是由脏检查来做。\n\n### Vue\n\nvue 采用的则是基于依赖收集的观测机制，也就是数据劫持，它的基本原理是：\n\n1. 将原生的数据改造成 “ 可观察对象 ”。一个可观察对象可以被取值也可以被赋值。\n2. 在 watcher 的求值过程中，每一个被取值的可观察对象都都会将当前的 watcher 注册为自己的一个订阅者，并成为当前的 watcher 的一个依赖。\n3. 当一个被依赖的可观察对象被赋值时，它会通知所有订阅自己的 watcher 重新求值，并触发相应的更新。\n4. 依赖收集的有点在于可以精准、主动地追踪数据的变化，不存在上述提到的脏检查的两个问题。但传统的依赖收集实现，比如 Knockout, 通常需要包裹原生数据来制造可观察对象，在取值和赋值时需要采用函数的调用形式，在进行数据操作时写法繁琐，不够直观，对复杂嵌套结构的对象支持也不理想。\n","source":"_posts/如何实现双向数据绑定-mvvm.md","raw":"---\ntitle: 如何实现双向数据绑定 mvvm\ndate: 2017-11-9 16:52:42\ncategories: Vue\n---\n\n目前几种主流的 mvc(vm) 框架都实现了单向数据绑定，而我所理解的双向数据绑定无非就是在单向绑定的基础上给可输入元素（input 、 textare 等）添加了 change(input) 事件，来动态修改 model 和 view，并没有多高深。所以无需太过介怀是实现的单向或双向绑定。\n\n<!--more-->\n\n实现数据双向绑定的集中做法大致如下：\n\n- 发布者 - 订阅者模式（backbone.js ）\n\n- 脏值检查（angular.js ）\n\n- 数据劫持（vue.js ）\n\n## vue 的响应式原理\n\nvue 内部使用腊肉 object.defineProperty() 来实现数据响应式，通过这个函数可以监听到 set 和 get 的事件\n\n1. 首先利用 object.defineproperty()给 data 中的属性去设置 set,get 事件\n2. 递归的去把 data 中的每一个属性注册给被观察者。\n3. 解析模板时，在属性的 get 事件中去收集观察者依赖。\n4. 当属性的值发生改变时，在 set 时间中去通知每一个观察者，做到全部更新。\n\n## 数据劫持 :\n\nvue.js 则是采用数据劫持结合发布者 - 订阅者模式的方式，通过 Object.defineProperty() 来劫持各个属性的 setter，getter ，在数据变动时发布消息给订阅者，触发相应的监听回调。\n\n## 1 、实现 Observer\n\nok, 思路已经整理完毕，也已经比较明确相关逻辑和模块功能了，let’s do it\n\n### 实现监听\n\n我们知道可以利用 Obeject.defineProperty() 来监听属性变动那么将需要 observe 的数据对象进行递归遍历，包括子属性的属性，都加上 set 和 get 这样的话，给这个对象的某个值赋值，就会触发 set，那么就能监听到了数据变化。。相关代码可以是这样：\n\n```javascript\nvar data = {name:'kindeng'};\nobserve(data);\ndata.name = 'dmq'; //监听到值得变化 kindeng -->dmq\nfunction observe(data){\n  if(!data||typeof data !== 'object){\n    //[]、{}\n    return;\n  }\n  object.key(data).forEach(function(key)){\n    defineReactive(data,key,data[key]);\n  }\n}\n\nfunction defineReactive(data,key,val){\n  observe(val);//监听子属性\n\n  //循环将data 中的每一个元素都绑定上数据劫持\n  Object.defineProperty(data,key,{\n    enumerable:true,\n    //可枚举\n    configurable:false,\n    //如果为false，则任何尝试删除目标属性或修改属性以下特性（writable, configurable, enumerable）的行为将被无效化\n    get:function(){\n    return val;\n    },\n    set:function(){\n         console.log('值变');\n         val = newVal ;\n    }\n  })\n}\n```\n\n## 数据观测的实现\n\n### Angular\n\nAngular 的数据监测采用的是 “ 脏值检测 ”，每一个指令都会有一个对应的的用来观察到对象的变化，这个应用叫做叫做 watcher，一个作用域中可能有多个 watcher，当数据发生改变，页面更新，Angular 会遍历当前页面中的所有 watcher，对他们一一求值，与之前的值进行对比，如果求值的结果变化了，就会触发对应的更新，这个过程叫做 digest cycle。脏值检测的劣势有两点：\n\n1. 任何数据变动都意味着当前作用域的每一个 watcher 需要被重新求值，且同一时间只允许一个 digest 运行，因此当 watcher 庞大时，应用性能就不可避免的收到影响，并且很难优化。\n2. 当数据变化时，框架并不能主动监测到变化的产生，需要手动触发 digest cycle 才能触发相应的 DOM 更新。Angular 通过在 DOM 事件处理函数中自动触发 digest cycle 部分避免了这个问题，但还是有很多情况下需要用户手动进行触发。\n\n#### \\$watch 对象\n\nAngular 每一个绑定到 UI 的数据，就会有一 \\$watch 对象这个对象包含 3 个值\n\n```javascript\nwatch = {\n  name: '',\n  getNewValue: function($scope) {\n    //得到新值\n    return newValue;\n  },\n  listener: function(newValue, oldValue) {\n    //当数据发生变化时\n  }\n};\n```\n\ngetNewValue() 可以得到当前 \\$scope 上的最新值，listener 函数得到新值和旧值并进行一些操作。\n\n每当我们将数据绑定到 UI 上，angular 就会想你的 watchList 上插入一个 \\$watch\n\n\\*\\* 只有触发 UI 事件，ajax 请求或者 timeout 等回调操作，而数据到界面的呈现则是由脏检查来做。\n\n### Vue\n\nvue 采用的则是基于依赖收集的观测机制，也就是数据劫持，它的基本原理是：\n\n1. 将原生的数据改造成 “ 可观察对象 ”。一个可观察对象可以被取值也可以被赋值。\n2. 在 watcher 的求值过程中，每一个被取值的可观察对象都都会将当前的 watcher 注册为自己的一个订阅者，并成为当前的 watcher 的一个依赖。\n3. 当一个被依赖的可观察对象被赋值时，它会通知所有订阅自己的 watcher 重新求值，并触发相应的更新。\n4. 依赖收集的有点在于可以精准、主动地追踪数据的变化，不存在上述提到的脏检查的两个问题。但传统的依赖收集实现，比如 Knockout, 通常需要包裹原生数据来制造可观察对象，在取值和赋值时需要采用函数的调用形式，在进行数据操作时写法繁琐，不够直观，对复杂嵌套结构的对象支持也不理想。\n","slug":"如何实现双向数据绑定-mvvm","published":1,"updated":"2021-03-01T03:47:26.027Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmejaesj0025xcvrcleybi9a","content":"<p>目前几种主流的 mvc(vm) 框架都实现了单向数据绑定，而我所理解的双向数据绑定无非就是在单向绑定的基础上给可输入元素（input 、 textare 等）添加了 change(input) 事件，来动态修改 model 和 view，并没有多高深。所以无需太过介怀是实现的单向或双向绑定。</p>\n<span id=\"more\"></span>\n\n<p>实现数据双向绑定的集中做法大致如下：</p>\n<ul>\n<li><p>发布者 - 订阅者模式（backbone.js ）</p>\n</li>\n<li><p>脏值检查（angular.js ）</p>\n</li>\n<li><p>数据劫持（vue.js ）</p>\n</li>\n</ul>\n<h2 id=\"vue-的响应式原理\"><a href=\"#vue-的响应式原理\" class=\"headerlink\" title=\"vue 的响应式原理\"></a>vue 的响应式原理</h2><p>vue 内部使用腊肉 object.defineProperty() 来实现数据响应式，通过这个函数可以监听到 set 和 get 的事件</p>\n<ol>\n<li>首先利用 object.defineproperty()给 data 中的属性去设置 set,get 事件</li>\n<li>递归的去把 data 中的每一个属性注册给被观察者。</li>\n<li>解析模板时，在属性的 get 事件中去收集观察者依赖。</li>\n<li>当属性的值发生改变时，在 set 时间中去通知每一个观察者，做到全部更新。</li>\n</ol>\n<h2 id=\"数据劫持\"><a href=\"#数据劫持\" class=\"headerlink\" title=\"数据劫持 :\"></a>数据劫持 :</h2><p>vue.js 则是采用数据劫持结合发布者 - 订阅者模式的方式，通过 Object.defineProperty() 来劫持各个属性的 setter，getter ，在数据变动时发布消息给订阅者，触发相应的监听回调。</p>\n<h2 id=\"1-、实现-Observer\"><a href=\"#1-、实现-Observer\" class=\"headerlink\" title=\"1 、实现 Observer\"></a>1 、实现 Observer</h2><p>ok, 思路已经整理完毕，也已经比较明确相关逻辑和模块功能了，let’s do it</p>\n<h3 id=\"实现监听\"><a href=\"#实现监听\" class=\"headerlink\" title=\"实现监听\"></a>实现监听</h3><p>我们知道可以利用 Obeject.defineProperty() 来监听属性变动那么将需要 observe 的数据对象进行递归遍历，包括子属性的属性，都加上 set 和 get 这样的话，给这个对象的某个值赋值，就会触发 set，那么就能监听到了数据变化。。相关代码可以是这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;kindeng&#x27;</span>&#125;;</span><br><span class=\"line\">observe(data);</span><br><span class=\"line\">data.name = <span class=\"string\">&#x27;dmq&#x27;</span>; <span class=\"comment\">//监听到值得变化 kindeng --&gt;dmq</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observe</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!data||<span class=\"keyword\">typeof</span> data !== <span class=\"string\">&#x27;object)&#123;</span></span><br><span class=\"line\"><span class=\"string\">    //[]、&#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\">    return;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">  object.key(data).forEach(function(key))&#123;</span></span><br><span class=\"line\"><span class=\"string\">    defineReactive(data,key,data[key]);</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function defineReactive(data,key,val)&#123;</span></span><br><span class=\"line\"><span class=\"string\">  observe(val);//监听子属性</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  //循环将data 中的每一个元素都绑定上数据劫持</span></span><br><span class=\"line\"><span class=\"string\">  Object.defineProperty(data,key,&#123;</span></span><br><span class=\"line\"><span class=\"string\">    enumerable:true,</span></span><br><span class=\"line\"><span class=\"string\">    //可枚举</span></span><br><span class=\"line\"><span class=\"string\">    configurable:false,</span></span><br><span class=\"line\"><span class=\"string\">    //如果为false，则任何尝试删除目标属性或修改属性以下特性（writable, configurable, enumerable）的行为将被无效化</span></span><br><span class=\"line\"><span class=\"string\">    get:function()&#123;</span></span><br><span class=\"line\"><span class=\"string\">    return val;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;,</span></span><br><span class=\"line\"><span class=\"string\">    set:function()&#123;</span></span><br><span class=\"line\"><span class=\"string\">         console.log(&#x27;</span>值变<span class=\"string\">&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">         val = newVal ;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;)</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据观测的实现\"><a href=\"#数据观测的实现\" class=\"headerlink\" title=\"数据观测的实现\"></a>数据观测的实现</h2><h3 id=\"Angular\"><a href=\"#Angular\" class=\"headerlink\" title=\"Angular\"></a>Angular</h3><p>Angular 的数据监测采用的是 “ 脏值检测 ”，每一个指令都会有一个对应的的用来观察到对象的变化，这个应用叫做叫做 watcher，一个作用域中可能有多个 watcher，当数据发生改变，页面更新，Angular 会遍历当前页面中的所有 watcher，对他们一一求值，与之前的值进行对比，如果求值的结果变化了，就会触发对应的更新，这个过程叫做 digest cycle。脏值检测的劣势有两点：</p>\n<ol>\n<li>任何数据变动都意味着当前作用域的每一个 watcher 需要被重新求值，且同一时间只允许一个 digest 运行，因此当 watcher 庞大时，应用性能就不可避免的收到影响，并且很难优化。</li>\n<li>当数据变化时，框架并不能主动监测到变化的产生，需要手动触发 digest cycle 才能触发相应的 DOM 更新。Angular 通过在 DOM 事件处理函数中自动触发 digest cycle 部分避免了这个问题，但还是有很多情况下需要用户手动进行触发。</li>\n</ol>\n<h4 id=\"watch-对象\"><a href=\"#watch-对象\" class=\"headerlink\" title=\"$watch 对象\"></a>$watch 对象</h4><p>Angular 每一个绑定到 UI 的数据，就会有一 $watch 对象这个对象包含 3 个值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  getNewValue: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//得到新值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> newValue;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  listener: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newValue, oldValue</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//当数据发生变化时</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>getNewValue() 可以得到当前 $scope 上的最新值，listener 函数得到新值和旧值并进行一些操作。</p>\n<p>每当我们将数据绑定到 UI 上，angular 就会想你的 watchList 上插入一个 $watch</p>\n<p>** 只有触发 UI 事件，ajax 请求或者 timeout 等回调操作，而数据到界面的呈现则是由脏检查来做。</p>\n<h3 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h3><p>vue 采用的则是基于依赖收集的观测机制，也就是数据劫持，它的基本原理是：</p>\n<ol>\n<li>将原生的数据改造成 “ 可观察对象 ”。一个可观察对象可以被取值也可以被赋值。</li>\n<li>在 watcher 的求值过程中，每一个被取值的可观察对象都都会将当前的 watcher 注册为自己的一个订阅者，并成为当前的 watcher 的一个依赖。</li>\n<li>当一个被依赖的可观察对象被赋值时，它会通知所有订阅自己的 watcher 重新求值，并触发相应的更新。</li>\n<li>依赖收集的有点在于可以精准、主动地追踪数据的变化，不存在上述提到的脏检查的两个问题。但传统的依赖收集实现，比如 Knockout, 通常需要包裹原生数据来制造可观察对象，在取值和赋值时需要采用函数的调用形式，在进行数据操作时写法繁琐，不够直观，对复杂嵌套结构的对象支持也不理想。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>目前几种主流的 mvc(vm) 框架都实现了单向数据绑定，而我所理解的双向数据绑定无非就是在单向绑定的基础上给可输入元素（input 、 textare 等）添加了 change(input) 事件，来动态修改 model 和 view，并没有多高深。所以无需太过介怀是实现的单向或双向绑定。</p>","more":"<p>实现数据双向绑定的集中做法大致如下：</p>\n<ul>\n<li><p>发布者 - 订阅者模式（backbone.js ）</p>\n</li>\n<li><p>脏值检查（angular.js ）</p>\n</li>\n<li><p>数据劫持（vue.js ）</p>\n</li>\n</ul>\n<h2 id=\"vue-的响应式原理\"><a href=\"#vue-的响应式原理\" class=\"headerlink\" title=\"vue 的响应式原理\"></a>vue 的响应式原理</h2><p>vue 内部使用腊肉 object.defineProperty() 来实现数据响应式，通过这个函数可以监听到 set 和 get 的事件</p>\n<ol>\n<li>首先利用 object.defineproperty()给 data 中的属性去设置 set,get 事件</li>\n<li>递归的去把 data 中的每一个属性注册给被观察者。</li>\n<li>解析模板时，在属性的 get 事件中去收集观察者依赖。</li>\n<li>当属性的值发生改变时，在 set 时间中去通知每一个观察者，做到全部更新。</li>\n</ol>\n<h2 id=\"数据劫持\"><a href=\"#数据劫持\" class=\"headerlink\" title=\"数据劫持 :\"></a>数据劫持 :</h2><p>vue.js 则是采用数据劫持结合发布者 - 订阅者模式的方式，通过 Object.defineProperty() 来劫持各个属性的 setter，getter ，在数据变动时发布消息给订阅者，触发相应的监听回调。</p>\n<h2 id=\"1-、实现-Observer\"><a href=\"#1-、实现-Observer\" class=\"headerlink\" title=\"1 、实现 Observer\"></a>1 、实现 Observer</h2><p>ok, 思路已经整理完毕，也已经比较明确相关逻辑和模块功能了，let’s do it</p>\n<h3 id=\"实现监听\"><a href=\"#实现监听\" class=\"headerlink\" title=\"实现监听\"></a>实现监听</h3><p>我们知道可以利用 Obeject.defineProperty() 来监听属性变动那么将需要 observe 的数据对象进行递归遍历，包括子属性的属性，都加上 set 和 get 这样的话，给这个对象的某个值赋值，就会触发 set，那么就能监听到了数据变化。。相关代码可以是这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;kindeng&#x27;</span>&#125;;</span><br><span class=\"line\">observe(data);</span><br><span class=\"line\">data.name = <span class=\"string\">&#x27;dmq&#x27;</span>; <span class=\"comment\">//监听到值得变化 kindeng --&gt;dmq</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observe</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!data||<span class=\"keyword\">typeof</span> data !== <span class=\"string\">&#x27;object)&#123;</span></span><br><span class=\"line\"><span class=\"string\">    //[]、&#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\">    return;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">  object.key(data).forEach(function(key))&#123;</span></span><br><span class=\"line\"><span class=\"string\">    defineReactive(data,key,data[key]);</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function defineReactive(data,key,val)&#123;</span></span><br><span class=\"line\"><span class=\"string\">  observe(val);//监听子属性</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  //循环将data 中的每一个元素都绑定上数据劫持</span></span><br><span class=\"line\"><span class=\"string\">  Object.defineProperty(data,key,&#123;</span></span><br><span class=\"line\"><span class=\"string\">    enumerable:true,</span></span><br><span class=\"line\"><span class=\"string\">    //可枚举</span></span><br><span class=\"line\"><span class=\"string\">    configurable:false,</span></span><br><span class=\"line\"><span class=\"string\">    //如果为false，则任何尝试删除目标属性或修改属性以下特性（writable, configurable, enumerable）的行为将被无效化</span></span><br><span class=\"line\"><span class=\"string\">    get:function()&#123;</span></span><br><span class=\"line\"><span class=\"string\">    return val;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;,</span></span><br><span class=\"line\"><span class=\"string\">    set:function()&#123;</span></span><br><span class=\"line\"><span class=\"string\">         console.log(&#x27;</span>值变<span class=\"string\">&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">         val = newVal ;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;)</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据观测的实现\"><a href=\"#数据观测的实现\" class=\"headerlink\" title=\"数据观测的实现\"></a>数据观测的实现</h2><h3 id=\"Angular\"><a href=\"#Angular\" class=\"headerlink\" title=\"Angular\"></a>Angular</h3><p>Angular 的数据监测采用的是 “ 脏值检测 ”，每一个指令都会有一个对应的的用来观察到对象的变化，这个应用叫做叫做 watcher，一个作用域中可能有多个 watcher，当数据发生改变，页面更新，Angular 会遍历当前页面中的所有 watcher，对他们一一求值，与之前的值进行对比，如果求值的结果变化了，就会触发对应的更新，这个过程叫做 digest cycle。脏值检测的劣势有两点：</p>\n<ol>\n<li>任何数据变动都意味着当前作用域的每一个 watcher 需要被重新求值，且同一时间只允许一个 digest 运行，因此当 watcher 庞大时，应用性能就不可避免的收到影响，并且很难优化。</li>\n<li>当数据变化时，框架并不能主动监测到变化的产生，需要手动触发 digest cycle 才能触发相应的 DOM 更新。Angular 通过在 DOM 事件处理函数中自动触发 digest cycle 部分避免了这个问题，但还是有很多情况下需要用户手动进行触发。</li>\n</ol>\n<h4 id=\"watch-对象\"><a href=\"#watch-对象\" class=\"headerlink\" title=\"$watch 对象\"></a>$watch 对象</h4><p>Angular 每一个绑定到 UI 的数据，就会有一 $watch 对象这个对象包含 3 个值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  getNewValue: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//得到新值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> newValue;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  listener: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newValue, oldValue</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//当数据发生变化时</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>getNewValue() 可以得到当前 $scope 上的最新值，listener 函数得到新值和旧值并进行一些操作。</p>\n<p>每当我们将数据绑定到 UI 上，angular 就会想你的 watchList 上插入一个 $watch</p>\n<p>** 只有触发 UI 事件，ajax 请求或者 timeout 等回调操作，而数据到界面的呈现则是由脏检查来做。</p>\n<h3 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h3><p>vue 采用的则是基于依赖收集的观测机制，也就是数据劫持，它的基本原理是：</p>\n<ol>\n<li>将原生的数据改造成 “ 可观察对象 ”。一个可观察对象可以被取值也可以被赋值。</li>\n<li>在 watcher 的求值过程中，每一个被取值的可观察对象都都会将当前的 watcher 注册为自己的一个订阅者，并成为当前的 watcher 的一个依赖。</li>\n<li>当一个被依赖的可观察对象被赋值时，它会通知所有订阅自己的 watcher 重新求值，并触发相应的更新。</li>\n<li>依赖收集的有点在于可以精准、主动地追踪数据的变化，不存在上述提到的脏检查的两个问题。但传统的依赖收集实现，比如 Knockout, 通常需要包裹原生数据来制造可观察对象，在取值和赋值时需要采用函数的调用形式，在进行数据操作时写法繁琐，不够直观，对复杂嵌套结构的对象支持也不理想。</li>\n</ol>"},{"title":"工作中所遇到的问题","date":"2019-03-11T08:06:45.000Z","_content":"\n记录一下自己在工作中所遇到的问题及及解决方案\n\n<!--more-->\n\n## 本地开发 跨域 (基础)\n\n在本地开发 请求线上的接口时 会遇到跨域的问题 那时如何解决的呢？\n\n-   使用 `chrome` 浏览器的跨域设置 （适用与不使用 webpack 打包的项目）\n-   webpack 配置 `proxyConfig`设置代理\n-   使用 Nginx 等反向代理工具\n-   使用 fiddler 等拦截转发工具\n\n## 查找对象或者中是否有存在某个值\n\n1. `indexOf(1)`;\n   对于浅数组使用好用，对于复杂数组，数组嵌套对象再嵌套数组 且是动态取值比较的 用 indexOf 就难比较，因为 indexOf 计较的值一旦索引发生了改变就没有办法比较是否存在某一个对象了。这种情况 将数组进行 JSON.stringfy 后再 indexOf 就可以解决了\n2. `arr.find()`\n   数组实例的`find()`用于查找目标元素，查不到返回 `undefined`\n3. 对象中直接使用`array[kry]`调用，若没有则会返回`undefined`且不会报错。\n\n## 用 jQuery 实现多品类购买的购物车\n\n1. 在页面中能对单个物品进行加减并加入到购物车的操作，保证购物车物品的唯一，最新的特性，考虑到这个情况，是用一下思路解决的：\n\n    - 在点击物品时将物品的单个信息对象保存下来，加减时操作信息对象\n    - 点击加入购物车时，将信息对象的 id 拿出来当成对象的 key 值添加到对象中，利用对象 key 的唯一性，且能更好的进行覆盖和删除操作。\n    - 在整个流程中利用数组对象的指针特性，改变其中的某一个值影响到原本的对象，保证了多个视图层的数据统一性。\n\n2. 考虑到页面中能进行筛选和搜索（都是从后台重新拿取的数据），重新渲染物品列表导致原本的购物数量的信息丢失。\n\n    - 在从接口获取数组列表时，就比对原本的购物车列表，再进行刷新渲染\n\n3. 因为使用的 jquery,所以想封装一个组件，组件中 监听一个 click 事件 并且可以执行相应的回调， 当时用的事件委托 ，暂时还不知道怎么封装，类似于商品列表的加减器和购物车列表的加减器\n\n## 通过 script 单独引入 vue.js\n\n最开始接触 vue.js 时，最开始有两个使用途径，一个是 vue-cli 脚手架的单页应用，一个是通过 script 单链引入的形式。\n\n在使用单链的时候在进入首屏时，遇到过如下问题：\n\n-   页面中会出现 vue 的未解析的符号，例如&#123;&#123;&#125;&#125;和初始样式。\n-   当 js 判断再引入主题皮肤 css 时，会有很大一段时间是原始样式在突然过度到皮肤样式，不够美观，而且很奇怪\n\n当时没有想清楚，然后搁置之后就忘记了这个问题，如今又要负责这种单链的页面，又遭遇了一样的问题，才惊觉其原因：\n首先我们将 vue.min.js 在 body 后面才引入的，把 vue.min.js 放在 head 中就可以解决了出现未解析的符号这个问题。是由于加载 html 之后还没有加载 js 对页面进行解析才出现了这个问题\n\n那未初始化的样式该如何解决呢？\n在以前是通过操作 css 来解决的，\n\n-   最开始默认样式是 display：none 通过 js 控制 class 而不是直接通过 v-show 操作。相当于 v-show v-if 全部不用。（好痛苦啊这种方案）。\n-   还有一种是加 loading，在 creat 里面 loading 结束。\n\nv-show\\v-if 是无法操作 css 样式为 display：none 的元素的。\n\n而且单链的形式都没有办法用 es6 和封装组件，没有成熟的生态圈。这种开发方式太痛苦了，最可怕的是单链 vue+前后不分离。。。。我选择死亡。而且单链这种模式如何封装组件呢？这是个问题。\n\n## 前端导出表格\n\n很早就做过导出表格的功能，也有考虑过前端是否能导出 excel 表格。现在看到了一个纯前端导出文件的插件——`SheetJS`\n\n纯前端的实现方案能够在不依赖服务端能力和网络的情况下完成数据导出。虽然如此，数据量较大的时候，站在性能及用户体验的角度，在服务端完成会是更优雅的解法。\n\n## window.open 浏览器拦截\n\nwindow.open 可以实现打开一个新浏览器窗口。\n\n```javascript\nvar btn = $(\"#btn\");\nbtn.click(function() {\n    //不会被拦截\n    window.open(\"http://www.baidu.com\");\n});\n```\n\n如果是用户触发的时候，是不会拦截的，可以正常打开新窗口，所以，如果是用户主动触发弹窗，浏览器一般不会拦截。\n\n```javascript\nvar btn = $(\"#btn\");\nbtn.click(function() {\n    $.ajax({\n        url: \"ooxx\",\n        success: function(url) {\n            //会被拦截\n            window.open(url);\n        }\n    });\n});\n```\n\n如上用户没有直接触发 window.open,而是发出一个 ajax 请求，window.open 方法被放在了 ajax 的回调函数里，这样的情况是会被拦截的\n\n-   当浏览器检测到非用户操作产生的新弹出窗口，则会对其进行阻止。因为浏览器认为这不是用户希望看到的页面\n-   在 chrome 的安全机制里面，非用户触发的 window.open 方法，是会被拦截的。\n\n如何解决弹窗被拦截的问题，可以先打开一个不被拦截的空窗口，在异步请求后将 href 替换。如下：\n\n```javascript\nvar btn = $(\"#btn\");\nbtn.click(function() {\n    //打开一个不被拦截的新窗口\n    var newWindow = window.open();\n    $.ajax({\n        url: \"ooxx\",\n        success: function(url) {\n            //修改新窗口的url\n            newWindow.location.href = url;\n        }\n    });\n});\n```\n\n## 银行卡号加空格\n\n给用户输入的银行卡号 每隔 4 位加一个空格，切只能输入数字\n\n### 方案一\n\n```html\n<input\n    type=\"text\"\n    onkeypress=\"return (function(key,that){return (key>47&&key<58) && ((that.value.length%5==0)?that.value+=' ':1)})(event.keyCode,this)\"\n/>\n```\n\n在 chrome 上输入数字的体验特别良好，输入中文时就会出现不触发 onKeypress 事件， 更重要的是无法兼容移动端，在华为浏览器上就死在第一步，所以就直接抛弃。\n\n### 方案二\n\n```JavaScript\n<input\n    type=\"text\"\n    id=\"bankId\"\n    maxlength=\"23\"\n    placeholder=\"请输入银行卡号\"\n    oninput=\"value=value.replace(/[^\\d\\s]/g,'')\"\n/>;\n\ninput.on(\"keyup\", function(e) {\n    v = this.value;\n    v = v.replace(/\\s*/g, \"\");\n    if (/\\S{5}/.test(v)) {\n        this.value = v.replace(/(\\d{4})(?=\\d)/g, \"$1 \");\n    }\n});\n```\n\n暂时没有发现什么 BUG,后记：是有BUG的，比如一直输入中文\n\n### 方案三\n\n```javascript\ninput.on(\"keyup\", function(e) {\n    var value = this.value;\n    value = value.replace(/\\s*/g, \"\");\n    var result = [];\n    for (var i = 0; i < value.length; i++) {\n        if (i % 4 == 0 && i != 0) {\n            result.push(\" \" + value.charAt(i));\n        } else {\n            result.push(value.charAt(i));\n        }\n    }\n    this.value = result.join(\"\");\n});\n```\n\n暂时也没有发现什么 BUG\n\n## 通过script 单独引入vue.js\n\n最开始接触vue.js时，最开始有两个使用途径，一个是vue-cli 脚手架的单页应用，一个是通过script 单链引入的形式。\n\n在使用单链的时候在进入首屏时，遇到过如下问题：\n- 页面中会出现vue 的未解析的符号，例如&#123;&#123;&#125;&#125;和初始样式。\n- 当js判断再引入主题皮肤css 时，会有很大一段时间是原始样式在突然过度到皮肤样式，不够美观，而且很奇怪\n\n当时没有想清楚，然后搁置之后就忘记了这个问题，如今又要负责这种单链的页面，又遭遇了一样的问题，才惊觉其原因：\n首先我们将vue.min.js在body 后面才引入的，把vue.min.js放在head中就可以解决了出现未解析的符号这个问题。是由于加载html之后还没有加载js对页面进行解析才出现了这个问题\n\n那未初始化的样式该如何解决呢？\n在以前是通过操作css 来解决的，\n- 最开始默认样式是display：none 通过js控制class 而不是直接通过v-show操作。相当于v-show v-if 全部不用。（好痛苦啊这种方案）。\n- 还有一种是加loading，在creat里面loading结束。\n\n\nv-show\\v-if 是无法操作css样式为display：none的元素的。\n\n而且单链的形式都没有办法用es6和封装组件，没有成熟的生态圈。这种开发方式太痛苦了。\n\n","source":"_posts/工作中所遇到的问题.md","raw":"---\ntitle: 工作中所遇到的问题\ndate: 2019-03-11 16:06:45\ncategories: JavaScript\n---\n\n记录一下自己在工作中所遇到的问题及及解决方案\n\n<!--more-->\n\n## 本地开发 跨域 (基础)\n\n在本地开发 请求线上的接口时 会遇到跨域的问题 那时如何解决的呢？\n\n-   使用 `chrome` 浏览器的跨域设置 （适用与不使用 webpack 打包的项目）\n-   webpack 配置 `proxyConfig`设置代理\n-   使用 Nginx 等反向代理工具\n-   使用 fiddler 等拦截转发工具\n\n## 查找对象或者中是否有存在某个值\n\n1. `indexOf(1)`;\n   对于浅数组使用好用，对于复杂数组，数组嵌套对象再嵌套数组 且是动态取值比较的 用 indexOf 就难比较，因为 indexOf 计较的值一旦索引发生了改变就没有办法比较是否存在某一个对象了。这种情况 将数组进行 JSON.stringfy 后再 indexOf 就可以解决了\n2. `arr.find()`\n   数组实例的`find()`用于查找目标元素，查不到返回 `undefined`\n3. 对象中直接使用`array[kry]`调用，若没有则会返回`undefined`且不会报错。\n\n## 用 jQuery 实现多品类购买的购物车\n\n1. 在页面中能对单个物品进行加减并加入到购物车的操作，保证购物车物品的唯一，最新的特性，考虑到这个情况，是用一下思路解决的：\n\n    - 在点击物品时将物品的单个信息对象保存下来，加减时操作信息对象\n    - 点击加入购物车时，将信息对象的 id 拿出来当成对象的 key 值添加到对象中，利用对象 key 的唯一性，且能更好的进行覆盖和删除操作。\n    - 在整个流程中利用数组对象的指针特性，改变其中的某一个值影响到原本的对象，保证了多个视图层的数据统一性。\n\n2. 考虑到页面中能进行筛选和搜索（都是从后台重新拿取的数据），重新渲染物品列表导致原本的购物数量的信息丢失。\n\n    - 在从接口获取数组列表时，就比对原本的购物车列表，再进行刷新渲染\n\n3. 因为使用的 jquery,所以想封装一个组件，组件中 监听一个 click 事件 并且可以执行相应的回调， 当时用的事件委托 ，暂时还不知道怎么封装，类似于商品列表的加减器和购物车列表的加减器\n\n## 通过 script 单独引入 vue.js\n\n最开始接触 vue.js 时，最开始有两个使用途径，一个是 vue-cli 脚手架的单页应用，一个是通过 script 单链引入的形式。\n\n在使用单链的时候在进入首屏时，遇到过如下问题：\n\n-   页面中会出现 vue 的未解析的符号，例如&#123;&#123;&#125;&#125;和初始样式。\n-   当 js 判断再引入主题皮肤 css 时，会有很大一段时间是原始样式在突然过度到皮肤样式，不够美观，而且很奇怪\n\n当时没有想清楚，然后搁置之后就忘记了这个问题，如今又要负责这种单链的页面，又遭遇了一样的问题，才惊觉其原因：\n首先我们将 vue.min.js 在 body 后面才引入的，把 vue.min.js 放在 head 中就可以解决了出现未解析的符号这个问题。是由于加载 html 之后还没有加载 js 对页面进行解析才出现了这个问题\n\n那未初始化的样式该如何解决呢？\n在以前是通过操作 css 来解决的，\n\n-   最开始默认样式是 display：none 通过 js 控制 class 而不是直接通过 v-show 操作。相当于 v-show v-if 全部不用。（好痛苦啊这种方案）。\n-   还有一种是加 loading，在 creat 里面 loading 结束。\n\nv-show\\v-if 是无法操作 css 样式为 display：none 的元素的。\n\n而且单链的形式都没有办法用 es6 和封装组件，没有成熟的生态圈。这种开发方式太痛苦了，最可怕的是单链 vue+前后不分离。。。。我选择死亡。而且单链这种模式如何封装组件呢？这是个问题。\n\n## 前端导出表格\n\n很早就做过导出表格的功能，也有考虑过前端是否能导出 excel 表格。现在看到了一个纯前端导出文件的插件——`SheetJS`\n\n纯前端的实现方案能够在不依赖服务端能力和网络的情况下完成数据导出。虽然如此，数据量较大的时候，站在性能及用户体验的角度，在服务端完成会是更优雅的解法。\n\n## window.open 浏览器拦截\n\nwindow.open 可以实现打开一个新浏览器窗口。\n\n```javascript\nvar btn = $(\"#btn\");\nbtn.click(function() {\n    //不会被拦截\n    window.open(\"http://www.baidu.com\");\n});\n```\n\n如果是用户触发的时候，是不会拦截的，可以正常打开新窗口，所以，如果是用户主动触发弹窗，浏览器一般不会拦截。\n\n```javascript\nvar btn = $(\"#btn\");\nbtn.click(function() {\n    $.ajax({\n        url: \"ooxx\",\n        success: function(url) {\n            //会被拦截\n            window.open(url);\n        }\n    });\n});\n```\n\n如上用户没有直接触发 window.open,而是发出一个 ajax 请求，window.open 方法被放在了 ajax 的回调函数里，这样的情况是会被拦截的\n\n-   当浏览器检测到非用户操作产生的新弹出窗口，则会对其进行阻止。因为浏览器认为这不是用户希望看到的页面\n-   在 chrome 的安全机制里面，非用户触发的 window.open 方法，是会被拦截的。\n\n如何解决弹窗被拦截的问题，可以先打开一个不被拦截的空窗口，在异步请求后将 href 替换。如下：\n\n```javascript\nvar btn = $(\"#btn\");\nbtn.click(function() {\n    //打开一个不被拦截的新窗口\n    var newWindow = window.open();\n    $.ajax({\n        url: \"ooxx\",\n        success: function(url) {\n            //修改新窗口的url\n            newWindow.location.href = url;\n        }\n    });\n});\n```\n\n## 银行卡号加空格\n\n给用户输入的银行卡号 每隔 4 位加一个空格，切只能输入数字\n\n### 方案一\n\n```html\n<input\n    type=\"text\"\n    onkeypress=\"return (function(key,that){return (key>47&&key<58) && ((that.value.length%5==0)?that.value+=' ':1)})(event.keyCode,this)\"\n/>\n```\n\n在 chrome 上输入数字的体验特别良好，输入中文时就会出现不触发 onKeypress 事件， 更重要的是无法兼容移动端，在华为浏览器上就死在第一步，所以就直接抛弃。\n\n### 方案二\n\n```JavaScript\n<input\n    type=\"text\"\n    id=\"bankId\"\n    maxlength=\"23\"\n    placeholder=\"请输入银行卡号\"\n    oninput=\"value=value.replace(/[^\\d\\s]/g,'')\"\n/>;\n\ninput.on(\"keyup\", function(e) {\n    v = this.value;\n    v = v.replace(/\\s*/g, \"\");\n    if (/\\S{5}/.test(v)) {\n        this.value = v.replace(/(\\d{4})(?=\\d)/g, \"$1 \");\n    }\n});\n```\n\n暂时没有发现什么 BUG,后记：是有BUG的，比如一直输入中文\n\n### 方案三\n\n```javascript\ninput.on(\"keyup\", function(e) {\n    var value = this.value;\n    value = value.replace(/\\s*/g, \"\");\n    var result = [];\n    for (var i = 0; i < value.length; i++) {\n        if (i % 4 == 0 && i != 0) {\n            result.push(\" \" + value.charAt(i));\n        } else {\n            result.push(value.charAt(i));\n        }\n    }\n    this.value = result.join(\"\");\n});\n```\n\n暂时也没有发现什么 BUG\n\n## 通过script 单独引入vue.js\n\n最开始接触vue.js时，最开始有两个使用途径，一个是vue-cli 脚手架的单页应用，一个是通过script 单链引入的形式。\n\n在使用单链的时候在进入首屏时，遇到过如下问题：\n- 页面中会出现vue 的未解析的符号，例如&#123;&#123;&#125;&#125;和初始样式。\n- 当js判断再引入主题皮肤css 时，会有很大一段时间是原始样式在突然过度到皮肤样式，不够美观，而且很奇怪\n\n当时没有想清楚，然后搁置之后就忘记了这个问题，如今又要负责这种单链的页面，又遭遇了一样的问题，才惊觉其原因：\n首先我们将vue.min.js在body 后面才引入的，把vue.min.js放在head中就可以解决了出现未解析的符号这个问题。是由于加载html之后还没有加载js对页面进行解析才出现了这个问题\n\n那未初始化的样式该如何解决呢？\n在以前是通过操作css 来解决的，\n- 最开始默认样式是display：none 通过js控制class 而不是直接通过v-show操作。相当于v-show v-if 全部不用。（好痛苦啊这种方案）。\n- 还有一种是加loading，在creat里面loading结束。\n\n\nv-show\\v-if 是无法操作css样式为display：none的元素的。\n\n而且单链的形式都没有办法用es6和封装组件，没有成熟的生态圈。这种开发方式太痛苦了。\n\n","slug":"工作中所遇到的问题","published":1,"updated":"2021-02-24T01:57:43.100Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmejaesm002bxcvr9ce13hjb","content":"<p>记录一下自己在工作中所遇到的问题及及解决方案</p>\n<span id=\"more\"></span>\n\n<h2 id=\"本地开发-跨域-基础\"><a href=\"#本地开发-跨域-基础\" class=\"headerlink\" title=\"本地开发 跨域 (基础)\"></a>本地开发 跨域 (基础)</h2><p>在本地开发 请求线上的接口时 会遇到跨域的问题 那时如何解决的呢？</p>\n<ul>\n<li>  使用 <code>chrome</code> 浏览器的跨域设置 （适用与不使用 webpack 打包的项目）</li>\n<li>  webpack 配置 <code>proxyConfig</code>设置代理</li>\n<li>  使用 Nginx 等反向代理工具</li>\n<li>  使用 fiddler 等拦截转发工具</li>\n</ul>\n<h2 id=\"查找对象或者中是否有存在某个值\"><a href=\"#查找对象或者中是否有存在某个值\" class=\"headerlink\" title=\"查找对象或者中是否有存在某个值\"></a>查找对象或者中是否有存在某个值</h2><ol>\n<li><code>indexOf(1)</code>;<br>对于浅数组使用好用，对于复杂数组，数组嵌套对象再嵌套数组 且是动态取值比较的 用 indexOf 就难比较，因为 indexOf 计较的值一旦索引发生了改变就没有办法比较是否存在某一个对象了。这种情况 将数组进行 JSON.stringfy 后再 indexOf 就可以解决了</li>\n<li><code>arr.find()</code><br>数组实例的<code>find()</code>用于查找目标元素，查不到返回 <code>undefined</code></li>\n<li>对象中直接使用<code>array[kry]</code>调用，若没有则会返回<code>undefined</code>且不会报错。</li>\n</ol>\n<h2 id=\"用-jQuery-实现多品类购买的购物车\"><a href=\"#用-jQuery-实现多品类购买的购物车\" class=\"headerlink\" title=\"用 jQuery 实现多品类购买的购物车\"></a>用 jQuery 实现多品类购买的购物车</h2><ol>\n<li><p>在页面中能对单个物品进行加减并加入到购物车的操作，保证购物车物品的唯一，最新的特性，考虑到这个情况，是用一下思路解决的：</p>\n<ul>\n<li>在点击物品时将物品的单个信息对象保存下来，加减时操作信息对象</li>\n<li>点击加入购物车时，将信息对象的 id 拿出来当成对象的 key 值添加到对象中，利用对象 key 的唯一性，且能更好的进行覆盖和删除操作。</li>\n<li>在整个流程中利用数组对象的指针特性，改变其中的某一个值影响到原本的对象，保证了多个视图层的数据统一性。</li>\n</ul>\n</li>\n<li><p>考虑到页面中能进行筛选和搜索（都是从后台重新拿取的数据），重新渲染物品列表导致原本的购物数量的信息丢失。</p>\n<ul>\n<li>在从接口获取数组列表时，就比对原本的购物车列表，再进行刷新渲染</li>\n</ul>\n</li>\n<li><p>因为使用的 jquery,所以想封装一个组件，组件中 监听一个 click 事件 并且可以执行相应的回调， 当时用的事件委托 ，暂时还不知道怎么封装，类似于商品列表的加减器和购物车列表的加减器</p>\n</li>\n</ol>\n<h2 id=\"通过-script-单独引入-vue-js\"><a href=\"#通过-script-单独引入-vue-js\" class=\"headerlink\" title=\"通过 script 单独引入 vue.js\"></a>通过 script 单独引入 vue.js</h2><p>最开始接触 vue.js 时，最开始有两个使用途径，一个是 vue-cli 脚手架的单页应用，一个是通过 script 单链引入的形式。</p>\n<p>在使用单链的时候在进入首屏时，遇到过如下问题：</p>\n<ul>\n<li>  页面中会出现 vue 的未解析的符号，例如&#123;&#123;&#125;&#125;和初始样式。</li>\n<li>  当 js 判断再引入主题皮肤 css 时，会有很大一段时间是原始样式在突然过度到皮肤样式，不够美观，而且很奇怪</li>\n</ul>\n<p>当时没有想清楚，然后搁置之后就忘记了这个问题，如今又要负责这种单链的页面，又遭遇了一样的问题，才惊觉其原因：<br>首先我们将 vue.min.js 在 body 后面才引入的，把 vue.min.js 放在 head 中就可以解决了出现未解析的符号这个问题。是由于加载 html 之后还没有加载 js 对页面进行解析才出现了这个问题</p>\n<p>那未初始化的样式该如何解决呢？<br>在以前是通过操作 css 来解决的，</p>\n<ul>\n<li>  最开始默认样式是 display：none 通过 js 控制 class 而不是直接通过 v-show 操作。相当于 v-show v-if 全部不用。（好痛苦啊这种方案）。</li>\n<li>  还有一种是加 loading，在 creat 里面 loading 结束。</li>\n</ul>\n<p>v-show\\v-if 是无法操作 css 样式为 display：none 的元素的。</p>\n<p>而且单链的形式都没有办法用 es6 和封装组件，没有成熟的生态圈。这种开发方式太痛苦了，最可怕的是单链 vue+前后不分离。。。。我选择死亡。而且单链这种模式如何封装组件呢？这是个问题。</p>\n<h2 id=\"前端导出表格\"><a href=\"#前端导出表格\" class=\"headerlink\" title=\"前端导出表格\"></a>前端导出表格</h2><p>很早就做过导出表格的功能，也有考虑过前端是否能导出 excel 表格。现在看到了一个纯前端导出文件的插件——<code>SheetJS</code></p>\n<p>纯前端的实现方案能够在不依赖服务端能力和网络的情况下完成数据导出。虽然如此，数据量较大的时候，站在性能及用户体验的角度，在服务端完成会是更优雅的解法。</p>\n<h2 id=\"window-open-浏览器拦截\"><a href=\"#window-open-浏览器拦截\" class=\"headerlink\" title=\"window.open 浏览器拦截\"></a>window.open 浏览器拦截</h2><p>window.open 可以实现打开一个新浏览器窗口。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = $(<span class=\"string\">&quot;#btn&quot;</span>);</span><br><span class=\"line\">btn.click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//不会被拦截</span></span><br><span class=\"line\">    <span class=\"built_in\">window</span>.open(<span class=\"string\">&quot;http://www.baidu.com&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>如果是用户触发的时候，是不会拦截的，可以正常打开新窗口，所以，如果是用户主动触发弹窗，浏览器一般不会拦截。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = $(<span class=\"string\">&quot;#btn&quot;</span>);</span><br><span class=\"line\">btn.click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        url: <span class=\"string\">&quot;ooxx&quot;</span>,</span><br><span class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//会被拦截</span></span><br><span class=\"line\">            <span class=\"built_in\">window</span>.open(url);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>如上用户没有直接触发 window.open,而是发出一个 ajax 请求，window.open 方法被放在了 ajax 的回调函数里，这样的情况是会被拦截的</p>\n<ul>\n<li>  当浏览器检测到非用户操作产生的新弹出窗口，则会对其进行阻止。因为浏览器认为这不是用户希望看到的页面</li>\n<li>  在 chrome 的安全机制里面，非用户触发的 window.open 方法，是会被拦截的。</li>\n</ul>\n<p>如何解决弹窗被拦截的问题，可以先打开一个不被拦截的空窗口，在异步请求后将 href 替换。如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = $(<span class=\"string\">&quot;#btn&quot;</span>);</span><br><span class=\"line\">btn.click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//打开一个不被拦截的新窗口</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> newWindow = <span class=\"built_in\">window</span>.open();</span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        url: <span class=\"string\">&quot;ooxx&quot;</span>,</span><br><span class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//修改新窗口的url</span></span><br><span class=\"line\">            newWindow.location.href = url;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"银行卡号加空格\"><a href=\"#银行卡号加空格\" class=\"headerlink\" title=\"银行卡号加空格\"></a>银行卡号加空格</h2><p>给用户输入的银行卡号 每隔 4 位加一个空格，切只能输入数字</p>\n<h3 id=\"方案一\"><a href=\"#方案一\" class=\"headerlink\" title=\"方案一\"></a>方案一</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input</span><br><span class=\"line\">    type=&quot;text&quot;</span><br><span class=\"line\">    onkeypress=&quot;return (function(key,that)&#123;return (key&gt;47&amp;&amp;key&lt;58) &amp;&amp; ((that.value.length%5==0)?that.value+=&#x27; &#x27;:1)&#125;)(event.keyCode,this)&quot;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在 chrome 上输入数字的体验特别良好，输入中文时就会出现不触发 onKeypress 事件， 更重要的是无法兼容移动端，在华为浏览器上就死在第一步，所以就直接抛弃。</p>\n<h3 id=\"方案二\"><a href=\"#方案二\" class=\"headerlink\" title=\"方案二\"></a>方案二</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input</span><br><span class=\"line\">    type=<span class=\"string\">&quot;text&quot;</span></span><br><span class=\"line\">    id=<span class=\"string\">&quot;bankId&quot;</span></span><br><span class=\"line\">    maxlength=<span class=\"string\">&quot;23&quot;</span></span><br><span class=\"line\">    placeholder=<span class=\"string\">&quot;请输入银行卡号&quot;</span></span><br><span class=\"line\">    oninput=<span class=\"string\">&quot;value=value.replace(/[^\\d\\s]/g,&#x27;&#x27;)&quot;</span></span><br><span class=\"line\">/&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">input.on(<span class=\"string\">&quot;keyup&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    v = <span class=\"built_in\">this</span>.value;</span><br><span class=\"line\">    v = v.replace(<span class=\"regexp\">/\\s*/g</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"regexp\">/\\S&#123;5&#125;/</span>.test(v)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value = v.replace(<span class=\"regexp\">/(\\d&#123;4&#125;)(?=\\d)/g</span>, <span class=\"string\">&quot;$1 &quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>暂时没有发现什么 BUG,后记：是有BUG的，比如一直输入中文</p>\n<h3 id=\"方案三\"><a href=\"#方案三\" class=\"headerlink\" title=\"方案三\"></a>方案三</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input.on(<span class=\"string\">&quot;keyup&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value = <span class=\"built_in\">this</span>.value;</span><br><span class=\"line\">    value = value.replace(<span class=\"regexp\">/\\s*/g</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; value.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i % <span class=\"number\">4</span> == <span class=\"number\">0</span> &amp;&amp; i != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            result.push(<span class=\"string\">&quot; &quot;</span> + value.charAt(i));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            result.push(value.charAt(i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.value = result.join(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>暂时也没有发现什么 BUG</p>\n<h2 id=\"通过script-单独引入vue-js\"><a href=\"#通过script-单独引入vue-js\" class=\"headerlink\" title=\"通过script 单独引入vue.js\"></a>通过script 单独引入vue.js</h2><p>最开始接触vue.js时，最开始有两个使用途径，一个是vue-cli 脚手架的单页应用，一个是通过script 单链引入的形式。</p>\n<p>在使用单链的时候在进入首屏时，遇到过如下问题：</p>\n<ul>\n<li>页面中会出现vue 的未解析的符号，例如&#123;&#123;&#125;&#125;和初始样式。</li>\n<li>当js判断再引入主题皮肤css 时，会有很大一段时间是原始样式在突然过度到皮肤样式，不够美观，而且很奇怪</li>\n</ul>\n<p>当时没有想清楚，然后搁置之后就忘记了这个问题，如今又要负责这种单链的页面，又遭遇了一样的问题，才惊觉其原因：<br>首先我们将vue.min.js在body 后面才引入的，把vue.min.js放在head中就可以解决了出现未解析的符号这个问题。是由于加载html之后还没有加载js对页面进行解析才出现了这个问题</p>\n<p>那未初始化的样式该如何解决呢？<br>在以前是通过操作css 来解决的，</p>\n<ul>\n<li>最开始默认样式是display：none 通过js控制class 而不是直接通过v-show操作。相当于v-show v-if 全部不用。（好痛苦啊这种方案）。</li>\n<li>还有一种是加loading，在creat里面loading结束。</li>\n</ul>\n<p>v-show\\v-if 是无法操作css样式为display：none的元素的。</p>\n<p>而且单链的形式都没有办法用es6和封装组件，没有成熟的生态圈。这种开发方式太痛苦了。</p>\n","site":{"data":{}},"excerpt":"<p>记录一下自己在工作中所遇到的问题及及解决方案</p>","more":"<h2 id=\"本地开发-跨域-基础\"><a href=\"#本地开发-跨域-基础\" class=\"headerlink\" title=\"本地开发 跨域 (基础)\"></a>本地开发 跨域 (基础)</h2><p>在本地开发 请求线上的接口时 会遇到跨域的问题 那时如何解决的呢？</p>\n<ul>\n<li>  使用 <code>chrome</code> 浏览器的跨域设置 （适用与不使用 webpack 打包的项目）</li>\n<li>  webpack 配置 <code>proxyConfig</code>设置代理</li>\n<li>  使用 Nginx 等反向代理工具</li>\n<li>  使用 fiddler 等拦截转发工具</li>\n</ul>\n<h2 id=\"查找对象或者中是否有存在某个值\"><a href=\"#查找对象或者中是否有存在某个值\" class=\"headerlink\" title=\"查找对象或者中是否有存在某个值\"></a>查找对象或者中是否有存在某个值</h2><ol>\n<li><code>indexOf(1)</code>;<br>对于浅数组使用好用，对于复杂数组，数组嵌套对象再嵌套数组 且是动态取值比较的 用 indexOf 就难比较，因为 indexOf 计较的值一旦索引发生了改变就没有办法比较是否存在某一个对象了。这种情况 将数组进行 JSON.stringfy 后再 indexOf 就可以解决了</li>\n<li><code>arr.find()</code><br>数组实例的<code>find()</code>用于查找目标元素，查不到返回 <code>undefined</code></li>\n<li>对象中直接使用<code>array[kry]</code>调用，若没有则会返回<code>undefined</code>且不会报错。</li>\n</ol>\n<h2 id=\"用-jQuery-实现多品类购买的购物车\"><a href=\"#用-jQuery-实现多品类购买的购物车\" class=\"headerlink\" title=\"用 jQuery 实现多品类购买的购物车\"></a>用 jQuery 实现多品类购买的购物车</h2><ol>\n<li><p>在页面中能对单个物品进行加减并加入到购物车的操作，保证购物车物品的唯一，最新的特性，考虑到这个情况，是用一下思路解决的：</p>\n<ul>\n<li>在点击物品时将物品的单个信息对象保存下来，加减时操作信息对象</li>\n<li>点击加入购物车时，将信息对象的 id 拿出来当成对象的 key 值添加到对象中，利用对象 key 的唯一性，且能更好的进行覆盖和删除操作。</li>\n<li>在整个流程中利用数组对象的指针特性，改变其中的某一个值影响到原本的对象，保证了多个视图层的数据统一性。</li>\n</ul>\n</li>\n<li><p>考虑到页面中能进行筛选和搜索（都是从后台重新拿取的数据），重新渲染物品列表导致原本的购物数量的信息丢失。</p>\n<ul>\n<li>在从接口获取数组列表时，就比对原本的购物车列表，再进行刷新渲染</li>\n</ul>\n</li>\n<li><p>因为使用的 jquery,所以想封装一个组件，组件中 监听一个 click 事件 并且可以执行相应的回调， 当时用的事件委托 ，暂时还不知道怎么封装，类似于商品列表的加减器和购物车列表的加减器</p>\n</li>\n</ol>\n<h2 id=\"通过-script-单独引入-vue-js\"><a href=\"#通过-script-单独引入-vue-js\" class=\"headerlink\" title=\"通过 script 单独引入 vue.js\"></a>通过 script 单独引入 vue.js</h2><p>最开始接触 vue.js 时，最开始有两个使用途径，一个是 vue-cli 脚手架的单页应用，一个是通过 script 单链引入的形式。</p>\n<p>在使用单链的时候在进入首屏时，遇到过如下问题：</p>\n<ul>\n<li>  页面中会出现 vue 的未解析的符号，例如&#123;&#123;&#125;&#125;和初始样式。</li>\n<li>  当 js 判断再引入主题皮肤 css 时，会有很大一段时间是原始样式在突然过度到皮肤样式，不够美观，而且很奇怪</li>\n</ul>\n<p>当时没有想清楚，然后搁置之后就忘记了这个问题，如今又要负责这种单链的页面，又遭遇了一样的问题，才惊觉其原因：<br>首先我们将 vue.min.js 在 body 后面才引入的，把 vue.min.js 放在 head 中就可以解决了出现未解析的符号这个问题。是由于加载 html 之后还没有加载 js 对页面进行解析才出现了这个问题</p>\n<p>那未初始化的样式该如何解决呢？<br>在以前是通过操作 css 来解决的，</p>\n<ul>\n<li>  最开始默认样式是 display：none 通过 js 控制 class 而不是直接通过 v-show 操作。相当于 v-show v-if 全部不用。（好痛苦啊这种方案）。</li>\n<li>  还有一种是加 loading，在 creat 里面 loading 结束。</li>\n</ul>\n<p>v-show\\v-if 是无法操作 css 样式为 display：none 的元素的。</p>\n<p>而且单链的形式都没有办法用 es6 和封装组件，没有成熟的生态圈。这种开发方式太痛苦了，最可怕的是单链 vue+前后不分离。。。。我选择死亡。而且单链这种模式如何封装组件呢？这是个问题。</p>\n<h2 id=\"前端导出表格\"><a href=\"#前端导出表格\" class=\"headerlink\" title=\"前端导出表格\"></a>前端导出表格</h2><p>很早就做过导出表格的功能，也有考虑过前端是否能导出 excel 表格。现在看到了一个纯前端导出文件的插件——<code>SheetJS</code></p>\n<p>纯前端的实现方案能够在不依赖服务端能力和网络的情况下完成数据导出。虽然如此，数据量较大的时候，站在性能及用户体验的角度，在服务端完成会是更优雅的解法。</p>\n<h2 id=\"window-open-浏览器拦截\"><a href=\"#window-open-浏览器拦截\" class=\"headerlink\" title=\"window.open 浏览器拦截\"></a>window.open 浏览器拦截</h2><p>window.open 可以实现打开一个新浏览器窗口。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = $(<span class=\"string\">&quot;#btn&quot;</span>);</span><br><span class=\"line\">btn.click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//不会被拦截</span></span><br><span class=\"line\">    <span class=\"built_in\">window</span>.open(<span class=\"string\">&quot;http://www.baidu.com&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>如果是用户触发的时候，是不会拦截的，可以正常打开新窗口，所以，如果是用户主动触发弹窗，浏览器一般不会拦截。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = $(<span class=\"string\">&quot;#btn&quot;</span>);</span><br><span class=\"line\">btn.click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        url: <span class=\"string\">&quot;ooxx&quot;</span>,</span><br><span class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//会被拦截</span></span><br><span class=\"line\">            <span class=\"built_in\">window</span>.open(url);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>如上用户没有直接触发 window.open,而是发出一个 ajax 请求，window.open 方法被放在了 ajax 的回调函数里，这样的情况是会被拦截的</p>\n<ul>\n<li>  当浏览器检测到非用户操作产生的新弹出窗口，则会对其进行阻止。因为浏览器认为这不是用户希望看到的页面</li>\n<li>  在 chrome 的安全机制里面，非用户触发的 window.open 方法，是会被拦截的。</li>\n</ul>\n<p>如何解决弹窗被拦截的问题，可以先打开一个不被拦截的空窗口，在异步请求后将 href 替换。如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = $(<span class=\"string\">&quot;#btn&quot;</span>);</span><br><span class=\"line\">btn.click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//打开一个不被拦截的新窗口</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> newWindow = <span class=\"built_in\">window</span>.open();</span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        url: <span class=\"string\">&quot;ooxx&quot;</span>,</span><br><span class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//修改新窗口的url</span></span><br><span class=\"line\">            newWindow.location.href = url;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"银行卡号加空格\"><a href=\"#银行卡号加空格\" class=\"headerlink\" title=\"银行卡号加空格\"></a>银行卡号加空格</h2><p>给用户输入的银行卡号 每隔 4 位加一个空格，切只能输入数字</p>\n<h3 id=\"方案一\"><a href=\"#方案一\" class=\"headerlink\" title=\"方案一\"></a>方案一</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input</span><br><span class=\"line\">    type=&quot;text&quot;</span><br><span class=\"line\">    onkeypress=&quot;return (function(key,that)&#123;return (key&gt;47&amp;&amp;key&lt;58) &amp;&amp; ((that.value.length%5==0)?that.value+=&#x27; &#x27;:1)&#125;)(event.keyCode,this)&quot;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在 chrome 上输入数字的体验特别良好，输入中文时就会出现不触发 onKeypress 事件， 更重要的是无法兼容移动端，在华为浏览器上就死在第一步，所以就直接抛弃。</p>\n<h3 id=\"方案二\"><a href=\"#方案二\" class=\"headerlink\" title=\"方案二\"></a>方案二</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input</span><br><span class=\"line\">    type=<span class=\"string\">&quot;text&quot;</span></span><br><span class=\"line\">    id=<span class=\"string\">&quot;bankId&quot;</span></span><br><span class=\"line\">    maxlength=<span class=\"string\">&quot;23&quot;</span></span><br><span class=\"line\">    placeholder=<span class=\"string\">&quot;请输入银行卡号&quot;</span></span><br><span class=\"line\">    oninput=<span class=\"string\">&quot;value=value.replace(/[^\\d\\s]/g,&#x27;&#x27;)&quot;</span></span><br><span class=\"line\">/&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">input.on(<span class=\"string\">&quot;keyup&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    v = <span class=\"built_in\">this</span>.value;</span><br><span class=\"line\">    v = v.replace(<span class=\"regexp\">/\\s*/g</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"regexp\">/\\S&#123;5&#125;/</span>.test(v)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value = v.replace(<span class=\"regexp\">/(\\d&#123;4&#125;)(?=\\d)/g</span>, <span class=\"string\">&quot;$1 &quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>暂时没有发现什么 BUG,后记：是有BUG的，比如一直输入中文</p>\n<h3 id=\"方案三\"><a href=\"#方案三\" class=\"headerlink\" title=\"方案三\"></a>方案三</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input.on(<span class=\"string\">&quot;keyup&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value = <span class=\"built_in\">this</span>.value;</span><br><span class=\"line\">    value = value.replace(<span class=\"regexp\">/\\s*/g</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; value.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i % <span class=\"number\">4</span> == <span class=\"number\">0</span> &amp;&amp; i != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            result.push(<span class=\"string\">&quot; &quot;</span> + value.charAt(i));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            result.push(value.charAt(i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.value = result.join(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>暂时也没有发现什么 BUG</p>\n<h2 id=\"通过script-单独引入vue-js\"><a href=\"#通过script-单独引入vue-js\" class=\"headerlink\" title=\"通过script 单独引入vue.js\"></a>通过script 单独引入vue.js</h2><p>最开始接触vue.js时，最开始有两个使用途径，一个是vue-cli 脚手架的单页应用，一个是通过script 单链引入的形式。</p>\n<p>在使用单链的时候在进入首屏时，遇到过如下问题：</p>\n<ul>\n<li>页面中会出现vue 的未解析的符号，例如&#123;&#123;&#125;&#125;和初始样式。</li>\n<li>当js判断再引入主题皮肤css 时，会有很大一段时间是原始样式在突然过度到皮肤样式，不够美观，而且很奇怪</li>\n</ul>\n<p>当时没有想清楚，然后搁置之后就忘记了这个问题，如今又要负责这种单链的页面，又遭遇了一样的问题，才惊觉其原因：<br>首先我们将vue.min.js在body 后面才引入的，把vue.min.js放在head中就可以解决了出现未解析的符号这个问题。是由于加载html之后还没有加载js对页面进行解析才出现了这个问题</p>\n<p>那未初始化的样式该如何解决呢？<br>在以前是通过操作css 来解决的，</p>\n<ul>\n<li>最开始默认样式是display：none 通过js控制class 而不是直接通过v-show操作。相当于v-show v-if 全部不用。（好痛苦啊这种方案）。</li>\n<li>还有一种是加loading，在creat里面loading结束。</li>\n</ul>\n<p>v-show\\v-if 是无法操作css样式为display：none的元素的。</p>\n<p>而且单链的形式都没有办法用es6和封装组件，没有成熟的生态圈。这种开发方式太痛苦了。</p>"},{"title":"常见的四种post方式","date":"2019-07-16T02:21:57.000Z","_content":"自己常常在开发过程中被后台研发要求的数据格式搞的十分混乱，常常觉得自己记错了，常常不确定怎么设置header。所以现在进行一个彻底的总结。\n\n<!--more-->\n\n\n# 常见的四种post方式\n\n1. application/x-www-form-urlencoded\n2. multipart/form-data\n3. text-plain\n4. application/json\n\n## 一个form标签中的enctype有三种类型\n\n1. application/x-www-form-urlencoded\n2. multipart/form-data\n3. text-plain\n\nenctype 属性规定在发送到服务器之前应该如何对表单数据进行编码，默认的情况下是 application/x-www-urlencoded,就是说，在发送到服务器之前，所有的字符都会进行编码。当表单使用POST请求时，数据会被以x-www-urlencoded，当表单使用POST请求时，数据会被以x-www-urlencoede方式编码到Body中来传送。\n\n而如果是get请求，则是附在url链接后面来传送。\n\nget请求只支持ASCLL字符集，因此，如果我们要发送更大字符集的内容，我们应使用POST请求。\n\n## 注意\n\n如果要发送大量的二进制数据（non-ASCLL）,\"application/x-www-form-urlencoded\"是最低效的，因为它需要用3个字符来表示一个non-ASCLL的字符。因此这时就要使用\"multipart/form-data\"。\n\n## application/x-www-form-urlencoded\n**在发送前编码所有字符**\n\n在通过HTTP向服务器发送POST请求数据，都是通过form表单形式提交的，代码如下：\n\n```html\n<form method=\"post\" action=\"http://w.sohu.com\">\n    <input type =\"text\" name=\"text1\">\n    <input type=\"text\" name=\"text2\">\n</form>\n```\n提交数据时会向服务器端发出这样的数据\n\n```\nPOST / HTTP/1.1\nContent-Type:application/x-www-form-urlencoded\nAccept-Encoding: gzip, deflate\nHost: w.sohu.com\nContent-Length: 21\nConnection: Keep-Alive\nCache-Control: no-cache\n\ntxt1=hello&txt2=world\n\n```\n\n对于普通的HTML Form POST 请求，它会在头信息里使用Content-Length 注明长度。\n请求头信息每行一条，空行之后便是Body,即内容。内容格式是在头信息中的Content-Type，如上是application/x-www-form-urlencoded。这也意味着消息内容会经过URL格式编码，就像是GET请求时URL中的QueryString。`text1=hello&text2=world`\n\n## multipart/form-data\n**不对字符编码，在使用包含文件上传的表单时，必须使用该值**\n\n通过form 表单提交文件操作如下：\n```html\n<FORM method=\"POST\" action=\"http://w.sohu.com/t2/upload.do\" enctype=\"multipart/form-data\">\n    <INPUT type=\"text\" name=\"city\" value=\"Santa colo\">\n    <INPUT type=\"text\" name=\"desc\">\n    <INPUT type=\"file\" name=\"pic\">\n</FORM>\n```\n浏览器将会发送以下数据：\n\n```\nPOST /t2/upload.do HTTP/1.1\nUser-Agent: SOHUWapRebot\nAccept-Language: zh-cn,zh;q=0.5\nAccept-Charset: GBK,utf-8;q=0.7,*;q=0.7\nConnection: keep-alive\nContent-Length: 60408\nContent-Type:multipart/form-data; boundary=ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC\nHost: w.sohu.com\n\n--ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC\nContent-Disposition: form-data; name=\"city\"\n\nSanta colo\n--ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC\nContent-Disposition: form-data;name=\"desc\"\nContent-Type: text/plain; charset=UTF-8\nContent-Transfer-Encoding: 8bit\n \n...\n--ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC\nContent-Disposition: form-data;name=\"pic\"; filename=\"photo.jpg\"\nContent-Type: application/octet-stream\nContent-Transfer-Encoding: binary\n \n... binary data of the jpg ...\n--ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC--\n```\n\n从上面的 multipart/form-data 格式发送的请求来看，他包含了多个parts，每个part都包含头部信息部分，part头信息中必须包含一个Content-disposition 头，其他的头信息则为可选项，比如：Content-Type 等。\n\n## text/plain\n\n**空格转换为“+”加号，但不对特殊字符编码\n```javascript\n<form action=\"/example/html/form_action.asp\" method=\"get\" enctype=\"text/plain\">\n  First name: <input type=\"text\" name=\"fname\" /><br />\n  Last name: <input type=\"text\" name=\"lname\" /><br />\n  <input type=\"submit\" value=\"Submit\" />\n</form>\n```\n\n## application/json\n最终发送的请求是：\n```\nBASHPOST http://www.example.com HTTP/1.1 \nContent-Type: application/json;charset=utf-8\n\n{\"title\":\"test\",\"sub\":[1,2,3]}\n```\n\n## Boundary 分隔符\n\n每个部分使用 --boundary 分割开来，最后一行使用--boundary--结尾\n\n\n\n# ajax 解读\n\n```javascript\n\nvar xhr = new XMLHTTPRequest();\n\nxhr.open(\"method\", \"url\", \"async\");\n\nxhr.send(null);\n\nxhr.onreadystatechange = function(){\n\n    if(xhr.readystate == 4){\n\n　　　if(xhr.status == 200){\n\n　　　　　console.log(xhr.responseText)\n\n　　　}\n\n　　}\n}\n```\n\n- XMLHTTPRequest对象\n- 常用方法：\n    - `open(\"method\",'url','async')`\n        - method 表示通过什么方式进行服务器访问，包括post和get\n        - url 表示访问服务器的地址\n        - async 表示是否异步，包括true(异步)和false\n    - `send(content)`\n        - content 表示向服务器发送的数据。\n\n\n## 原生 JS 的封装\n\n```javascript\n\n//可以以下步骤代替上面的open、setRequestHeader、send三行，此处对GET和POST做了很好的区分\nfunction ajax(){ \n  var ajaxData = { \n    type: (arguments[0].type || \"GET\").toUpperCase(), \n    url: arguments[0].url || \"\", \n    async: arguments[0].async || \"true\", \n    data: arguments[0].data || null, \n    dataType: arguments[0].dataType || \"json\", \n    contentType: arguments[0].contentType || \"application/x-www-form-urlencoded; charset=utf-8\", \n    beforeSend: arguments[0].beforeSend || function(){}, \n    success: arguments[0].success || function(){}, \n    error: arguments[0].error || function(){} \n  } \n\n  ajaxData.beforeSend() \n  var xhr = createxmlHttpRequest();  \n  xhr.responseType=ajaxData.dataType; \n\n  xhr.open(ajaxData.type,ajaxData.url,ajaxData.async);  \n  xhr.setRequestHeader(\"Content-Type\",ajaxData.contentType);  \n  xhr.send(convertData(ajaxData.data));  \n\n  xhr.onreadystatechange = function() {  \n    if (xhr.readyState == 4) {  \n      if(xhr.status == 200){ \n        ajaxData.success(xhr.response) \n      }else{ \n        ajaxData.error() \n      }  \n    } \n  }  \n} \n\nfunction createxmlHttpRequest() {  \n  if (window.ActiveXObject) {  \n    return new ActiveXObject(\"Microsoft.XMLHTTP\");  \n  } else if (window.XMLHttpRequest) {  \n    return new XMLHttpRequest();  \n  }  \n} \n  \nfunction convertData(data){ \n  if( typeof data === 'object' ){ \n    var convertResult = \"\" ;  \n    for(var c in data){  \n      convertResult+= c + \"=\" + data[c] + \"&\";  \n    }  \n    convertResult=convertResult.substring(0,convertResult.length-1) \n    return convertResult; \n  }else{ \n    return data; \n  } \n}\n\najax({ \n  type:\"POST\", \n  url:\"ajax.php\", \n  dataType:\"json\", \n  data:{\n    \"name\":\"abc\",\n    \"age\":123,\n    \"id\":\"456\"\n　}, \n  beforeSend:function(){ \n    //some js code \n  }, \n  success:function(msg){ \n    console.log(msg) \n  }, \n  error:function(){ \n    console.log(\"error\") \n  } \n})\n```","source":"_posts/常见的四种post方式.md","raw":"---\ntitle: 常见的四种post方式\ndate: 2019-07-16 10:21:57\ncategories: WEB\n---\n自己常常在开发过程中被后台研发要求的数据格式搞的十分混乱，常常觉得自己记错了，常常不确定怎么设置header。所以现在进行一个彻底的总结。\n\n<!--more-->\n\n\n# 常见的四种post方式\n\n1. application/x-www-form-urlencoded\n2. multipart/form-data\n3. text-plain\n4. application/json\n\n## 一个form标签中的enctype有三种类型\n\n1. application/x-www-form-urlencoded\n2. multipart/form-data\n3. text-plain\n\nenctype 属性规定在发送到服务器之前应该如何对表单数据进行编码，默认的情况下是 application/x-www-urlencoded,就是说，在发送到服务器之前，所有的字符都会进行编码。当表单使用POST请求时，数据会被以x-www-urlencoded，当表单使用POST请求时，数据会被以x-www-urlencoede方式编码到Body中来传送。\n\n而如果是get请求，则是附在url链接后面来传送。\n\nget请求只支持ASCLL字符集，因此，如果我们要发送更大字符集的内容，我们应使用POST请求。\n\n## 注意\n\n如果要发送大量的二进制数据（non-ASCLL）,\"application/x-www-form-urlencoded\"是最低效的，因为它需要用3个字符来表示一个non-ASCLL的字符。因此这时就要使用\"multipart/form-data\"。\n\n## application/x-www-form-urlencoded\n**在发送前编码所有字符**\n\n在通过HTTP向服务器发送POST请求数据，都是通过form表单形式提交的，代码如下：\n\n```html\n<form method=\"post\" action=\"http://w.sohu.com\">\n    <input type =\"text\" name=\"text1\">\n    <input type=\"text\" name=\"text2\">\n</form>\n```\n提交数据时会向服务器端发出这样的数据\n\n```\nPOST / HTTP/1.1\nContent-Type:application/x-www-form-urlencoded\nAccept-Encoding: gzip, deflate\nHost: w.sohu.com\nContent-Length: 21\nConnection: Keep-Alive\nCache-Control: no-cache\n\ntxt1=hello&txt2=world\n\n```\n\n对于普通的HTML Form POST 请求，它会在头信息里使用Content-Length 注明长度。\n请求头信息每行一条，空行之后便是Body,即内容。内容格式是在头信息中的Content-Type，如上是application/x-www-form-urlencoded。这也意味着消息内容会经过URL格式编码，就像是GET请求时URL中的QueryString。`text1=hello&text2=world`\n\n## multipart/form-data\n**不对字符编码，在使用包含文件上传的表单时，必须使用该值**\n\n通过form 表单提交文件操作如下：\n```html\n<FORM method=\"POST\" action=\"http://w.sohu.com/t2/upload.do\" enctype=\"multipart/form-data\">\n    <INPUT type=\"text\" name=\"city\" value=\"Santa colo\">\n    <INPUT type=\"text\" name=\"desc\">\n    <INPUT type=\"file\" name=\"pic\">\n</FORM>\n```\n浏览器将会发送以下数据：\n\n```\nPOST /t2/upload.do HTTP/1.1\nUser-Agent: SOHUWapRebot\nAccept-Language: zh-cn,zh;q=0.5\nAccept-Charset: GBK,utf-8;q=0.7,*;q=0.7\nConnection: keep-alive\nContent-Length: 60408\nContent-Type:multipart/form-data; boundary=ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC\nHost: w.sohu.com\n\n--ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC\nContent-Disposition: form-data; name=\"city\"\n\nSanta colo\n--ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC\nContent-Disposition: form-data;name=\"desc\"\nContent-Type: text/plain; charset=UTF-8\nContent-Transfer-Encoding: 8bit\n \n...\n--ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC\nContent-Disposition: form-data;name=\"pic\"; filename=\"photo.jpg\"\nContent-Type: application/octet-stream\nContent-Transfer-Encoding: binary\n \n... binary data of the jpg ...\n--ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC--\n```\n\n从上面的 multipart/form-data 格式发送的请求来看，他包含了多个parts，每个part都包含头部信息部分，part头信息中必须包含一个Content-disposition 头，其他的头信息则为可选项，比如：Content-Type 等。\n\n## text/plain\n\n**空格转换为“+”加号，但不对特殊字符编码\n```javascript\n<form action=\"/example/html/form_action.asp\" method=\"get\" enctype=\"text/plain\">\n  First name: <input type=\"text\" name=\"fname\" /><br />\n  Last name: <input type=\"text\" name=\"lname\" /><br />\n  <input type=\"submit\" value=\"Submit\" />\n</form>\n```\n\n## application/json\n最终发送的请求是：\n```\nBASHPOST http://www.example.com HTTP/1.1 \nContent-Type: application/json;charset=utf-8\n\n{\"title\":\"test\",\"sub\":[1,2,3]}\n```\n\n## Boundary 分隔符\n\n每个部分使用 --boundary 分割开来，最后一行使用--boundary--结尾\n\n\n\n# ajax 解读\n\n```javascript\n\nvar xhr = new XMLHTTPRequest();\n\nxhr.open(\"method\", \"url\", \"async\");\n\nxhr.send(null);\n\nxhr.onreadystatechange = function(){\n\n    if(xhr.readystate == 4){\n\n　　　if(xhr.status == 200){\n\n　　　　　console.log(xhr.responseText)\n\n　　　}\n\n　　}\n}\n```\n\n- XMLHTTPRequest对象\n- 常用方法：\n    - `open(\"method\",'url','async')`\n        - method 表示通过什么方式进行服务器访问，包括post和get\n        - url 表示访问服务器的地址\n        - async 表示是否异步，包括true(异步)和false\n    - `send(content)`\n        - content 表示向服务器发送的数据。\n\n\n## 原生 JS 的封装\n\n```javascript\n\n//可以以下步骤代替上面的open、setRequestHeader、send三行，此处对GET和POST做了很好的区分\nfunction ajax(){ \n  var ajaxData = { \n    type: (arguments[0].type || \"GET\").toUpperCase(), \n    url: arguments[0].url || \"\", \n    async: arguments[0].async || \"true\", \n    data: arguments[0].data || null, \n    dataType: arguments[0].dataType || \"json\", \n    contentType: arguments[0].contentType || \"application/x-www-form-urlencoded; charset=utf-8\", \n    beforeSend: arguments[0].beforeSend || function(){}, \n    success: arguments[0].success || function(){}, \n    error: arguments[0].error || function(){} \n  } \n\n  ajaxData.beforeSend() \n  var xhr = createxmlHttpRequest();  \n  xhr.responseType=ajaxData.dataType; \n\n  xhr.open(ajaxData.type,ajaxData.url,ajaxData.async);  \n  xhr.setRequestHeader(\"Content-Type\",ajaxData.contentType);  \n  xhr.send(convertData(ajaxData.data));  \n\n  xhr.onreadystatechange = function() {  \n    if (xhr.readyState == 4) {  \n      if(xhr.status == 200){ \n        ajaxData.success(xhr.response) \n      }else{ \n        ajaxData.error() \n      }  \n    } \n  }  \n} \n\nfunction createxmlHttpRequest() {  \n  if (window.ActiveXObject) {  \n    return new ActiveXObject(\"Microsoft.XMLHTTP\");  \n  } else if (window.XMLHttpRequest) {  \n    return new XMLHttpRequest();  \n  }  \n} \n  \nfunction convertData(data){ \n  if( typeof data === 'object' ){ \n    var convertResult = \"\" ;  \n    for(var c in data){  \n      convertResult+= c + \"=\" + data[c] + \"&\";  \n    }  \n    convertResult=convertResult.substring(0,convertResult.length-1) \n    return convertResult; \n  }else{ \n    return data; \n  } \n}\n\najax({ \n  type:\"POST\", \n  url:\"ajax.php\", \n  dataType:\"json\", \n  data:{\n    \"name\":\"abc\",\n    \"age\":123,\n    \"id\":\"456\"\n　}, \n  beforeSend:function(){ \n    //some js code \n  }, \n  success:function(msg){ \n    console.log(msg) \n  }, \n  error:function(){ \n    console.log(\"error\") \n  } \n})\n```","slug":"常见的四种post方式","published":1,"updated":"2021-03-01T03:47:26.028Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmejaesm002dxcvr7e56578b","content":"<p>自己常常在开发过程中被后台研发要求的数据格式搞的十分混乱，常常觉得自己记错了，常常不确定怎么设置header。所以现在进行一个彻底的总结。</p>\n<span id=\"more\"></span>\n\n\n<h1 id=\"常见的四种post方式\"><a href=\"#常见的四种post方式\" class=\"headerlink\" title=\"常见的四种post方式\"></a>常见的四种post方式</h1><ol>\n<li>application/x-www-form-urlencoded</li>\n<li>multipart/form-data</li>\n<li>text-plain</li>\n<li>application/json</li>\n</ol>\n<h2 id=\"一个form标签中的enctype有三种类型\"><a href=\"#一个form标签中的enctype有三种类型\" class=\"headerlink\" title=\"一个form标签中的enctype有三种类型\"></a>一个form标签中的enctype有三种类型</h2><ol>\n<li>application/x-www-form-urlencoded</li>\n<li>multipart/form-data</li>\n<li>text-plain</li>\n</ol>\n<p>enctype 属性规定在发送到服务器之前应该如何对表单数据进行编码，默认的情况下是 application/x-www-urlencoded,就是说，在发送到服务器之前，所有的字符都会进行编码。当表单使用POST请求时，数据会被以x-www-urlencoded，当表单使用POST请求时，数据会被以x-www-urlencoede方式编码到Body中来传送。</p>\n<p>而如果是get请求，则是附在url链接后面来传送。</p>\n<p>get请求只支持ASCLL字符集，因此，如果我们要发送更大字符集的内容，我们应使用POST请求。</p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>如果要发送大量的二进制数据（non-ASCLL）,”application/x-www-form-urlencoded”是最低效的，因为它需要用3个字符来表示一个non-ASCLL的字符。因此这时就要使用”multipart/form-data”。</p>\n<h2 id=\"application-x-www-form-urlencoded\"><a href=\"#application-x-www-form-urlencoded\" class=\"headerlink\" title=\"application/x-www-form-urlencoded\"></a>application/x-www-form-urlencoded</h2><p><strong>在发送前编码所有字符</strong></p>\n<p>在通过HTTP向服务器发送POST请求数据，都是通过form表单形式提交的，代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;http://w.sohu.com&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span> =<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;text1&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;text2&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>提交数据时会向服务器端发出这样的数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST &#x2F; HTTP&#x2F;1.1</span><br><span class=\"line\">Content-Type:application&#x2F;x-www-form-urlencoded</span><br><span class=\"line\">Accept-Encoding: gzip, deflate</span><br><span class=\"line\">Host: w.sohu.com</span><br><span class=\"line\">Content-Length: 21</span><br><span class=\"line\">Connection: Keep-Alive</span><br><span class=\"line\">Cache-Control: no-cache</span><br><span class=\"line\"></span><br><span class=\"line\">txt1&#x3D;hello&amp;txt2&#x3D;world</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>对于普通的HTML Form POST 请求，它会在头信息里使用Content-Length 注明长度。<br>请求头信息每行一条，空行之后便是Body,即内容。内容格式是在头信息中的Content-Type，如上是application/x-www-form-urlencoded。这也意味着消息内容会经过URL格式编码，就像是GET请求时URL中的QueryString。<code>text1=hello&amp;text2=world</code></p>\n<h2 id=\"multipart-form-data\"><a href=\"#multipart-form-data\" class=\"headerlink\" title=\"multipart/form-data\"></a>multipart/form-data</h2><p><strong>不对字符编码，在使用包含文件上传的表单时，必须使用该值</strong></p>\n<p>通过form 表单提交文件操作如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">FORM</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;POST&quot;</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;http://w.sohu.com/t2/upload.do&quot;</span> <span class=\"attr\">enctype</span>=<span class=\"string\">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">INPUT</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;city&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Santa colo&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">INPUT</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;desc&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">INPUT</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;pic&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">FORM</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>浏览器将会发送以下数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST &#x2F;t2&#x2F;upload.do HTTP&#x2F;1.1</span><br><span class=\"line\">User-Agent: SOHUWapRebot</span><br><span class=\"line\">Accept-Language: zh-cn,zh;q&#x3D;0.5</span><br><span class=\"line\">Accept-Charset: GBK,utf-8;q&#x3D;0.7,*;q&#x3D;0.7</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">Content-Length: 60408</span><br><span class=\"line\">Content-Type:multipart&#x2F;form-data; boundary&#x3D;ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC</span><br><span class=\"line\">Host: w.sohu.com</span><br><span class=\"line\"></span><br><span class=\"line\">--ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC</span><br><span class=\"line\">Content-Disposition: form-data; name&#x3D;&quot;city&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">Santa colo</span><br><span class=\"line\">--ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC</span><br><span class=\"line\">Content-Disposition: form-data;name&#x3D;&quot;desc&quot;</span><br><span class=\"line\">Content-Type: text&#x2F;plain; charset&#x3D;UTF-8</span><br><span class=\"line\">Content-Transfer-Encoding: 8bit</span><br><span class=\"line\"> </span><br><span class=\"line\">...</span><br><span class=\"line\">--ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC</span><br><span class=\"line\">Content-Disposition: form-data;name&#x3D;&quot;pic&quot;; filename&#x3D;&quot;photo.jpg&quot;</span><br><span class=\"line\">Content-Type: application&#x2F;octet-stream</span><br><span class=\"line\">Content-Transfer-Encoding: binary</span><br><span class=\"line\"> </span><br><span class=\"line\">... binary data of the jpg ...</span><br><span class=\"line\">--ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC--</span><br></pre></td></tr></table></figure>\n\n<p>从上面的 multipart/form-data 格式发送的请求来看，他包含了多个parts，每个part都包含头部信息部分，part头信息中必须包含一个Content-disposition 头，其他的头信息则为可选项，比如：Content-Type 等。</p>\n<h2 id=\"text-plain\"><a href=\"#text-plain\" class=\"headerlink\" title=\"text/plain\"></a>text/plain</h2><p>**空格转换为“+”加号，但不对特殊字符编码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form action=<span class=\"string\">&quot;/example/html/form_action.asp&quot;</span> method=<span class=\"string\">&quot;get&quot;</span> enctype=<span class=\"string\">&quot;text/plain&quot;</span>&gt;</span><br><span class=\"line\">  First name: <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;fname&quot;</span> /&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\">  Last name: <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;lname&quot;</span> /&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\">  &lt;input type=<span class=\"string\">&quot;submit&quot;</span> value=<span class=\"string\">&quot;Submit&quot;</span> /&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"application-json\"><a href=\"#application-json\" class=\"headerlink\" title=\"application/json\"></a>application/json</h2><p>最终发送的请求是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BASHPOST http:&#x2F;&#x2F;www.example.com HTTP&#x2F;1.1 </span><br><span class=\"line\">Content-Type: application&#x2F;json;charset&#x3D;utf-8</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&quot;title&quot;:&quot;test&quot;,&quot;sub&quot;:[1,2,3]&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Boundary-分隔符\"><a href=\"#Boundary-分隔符\" class=\"headerlink\" title=\"Boundary 分隔符\"></a>Boundary 分隔符</h2><p>每个部分使用 –boundary 分割开来，最后一行使用–boundary–结尾</p>\n<h1 id=\"ajax-解读\"><a href=\"#ajax-解读\" class=\"headerlink\" title=\"ajax 解读\"></a>ajax 解读</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHTTPRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">xhr.open(<span class=\"string\">&quot;method&quot;</span>, <span class=\"string\">&quot;url&quot;</span>, <span class=\"string\">&quot;async&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">xhr.send(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(xhr.readystate == <span class=\"number\">4</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　<span class=\"keyword\">if</span>(xhr.status == <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　　<span class=\"built_in\">console</span>.log(xhr.responseText)</span><br><span class=\"line\"></span><br><span class=\"line\">　　　&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>XMLHTTPRequest对象</li>\n<li>常用方法：<ul>\n<li><code>open(&quot;method&quot;,&#39;url&#39;,&#39;async&#39;)</code><ul>\n<li>method 表示通过什么方式进行服务器访问，包括post和get</li>\n<li>url 表示访问服务器的地址</li>\n<li>async 表示是否异步，包括true(异步)和false</li>\n</ul>\n</li>\n<li><code>send(content)</code><ul>\n<li>content 表示向服务器发送的数据。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"原生-JS-的封装\"><a href=\"#原生-JS-的封装\" class=\"headerlink\" title=\"原生 JS 的封装\"></a>原生 JS 的封装</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//可以以下步骤代替上面的open、setRequestHeader、send三行，此处对GET和POST做了很好的区分</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">var</span> ajaxData = &#123; </span><br><span class=\"line\">    type: (<span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>].type || <span class=\"string\">&quot;GET&quot;</span>).toUpperCase(), </span><br><span class=\"line\">    url: <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>].url || <span class=\"string\">&quot;&quot;</span>, </span><br><span class=\"line\">    <span class=\"keyword\">async</span>: <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>].async || <span class=\"string\">&quot;true&quot;</span>, </span><br><span class=\"line\">    data: <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>].data || <span class=\"literal\">null</span>, </span><br><span class=\"line\">    dataType: <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>].dataType || <span class=\"string\">&quot;json&quot;</span>, </span><br><span class=\"line\">    contentType: <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>].contentType || <span class=\"string\">&quot;application/x-www-form-urlencoded; charset=utf-8&quot;</span>, </span><br><span class=\"line\">    beforeSend: <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>].beforeSend || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;, </span><br><span class=\"line\">    success: <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>].success || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;, </span><br><span class=\"line\">    error: <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>].error || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">  ajaxData.beforeSend() </span><br><span class=\"line\">  <span class=\"keyword\">var</span> xhr = createxmlHttpRequest();  </span><br><span class=\"line\">  xhr.responseType=ajaxData.dataType; </span><br><span class=\"line\"></span><br><span class=\"line\">  xhr.open(ajaxData.type,ajaxData.url,ajaxData.async);  </span><br><span class=\"line\">  xhr.setRequestHeader(<span class=\"string\">&quot;Content-Type&quot;</span>,ajaxData.contentType);  </span><br><span class=\"line\">  xhr.send(convertData(ajaxData.data));  </span><br><span class=\"line\"></span><br><span class=\"line\">  xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (xhr.readyState == <span class=\"number\">4</span>) &#123;  </span><br><span class=\"line\">      <span class=\"keyword\">if</span>(xhr.status == <span class=\"number\">200</span>)&#123; </span><br><span class=\"line\">        ajaxData.success(xhr.response) </span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123; </span><br><span class=\"line\">        ajaxData.error() </span><br><span class=\"line\">      &#125;  </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createxmlHttpRequest</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.ActiveXObject) &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">&quot;Microsoft.XMLHTTP&quot;</span>);  </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.XMLHttpRequest) &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> XMLHttpRequest();  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">convertData</span>(<span class=\"params\">data</span>)</span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">if</span>( <span class=\"keyword\">typeof</span> data === <span class=\"string\">&#x27;object&#x27;</span> )&#123; </span><br><span class=\"line\">    <span class=\"keyword\">var</span> convertResult = <span class=\"string\">&quot;&quot;</span> ;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> c <span class=\"keyword\">in</span> data)&#123;  </span><br><span class=\"line\">      convertResult+= c + <span class=\"string\">&quot;=&quot;</span> + data[c] + <span class=\"string\">&quot;&amp;&quot;</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    convertResult=convertResult.substring(<span class=\"number\">0</span>,convertResult.length-<span class=\"number\">1</span>) </span><br><span class=\"line\">    <span class=\"keyword\">return</span> convertResult; </span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> data; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ajax(&#123; </span><br><span class=\"line\">  type:<span class=\"string\">&quot;POST&quot;</span>, </span><br><span class=\"line\">  url:<span class=\"string\">&quot;ajax.php&quot;</span>, </span><br><span class=\"line\">  dataType:<span class=\"string\">&quot;json&quot;</span>, </span><br><span class=\"line\">  data:&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;abc&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;age&quot;</span>:<span class=\"number\">123</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;id&quot;</span>:<span class=\"string\">&quot;456&quot;</span></span><br><span class=\"line\">　&#125;, </span><br><span class=\"line\">  beforeSend:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\">    <span class=\"comment\">//some js code </span></span><br><span class=\"line\">  &#125;, </span><br><span class=\"line\">  success:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>)</span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(msg) </span><br><span class=\"line\">  &#125;, </span><br><span class=\"line\">  error:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;error&quot;</span>) </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>自己常常在开发过程中被后台研发要求的数据格式搞的十分混乱，常常觉得自己记错了，常常不确定怎么设置header。所以现在进行一个彻底的总结。</p>","more":"<h1 id=\"常见的四种post方式\"><a href=\"#常见的四种post方式\" class=\"headerlink\" title=\"常见的四种post方式\"></a>常见的四种post方式</h1><ol>\n<li>application/x-www-form-urlencoded</li>\n<li>multipart/form-data</li>\n<li>text-plain</li>\n<li>application/json</li>\n</ol>\n<h2 id=\"一个form标签中的enctype有三种类型\"><a href=\"#一个form标签中的enctype有三种类型\" class=\"headerlink\" title=\"一个form标签中的enctype有三种类型\"></a>一个form标签中的enctype有三种类型</h2><ol>\n<li>application/x-www-form-urlencoded</li>\n<li>multipart/form-data</li>\n<li>text-plain</li>\n</ol>\n<p>enctype 属性规定在发送到服务器之前应该如何对表单数据进行编码，默认的情况下是 application/x-www-urlencoded,就是说，在发送到服务器之前，所有的字符都会进行编码。当表单使用POST请求时，数据会被以x-www-urlencoded，当表单使用POST请求时，数据会被以x-www-urlencoede方式编码到Body中来传送。</p>\n<p>而如果是get请求，则是附在url链接后面来传送。</p>\n<p>get请求只支持ASCLL字符集，因此，如果我们要发送更大字符集的内容，我们应使用POST请求。</p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>如果要发送大量的二进制数据（non-ASCLL）,”application/x-www-form-urlencoded”是最低效的，因为它需要用3个字符来表示一个non-ASCLL的字符。因此这时就要使用”multipart/form-data”。</p>\n<h2 id=\"application-x-www-form-urlencoded\"><a href=\"#application-x-www-form-urlencoded\" class=\"headerlink\" title=\"application/x-www-form-urlencoded\"></a>application/x-www-form-urlencoded</h2><p><strong>在发送前编码所有字符</strong></p>\n<p>在通过HTTP向服务器发送POST请求数据，都是通过form表单形式提交的，代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;http://w.sohu.com&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span> =<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;text1&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;text2&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>提交数据时会向服务器端发出这样的数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST &#x2F; HTTP&#x2F;1.1</span><br><span class=\"line\">Content-Type:application&#x2F;x-www-form-urlencoded</span><br><span class=\"line\">Accept-Encoding: gzip, deflate</span><br><span class=\"line\">Host: w.sohu.com</span><br><span class=\"line\">Content-Length: 21</span><br><span class=\"line\">Connection: Keep-Alive</span><br><span class=\"line\">Cache-Control: no-cache</span><br><span class=\"line\"></span><br><span class=\"line\">txt1&#x3D;hello&amp;txt2&#x3D;world</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>对于普通的HTML Form POST 请求，它会在头信息里使用Content-Length 注明长度。<br>请求头信息每行一条，空行之后便是Body,即内容。内容格式是在头信息中的Content-Type，如上是application/x-www-form-urlencoded。这也意味着消息内容会经过URL格式编码，就像是GET请求时URL中的QueryString。<code>text1=hello&amp;text2=world</code></p>\n<h2 id=\"multipart-form-data\"><a href=\"#multipart-form-data\" class=\"headerlink\" title=\"multipart/form-data\"></a>multipart/form-data</h2><p><strong>不对字符编码，在使用包含文件上传的表单时，必须使用该值</strong></p>\n<p>通过form 表单提交文件操作如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">FORM</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;POST&quot;</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;http://w.sohu.com/t2/upload.do&quot;</span> <span class=\"attr\">enctype</span>=<span class=\"string\">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">INPUT</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;city&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Santa colo&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">INPUT</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;desc&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">INPUT</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;pic&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">FORM</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>浏览器将会发送以下数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST &#x2F;t2&#x2F;upload.do HTTP&#x2F;1.1</span><br><span class=\"line\">User-Agent: SOHUWapRebot</span><br><span class=\"line\">Accept-Language: zh-cn,zh;q&#x3D;0.5</span><br><span class=\"line\">Accept-Charset: GBK,utf-8;q&#x3D;0.7,*;q&#x3D;0.7</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">Content-Length: 60408</span><br><span class=\"line\">Content-Type:multipart&#x2F;form-data; boundary&#x3D;ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC</span><br><span class=\"line\">Host: w.sohu.com</span><br><span class=\"line\"></span><br><span class=\"line\">--ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC</span><br><span class=\"line\">Content-Disposition: form-data; name&#x3D;&quot;city&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">Santa colo</span><br><span class=\"line\">--ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC</span><br><span class=\"line\">Content-Disposition: form-data;name&#x3D;&quot;desc&quot;</span><br><span class=\"line\">Content-Type: text&#x2F;plain; charset&#x3D;UTF-8</span><br><span class=\"line\">Content-Transfer-Encoding: 8bit</span><br><span class=\"line\"> </span><br><span class=\"line\">...</span><br><span class=\"line\">--ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC</span><br><span class=\"line\">Content-Disposition: form-data;name&#x3D;&quot;pic&quot;; filename&#x3D;&quot;photo.jpg&quot;</span><br><span class=\"line\">Content-Type: application&#x2F;octet-stream</span><br><span class=\"line\">Content-Transfer-Encoding: binary</span><br><span class=\"line\"> </span><br><span class=\"line\">... binary data of the jpg ...</span><br><span class=\"line\">--ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC--</span><br></pre></td></tr></table></figure>\n\n<p>从上面的 multipart/form-data 格式发送的请求来看，他包含了多个parts，每个part都包含头部信息部分，part头信息中必须包含一个Content-disposition 头，其他的头信息则为可选项，比如：Content-Type 等。</p>\n<h2 id=\"text-plain\"><a href=\"#text-plain\" class=\"headerlink\" title=\"text/plain\"></a>text/plain</h2><p>**空格转换为“+”加号，但不对特殊字符编码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form action=<span class=\"string\">&quot;/example/html/form_action.asp&quot;</span> method=<span class=\"string\">&quot;get&quot;</span> enctype=<span class=\"string\">&quot;text/plain&quot;</span>&gt;</span><br><span class=\"line\">  First name: <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;fname&quot;</span> /&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\">  Last name: <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;lname&quot;</span> /&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\">  &lt;input type=<span class=\"string\">&quot;submit&quot;</span> value=<span class=\"string\">&quot;Submit&quot;</span> /&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"application-json\"><a href=\"#application-json\" class=\"headerlink\" title=\"application/json\"></a>application/json</h2><p>最终发送的请求是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BASHPOST http:&#x2F;&#x2F;www.example.com HTTP&#x2F;1.1 </span><br><span class=\"line\">Content-Type: application&#x2F;json;charset&#x3D;utf-8</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&quot;title&quot;:&quot;test&quot;,&quot;sub&quot;:[1,2,3]&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Boundary-分隔符\"><a href=\"#Boundary-分隔符\" class=\"headerlink\" title=\"Boundary 分隔符\"></a>Boundary 分隔符</h2><p>每个部分使用 –boundary 分割开来，最后一行使用–boundary–结尾</p>\n<h1 id=\"ajax-解读\"><a href=\"#ajax-解读\" class=\"headerlink\" title=\"ajax 解读\"></a>ajax 解读</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHTTPRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">xhr.open(<span class=\"string\">&quot;method&quot;</span>, <span class=\"string\">&quot;url&quot;</span>, <span class=\"string\">&quot;async&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">xhr.send(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(xhr.readystate == <span class=\"number\">4</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　<span class=\"keyword\">if</span>(xhr.status == <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　　<span class=\"built_in\">console</span>.log(xhr.responseText)</span><br><span class=\"line\"></span><br><span class=\"line\">　　　&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>XMLHTTPRequest对象</li>\n<li>常用方法：<ul>\n<li><code>open(&quot;method&quot;,&#39;url&#39;,&#39;async&#39;)</code><ul>\n<li>method 表示通过什么方式进行服务器访问，包括post和get</li>\n<li>url 表示访问服务器的地址</li>\n<li>async 表示是否异步，包括true(异步)和false</li>\n</ul>\n</li>\n<li><code>send(content)</code><ul>\n<li>content 表示向服务器发送的数据。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"原生-JS-的封装\"><a href=\"#原生-JS-的封装\" class=\"headerlink\" title=\"原生 JS 的封装\"></a>原生 JS 的封装</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//可以以下步骤代替上面的open、setRequestHeader、send三行，此处对GET和POST做了很好的区分</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">var</span> ajaxData = &#123; </span><br><span class=\"line\">    type: (<span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>].type || <span class=\"string\">&quot;GET&quot;</span>).toUpperCase(), </span><br><span class=\"line\">    url: <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>].url || <span class=\"string\">&quot;&quot;</span>, </span><br><span class=\"line\">    <span class=\"keyword\">async</span>: <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>].async || <span class=\"string\">&quot;true&quot;</span>, </span><br><span class=\"line\">    data: <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>].data || <span class=\"literal\">null</span>, </span><br><span class=\"line\">    dataType: <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>].dataType || <span class=\"string\">&quot;json&quot;</span>, </span><br><span class=\"line\">    contentType: <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>].contentType || <span class=\"string\">&quot;application/x-www-form-urlencoded; charset=utf-8&quot;</span>, </span><br><span class=\"line\">    beforeSend: <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>].beforeSend || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;, </span><br><span class=\"line\">    success: <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>].success || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;, </span><br><span class=\"line\">    error: <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>].error || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">  ajaxData.beforeSend() </span><br><span class=\"line\">  <span class=\"keyword\">var</span> xhr = createxmlHttpRequest();  </span><br><span class=\"line\">  xhr.responseType=ajaxData.dataType; </span><br><span class=\"line\"></span><br><span class=\"line\">  xhr.open(ajaxData.type,ajaxData.url,ajaxData.async);  </span><br><span class=\"line\">  xhr.setRequestHeader(<span class=\"string\">&quot;Content-Type&quot;</span>,ajaxData.contentType);  </span><br><span class=\"line\">  xhr.send(convertData(ajaxData.data));  </span><br><span class=\"line\"></span><br><span class=\"line\">  xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (xhr.readyState == <span class=\"number\">4</span>) &#123;  </span><br><span class=\"line\">      <span class=\"keyword\">if</span>(xhr.status == <span class=\"number\">200</span>)&#123; </span><br><span class=\"line\">        ajaxData.success(xhr.response) </span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123; </span><br><span class=\"line\">        ajaxData.error() </span><br><span class=\"line\">      &#125;  </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createxmlHttpRequest</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.ActiveXObject) &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">&quot;Microsoft.XMLHTTP&quot;</span>);  </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.XMLHttpRequest) &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> XMLHttpRequest();  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">convertData</span>(<span class=\"params\">data</span>)</span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">if</span>( <span class=\"keyword\">typeof</span> data === <span class=\"string\">&#x27;object&#x27;</span> )&#123; </span><br><span class=\"line\">    <span class=\"keyword\">var</span> convertResult = <span class=\"string\">&quot;&quot;</span> ;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> c <span class=\"keyword\">in</span> data)&#123;  </span><br><span class=\"line\">      convertResult+= c + <span class=\"string\">&quot;=&quot;</span> + data[c] + <span class=\"string\">&quot;&amp;&quot;</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    convertResult=convertResult.substring(<span class=\"number\">0</span>,convertResult.length-<span class=\"number\">1</span>) </span><br><span class=\"line\">    <span class=\"keyword\">return</span> convertResult; </span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> data; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ajax(&#123; </span><br><span class=\"line\">  type:<span class=\"string\">&quot;POST&quot;</span>, </span><br><span class=\"line\">  url:<span class=\"string\">&quot;ajax.php&quot;</span>, </span><br><span class=\"line\">  dataType:<span class=\"string\">&quot;json&quot;</span>, </span><br><span class=\"line\">  data:&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;abc&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;age&quot;</span>:<span class=\"number\">123</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;id&quot;</span>:<span class=\"string\">&quot;456&quot;</span></span><br><span class=\"line\">　&#125;, </span><br><span class=\"line\">  beforeSend:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\">    <span class=\"comment\">//some js code </span></span><br><span class=\"line\">  &#125;, </span><br><span class=\"line\">  success:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>)</span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(msg) </span><br><span class=\"line\">  &#125;, </span><br><span class=\"line\">  error:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;error&quot;</span>) </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>"},{"title":"数组操作方法","date":"2017-11-01T08:52:42.000Z","_content":"\n**数组原形方法有以下几种**:\n\n`join()`,`push()`,`pop()`,`sort()`,`reverse()`,`concat()`,`slice()`,`splice()`,`indexOf()`,`lastIndexOf()`,`forEach()`,`map()`, `filter()`,`every()`,`some()`,`reduce()`,`reduceRigh()`\n\n<!--more-->\n\n## join()，不改变原数组。\n\njoin(separator): 将数组的元素组成一个字符串，以 separator 为分隔符，省略则默认为逗号，该方法只接受一个参数。\n\n```javascript\nvar arr = [1, 2, 3];\nconsole.log(arr.join()); // 1,2,3\nconsole.log(arr.join(\"-\")); // 1-2-3\nconsole.log(arr); // [1, 2, 3]（原数组不变）\n```\n\n## push() 与 pop()，改变元素组\n\n* push(): 可以接受任意数量的数组，把它们，把他们逐个添加到数组末尾，**并返回修改后数组的长度**。\n* pop(): 数组末尾移除最后一项，减少数组的 length 的值，然后返回移除的项。\n\n```javascript\nvar arr = [\"Lily\", \"lucy\", \"Tom\"];\nvar count = arr.push(\"Jack\", \"Sean\");\nconsole.log(count); // 5\nconsole.log(arr); // [\"Lily\", \"lucy\", \"Tom\", \"Jack\", \"Sean\"]\nvar item = arr.pop();\nconsole.log(item); // Sean\nconsole.log(arr); // [\"Lily\", \"lucy\", \"Tom\", \"Jack\"]\n```\n\n## shift() 和 unshift()，改变原数组\n\n* shift(): 删除原数组的第一项，并返回删除元素的值，如果为空则返回 undefined。\n* unshift(): 将参数添加到原数组开头，**并返回数组的长度**。\n\n```javascript\nvar arr = [\"Lily\", \"lucy\", \"Tom\"];\nvar count = arr.unshift(\"Jack\", \"Sean\");\nconsole.log(count); // 5\nconsole.log(arr); //[\"Jack\", \"Sean\", \"Lily\", \"lucy\", \"Tom\"]\nvar item = arr.shift();\nconsole.log(item); // Jack\nconsole.log(arr); // [\"Sean\", \"Lily\", \"lucy\", \"Tom\"]\n```\n\n## sort(), 改变原数组\n\n按升序列排序数组系那个（从小到大），在排序时，sort() 方法会调用每个数组的 toString() 转型方法，**然后比较得到的字符串**，已确定如何排序。即使数组中每一个都是数值 ,sort() 方法比较的意识字符串，因此会出现以下情况：\n\n```javascript\nvar arr1 = [\"a\", \"d\", \"c\", \"b\"];\nconsole.log(arr1.sort()); // [\"a\", \"b\", \"c\", \"d\"]\narr2 = [13, 24, 51, 3];\nconsole.log(arr2.sort()); // [13, 24, 3, 51]\nconsole.log(arr2); // [13, 24, 3, 51](元数组被改变)\nvar scores = [1, 10, 21, 2];\nscores.sort(); // [1, 10, 2, 21] 注意10在2之前  因为在 Unicode 指针顺序中\"10\"在\"2\"之前\n```\n\n为了解决上述问题，sort() 方法可以接受一个参数，以便指定哪个值位于哪个值前面。比较函数接受两个参数，如果第一个参数应该位于第二个之前则返回一个负数，如果两个参数相等则返回 0，如果第一个参数应该位于第二个参数之后则返回一个正数。一下是比较函数：\n\n```javascript\nfunction compare(value1, value2) {\n  if (value1 < value2) {\n    return -1;\n  } else if (value1 > value2) {\n    return 1;\n  } else {\n    return 0;\n  }\n}\narr2 = [13, 24, 51, 3];\nconsole.log(arr2.sort(compare)); // [3, 13, 24, 51]\n```\n\n如果需要通过比较函数产生降序排序的结果，只要交换比较函数的返回值即可。\n\n## reverse() ，改变原数组\n\nreverse(): 反转数组项的顺序\n\n```javascript\nreverse()：反转数组项的顺序。\n?\n1\n2\n3\nvar arr = [13, 24, 51, 3];\nconsole.log(arr.reverse()); //[3, 51, 24, 13]\nconsole.log(arr); //[3, 51, 24, 13](原数组改变)\n```\n\n## concat()，不改变原数组\n\nconcat()：将参数添加到元素组中，这个方法会先创建当前数组的一个副本，然后将接受到的参数添加到这个副本的末尾，最后返回新构建的数组，**在没有给 concat() 方法传递一个参数的情况下，它只是复制当前数组并返回副本。**\n\n```javascript\nvar arr = [1, 3, 5, 7];\nvar arrCopy = arr.concat(9, [11, 13]);\nconsole.log(arrCopy); //[1, 3, 5, 7, 9, 11, 13]\nconsole.log(arr); // [1, 3, 5, 7](原数组未被修改)\n```\n\n上面的测试中发现，传入的不是数组，则是直接将数组添加到数组后面，**如果传入的是数组，则将数组中的各个项添加到数组中，但如果是二维数组呢？**\n\n```javascript\nvar arrCopy2 = arr.concat([9, [11, 13]]);\nconsole.log(arrCopy2); //[1, 3, 5, 7, 9, Array[2]]\nconsole.log(arrCopy2[5]); //[11, 13]\n```\n\n## slice() 不改变原数组\n\nslice(): 返回从原数组中指定开始下标到结束下标之间的项组成的新数组。slice() 方法可以接受一或是两个参数，即要返回项的起始和结束位置。在只有一个参数的情况下，slice() 方法返回从该参数指定位置到当前数组末尾的所有项。如果有两个参数，就会返回起始和结束位置之前的项 - 但不包括结束位置的项。\n\n```javascript\nvar arr = [1, 3, 5, 7, 9, 11];\nvar arrCopy = arr.slice(1);\nvar arrCopy2 = arr.slice(1, 4);\nvar arrCopy3 = arr.slice(1, -2);\nvar arrCopy4 = arr.slice(-4, -1);\nconsole.log(arr); //[1, 3, 5, 7, 9, 11](原数组没变)\nconsole.log(arrCopy); //[3, 5, 7, 9, 11]\nconsole.log(arrCopy2); //[3, 5, 7]\nconsole.log(arrCopy3); //[3, 5, 7]\nconsole.log(arrCopy4); //[5, 7, 9]\n```\n\n## splice() 可以实现删除、插入和替换 改变原数组\n\n* 删除：可以删除任意数量的项，只需要提供两个参数，要删除的个一个项的位置和要删除的橡树。例如，splice(0,2) 会删除数组中的前两项。\n* 插入：可以向指定位置插入任意数量的项，需要 3 个参数，起始位置、0 （要删除的项数）和要插入的项，例如 splice(2,0,4,6) 会在当前数组的位置 2 开始插入 4 和 6\n* 替换：可以向指定的位置插入任意的项，同时删除任意数量的项。需要 3 个参数，只需要指定 3 个参数，起始位置、要删除的项数和要插入的任意数量的项。插入的项数不必与删除的项数相等，例如 splice(2,1,4,6) 会删除当前数组位置 2 的项，然后再从位置 2 开始插入 4 和 6。\n\n```javascript\nvar arr = [1, 3, 5, 7, 9, 11];\nvar arrRemoved = arr.splice(0, 2);\nconsole.log(arr); //[5, 7, 9, 11]\nconsole.log(arrRemoved); //[1, 3]\nvar arrRemoved2 = arr.splice(2, 0, 4, 6);\nconsole.log(arr); // [5, 7, 4, 6, 9, 11]\nconsole.log(arrRemoved2); // []\nvar arrRemoved3 = arr.splice(1, 1, 2, 4);\nconsole.log(arr); // [5, 2, 4, 4, 6, 9, 11]\nconsole.log(arrRemoved3); //[7]\n```\n\n## indexOf() 和 lastIndexOf()\n\n* indexOf()：接受两个参数，要查找的项和（可选的）表示查找七点位置的索引。从数组的开头开始查找。\n* lastIndexOf() ：接受两个参数：要查找的项和（可选的）表示查找起点位置的索引。从数组的末尾开始查找\n\n```javascript\nvar arr = [1, 3, 5, 7, 7, 5, 3, 1];\nconsole.log(arr.indexOf(5)); //2\nconsole.log(arr.lastIndexOf(5)); //5\nconsole.log(arr.indexOf(5, 2)); //2\nconsole.log(arr.lastIndexOf(5, 4)); //2\nconsole.log(arr.indexOf(\"5\")); //-1\n```\n\n## forEach() 遍历\n\n对数组进行遍历循环遍历，对数组的每一项运行给定函数，这个方法没有返回值，参数都是 function 类型，默认参数分别有：遍历数组内容、对应的数组索引、数组本身。\n\n```javascript\nvar arr = [1, 2, 3, 4, 5];\narr.forEach(function(x, index, a) {\n  console.log(x + \"|\" + index + \"|\" + (a === arr));\n});\n// 输出为：\n// 1|0|true\n// 2|1|true\n// 3|2|true\n// 4|3|true\n// 5|4|true\n```\n\n## map()\n\nmap() ：指 “ 映射 ”，对数组中的每一项运行给定函数，返回每一次函数调用的结果组成的数组。\n\n```javascript\nvar arr = [1, 2, 3, 4, 5];\nvar arr2 = arr.map(function(item) {\n  return item * item;\n});\nconsole.log(arr2); //[1, 4, 9, 16, 25]\n```\n\n## filter()\n\nfilter(): “ 过滤功能 ”，数组中的每一项运行给定函数，返回满足过滤条件组成的数组。\n\n```javascript\nvar arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar arr2 = arr.filter(function(x, index) {\nreturn index % 3 === 0 || x >= 8;\n});\nconsole.log(arr2); //[1, 4, 7, 8, 9, 10]\n```\n\n## every()\n\nevery() ，判断数组中每一项都是满足条件，只有所有项都满足条件才会返回 true。\n\n```javascript\nvar arr = [1, 2, 3, 4, 5];\nvar arr2 = arr.every(function(x) {\n  return x < 10;\n});\nconsole.log(arr2); //true\nvar arr3 = arr.every(function(x) {\n  return x < 3;\n});\nconsole.log(arr3); // false\n```\n\n## some()\n\nsome() ：判断数组中是否存在满足条件的项，只要有一项满足，就会返回 true。\n\n```javascript\nvar arr = [1, 2, 3, 4, 5];\nvar arr2 = arr.some(function(x) {\n  return x < 3;\n});\nconsole.log(arr2); //true\nvar arr3 = arr.some(function(x) {\n  return x < 1;\n});\nconsole.log(arr3); // false\n```\n\n## reduce() 和 reduceRight()\n\n这两个都会实现迭代数组所有项，然后构建一个最终返回的值。reduce() 方法从数组的第一项开始，逐个遍历到最后，然而 reduceRight() 则是从数组的最后一项开始，向前遍历到第一项。下面代码实现了数组求和：\n\n```javascript\nvar values = [1, 2, 3, 4, 5];\nvar sum = values.reduceRight(function(prev, cur, index, array) {\n  return prev + cur;\n}, 10);\nconsole.log(sum); //25\n```\n\nreduce() 方法接收一个函数作为累加器。每个值（从左到右开始缩减），直到计算最后一个值。\n\nreduce() 作为空数组是不会执行回调函数的。\n\n```javascript\nvar numbers = [65, 44, 12, 4];\n\nfunction getSum(total, num) {\n  return total + num;\n}\nfunction myFunction(item) {\n  document.getElementById(\"demo\").innerHTML = numbers.reduce(getSum);\n}\n```\n","source":"_posts/数组操作方法.md","raw":"---\ntitle: 数组操作方法\ndate: 2017-11-1 16:52:42\ncategories: JavaScript\n---\n\n**数组原形方法有以下几种**:\n\n`join()`,`push()`,`pop()`,`sort()`,`reverse()`,`concat()`,`slice()`,`splice()`,`indexOf()`,`lastIndexOf()`,`forEach()`,`map()`, `filter()`,`every()`,`some()`,`reduce()`,`reduceRigh()`\n\n<!--more-->\n\n## join()，不改变原数组。\n\njoin(separator): 将数组的元素组成一个字符串，以 separator 为分隔符，省略则默认为逗号，该方法只接受一个参数。\n\n```javascript\nvar arr = [1, 2, 3];\nconsole.log(arr.join()); // 1,2,3\nconsole.log(arr.join(\"-\")); // 1-2-3\nconsole.log(arr); // [1, 2, 3]（原数组不变）\n```\n\n## push() 与 pop()，改变元素组\n\n* push(): 可以接受任意数量的数组，把它们，把他们逐个添加到数组末尾，**并返回修改后数组的长度**。\n* pop(): 数组末尾移除最后一项，减少数组的 length 的值，然后返回移除的项。\n\n```javascript\nvar arr = [\"Lily\", \"lucy\", \"Tom\"];\nvar count = arr.push(\"Jack\", \"Sean\");\nconsole.log(count); // 5\nconsole.log(arr); // [\"Lily\", \"lucy\", \"Tom\", \"Jack\", \"Sean\"]\nvar item = arr.pop();\nconsole.log(item); // Sean\nconsole.log(arr); // [\"Lily\", \"lucy\", \"Tom\", \"Jack\"]\n```\n\n## shift() 和 unshift()，改变原数组\n\n* shift(): 删除原数组的第一项，并返回删除元素的值，如果为空则返回 undefined。\n* unshift(): 将参数添加到原数组开头，**并返回数组的长度**。\n\n```javascript\nvar arr = [\"Lily\", \"lucy\", \"Tom\"];\nvar count = arr.unshift(\"Jack\", \"Sean\");\nconsole.log(count); // 5\nconsole.log(arr); //[\"Jack\", \"Sean\", \"Lily\", \"lucy\", \"Tom\"]\nvar item = arr.shift();\nconsole.log(item); // Jack\nconsole.log(arr); // [\"Sean\", \"Lily\", \"lucy\", \"Tom\"]\n```\n\n## sort(), 改变原数组\n\n按升序列排序数组系那个（从小到大），在排序时，sort() 方法会调用每个数组的 toString() 转型方法，**然后比较得到的字符串**，已确定如何排序。即使数组中每一个都是数值 ,sort() 方法比较的意识字符串，因此会出现以下情况：\n\n```javascript\nvar arr1 = [\"a\", \"d\", \"c\", \"b\"];\nconsole.log(arr1.sort()); // [\"a\", \"b\", \"c\", \"d\"]\narr2 = [13, 24, 51, 3];\nconsole.log(arr2.sort()); // [13, 24, 3, 51]\nconsole.log(arr2); // [13, 24, 3, 51](元数组被改变)\nvar scores = [1, 10, 21, 2];\nscores.sort(); // [1, 10, 2, 21] 注意10在2之前  因为在 Unicode 指针顺序中\"10\"在\"2\"之前\n```\n\n为了解决上述问题，sort() 方法可以接受一个参数，以便指定哪个值位于哪个值前面。比较函数接受两个参数，如果第一个参数应该位于第二个之前则返回一个负数，如果两个参数相等则返回 0，如果第一个参数应该位于第二个参数之后则返回一个正数。一下是比较函数：\n\n```javascript\nfunction compare(value1, value2) {\n  if (value1 < value2) {\n    return -1;\n  } else if (value1 > value2) {\n    return 1;\n  } else {\n    return 0;\n  }\n}\narr2 = [13, 24, 51, 3];\nconsole.log(arr2.sort(compare)); // [3, 13, 24, 51]\n```\n\n如果需要通过比较函数产生降序排序的结果，只要交换比较函数的返回值即可。\n\n## reverse() ，改变原数组\n\nreverse(): 反转数组项的顺序\n\n```javascript\nreverse()：反转数组项的顺序。\n?\n1\n2\n3\nvar arr = [13, 24, 51, 3];\nconsole.log(arr.reverse()); //[3, 51, 24, 13]\nconsole.log(arr); //[3, 51, 24, 13](原数组改变)\n```\n\n## concat()，不改变原数组\n\nconcat()：将参数添加到元素组中，这个方法会先创建当前数组的一个副本，然后将接受到的参数添加到这个副本的末尾，最后返回新构建的数组，**在没有给 concat() 方法传递一个参数的情况下，它只是复制当前数组并返回副本。**\n\n```javascript\nvar arr = [1, 3, 5, 7];\nvar arrCopy = arr.concat(9, [11, 13]);\nconsole.log(arrCopy); //[1, 3, 5, 7, 9, 11, 13]\nconsole.log(arr); // [1, 3, 5, 7](原数组未被修改)\n```\n\n上面的测试中发现，传入的不是数组，则是直接将数组添加到数组后面，**如果传入的是数组，则将数组中的各个项添加到数组中，但如果是二维数组呢？**\n\n```javascript\nvar arrCopy2 = arr.concat([9, [11, 13]]);\nconsole.log(arrCopy2); //[1, 3, 5, 7, 9, Array[2]]\nconsole.log(arrCopy2[5]); //[11, 13]\n```\n\n## slice() 不改变原数组\n\nslice(): 返回从原数组中指定开始下标到结束下标之间的项组成的新数组。slice() 方法可以接受一或是两个参数，即要返回项的起始和结束位置。在只有一个参数的情况下，slice() 方法返回从该参数指定位置到当前数组末尾的所有项。如果有两个参数，就会返回起始和结束位置之前的项 - 但不包括结束位置的项。\n\n```javascript\nvar arr = [1, 3, 5, 7, 9, 11];\nvar arrCopy = arr.slice(1);\nvar arrCopy2 = arr.slice(1, 4);\nvar arrCopy3 = arr.slice(1, -2);\nvar arrCopy4 = arr.slice(-4, -1);\nconsole.log(arr); //[1, 3, 5, 7, 9, 11](原数组没变)\nconsole.log(arrCopy); //[3, 5, 7, 9, 11]\nconsole.log(arrCopy2); //[3, 5, 7]\nconsole.log(arrCopy3); //[3, 5, 7]\nconsole.log(arrCopy4); //[5, 7, 9]\n```\n\n## splice() 可以实现删除、插入和替换 改变原数组\n\n* 删除：可以删除任意数量的项，只需要提供两个参数，要删除的个一个项的位置和要删除的橡树。例如，splice(0,2) 会删除数组中的前两项。\n* 插入：可以向指定位置插入任意数量的项，需要 3 个参数，起始位置、0 （要删除的项数）和要插入的项，例如 splice(2,0,4,6) 会在当前数组的位置 2 开始插入 4 和 6\n* 替换：可以向指定的位置插入任意的项，同时删除任意数量的项。需要 3 个参数，只需要指定 3 个参数，起始位置、要删除的项数和要插入的任意数量的项。插入的项数不必与删除的项数相等，例如 splice(2,1,4,6) 会删除当前数组位置 2 的项，然后再从位置 2 开始插入 4 和 6。\n\n```javascript\nvar arr = [1, 3, 5, 7, 9, 11];\nvar arrRemoved = arr.splice(0, 2);\nconsole.log(arr); //[5, 7, 9, 11]\nconsole.log(arrRemoved); //[1, 3]\nvar arrRemoved2 = arr.splice(2, 0, 4, 6);\nconsole.log(arr); // [5, 7, 4, 6, 9, 11]\nconsole.log(arrRemoved2); // []\nvar arrRemoved3 = arr.splice(1, 1, 2, 4);\nconsole.log(arr); // [5, 2, 4, 4, 6, 9, 11]\nconsole.log(arrRemoved3); //[7]\n```\n\n## indexOf() 和 lastIndexOf()\n\n* indexOf()：接受两个参数，要查找的项和（可选的）表示查找七点位置的索引。从数组的开头开始查找。\n* lastIndexOf() ：接受两个参数：要查找的项和（可选的）表示查找起点位置的索引。从数组的末尾开始查找\n\n```javascript\nvar arr = [1, 3, 5, 7, 7, 5, 3, 1];\nconsole.log(arr.indexOf(5)); //2\nconsole.log(arr.lastIndexOf(5)); //5\nconsole.log(arr.indexOf(5, 2)); //2\nconsole.log(arr.lastIndexOf(5, 4)); //2\nconsole.log(arr.indexOf(\"5\")); //-1\n```\n\n## forEach() 遍历\n\n对数组进行遍历循环遍历，对数组的每一项运行给定函数，这个方法没有返回值，参数都是 function 类型，默认参数分别有：遍历数组内容、对应的数组索引、数组本身。\n\n```javascript\nvar arr = [1, 2, 3, 4, 5];\narr.forEach(function(x, index, a) {\n  console.log(x + \"|\" + index + \"|\" + (a === arr));\n});\n// 输出为：\n// 1|0|true\n// 2|1|true\n// 3|2|true\n// 4|3|true\n// 5|4|true\n```\n\n## map()\n\nmap() ：指 “ 映射 ”，对数组中的每一项运行给定函数，返回每一次函数调用的结果组成的数组。\n\n```javascript\nvar arr = [1, 2, 3, 4, 5];\nvar arr2 = arr.map(function(item) {\n  return item * item;\n});\nconsole.log(arr2); //[1, 4, 9, 16, 25]\n```\n\n## filter()\n\nfilter(): “ 过滤功能 ”，数组中的每一项运行给定函数，返回满足过滤条件组成的数组。\n\n```javascript\nvar arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar arr2 = arr.filter(function(x, index) {\nreturn index % 3 === 0 || x >= 8;\n});\nconsole.log(arr2); //[1, 4, 7, 8, 9, 10]\n```\n\n## every()\n\nevery() ，判断数组中每一项都是满足条件，只有所有项都满足条件才会返回 true。\n\n```javascript\nvar arr = [1, 2, 3, 4, 5];\nvar arr2 = arr.every(function(x) {\n  return x < 10;\n});\nconsole.log(arr2); //true\nvar arr3 = arr.every(function(x) {\n  return x < 3;\n});\nconsole.log(arr3); // false\n```\n\n## some()\n\nsome() ：判断数组中是否存在满足条件的项，只要有一项满足，就会返回 true。\n\n```javascript\nvar arr = [1, 2, 3, 4, 5];\nvar arr2 = arr.some(function(x) {\n  return x < 3;\n});\nconsole.log(arr2); //true\nvar arr3 = arr.some(function(x) {\n  return x < 1;\n});\nconsole.log(arr3); // false\n```\n\n## reduce() 和 reduceRight()\n\n这两个都会实现迭代数组所有项，然后构建一个最终返回的值。reduce() 方法从数组的第一项开始，逐个遍历到最后，然而 reduceRight() 则是从数组的最后一项开始，向前遍历到第一项。下面代码实现了数组求和：\n\n```javascript\nvar values = [1, 2, 3, 4, 5];\nvar sum = values.reduceRight(function(prev, cur, index, array) {\n  return prev + cur;\n}, 10);\nconsole.log(sum); //25\n```\n\nreduce() 方法接收一个函数作为累加器。每个值（从左到右开始缩减），直到计算最后一个值。\n\nreduce() 作为空数组是不会执行回调函数的。\n\n```javascript\nvar numbers = [65, 44, 12, 4];\n\nfunction getSum(total, num) {\n  return total + num;\n}\nfunction myFunction(item) {\n  document.getElementById(\"demo\").innerHTML = numbers.reduce(getSum);\n}\n```\n","slug":"数组操作方法","published":1,"updated":"2021-03-01T03:47:26.029Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmejaeso002ixcvr4lmoasez","content":"<p><strong>数组原形方法有以下几种</strong>:</p>\n<p><code>join()</code>,<code>push()</code>,<code>pop()</code>,<code>sort()</code>,<code>reverse()</code>,<code>concat()</code>,<code>slice()</code>,<code>splice()</code>,<code>indexOf()</code>,<code>lastIndexOf()</code>,<code>forEach()</code>,<code>map()</code>, <code>filter()</code>,<code>every()</code>,<code>some()</code>,<code>reduce()</code>,<code>reduceRigh()</code></p>\n<span id=\"more\"></span>\n\n<h2 id=\"join-，不改变原数组。\"><a href=\"#join-，不改变原数组。\" class=\"headerlink\" title=\"join()，不改变原数组。\"></a>join()，不改变原数组。</h2><p>join(separator): 将数组的元素组成一个字符串，以 separator 为分隔符，省略则默认为逗号，该方法只接受一个参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.join()); <span class=\"comment\">// 1,2,3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.join(<span class=\"string\">&quot;-&quot;</span>)); <span class=\"comment\">// 1-2-3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">// [1, 2, 3]（原数组不变）</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"push-与-pop-，改变元素组\"><a href=\"#push-与-pop-，改变元素组\" class=\"headerlink\" title=\"push() 与 pop()，改变元素组\"></a>push() 与 pop()，改变元素组</h2><ul>\n<li>push(): 可以接受任意数量的数组，把它们，把他们逐个添加到数组末尾，<strong>并返回修改后数组的长度</strong>。</li>\n<li>pop(): 数组末尾移除最后一项，减少数组的 length 的值，然后返回移除的项。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&quot;Lily&quot;</span>, <span class=\"string\">&quot;lucy&quot;</span>, <span class=\"string\">&quot;Tom&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> count = arr.push(<span class=\"string\">&quot;Jack&quot;</span>, <span class=\"string\">&quot;Sean&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(count); <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">// [&quot;Lily&quot;, &quot;lucy&quot;, &quot;Tom&quot;, &quot;Jack&quot;, &quot;Sean&quot;]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> item = arr.pop();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(item); <span class=\"comment\">// Sean</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">// [&quot;Lily&quot;, &quot;lucy&quot;, &quot;Tom&quot;, &quot;Jack&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"shift-和-unshift-，改变原数组\"><a href=\"#shift-和-unshift-，改变原数组\" class=\"headerlink\" title=\"shift() 和 unshift()，改变原数组\"></a>shift() 和 unshift()，改变原数组</h2><ul>\n<li>shift(): 删除原数组的第一项，并返回删除元素的值，如果为空则返回 undefined。</li>\n<li>unshift(): 将参数添加到原数组开头，<strong>并返回数组的长度</strong>。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&quot;Lily&quot;</span>, <span class=\"string\">&quot;lucy&quot;</span>, <span class=\"string\">&quot;Tom&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> count = arr.unshift(<span class=\"string\">&quot;Jack&quot;</span>, <span class=\"string\">&quot;Sean&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(count); <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">//[&quot;Jack&quot;, &quot;Sean&quot;, &quot;Lily&quot;, &quot;lucy&quot;, &quot;Tom&quot;]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> item = arr.shift();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(item); <span class=\"comment\">// Jack</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">// [&quot;Sean&quot;, &quot;Lily&quot;, &quot;lucy&quot;, &quot;Tom&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"sort-改变原数组\"><a href=\"#sort-改变原数组\" class=\"headerlink\" title=\"sort(), 改变原数组\"></a>sort(), 改变原数组</h2><p>按升序列排序数组系那个（从小到大），在排序时，sort() 方法会调用每个数组的 toString() 转型方法，<strong>然后比较得到的字符串</strong>，已确定如何排序。即使数组中每一个都是数值 ,sort() 方法比较的意识字符串，因此会出现以下情况：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;d&quot;</span>, <span class=\"string\">&quot;c&quot;</span>, <span class=\"string\">&quot;b&quot;</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1.sort()); <span class=\"comment\">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span></span><br><span class=\"line\">arr2 = [<span class=\"number\">13</span>, <span class=\"number\">24</span>, <span class=\"number\">51</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2.sort()); <span class=\"comment\">// [13, 24, 3, 51]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2); <span class=\"comment\">// [13, 24, 3, 51](元数组被改变)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> scores = [<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">21</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\">scores.sort(); <span class=\"comment\">// [1, 10, 2, 21] 注意10在2之前  因为在 Unicode 指针顺序中&quot;10&quot;在&quot;2&quot;之前</span></span><br></pre></td></tr></table></figure>\n\n<p>为了解决上述问题，sort() 方法可以接受一个参数，以便指定哪个值位于哪个值前面。比较函数接受两个参数，如果第一个参数应该位于第二个之前则返回一个负数，如果两个参数相等则返回 0，如果第一个参数应该位于第二个参数之后则返回一个正数。一下是比较函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">value1, value2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (value1 &lt; value2) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value1 &gt; value2) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">arr2 = [<span class=\"number\">13</span>, <span class=\"number\">24</span>, <span class=\"number\">51</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2.sort(compare)); <span class=\"comment\">// [3, 13, 24, 51]</span></span><br></pre></td></tr></table></figure>\n\n<p>如果需要通过比较函数产生降序排序的结果，只要交换比较函数的返回值即可。</p>\n<h2 id=\"reverse-，改变原数组\"><a href=\"#reverse-，改变原数组\" class=\"headerlink\" title=\"reverse() ，改变原数组\"></a>reverse() ，改变原数组</h2><p>reverse(): 反转数组项的顺序</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reverse()：反转数组项的顺序。</span><br><span class=\"line\">?</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">13</span>, <span class=\"number\">24</span>, <span class=\"number\">51</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.reverse()); <span class=\"comment\">//[3, 51, 24, 13]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">//[3, 51, 24, 13](原数组改变)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"concat-，不改变原数组\"><a href=\"#concat-，不改变原数组\" class=\"headerlink\" title=\"concat()，不改变原数组\"></a>concat()，不改变原数组</h2><p>concat()：将参数添加到元素组中，这个方法会先创建当前数组的一个副本，然后将接受到的参数添加到这个副本的末尾，最后返回新构建的数组，<strong>在没有给 concat() 方法传递一个参数的情况下，它只是复制当前数组并返回副本。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arrCopy = arr.concat(<span class=\"number\">9</span>, [<span class=\"number\">11</span>, <span class=\"number\">13</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrCopy); <span class=\"comment\">//[1, 3, 5, 7, 9, 11, 13]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">// [1, 3, 5, 7](原数组未被修改)</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的测试中发现，传入的不是数组，则是直接将数组添加到数组后面，<strong>如果传入的是数组，则将数组中的各个项添加到数组中，但如果是二维数组呢？</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arrCopy2 = arr.concat([<span class=\"number\">9</span>, [<span class=\"number\">11</span>, <span class=\"number\">13</span>]]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrCopy2); <span class=\"comment\">//[1, 3, 5, 7, 9, Array[2]]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrCopy2[<span class=\"number\">5</span>]); <span class=\"comment\">//[11, 13]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"slice-不改变原数组\"><a href=\"#slice-不改变原数组\" class=\"headerlink\" title=\"slice() 不改变原数组\"></a>slice() 不改变原数组</h2><p>slice(): 返回从原数组中指定开始下标到结束下标之间的项组成的新数组。slice() 方法可以接受一或是两个参数，即要返回项的起始和结束位置。在只有一个参数的情况下，slice() 方法返回从该参数指定位置到当前数组末尾的所有项。如果有两个参数，就会返回起始和结束位置之前的项 - 但不包括结束位置的项。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">11</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arrCopy = arr.slice(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> arrCopy2 = arr.slice(<span class=\"number\">1</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> arrCopy3 = arr.slice(<span class=\"number\">1</span>, -<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> arrCopy4 = arr.slice(-<span class=\"number\">4</span>, -<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">//[1, 3, 5, 7, 9, 11](原数组没变)</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrCopy); <span class=\"comment\">//[3, 5, 7, 9, 11]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrCopy2); <span class=\"comment\">//[3, 5, 7]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrCopy3); <span class=\"comment\">//[3, 5, 7]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrCopy4); <span class=\"comment\">//[5, 7, 9]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"splice-可以实现删除、插入和替换-改变原数组\"><a href=\"#splice-可以实现删除、插入和替换-改变原数组\" class=\"headerlink\" title=\"splice() 可以实现删除、插入和替换 改变原数组\"></a>splice() 可以实现删除、插入和替换 改变原数组</h2><ul>\n<li>删除：可以删除任意数量的项，只需要提供两个参数，要删除的个一个项的位置和要删除的橡树。例如，splice(0,2) 会删除数组中的前两项。</li>\n<li>插入：可以向指定位置插入任意数量的项，需要 3 个参数，起始位置、0 （要删除的项数）和要插入的项，例如 splice(2,0,4,6) 会在当前数组的位置 2 开始插入 4 和 6</li>\n<li>替换：可以向指定的位置插入任意的项，同时删除任意数量的项。需要 3 个参数，只需要指定 3 个参数，起始位置、要删除的项数和要插入的任意数量的项。插入的项数不必与删除的项数相等，例如 splice(2,1,4,6) 会删除当前数组位置 2 的项，然后再从位置 2 开始插入 4 和 6。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">11</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arrRemoved = arr.splice(<span class=\"number\">0</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">//[5, 7, 9, 11]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrRemoved); <span class=\"comment\">//[1, 3]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arrRemoved2 = arr.splice(<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">// [5, 7, 4, 6, 9, 11]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrRemoved2); <span class=\"comment\">// []</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arrRemoved3 = arr.splice(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">// [5, 2, 4, 4, 6, 9, 11]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrRemoved3); <span class=\"comment\">//[7]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"indexOf-和-lastIndexOf\"><a href=\"#indexOf-和-lastIndexOf\" class=\"headerlink\" title=\"indexOf() 和 lastIndexOf()\"></a>indexOf() 和 lastIndexOf()</h2><ul>\n<li>indexOf()：接受两个参数，要查找的项和（可选的）表示查找七点位置的索引。从数组的开头开始查找。</li>\n<li>lastIndexOf() ：接受两个参数：要查找的项和（可选的）表示查找起点位置的索引。从数组的末尾开始查找</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">7</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.indexOf(<span class=\"number\">5</span>)); <span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.lastIndexOf(<span class=\"number\">5</span>)); <span class=\"comment\">//5</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.indexOf(<span class=\"number\">5</span>, <span class=\"number\">2</span>)); <span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.lastIndexOf(<span class=\"number\">5</span>, <span class=\"number\">4</span>)); <span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.indexOf(<span class=\"string\">&quot;5&quot;</span>)); <span class=\"comment\">//-1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"forEach-遍历\"><a href=\"#forEach-遍历\" class=\"headerlink\" title=\"forEach() 遍历\"></a>forEach() 遍历</h2><p>对数组进行遍历循环遍历，对数组的每一项运行给定函数，这个方法没有返回值，参数都是 function 类型，默认参数分别有：遍历数组内容、对应的数组索引、数组本身。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, index, a</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x + <span class=\"string\">&quot;|&quot;</span> + index + <span class=\"string\">&quot;|&quot;</span> + (a === arr));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 输出为：</span></span><br><span class=\"line\"><span class=\"comment\">// 1|0|true</span></span><br><span class=\"line\"><span class=\"comment\">// 2|1|true</span></span><br><span class=\"line\"><span class=\"comment\">// 3|2|true</span></span><br><span class=\"line\"><span class=\"comment\">// 4|3|true</span></span><br><span class=\"line\"><span class=\"comment\">// 5|4|true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map()\"></a>map()</h2><p>map() ：指 “ 映射 ”，对数组中的每一项运行给定函数，返回每一次函数调用的结果组成的数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item * item;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2); <span class=\"comment\">//[1, 4, 9, 16, 25]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a>filter()</h2><p>filter(): “ 过滤功能 ”，数组中的每一项运行给定函数，返回满足过滤条件组成的数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, index</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> index % <span class=\"number\">3</span> === <span class=\"number\">0</span> || x &gt;= <span class=\"number\">8</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2); <span class=\"comment\">//[1, 4, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"every()\"></a>every()</h2><p>every() ，判断数组中每一项都是满足条件，只有所有项都满足条件才会返回 true。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x &lt; <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3 = arr.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x &lt; <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"some()\"></a>some()</h2><p>some() ：判断数组中是否存在满足条件的项，只要有一项满足，就会返回 true。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr.some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x &lt; <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3 = arr.some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x &lt; <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"reduce-和-reduceRight\"><a href=\"#reduce-和-reduceRight\" class=\"headerlink\" title=\"reduce() 和 reduceRight()\"></a>reduce() 和 reduceRight()</h2><p>这两个都会实现迭代数组所有项，然后构建一个最终返回的值。reduce() 方法从数组的第一项开始，逐个遍历到最后，然而 reduceRight() 则是从数组的最后一项开始，向前遍历到第一项。下面代码实现了数组求和：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> values = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = values.reduceRight(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prev, cur, index, array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> prev + cur;</span><br><span class=\"line\">&#125;, <span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum); <span class=\"comment\">//25</span></span><br></pre></td></tr></table></figure>\n\n<p>reduce() 方法接收一个函数作为累加器。每个值（从左到右开始缩减），直到计算最后一个值。</p>\n<p>reduce() 作为空数组是不会执行回调函数的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">65</span>, <span class=\"number\">44</span>, <span class=\"number\">12</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSum</span>(<span class=\"params\">total, num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> total + num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunction</span>(<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;demo&quot;</span>).innerHTML = numbers.reduce(getSum);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p><strong>数组原形方法有以下几种</strong>:</p>\n<p><code>join()</code>,<code>push()</code>,<code>pop()</code>,<code>sort()</code>,<code>reverse()</code>,<code>concat()</code>,<code>slice()</code>,<code>splice()</code>,<code>indexOf()</code>,<code>lastIndexOf()</code>,<code>forEach()</code>,<code>map()</code>, <code>filter()</code>,<code>every()</code>,<code>some()</code>,<code>reduce()</code>,<code>reduceRigh()</code></p>","more":"<h2 id=\"join-，不改变原数组。\"><a href=\"#join-，不改变原数组。\" class=\"headerlink\" title=\"join()，不改变原数组。\"></a>join()，不改变原数组。</h2><p>join(separator): 将数组的元素组成一个字符串，以 separator 为分隔符，省略则默认为逗号，该方法只接受一个参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.join()); <span class=\"comment\">// 1,2,3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.join(<span class=\"string\">&quot;-&quot;</span>)); <span class=\"comment\">// 1-2-3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">// [1, 2, 3]（原数组不变）</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"push-与-pop-，改变元素组\"><a href=\"#push-与-pop-，改变元素组\" class=\"headerlink\" title=\"push() 与 pop()，改变元素组\"></a>push() 与 pop()，改变元素组</h2><ul>\n<li>push(): 可以接受任意数量的数组，把它们，把他们逐个添加到数组末尾，<strong>并返回修改后数组的长度</strong>。</li>\n<li>pop(): 数组末尾移除最后一项，减少数组的 length 的值，然后返回移除的项。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&quot;Lily&quot;</span>, <span class=\"string\">&quot;lucy&quot;</span>, <span class=\"string\">&quot;Tom&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> count = arr.push(<span class=\"string\">&quot;Jack&quot;</span>, <span class=\"string\">&quot;Sean&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(count); <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">// [&quot;Lily&quot;, &quot;lucy&quot;, &quot;Tom&quot;, &quot;Jack&quot;, &quot;Sean&quot;]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> item = arr.pop();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(item); <span class=\"comment\">// Sean</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">// [&quot;Lily&quot;, &quot;lucy&quot;, &quot;Tom&quot;, &quot;Jack&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"shift-和-unshift-，改变原数组\"><a href=\"#shift-和-unshift-，改变原数组\" class=\"headerlink\" title=\"shift() 和 unshift()，改变原数组\"></a>shift() 和 unshift()，改变原数组</h2><ul>\n<li>shift(): 删除原数组的第一项，并返回删除元素的值，如果为空则返回 undefined。</li>\n<li>unshift(): 将参数添加到原数组开头，<strong>并返回数组的长度</strong>。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&quot;Lily&quot;</span>, <span class=\"string\">&quot;lucy&quot;</span>, <span class=\"string\">&quot;Tom&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> count = arr.unshift(<span class=\"string\">&quot;Jack&quot;</span>, <span class=\"string\">&quot;Sean&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(count); <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">//[&quot;Jack&quot;, &quot;Sean&quot;, &quot;Lily&quot;, &quot;lucy&quot;, &quot;Tom&quot;]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> item = arr.shift();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(item); <span class=\"comment\">// Jack</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">// [&quot;Sean&quot;, &quot;Lily&quot;, &quot;lucy&quot;, &quot;Tom&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"sort-改变原数组\"><a href=\"#sort-改变原数组\" class=\"headerlink\" title=\"sort(), 改变原数组\"></a>sort(), 改变原数组</h2><p>按升序列排序数组系那个（从小到大），在排序时，sort() 方法会调用每个数组的 toString() 转型方法，<strong>然后比较得到的字符串</strong>，已确定如何排序。即使数组中每一个都是数值 ,sort() 方法比较的意识字符串，因此会出现以下情况：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;d&quot;</span>, <span class=\"string\">&quot;c&quot;</span>, <span class=\"string\">&quot;b&quot;</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1.sort()); <span class=\"comment\">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span></span><br><span class=\"line\">arr2 = [<span class=\"number\">13</span>, <span class=\"number\">24</span>, <span class=\"number\">51</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2.sort()); <span class=\"comment\">// [13, 24, 3, 51]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2); <span class=\"comment\">// [13, 24, 3, 51](元数组被改变)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> scores = [<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">21</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\">scores.sort(); <span class=\"comment\">// [1, 10, 2, 21] 注意10在2之前  因为在 Unicode 指针顺序中&quot;10&quot;在&quot;2&quot;之前</span></span><br></pre></td></tr></table></figure>\n\n<p>为了解决上述问题，sort() 方法可以接受一个参数，以便指定哪个值位于哪个值前面。比较函数接受两个参数，如果第一个参数应该位于第二个之前则返回一个负数，如果两个参数相等则返回 0，如果第一个参数应该位于第二个参数之后则返回一个正数。一下是比较函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">value1, value2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (value1 &lt; value2) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value1 &gt; value2) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">arr2 = [<span class=\"number\">13</span>, <span class=\"number\">24</span>, <span class=\"number\">51</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2.sort(compare)); <span class=\"comment\">// [3, 13, 24, 51]</span></span><br></pre></td></tr></table></figure>\n\n<p>如果需要通过比较函数产生降序排序的结果，只要交换比较函数的返回值即可。</p>\n<h2 id=\"reverse-，改变原数组\"><a href=\"#reverse-，改变原数组\" class=\"headerlink\" title=\"reverse() ，改变原数组\"></a>reverse() ，改变原数组</h2><p>reverse(): 反转数组项的顺序</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reverse()：反转数组项的顺序。</span><br><span class=\"line\">?</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">13</span>, <span class=\"number\">24</span>, <span class=\"number\">51</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.reverse()); <span class=\"comment\">//[3, 51, 24, 13]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">//[3, 51, 24, 13](原数组改变)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"concat-，不改变原数组\"><a href=\"#concat-，不改变原数组\" class=\"headerlink\" title=\"concat()，不改变原数组\"></a>concat()，不改变原数组</h2><p>concat()：将参数添加到元素组中，这个方法会先创建当前数组的一个副本，然后将接受到的参数添加到这个副本的末尾，最后返回新构建的数组，<strong>在没有给 concat() 方法传递一个参数的情况下，它只是复制当前数组并返回副本。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arrCopy = arr.concat(<span class=\"number\">9</span>, [<span class=\"number\">11</span>, <span class=\"number\">13</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrCopy); <span class=\"comment\">//[1, 3, 5, 7, 9, 11, 13]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">// [1, 3, 5, 7](原数组未被修改)</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的测试中发现，传入的不是数组，则是直接将数组添加到数组后面，<strong>如果传入的是数组，则将数组中的各个项添加到数组中，但如果是二维数组呢？</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arrCopy2 = arr.concat([<span class=\"number\">9</span>, [<span class=\"number\">11</span>, <span class=\"number\">13</span>]]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrCopy2); <span class=\"comment\">//[1, 3, 5, 7, 9, Array[2]]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrCopy2[<span class=\"number\">5</span>]); <span class=\"comment\">//[11, 13]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"slice-不改变原数组\"><a href=\"#slice-不改变原数组\" class=\"headerlink\" title=\"slice() 不改变原数组\"></a>slice() 不改变原数组</h2><p>slice(): 返回从原数组中指定开始下标到结束下标之间的项组成的新数组。slice() 方法可以接受一或是两个参数，即要返回项的起始和结束位置。在只有一个参数的情况下，slice() 方法返回从该参数指定位置到当前数组末尾的所有项。如果有两个参数，就会返回起始和结束位置之前的项 - 但不包括结束位置的项。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">11</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arrCopy = arr.slice(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> arrCopy2 = arr.slice(<span class=\"number\">1</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> arrCopy3 = arr.slice(<span class=\"number\">1</span>, -<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> arrCopy4 = arr.slice(-<span class=\"number\">4</span>, -<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">//[1, 3, 5, 7, 9, 11](原数组没变)</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrCopy); <span class=\"comment\">//[3, 5, 7, 9, 11]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrCopy2); <span class=\"comment\">//[3, 5, 7]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrCopy3); <span class=\"comment\">//[3, 5, 7]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrCopy4); <span class=\"comment\">//[5, 7, 9]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"splice-可以实现删除、插入和替换-改变原数组\"><a href=\"#splice-可以实现删除、插入和替换-改变原数组\" class=\"headerlink\" title=\"splice() 可以实现删除、插入和替换 改变原数组\"></a>splice() 可以实现删除、插入和替换 改变原数组</h2><ul>\n<li>删除：可以删除任意数量的项，只需要提供两个参数，要删除的个一个项的位置和要删除的橡树。例如，splice(0,2) 会删除数组中的前两项。</li>\n<li>插入：可以向指定位置插入任意数量的项，需要 3 个参数，起始位置、0 （要删除的项数）和要插入的项，例如 splice(2,0,4,6) 会在当前数组的位置 2 开始插入 4 和 6</li>\n<li>替换：可以向指定的位置插入任意的项，同时删除任意数量的项。需要 3 个参数，只需要指定 3 个参数，起始位置、要删除的项数和要插入的任意数量的项。插入的项数不必与删除的项数相等，例如 splice(2,1,4,6) 会删除当前数组位置 2 的项，然后再从位置 2 开始插入 4 和 6。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">11</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arrRemoved = arr.splice(<span class=\"number\">0</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">//[5, 7, 9, 11]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrRemoved); <span class=\"comment\">//[1, 3]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arrRemoved2 = arr.splice(<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">// [5, 7, 4, 6, 9, 11]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrRemoved2); <span class=\"comment\">// []</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arrRemoved3 = arr.splice(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">// [5, 2, 4, 4, 6, 9, 11]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrRemoved3); <span class=\"comment\">//[7]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"indexOf-和-lastIndexOf\"><a href=\"#indexOf-和-lastIndexOf\" class=\"headerlink\" title=\"indexOf() 和 lastIndexOf()\"></a>indexOf() 和 lastIndexOf()</h2><ul>\n<li>indexOf()：接受两个参数，要查找的项和（可选的）表示查找七点位置的索引。从数组的开头开始查找。</li>\n<li>lastIndexOf() ：接受两个参数：要查找的项和（可选的）表示查找起点位置的索引。从数组的末尾开始查找</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">7</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.indexOf(<span class=\"number\">5</span>)); <span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.lastIndexOf(<span class=\"number\">5</span>)); <span class=\"comment\">//5</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.indexOf(<span class=\"number\">5</span>, <span class=\"number\">2</span>)); <span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.lastIndexOf(<span class=\"number\">5</span>, <span class=\"number\">4</span>)); <span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.indexOf(<span class=\"string\">&quot;5&quot;</span>)); <span class=\"comment\">//-1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"forEach-遍历\"><a href=\"#forEach-遍历\" class=\"headerlink\" title=\"forEach() 遍历\"></a>forEach() 遍历</h2><p>对数组进行遍历循环遍历，对数组的每一项运行给定函数，这个方法没有返回值，参数都是 function 类型，默认参数分别有：遍历数组内容、对应的数组索引、数组本身。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, index, a</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x + <span class=\"string\">&quot;|&quot;</span> + index + <span class=\"string\">&quot;|&quot;</span> + (a === arr));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 输出为：</span></span><br><span class=\"line\"><span class=\"comment\">// 1|0|true</span></span><br><span class=\"line\"><span class=\"comment\">// 2|1|true</span></span><br><span class=\"line\"><span class=\"comment\">// 3|2|true</span></span><br><span class=\"line\"><span class=\"comment\">// 4|3|true</span></span><br><span class=\"line\"><span class=\"comment\">// 5|4|true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map()\"></a>map()</h2><p>map() ：指 “ 映射 ”，对数组中的每一项运行给定函数，返回每一次函数调用的结果组成的数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item * item;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2); <span class=\"comment\">//[1, 4, 9, 16, 25]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a>filter()</h2><p>filter(): “ 过滤功能 ”，数组中的每一项运行给定函数，返回满足过滤条件组成的数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, index</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> index % <span class=\"number\">3</span> === <span class=\"number\">0</span> || x &gt;= <span class=\"number\">8</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2); <span class=\"comment\">//[1, 4, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"every()\"></a>every()</h2><p>every() ，判断数组中每一项都是满足条件，只有所有项都满足条件才会返回 true。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x &lt; <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3 = arr.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x &lt; <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"some()\"></a>some()</h2><p>some() ：判断数组中是否存在满足条件的项，只要有一项满足，就会返回 true。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr.some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x &lt; <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3 = arr.some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x &lt; <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"reduce-和-reduceRight\"><a href=\"#reduce-和-reduceRight\" class=\"headerlink\" title=\"reduce() 和 reduceRight()\"></a>reduce() 和 reduceRight()</h2><p>这两个都会实现迭代数组所有项，然后构建一个最终返回的值。reduce() 方法从数组的第一项开始，逐个遍历到最后，然而 reduceRight() 则是从数组的最后一项开始，向前遍历到第一项。下面代码实现了数组求和：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> values = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = values.reduceRight(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prev, cur, index, array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> prev + cur;</span><br><span class=\"line\">&#125;, <span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum); <span class=\"comment\">//25</span></span><br></pre></td></tr></table></figure>\n\n<p>reduce() 方法接收一个函数作为累加器。每个值（从左到右开始缩减），直到计算最后一个值。</p>\n<p>reduce() 作为空数组是不会执行回调函数的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">65</span>, <span class=\"number\">44</span>, <span class=\"number\">12</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSum</span>(<span class=\"params\">total, num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> total + num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunction</span>(<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;demo&quot;</span>).innerHTML = numbers.reduce(getSum);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"有趣JS题","date":"2018-03-08T07:57:30.000Z","_content":"\n一些出乎意料的题及面试题的积累\n\n<!--more-->\n\n## 变量提升\n\n```javascript\nif (!\"abc\" in window) {\n    var abc = 10;\n}\nconsole.log(abc); //undefined\n//因为先变量声明提升 所以提升之后abc的值系统默认会赋值为undefined。 !abc为false ,in是检查对象中是否存在某个属性。很显然 false属于是一个布尔类型。不存在对象中。所以没有走if里面的变量赋值。\n\nconsole.log(a); //undefined\nif (!(\"a\" in window)) {\n    var a = 10;\n}\nconsole.log(a); //undefined\n//因为先变量声明提升 所以提升之后a的值系统默认会赋值为undefined。 变量提升会存在GO中也就是window。所以(\"a\" in window)肯定为true。!去反一下就为false。所以不走赋值。\n\nvar x = 1;\nif (function f() {}) {\n    x += typeof f;\n}\nconsole.log(x); //1undefined\n//因为函数题在()中会以表达式去运行。最后转换为true,不会存在函数整体声明提升。所以typeof为undefined\n```\n\n## 闭包\n\n```javascript\nfor (var i = 0; i < liListlength; i++) {\n    var ele = document.querySelectorAll(\"ul > li\")[i];\n    ele.addEventListener(\n        \"click\",\n        (function(i) {\n            return function() {\n                console.log(\"index is :\" + i);\n            };\n        })(i)\n    );\n}\n```\n\n```javascript\nfunction fun(n, o) {\n    console.log(o);\n    return {\n        fun: function(m) {\n            return fun(m, n);\n        }\n    };\n}\nvar a = fun(0);\na.fun(1);\na.fun(2);\na.fun(3); //输出什么 undefined 0 0 0\nvar b = fun(0)\n    .fun(1)\n    .fun(2)\n    .fun(3); //输出什么 undefined 0 1 2\nvar c = fun(0).fun(1);\nc.fun(2);\nc.fun(3); //输出什么 undefined 0 1 1\n\n//答案很显而易见。换一个形式看着道题\n\nfunction fun(n, o) {\n    console.log(o);\n    return {\n        fun: function(m) {\n            return fun(m, n);\n        }\n    };\n}\nvar a = fun(0);\na.fun(1);\na.fun(2);\na.fun(3); //输出什么 undefined 0 0 0\n```\n\n## 综合(1)\n\n```javascript\nfunction Foo() {\n    getName = function() {\n        alert(1);\n    };\n    return this;\n}\n\nFoo.getName = function() {\n    alert(2);\n};\nFoo.prototype.getName = function() {\n    alert(3);\n};\nvar getName = function() {\n    alert(4);\n};\nfunction getName() {\n    alert(5);\n}\n\n//请写出以下输出结果,先写以下SB作者的答案，然后接受残酷的事实\nFoo.getName(); //alert(2);\ngetName(); //alert(5);\nFoo().getName(); //alert(5);\ngetName(); //alert(5);\nnew Foo.getName(); //function(){alert(2);}\nnew Foo().getName(); //function getName {alert{5}}\nnew new Foo.getName()(); //function(){alert(2);}\n```\n\n首先定义了一个叫 Foo 的函数，然后为 Foo 创建了一个叫 getName 的静态属性存储了一个匿名函数，之后为 Foo 的原型对象创建了一个叫 getName 的匿名函数。之后又通过函数变量表达式创建了一个 getName 的函数，最后声明一个叫做 getName 函数。\n\n### Foo.getName();\n\n**答案： 2**\n\nFoo.getName()访问的 Foo 函数上存储的静态属性\n\n```javascript\nfunction User(name) {\n    var name = name; //私有属性\n    this.name = name; //公有属性\n    function getName() {\n        //私有方法\n        return name;\n    }\n}\n\nUser.prototype.getName = function() {\n    //公有方法\n    return this.name;\n};\n\nUser.name = \"Wscats\"; //静态属性\nUser.getName = function() {\n    //静态方法\n    return this.name;\n};\nvar Wscat = new User(\"Wscats\"); //实例化\n```\n\n注意以下几点：\n\n-   调用公有方法，公有属性，我们必须要实例化对象，也就是用 new 操作符实例化对象，就可构造函数实例化对象的方法和属性，并且公有方法是不能调用私有方法和静态方法的。\n-   静态方法和静态属性就是我们无需实例化就可以调用。\n-   而对象的私有方法和属性，外部是不可以访问的。\n\n### getName()\n\n**答案是 4**\n\n直接调用 getName 函数。既然是直接调用，那么就是访问当前作用域内的 getName 的函数，所以这里应该是 4 或者 5.这里的坑有，一是变量声明提升，而是函数表达式和函数声明的区别。答案是 4，5 的函数声明被 4 的函数表达式覆盖了。\n\n#### 函数声明与函数表达式\n\n```javascript\n\n  getName()\n  //oaoaafly 函数被提升 这里受函数声明的影响，虽然函数声在最后但可以被提升到最前面了 而此时的函数表达式还没有被赋值（赋值是顺序执行）。\n\n  var getName = function(){\n    console.log('wscat');\n  }\n//函数表达式此时才开始覆盖函数声明的定义。\n\n  getName()//wscat\n\n  funtion getName(){\n    console.log('oaoafly');\n  }\n  getName()//wscat 这里就执行函数表达式的值\n```\n\n-   **JS 解释器中存在一种变量被提升的机制，也就是说函数声明会被提升到作用域的最前面，即使写在代码的最后面，也会被提升到最前面。**\n\n-   **而用函数表达式创建的函数是在运行时被赋值，且要等到表达式赋值完成后才能调用。**\n\n### Foo().getName()\n\n**答案是：1**\n\nFoo().getName();先执行了 Foo 函数，然后调用 Foo 函数的返回对象的 getName 属性函数。\n\nFoo 函数的第一句`getName = function(){alert(1);};`是一句函数赋值语句，注意它没有 var 声明，所以先向当前 Foo 函数作用域内寻找 getName 变量，没有，再项当前函数的作用域上层，及外层的作用于内寻找是否含有 getName 变量，找到了，也就是第二问中的 alert(4)函数，将此变量的值赋值为`function(){alert(1)}`。此处实际上是将外层作用域内的 getName 函数覆盖了。\n\n注意：此处若依然没有找到会一直向上查找到 window 对象，若 window 对象中也没有 getName 属性，就在 window 对象中创建一个 getName 变量。\n\n之后就返回了 this，此时的 this 是指向的 window 对象。所以相当于执行了 window.getName()。\n\n### getName()\n\n**答案是：1**\n\n直接调用 getName 函数，相当于 window.getName()，因为这个变量已经被 Foo 函数执行时修改了，遂结果与第三问相同，为 1，也就是说 Foo 执行后把全局的 getName 函数给重写了一次，所以结果就是 Foo()执行重写的那个 getName 函数\n\n### new Foo.getName()\n\n**答案是：2**\n\n此处考察的是 JS 的运算符优先级的问题。[MDN 运算符优先级](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence)\n\n-   点的优先级比 new 高 所以 Foo.getName 是一起的.\n-   因为有()，因此是 new 有参数列表，new 的有参数列表为 18 比函数调用（17）高 ，所以是 new Foo.getName\n-   所以最后是(new Foo.getName)();\n-   最后弹出 2\n\n### new Foo().getName()\n\n**答案是：3**\n\nnew 的有参数列表跟点的优先级都是 18,同级的话按照从左向右的执行顺序，所以先执行 new 的有参数列表，再执行点的优先级，最后进行函数调用。(new Foo()).getName(); new 之后就调用公用办法，调用原型链上的 getName，因此是 3。\n\n### new new Foo.getName()\n\n**答案是：3**\n等同于：new ((new Foo()).getName)();\n\n## 综合(2)\n\n```javascript\nfunction Foo() {\n    this.getName = function() {\n        console.log(3);\n        return {\n            getName: getName //这个就是第六问中涉及的构造函数的返回值问题\n        };\n    }; //这个就是第六问中涉及到的，JS构造函数公有方法和原型链方法的优先级\n    getName = function() {\n        console.log(1);\n    };\n    return this;\n}\nFoo.getName = function() {\n    console.log(2);\n};\nFoo.prototype.getName = function() {\n    console.log(6);\n};\nvar getName = function() {\n    console.log(4);\n};\n\nfunction getName() {\n    console.log(5);\n} //答案：\nFoo.getName(); //2\ngetName(); //4\nconsole.log(Foo());\nFoo().getName(); //1\ngetName(); //1\nnew Foo.getName(); //2\nnew Foo().getName(); //3\n//多了一问\nnew Foo().getName().getName(); //3 1\nnew new Foo().getName(); //3\n```\n\n## 异步和单线程\n\n```javascript\nvar a = true;\nsetTimeout(function() {\n    a = false;\n}, 100);\nwhile (a) {\n    console.log(\"while执行了\");\n}\n```\n\n由于 js 是一个单线程。所以进入到 while 循环之后，就没有现成去完成定时器，所以这是一个死循环。\n\n## JS 赋值\n\n```javascript\nvar a = { n: 1 };\nvar b = a;\na.x = a = { n: 2 };\nconsole.log(a.x); //undefined\nconsole.log(b.x); //{n:2}\n```\n\n本人的错误思路：`a={n:2}`=>`a.x=a`=>`a.x={n:2}`\n\n-   错误点 1：不考虑其他，也应该是`a={n:2},a.x={n:2}`,\n-   错误点 2：.的优先级比=高，所以先执行`a.x`,由于 a 引用的`{n:1}`=>`{n:1,x:undefined}`=> b=`{n:1,x:undeined}`\n    `a.x = a = { n: 2 };` =>`{n:1,x:undeined} = a ={ n: 2 }`=>`a={n:1};{n:1,x:{n:2}}`\n-   最重要的一点 3：`a={n:2}`已经改变了引用了地址，然而 a 改变引用地址和 b 并没有任何关系，b 仍然指向的`{n:1,x:{n:2}}`\n\n所以 a.x = undefined b.x ={n:2}\n\n## 下面 a 在什么情况下会打印 1\n\n```javascript\nvar a = \"\"; //?\nif (a == 1 && a == 2 && a == 3) {\n    console.log(1);\n}\n```\n\n因为==会进行隐式转化 所以我们重写了 toString 方法就可以\n\n```javascript\nvar a = {\n  i:1,\n  toString(){\n    return:a.i++\n  }\n};\nif(a==1&&a==2&&a==3){\n console.log(1)\n}\n```\n\n## 实现（5）.add(3).minus(2)=>6;\n\n```javascript\nNumber.prototype.add = function(n) {\n    return this.valueOf() + n;\n};\nNumber.prototype.minus = function(n) {\n    return this.valueOf() - n;\n};\n```\n\n## 实现 promise.all\n\n```javascript\nPromise.all = function(promises) {\n    return new Promise((resolve, reject) => {\n        promises = Array.form(promises);\n        if (promises.length === 0) {\n            resolve([]);\n        }\n        else{\n          let result =[];\n          let index = 0;\n          for(let i = 0;i<promises.length;i++){\n            Promise.resolve(promises[i]).then(data=>{\n              result[i] = data;\n              if(++index===promise.length){\n                resolve(result);\n              }\n            },err=>[\n              reject(err);\n              return;\n            ])\n          }\n        }\n    });\n};\n```\n","source":"_posts/有趣JS题.md","raw":"---\ntitle: 有趣JS题\ndate: 2018-03-08 15:57:30\ncategories: JavaScript\n---\n\n一些出乎意料的题及面试题的积累\n\n<!--more-->\n\n## 变量提升\n\n```javascript\nif (!\"abc\" in window) {\n    var abc = 10;\n}\nconsole.log(abc); //undefined\n//因为先变量声明提升 所以提升之后abc的值系统默认会赋值为undefined。 !abc为false ,in是检查对象中是否存在某个属性。很显然 false属于是一个布尔类型。不存在对象中。所以没有走if里面的变量赋值。\n\nconsole.log(a); //undefined\nif (!(\"a\" in window)) {\n    var a = 10;\n}\nconsole.log(a); //undefined\n//因为先变量声明提升 所以提升之后a的值系统默认会赋值为undefined。 变量提升会存在GO中也就是window。所以(\"a\" in window)肯定为true。!去反一下就为false。所以不走赋值。\n\nvar x = 1;\nif (function f() {}) {\n    x += typeof f;\n}\nconsole.log(x); //1undefined\n//因为函数题在()中会以表达式去运行。最后转换为true,不会存在函数整体声明提升。所以typeof为undefined\n```\n\n## 闭包\n\n```javascript\nfor (var i = 0; i < liListlength; i++) {\n    var ele = document.querySelectorAll(\"ul > li\")[i];\n    ele.addEventListener(\n        \"click\",\n        (function(i) {\n            return function() {\n                console.log(\"index is :\" + i);\n            };\n        })(i)\n    );\n}\n```\n\n```javascript\nfunction fun(n, o) {\n    console.log(o);\n    return {\n        fun: function(m) {\n            return fun(m, n);\n        }\n    };\n}\nvar a = fun(0);\na.fun(1);\na.fun(2);\na.fun(3); //输出什么 undefined 0 0 0\nvar b = fun(0)\n    .fun(1)\n    .fun(2)\n    .fun(3); //输出什么 undefined 0 1 2\nvar c = fun(0).fun(1);\nc.fun(2);\nc.fun(3); //输出什么 undefined 0 1 1\n\n//答案很显而易见。换一个形式看着道题\n\nfunction fun(n, o) {\n    console.log(o);\n    return {\n        fun: function(m) {\n            return fun(m, n);\n        }\n    };\n}\nvar a = fun(0);\na.fun(1);\na.fun(2);\na.fun(3); //输出什么 undefined 0 0 0\n```\n\n## 综合(1)\n\n```javascript\nfunction Foo() {\n    getName = function() {\n        alert(1);\n    };\n    return this;\n}\n\nFoo.getName = function() {\n    alert(2);\n};\nFoo.prototype.getName = function() {\n    alert(3);\n};\nvar getName = function() {\n    alert(4);\n};\nfunction getName() {\n    alert(5);\n}\n\n//请写出以下输出结果,先写以下SB作者的答案，然后接受残酷的事实\nFoo.getName(); //alert(2);\ngetName(); //alert(5);\nFoo().getName(); //alert(5);\ngetName(); //alert(5);\nnew Foo.getName(); //function(){alert(2);}\nnew Foo().getName(); //function getName {alert{5}}\nnew new Foo.getName()(); //function(){alert(2);}\n```\n\n首先定义了一个叫 Foo 的函数，然后为 Foo 创建了一个叫 getName 的静态属性存储了一个匿名函数，之后为 Foo 的原型对象创建了一个叫 getName 的匿名函数。之后又通过函数变量表达式创建了一个 getName 的函数，最后声明一个叫做 getName 函数。\n\n### Foo.getName();\n\n**答案： 2**\n\nFoo.getName()访问的 Foo 函数上存储的静态属性\n\n```javascript\nfunction User(name) {\n    var name = name; //私有属性\n    this.name = name; //公有属性\n    function getName() {\n        //私有方法\n        return name;\n    }\n}\n\nUser.prototype.getName = function() {\n    //公有方法\n    return this.name;\n};\n\nUser.name = \"Wscats\"; //静态属性\nUser.getName = function() {\n    //静态方法\n    return this.name;\n};\nvar Wscat = new User(\"Wscats\"); //实例化\n```\n\n注意以下几点：\n\n-   调用公有方法，公有属性，我们必须要实例化对象，也就是用 new 操作符实例化对象，就可构造函数实例化对象的方法和属性，并且公有方法是不能调用私有方法和静态方法的。\n-   静态方法和静态属性就是我们无需实例化就可以调用。\n-   而对象的私有方法和属性，外部是不可以访问的。\n\n### getName()\n\n**答案是 4**\n\n直接调用 getName 函数。既然是直接调用，那么就是访问当前作用域内的 getName 的函数，所以这里应该是 4 或者 5.这里的坑有，一是变量声明提升，而是函数表达式和函数声明的区别。答案是 4，5 的函数声明被 4 的函数表达式覆盖了。\n\n#### 函数声明与函数表达式\n\n```javascript\n\n  getName()\n  //oaoaafly 函数被提升 这里受函数声明的影响，虽然函数声在最后但可以被提升到最前面了 而此时的函数表达式还没有被赋值（赋值是顺序执行）。\n\n  var getName = function(){\n    console.log('wscat');\n  }\n//函数表达式此时才开始覆盖函数声明的定义。\n\n  getName()//wscat\n\n  funtion getName(){\n    console.log('oaoafly');\n  }\n  getName()//wscat 这里就执行函数表达式的值\n```\n\n-   **JS 解释器中存在一种变量被提升的机制，也就是说函数声明会被提升到作用域的最前面，即使写在代码的最后面，也会被提升到最前面。**\n\n-   **而用函数表达式创建的函数是在运行时被赋值，且要等到表达式赋值完成后才能调用。**\n\n### Foo().getName()\n\n**答案是：1**\n\nFoo().getName();先执行了 Foo 函数，然后调用 Foo 函数的返回对象的 getName 属性函数。\n\nFoo 函数的第一句`getName = function(){alert(1);};`是一句函数赋值语句，注意它没有 var 声明，所以先向当前 Foo 函数作用域内寻找 getName 变量，没有，再项当前函数的作用域上层，及外层的作用于内寻找是否含有 getName 变量，找到了，也就是第二问中的 alert(4)函数，将此变量的值赋值为`function(){alert(1)}`。此处实际上是将外层作用域内的 getName 函数覆盖了。\n\n注意：此处若依然没有找到会一直向上查找到 window 对象，若 window 对象中也没有 getName 属性，就在 window 对象中创建一个 getName 变量。\n\n之后就返回了 this，此时的 this 是指向的 window 对象。所以相当于执行了 window.getName()。\n\n### getName()\n\n**答案是：1**\n\n直接调用 getName 函数，相当于 window.getName()，因为这个变量已经被 Foo 函数执行时修改了，遂结果与第三问相同，为 1，也就是说 Foo 执行后把全局的 getName 函数给重写了一次，所以结果就是 Foo()执行重写的那个 getName 函数\n\n### new Foo.getName()\n\n**答案是：2**\n\n此处考察的是 JS 的运算符优先级的问题。[MDN 运算符优先级](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence)\n\n-   点的优先级比 new 高 所以 Foo.getName 是一起的.\n-   因为有()，因此是 new 有参数列表，new 的有参数列表为 18 比函数调用（17）高 ，所以是 new Foo.getName\n-   所以最后是(new Foo.getName)();\n-   最后弹出 2\n\n### new Foo().getName()\n\n**答案是：3**\n\nnew 的有参数列表跟点的优先级都是 18,同级的话按照从左向右的执行顺序，所以先执行 new 的有参数列表，再执行点的优先级，最后进行函数调用。(new Foo()).getName(); new 之后就调用公用办法，调用原型链上的 getName，因此是 3。\n\n### new new Foo.getName()\n\n**答案是：3**\n等同于：new ((new Foo()).getName)();\n\n## 综合(2)\n\n```javascript\nfunction Foo() {\n    this.getName = function() {\n        console.log(3);\n        return {\n            getName: getName //这个就是第六问中涉及的构造函数的返回值问题\n        };\n    }; //这个就是第六问中涉及到的，JS构造函数公有方法和原型链方法的优先级\n    getName = function() {\n        console.log(1);\n    };\n    return this;\n}\nFoo.getName = function() {\n    console.log(2);\n};\nFoo.prototype.getName = function() {\n    console.log(6);\n};\nvar getName = function() {\n    console.log(4);\n};\n\nfunction getName() {\n    console.log(5);\n} //答案：\nFoo.getName(); //2\ngetName(); //4\nconsole.log(Foo());\nFoo().getName(); //1\ngetName(); //1\nnew Foo.getName(); //2\nnew Foo().getName(); //3\n//多了一问\nnew Foo().getName().getName(); //3 1\nnew new Foo().getName(); //3\n```\n\n## 异步和单线程\n\n```javascript\nvar a = true;\nsetTimeout(function() {\n    a = false;\n}, 100);\nwhile (a) {\n    console.log(\"while执行了\");\n}\n```\n\n由于 js 是一个单线程。所以进入到 while 循环之后，就没有现成去完成定时器，所以这是一个死循环。\n\n## JS 赋值\n\n```javascript\nvar a = { n: 1 };\nvar b = a;\na.x = a = { n: 2 };\nconsole.log(a.x); //undefined\nconsole.log(b.x); //{n:2}\n```\n\n本人的错误思路：`a={n:2}`=>`a.x=a`=>`a.x={n:2}`\n\n-   错误点 1：不考虑其他，也应该是`a={n:2},a.x={n:2}`,\n-   错误点 2：.的优先级比=高，所以先执行`a.x`,由于 a 引用的`{n:1}`=>`{n:1,x:undefined}`=> b=`{n:1,x:undeined}`\n    `a.x = a = { n: 2 };` =>`{n:1,x:undeined} = a ={ n: 2 }`=>`a={n:1};{n:1,x:{n:2}}`\n-   最重要的一点 3：`a={n:2}`已经改变了引用了地址，然而 a 改变引用地址和 b 并没有任何关系，b 仍然指向的`{n:1,x:{n:2}}`\n\n所以 a.x = undefined b.x ={n:2}\n\n## 下面 a 在什么情况下会打印 1\n\n```javascript\nvar a = \"\"; //?\nif (a == 1 && a == 2 && a == 3) {\n    console.log(1);\n}\n```\n\n因为==会进行隐式转化 所以我们重写了 toString 方法就可以\n\n```javascript\nvar a = {\n  i:1,\n  toString(){\n    return:a.i++\n  }\n};\nif(a==1&&a==2&&a==3){\n console.log(1)\n}\n```\n\n## 实现（5）.add(3).minus(2)=>6;\n\n```javascript\nNumber.prototype.add = function(n) {\n    return this.valueOf() + n;\n};\nNumber.prototype.minus = function(n) {\n    return this.valueOf() - n;\n};\n```\n\n## 实现 promise.all\n\n```javascript\nPromise.all = function(promises) {\n    return new Promise((resolve, reject) => {\n        promises = Array.form(promises);\n        if (promises.length === 0) {\n            resolve([]);\n        }\n        else{\n          let result =[];\n          let index = 0;\n          for(let i = 0;i<promises.length;i++){\n            Promise.resolve(promises[i]).then(data=>{\n              result[i] = data;\n              if(++index===promise.length){\n                resolve(result);\n              }\n            },err=>[\n              reject(err);\n              return;\n            ])\n          }\n        }\n    });\n};\n```\n","slug":"有趣JS题","published":1,"updated":"2021-03-01T03:47:26.030Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmejaesp002kxcvrcjko6otn","content":"<p>一些出乎意料的题及面试题的积累</p>\n<span id=\"more\"></span>\n\n<h2 id=\"变量提升\"><a href=\"#变量提升\" class=\"headerlink\" title=\"变量提升\"></a>变量提升</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"string\">&quot;abc&quot;</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> abc = <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(abc); <span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"comment\">//因为先变量声明提升 所以提升之后abc的值系统默认会赋值为undefined。 !abc为false ,in是检查对象中是否存在某个属性。很显然 false属于是一个布尔类型。不存在对象中。所以没有走if里面的变量赋值。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!(<span class=\"string\">&quot;a&quot;</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"comment\">//因为先变量声明提升 所以提升之后a的值系统默认会赋值为undefined。 变量提升会存在GO中也就是window。所以(&quot;a&quot; in window)肯定为true。!去反一下就为false。所以不走赋值。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;&#125;) &#123;</span><br><span class=\"line\">    x += <span class=\"keyword\">typeof</span> f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x); <span class=\"comment\">//1undefined</span></span><br><span class=\"line\"><span class=\"comment\">//因为函数题在()中会以表达式去运行。最后转换为true,不会存在函数整体声明提升。所以typeof为undefined</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; liListlength; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ele = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&quot;ul &gt; li&quot;</span>)[i];</span><br><span class=\"line\">    ele.addEventListener(</span><br><span class=\"line\">        <span class=\"string\">&quot;click&quot;</span>,</span><br><span class=\"line\">        (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;index is :&quot;</span> + i);</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;)(i)</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\">n, o</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(o);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        fun: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">m</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fun(m, n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = fun(<span class=\"number\">0</span>);</span><br><span class=\"line\">a.fun(<span class=\"number\">1</span>);</span><br><span class=\"line\">a.fun(<span class=\"number\">2</span>);</span><br><span class=\"line\">a.fun(<span class=\"number\">3</span>); <span class=\"comment\">//输出什么 undefined 0 0 0</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = fun(<span class=\"number\">0</span>)</span><br><span class=\"line\">    .fun(<span class=\"number\">1</span>)</span><br><span class=\"line\">    .fun(<span class=\"number\">2</span>)</span><br><span class=\"line\">    .fun(<span class=\"number\">3</span>); <span class=\"comment\">//输出什么 undefined 0 1 2</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = fun(<span class=\"number\">0</span>).fun(<span class=\"number\">1</span>);</span><br><span class=\"line\">c.fun(<span class=\"number\">2</span>);</span><br><span class=\"line\">c.fun(<span class=\"number\">3</span>); <span class=\"comment\">//输出什么 undefined 0 1 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//答案很显而易见。换一个形式看着道题</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\">n, o</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(o);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        fun: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">m</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fun(m, n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = fun(<span class=\"number\">0</span>);</span><br><span class=\"line\">a.fun(<span class=\"number\">1</span>);</span><br><span class=\"line\">a.fun(<span class=\"number\">2</span>);</span><br><span class=\"line\">a.fun(<span class=\"number\">3</span>); <span class=\"comment\">//输出什么 undefined 0 0 0</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"综合-1\"><a href=\"#综合-1\" class=\"headerlink\" title=\"综合(1)\"></a>综合(1)</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Foo.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Foo.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//请写出以下输出结果,先写以下SB作者的答案，然后接受残酷的事实</span></span><br><span class=\"line\">Foo.getName(); <span class=\"comment\">//alert(2);</span></span><br><span class=\"line\">getName(); <span class=\"comment\">//alert(5);</span></span><br><span class=\"line\">Foo().getName(); <span class=\"comment\">//alert(5);</span></span><br><span class=\"line\">getName(); <span class=\"comment\">//alert(5);</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Foo.getName(); <span class=\"comment\">//function()&#123;alert(2);&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Foo().getName(); <span class=\"comment\">//function getName &#123;alert&#123;5&#125;&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"keyword\">new</span> Foo.getName()(); <span class=\"comment\">//function()&#123;alert(2);&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>首先定义了一个叫 Foo 的函数，然后为 Foo 创建了一个叫 getName 的静态属性存储了一个匿名函数，之后为 Foo 的原型对象创建了一个叫 getName 的匿名函数。之后又通过函数变量表达式创建了一个 getName 的函数，最后声明一个叫做 getName 函数。</p>\n<h3 id=\"Foo-getName\"><a href=\"#Foo-getName\" class=\"headerlink\" title=\"Foo.getName();\"></a>Foo.getName();</h3><p><strong>答案： 2</strong></p>\n<p>Foo.getName()访问的 Foo 函数上存储的静态属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">User</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = name; <span class=\"comment\">//私有属性</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name; <span class=\"comment\">//公有属性</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//私有方法</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">User.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//公有方法</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">User.name = <span class=\"string\">&quot;Wscats&quot;</span>; <span class=\"comment\">//静态属性</span></span><br><span class=\"line\">User.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//静态方法</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Wscat = <span class=\"keyword\">new</span> User(<span class=\"string\">&quot;Wscats&quot;</span>); <span class=\"comment\">//实例化</span></span><br></pre></td></tr></table></figure>\n\n<p>注意以下几点：</p>\n<ul>\n<li>  调用公有方法，公有属性，我们必须要实例化对象，也就是用 new 操作符实例化对象，就可构造函数实例化对象的方法和属性，并且公有方法是不能调用私有方法和静态方法的。</li>\n<li>  静态方法和静态属性就是我们无需实例化就可以调用。</li>\n<li>  而对象的私有方法和属性，外部是不可以访问的。</li>\n</ul>\n<h3 id=\"getName\"><a href=\"#getName\" class=\"headerlink\" title=\"getName()\"></a>getName()</h3><p><strong>答案是 4</strong></p>\n<p>直接调用 getName 函数。既然是直接调用，那么就是访问当前作用域内的 getName 的函数，所以这里应该是 4 或者 5.这里的坑有，一是变量声明提升，而是函数表达式和函数声明的区别。答案是 4，5 的函数声明被 4 的函数表达式覆盖了。</p>\n<h4 id=\"函数声明与函数表达式\"><a href=\"#函数声明与函数表达式\" class=\"headerlink\" title=\"函数声明与函数表达式\"></a>函数声明与函数表达式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  getName()</span><br><span class=\"line\">  <span class=\"comment\">//oaoaafly 函数被提升 这里受函数声明的影响，虽然函数声在最后但可以被提升到最前面了 而此时的函数表达式还没有被赋值（赋值是顺序执行）。</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;wscat&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">//函数表达式此时才开始覆盖函数声明的定义。</span></span><br><span class=\"line\"></span><br><span class=\"line\">  getName()<span class=\"comment\">//wscat</span></span><br><span class=\"line\"></span><br><span class=\"line\">  funtion <span class=\"function\"><span class=\"title\">getName</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;oaoafly&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  getName()<span class=\"comment\">//wscat 这里就执行函数表达式的值</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>  <strong>JS 解释器中存在一种变量被提升的机制，也就是说函数声明会被提升到作用域的最前面，即使写在代码的最后面，也会被提升到最前面。</strong></p>\n</li>\n<li><p>  <strong>而用函数表达式创建的函数是在运行时被赋值，且要等到表达式赋值完成后才能调用。</strong></p>\n</li>\n</ul>\n<h3 id=\"Foo-getName-1\"><a href=\"#Foo-getName-1\" class=\"headerlink\" title=\"Foo().getName()\"></a>Foo().getName()</h3><p><strong>答案是：1</strong></p>\n<p>Foo().getName();先执行了 Foo 函数，然后调用 Foo 函数的返回对象的 getName 属性函数。</p>\n<p>Foo 函数的第一句<code>getName = function()&#123;alert(1);&#125;;</code>是一句函数赋值语句，注意它没有 var 声明，所以先向当前 Foo 函数作用域内寻找 getName 变量，没有，再项当前函数的作用域上层，及外层的作用于内寻找是否含有 getName 变量，找到了，也就是第二问中的 alert(4)函数，将此变量的值赋值为<code>function()&#123;alert(1)&#125;</code>。此处实际上是将外层作用域内的 getName 函数覆盖了。</p>\n<p>注意：此处若依然没有找到会一直向上查找到 window 对象，若 window 对象中也没有 getName 属性，就在 window 对象中创建一个 getName 变量。</p>\n<p>之后就返回了 this，此时的 this 是指向的 window 对象。所以相当于执行了 window.getName()。</p>\n<h3 id=\"getName-1\"><a href=\"#getName-1\" class=\"headerlink\" title=\"getName()\"></a>getName()</h3><p><strong>答案是：1</strong></p>\n<p>直接调用 getName 函数，相当于 window.getName()，因为这个变量已经被 Foo 函数执行时修改了，遂结果与第三问相同，为 1，也就是说 Foo 执行后把全局的 getName 函数给重写了一次，所以结果就是 Foo()执行重写的那个 getName 函数</p>\n<h3 id=\"new-Foo-getName\"><a href=\"#new-Foo-getName\" class=\"headerlink\" title=\"new Foo.getName()\"></a>new Foo.getName()</h3><p><strong>答案是：2</strong></p>\n<p>此处考察的是 JS 的运算符优先级的问题。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">MDN 运算符优先级</a></p>\n<ul>\n<li>  点的优先级比 new 高 所以 Foo.getName 是一起的.</li>\n<li>  因为有()，因此是 new 有参数列表，new 的有参数列表为 18 比函数调用（17）高 ，所以是 new Foo.getName</li>\n<li>  所以最后是(new Foo.getName)();</li>\n<li>  最后弹出 2</li>\n</ul>\n<h3 id=\"new-Foo-getName-1\"><a href=\"#new-Foo-getName-1\" class=\"headerlink\" title=\"new Foo().getName()\"></a>new Foo().getName()</h3><p><strong>答案是：3</strong></p>\n<p>new 的有参数列表跟点的优先级都是 18,同级的话按照从左向右的执行顺序，所以先执行 new 的有参数列表，再执行点的优先级，最后进行函数调用。(new Foo()).getName(); new 之后就调用公用办法，调用原型链上的 getName，因此是 3。</p>\n<h3 id=\"new-new-Foo-getName\"><a href=\"#new-new-Foo-getName\" class=\"headerlink\" title=\"new new Foo.getName()\"></a>new new Foo.getName()</h3><p><strong>答案是：3</strong><br>等同于：new ((new Foo()).getName)();</p>\n<h2 id=\"综合-2\"><a href=\"#综合-2\" class=\"headerlink\" title=\"综合(2)\"></a>综合(2)</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            getName: getName <span class=\"comment\">//这个就是第六问中涉及的构造函数的返回值问题</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;; <span class=\"comment\">//这个就是第六问中涉及到的，JS构造函数公有方法和原型链方法的优先级</span></span><br><span class=\"line\">    getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Foo.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Foo.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">6</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125; <span class=\"comment\">//答案：</span></span><br><span class=\"line\">Foo.getName(); <span class=\"comment\">//2</span></span><br><span class=\"line\">getName(); <span class=\"comment\">//4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Foo());</span><br><span class=\"line\">Foo().getName(); <span class=\"comment\">//1</span></span><br><span class=\"line\">getName(); <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Foo.getName(); <span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Foo().getName(); <span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"comment\">//多了一问</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Foo().getName().getName(); <span class=\"comment\">//3 1</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"keyword\">new</span> Foo().getName(); <span class=\"comment\">//3</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"异步和单线程\"><a href=\"#异步和单线程\" class=\"headerlink\" title=\"异步和单线程\"></a>异步和单线程</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    a = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"keyword\">while</span> (a) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;while执行了&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于 js 是一个单线程。所以进入到 while 循环之后，就没有现成去完成定时器，所以这是一个死循环。</p>\n<h2 id=\"JS-赋值\"><a href=\"#JS-赋值\" class=\"headerlink\" title=\"JS 赋值\"></a>JS 赋值</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123; <span class=\"attr\">n</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;</span><br><span class=\"line\">a.x = a = &#123; <span class=\"attr\">n</span>: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.x); <span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.x); <span class=\"comment\">//&#123;n:2&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>本人的错误思路：<code>a=&#123;n:2&#125;</code>=&gt;<code>a.x=a</code>=&gt;<code>a.x=&#123;n:2&#125;</code></p>\n<ul>\n<li>  错误点 1：不考虑其他，也应该是<code>a=&#123;n:2&#125;,a.x=&#123;n:2&#125;</code>,</li>\n<li>错误点 2：.的优先级比=高，所以先执行<code>a.x</code>,由于 a 引用的<code>&#123;n:1&#125;</code>=&gt;<code>&#123;n:1,x:undefined&#125;</code>=&gt; b=<code>&#123;n:1,x:undeined&#125;</code><br>  <code>a.x = a = &#123; n: 2 &#125;;</code> =&gt;<code>&#123;n:1,x:undeined&#125; = a =&#123; n: 2 &#125;</code>=&gt;<code>a=&#123;n:1&#125;;&#123;n:1,x:&#123;n:2&#125;&#125;</code></li>\n<li>  最重要的一点 3：<code>a=&#123;n:2&#125;</code>已经改变了引用了地址，然而 a 改变引用地址和 b 并没有任何关系，b 仍然指向的<code>&#123;n:1,x:&#123;n:2&#125;&#125;</code></li>\n</ul>\n<p>所以 a.x = undefined b.x ={n:2}</p>\n<h2 id=\"下面-a-在什么情况下会打印-1\"><a href=\"#下面-a-在什么情况下会打印-1\" class=\"headerlink\" title=\"下面 a 在什么情况下会打印 1\"></a>下面 a 在什么情况下会打印 1</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&quot;&quot;</span>; <span class=\"comment\">//?</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (a == <span class=\"number\">1</span> &amp;&amp; a == <span class=\"number\">2</span> &amp;&amp; a == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因为==会进行隐式转化 所以我们重写了 toString 方法就可以</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">  i:<span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">toString</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>:a.i++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(a==<span class=\"number\">1</span>&amp;&amp;a==<span class=\"number\">2</span>&amp;&amp;a==<span class=\"number\">3</span>)&#123;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实现（5）-add-3-minus-2-gt-6\"><a href=\"#实现（5）-add-3-minus-2-gt-6\" class=\"headerlink\" title=\"实现（5）.add(3).minus(2)=&gt;6;\"></a>实现（5）.add(3).minus(2)=&gt;6;</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Number</span>.prototype.add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.valueOf() + n;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Number</span>.prototype.minus = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.valueOf() - n;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实现-promise-all\"><a href=\"#实现-promise-all\" class=\"headerlink\" title=\"实现 promise.all\"></a>实现 promise.all</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.all = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">promises</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        promises = <span class=\"built_in\">Array</span>.form(promises);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (promises.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            resolve([]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> result =[];</span><br><span class=\"line\">          <span class=\"keyword\">let</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">          <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;promises.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">Promise</span>.resolve(promises[i]).then(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">              result[i] = data;</span><br><span class=\"line\">              <span class=\"keyword\">if</span>(++index===promise.length)&#123;</span><br><span class=\"line\">                resolve(result);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;,<span class=\"function\"><span class=\"params\">err</span>=&gt;</span>[</span><br><span class=\"line\">              reject(err);</span><br><span class=\"line\">              <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            ])</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>一些出乎意料的题及面试题的积累</p>","more":"<h2 id=\"变量提升\"><a href=\"#变量提升\" class=\"headerlink\" title=\"变量提升\"></a>变量提升</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"string\">&quot;abc&quot;</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> abc = <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(abc); <span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"comment\">//因为先变量声明提升 所以提升之后abc的值系统默认会赋值为undefined。 !abc为false ,in是检查对象中是否存在某个属性。很显然 false属于是一个布尔类型。不存在对象中。所以没有走if里面的变量赋值。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!(<span class=\"string\">&quot;a&quot;</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"comment\">//因为先变量声明提升 所以提升之后a的值系统默认会赋值为undefined。 变量提升会存在GO中也就是window。所以(&quot;a&quot; in window)肯定为true。!去反一下就为false。所以不走赋值。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;&#125;) &#123;</span><br><span class=\"line\">    x += <span class=\"keyword\">typeof</span> f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x); <span class=\"comment\">//1undefined</span></span><br><span class=\"line\"><span class=\"comment\">//因为函数题在()中会以表达式去运行。最后转换为true,不会存在函数整体声明提升。所以typeof为undefined</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; liListlength; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ele = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&quot;ul &gt; li&quot;</span>)[i];</span><br><span class=\"line\">    ele.addEventListener(</span><br><span class=\"line\">        <span class=\"string\">&quot;click&quot;</span>,</span><br><span class=\"line\">        (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;index is :&quot;</span> + i);</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;)(i)</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\">n, o</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(o);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        fun: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">m</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fun(m, n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = fun(<span class=\"number\">0</span>);</span><br><span class=\"line\">a.fun(<span class=\"number\">1</span>);</span><br><span class=\"line\">a.fun(<span class=\"number\">2</span>);</span><br><span class=\"line\">a.fun(<span class=\"number\">3</span>); <span class=\"comment\">//输出什么 undefined 0 0 0</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = fun(<span class=\"number\">0</span>)</span><br><span class=\"line\">    .fun(<span class=\"number\">1</span>)</span><br><span class=\"line\">    .fun(<span class=\"number\">2</span>)</span><br><span class=\"line\">    .fun(<span class=\"number\">3</span>); <span class=\"comment\">//输出什么 undefined 0 1 2</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = fun(<span class=\"number\">0</span>).fun(<span class=\"number\">1</span>);</span><br><span class=\"line\">c.fun(<span class=\"number\">2</span>);</span><br><span class=\"line\">c.fun(<span class=\"number\">3</span>); <span class=\"comment\">//输出什么 undefined 0 1 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//答案很显而易见。换一个形式看着道题</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\">n, o</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(o);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        fun: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">m</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fun(m, n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = fun(<span class=\"number\">0</span>);</span><br><span class=\"line\">a.fun(<span class=\"number\">1</span>);</span><br><span class=\"line\">a.fun(<span class=\"number\">2</span>);</span><br><span class=\"line\">a.fun(<span class=\"number\">3</span>); <span class=\"comment\">//输出什么 undefined 0 0 0</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"综合-1\"><a href=\"#综合-1\" class=\"headerlink\" title=\"综合(1)\"></a>综合(1)</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Foo.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Foo.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//请写出以下输出结果,先写以下SB作者的答案，然后接受残酷的事实</span></span><br><span class=\"line\">Foo.getName(); <span class=\"comment\">//alert(2);</span></span><br><span class=\"line\">getName(); <span class=\"comment\">//alert(5);</span></span><br><span class=\"line\">Foo().getName(); <span class=\"comment\">//alert(5);</span></span><br><span class=\"line\">getName(); <span class=\"comment\">//alert(5);</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Foo.getName(); <span class=\"comment\">//function()&#123;alert(2);&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Foo().getName(); <span class=\"comment\">//function getName &#123;alert&#123;5&#125;&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"keyword\">new</span> Foo.getName()(); <span class=\"comment\">//function()&#123;alert(2);&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>首先定义了一个叫 Foo 的函数，然后为 Foo 创建了一个叫 getName 的静态属性存储了一个匿名函数，之后为 Foo 的原型对象创建了一个叫 getName 的匿名函数。之后又通过函数变量表达式创建了一个 getName 的函数，最后声明一个叫做 getName 函数。</p>\n<h3 id=\"Foo-getName\"><a href=\"#Foo-getName\" class=\"headerlink\" title=\"Foo.getName();\"></a>Foo.getName();</h3><p><strong>答案： 2</strong></p>\n<p>Foo.getName()访问的 Foo 函数上存储的静态属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">User</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = name; <span class=\"comment\">//私有属性</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name; <span class=\"comment\">//公有属性</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//私有方法</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">User.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//公有方法</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">User.name = <span class=\"string\">&quot;Wscats&quot;</span>; <span class=\"comment\">//静态属性</span></span><br><span class=\"line\">User.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//静态方法</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Wscat = <span class=\"keyword\">new</span> User(<span class=\"string\">&quot;Wscats&quot;</span>); <span class=\"comment\">//实例化</span></span><br></pre></td></tr></table></figure>\n\n<p>注意以下几点：</p>\n<ul>\n<li>  调用公有方法，公有属性，我们必须要实例化对象，也就是用 new 操作符实例化对象，就可构造函数实例化对象的方法和属性，并且公有方法是不能调用私有方法和静态方法的。</li>\n<li>  静态方法和静态属性就是我们无需实例化就可以调用。</li>\n<li>  而对象的私有方法和属性，外部是不可以访问的。</li>\n</ul>\n<h3 id=\"getName\"><a href=\"#getName\" class=\"headerlink\" title=\"getName()\"></a>getName()</h3><p><strong>答案是 4</strong></p>\n<p>直接调用 getName 函数。既然是直接调用，那么就是访问当前作用域内的 getName 的函数，所以这里应该是 4 或者 5.这里的坑有，一是变量声明提升，而是函数表达式和函数声明的区别。答案是 4，5 的函数声明被 4 的函数表达式覆盖了。</p>\n<h4 id=\"函数声明与函数表达式\"><a href=\"#函数声明与函数表达式\" class=\"headerlink\" title=\"函数声明与函数表达式\"></a>函数声明与函数表达式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  getName()</span><br><span class=\"line\">  <span class=\"comment\">//oaoaafly 函数被提升 这里受函数声明的影响，虽然函数声在最后但可以被提升到最前面了 而此时的函数表达式还没有被赋值（赋值是顺序执行）。</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;wscat&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">//函数表达式此时才开始覆盖函数声明的定义。</span></span><br><span class=\"line\"></span><br><span class=\"line\">  getName()<span class=\"comment\">//wscat</span></span><br><span class=\"line\"></span><br><span class=\"line\">  funtion <span class=\"function\"><span class=\"title\">getName</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;oaoafly&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  getName()<span class=\"comment\">//wscat 这里就执行函数表达式的值</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>  <strong>JS 解释器中存在一种变量被提升的机制，也就是说函数声明会被提升到作用域的最前面，即使写在代码的最后面，也会被提升到最前面。</strong></p>\n</li>\n<li><p>  <strong>而用函数表达式创建的函数是在运行时被赋值，且要等到表达式赋值完成后才能调用。</strong></p>\n</li>\n</ul>\n<h3 id=\"Foo-getName-1\"><a href=\"#Foo-getName-1\" class=\"headerlink\" title=\"Foo().getName()\"></a>Foo().getName()</h3><p><strong>答案是：1</strong></p>\n<p>Foo().getName();先执行了 Foo 函数，然后调用 Foo 函数的返回对象的 getName 属性函数。</p>\n<p>Foo 函数的第一句<code>getName = function()&#123;alert(1);&#125;;</code>是一句函数赋值语句，注意它没有 var 声明，所以先向当前 Foo 函数作用域内寻找 getName 变量，没有，再项当前函数的作用域上层，及外层的作用于内寻找是否含有 getName 变量，找到了，也就是第二问中的 alert(4)函数，将此变量的值赋值为<code>function()&#123;alert(1)&#125;</code>。此处实际上是将外层作用域内的 getName 函数覆盖了。</p>\n<p>注意：此处若依然没有找到会一直向上查找到 window 对象，若 window 对象中也没有 getName 属性，就在 window 对象中创建一个 getName 变量。</p>\n<p>之后就返回了 this，此时的 this 是指向的 window 对象。所以相当于执行了 window.getName()。</p>\n<h3 id=\"getName-1\"><a href=\"#getName-1\" class=\"headerlink\" title=\"getName()\"></a>getName()</h3><p><strong>答案是：1</strong></p>\n<p>直接调用 getName 函数，相当于 window.getName()，因为这个变量已经被 Foo 函数执行时修改了，遂结果与第三问相同，为 1，也就是说 Foo 执行后把全局的 getName 函数给重写了一次，所以结果就是 Foo()执行重写的那个 getName 函数</p>\n<h3 id=\"new-Foo-getName\"><a href=\"#new-Foo-getName\" class=\"headerlink\" title=\"new Foo.getName()\"></a>new Foo.getName()</h3><p><strong>答案是：2</strong></p>\n<p>此处考察的是 JS 的运算符优先级的问题。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">MDN 运算符优先级</a></p>\n<ul>\n<li>  点的优先级比 new 高 所以 Foo.getName 是一起的.</li>\n<li>  因为有()，因此是 new 有参数列表，new 的有参数列表为 18 比函数调用（17）高 ，所以是 new Foo.getName</li>\n<li>  所以最后是(new Foo.getName)();</li>\n<li>  最后弹出 2</li>\n</ul>\n<h3 id=\"new-Foo-getName-1\"><a href=\"#new-Foo-getName-1\" class=\"headerlink\" title=\"new Foo().getName()\"></a>new Foo().getName()</h3><p><strong>答案是：3</strong></p>\n<p>new 的有参数列表跟点的优先级都是 18,同级的话按照从左向右的执行顺序，所以先执行 new 的有参数列表，再执行点的优先级，最后进行函数调用。(new Foo()).getName(); new 之后就调用公用办法，调用原型链上的 getName，因此是 3。</p>\n<h3 id=\"new-new-Foo-getName\"><a href=\"#new-new-Foo-getName\" class=\"headerlink\" title=\"new new Foo.getName()\"></a>new new Foo.getName()</h3><p><strong>答案是：3</strong><br>等同于：new ((new Foo()).getName)();</p>\n<h2 id=\"综合-2\"><a href=\"#综合-2\" class=\"headerlink\" title=\"综合(2)\"></a>综合(2)</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            getName: getName <span class=\"comment\">//这个就是第六问中涉及的构造函数的返回值问题</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;; <span class=\"comment\">//这个就是第六问中涉及到的，JS构造函数公有方法和原型链方法的优先级</span></span><br><span class=\"line\">    getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Foo.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Foo.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">6</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125; <span class=\"comment\">//答案：</span></span><br><span class=\"line\">Foo.getName(); <span class=\"comment\">//2</span></span><br><span class=\"line\">getName(); <span class=\"comment\">//4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Foo());</span><br><span class=\"line\">Foo().getName(); <span class=\"comment\">//1</span></span><br><span class=\"line\">getName(); <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Foo.getName(); <span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Foo().getName(); <span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"comment\">//多了一问</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Foo().getName().getName(); <span class=\"comment\">//3 1</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"keyword\">new</span> Foo().getName(); <span class=\"comment\">//3</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"异步和单线程\"><a href=\"#异步和单线程\" class=\"headerlink\" title=\"异步和单线程\"></a>异步和单线程</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    a = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"keyword\">while</span> (a) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;while执行了&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于 js 是一个单线程。所以进入到 while 循环之后，就没有现成去完成定时器，所以这是一个死循环。</p>\n<h2 id=\"JS-赋值\"><a href=\"#JS-赋值\" class=\"headerlink\" title=\"JS 赋值\"></a>JS 赋值</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123; <span class=\"attr\">n</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;</span><br><span class=\"line\">a.x = a = &#123; <span class=\"attr\">n</span>: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.x); <span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.x); <span class=\"comment\">//&#123;n:2&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>本人的错误思路：<code>a=&#123;n:2&#125;</code>=&gt;<code>a.x=a</code>=&gt;<code>a.x=&#123;n:2&#125;</code></p>\n<ul>\n<li>  错误点 1：不考虑其他，也应该是<code>a=&#123;n:2&#125;,a.x=&#123;n:2&#125;</code>,</li>\n<li>错误点 2：.的优先级比=高，所以先执行<code>a.x</code>,由于 a 引用的<code>&#123;n:1&#125;</code>=&gt;<code>&#123;n:1,x:undefined&#125;</code>=&gt; b=<code>&#123;n:1,x:undeined&#125;</code><br>  <code>a.x = a = &#123; n: 2 &#125;;</code> =&gt;<code>&#123;n:1,x:undeined&#125; = a =&#123; n: 2 &#125;</code>=&gt;<code>a=&#123;n:1&#125;;&#123;n:1,x:&#123;n:2&#125;&#125;</code></li>\n<li>  最重要的一点 3：<code>a=&#123;n:2&#125;</code>已经改变了引用了地址，然而 a 改变引用地址和 b 并没有任何关系，b 仍然指向的<code>&#123;n:1,x:&#123;n:2&#125;&#125;</code></li>\n</ul>\n<p>所以 a.x = undefined b.x ={n:2}</p>\n<h2 id=\"下面-a-在什么情况下会打印-1\"><a href=\"#下面-a-在什么情况下会打印-1\" class=\"headerlink\" title=\"下面 a 在什么情况下会打印 1\"></a>下面 a 在什么情况下会打印 1</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&quot;&quot;</span>; <span class=\"comment\">//?</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (a == <span class=\"number\">1</span> &amp;&amp; a == <span class=\"number\">2</span> &amp;&amp; a == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因为==会进行隐式转化 所以我们重写了 toString 方法就可以</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">  i:<span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">toString</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>:a.i++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(a==<span class=\"number\">1</span>&amp;&amp;a==<span class=\"number\">2</span>&amp;&amp;a==<span class=\"number\">3</span>)&#123;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实现（5）-add-3-minus-2-gt-6\"><a href=\"#实现（5）-add-3-minus-2-gt-6\" class=\"headerlink\" title=\"实现（5）.add(3).minus(2)=&gt;6;\"></a>实现（5）.add(3).minus(2)=&gt;6;</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Number</span>.prototype.add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.valueOf() + n;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Number</span>.prototype.minus = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.valueOf() - n;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实现-promise-all\"><a href=\"#实现-promise-all\" class=\"headerlink\" title=\"实现 promise.all\"></a>实现 promise.all</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.all = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">promises</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        promises = <span class=\"built_in\">Array</span>.form(promises);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (promises.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            resolve([]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> result =[];</span><br><span class=\"line\">          <span class=\"keyword\">let</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">          <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;promises.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">Promise</span>.resolve(promises[i]).then(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">              result[i] = data;</span><br><span class=\"line\">              <span class=\"keyword\">if</span>(++index===promise.length)&#123;</span><br><span class=\"line\">                resolve(result);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;,<span class=\"function\"><span class=\"params\">err</span>=&gt;</span>[</span><br><span class=\"line\">              reject(err);</span><br><span class=\"line\">              <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            ])</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"正则表达式","date":"2019-08-12T08:56:17.000Z","_content":"正则表达式的特点是：1. 灵活性、逻辑性和功能性非常的强；2. 可以迅速地用极简单的方式达到字符串的复杂控制。3. 对于刚接触的人来说，比较晦涩难懂。\n\n<!--more-->\n\n[正则表达式全集](http://tool.oschina.net/uploads/apidocs/jquery/regexp.html);\n\n# 字面量字符( Literal Characters )\n字符  |\t描述  |\t描述\n-|-|-\nf\t |    换页符 |\t(u000C)\nn\t |    换行符 |\t(u000A)\nn\t |    换行符 |\t(u000A)\nr\t |    回车 |\t(u000D)\no\t |    NUL字符 |\t(u0000)\nt\t |   制表符 |\t(u0009)\nv\t |  垂直制表符 |\t(u000B)\nxnn\t |由十六进制数nn指定的拉丁字符 |\tx0A等价于n\nuxxxx |\t由十六进行xxxx指定的Unicode字符 |\tu0009等价与t\ncX\t控制字符(X的值必须是A-Z或a-z) |\tcJ等价于换行符n\n\n# 字符类( Character Classes )\n\n字符 |\t描述 |\t示例\n-|-|-\n[xyz] |\t匹配位于括号内的任意字符 |\t[abc]匹配'plain'中的a\n[^xyz] |\t匹配不在括号之中的任意字符\t[^abc] | 匹配'plain'中的p\nw |\t等价于[a-zA-Z0-9_] |\tw匹配'sina'中的s\nW |\t等价于[^a-zA-Z0-9_] |\tw不能匹配'sina'\ns |\t任何Unicode空白符 |\t[ fnrtv]\nS |\t任何非空白字符 |\t[^ fnrtv]\nd |\t等价于[0-9] |\td匹配'sina123'中的1\nD |\t等价于[^0-9] |\tD不能匹配'sina1'中的1\n[b] |\t退格直接量(特例) \n\n# 重复\n\n\n字符 | \t描述 | \t                    示例\n-|-|-\n{n,m} | \t匹配至少n次,但不超过m次,n和m必须是非负整数,且n<=m |  `/\\d{4,6}/`匹配4-6位0-9的数字\n{n,} |  匹配至少n次\to{2,} |  不匹配'Bob'中的'o',但匹配'food'中的 o. \t   \n{n} | \t    恰好匹配n次\to{2} |  不匹配'Bob'中的'o',但匹配'food'中的o.\n? | \t    匹配0次或1次,等价于{0,1} | \tzo? 匹配 \"z\" and \"zo\", 但不匹配\"zoo\".\n+ | \t    匹配1次或多次,等价于{1,} | \tzo+ 匹配 \"zo\" and \"zoo\", 但不匹配 \"z\".\n* | \t    匹配0次或多次,等价于{0,} | \tzo* 匹配 \"z\" 和 \"zoo\".\n\n# 非贪婪的重复\n当？紧跟在其他限制符（*,+,?,{n},{n,},{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式是尽可能少的匹配所搜索的字符串。例如字符串\"ooooo\",\"o+?\"将匹配单个\"o\",而o+匹配所有o","source":"_posts/正则表达式.md","raw":"---\ntitle: 正则表达式\ndate: 2019-08-12 16:56:17\ncategories: JavaScript\n---\n正则表达式的特点是：1. 灵活性、逻辑性和功能性非常的强；2. 可以迅速地用极简单的方式达到字符串的复杂控制。3. 对于刚接触的人来说，比较晦涩难懂。\n\n<!--more-->\n\n[正则表达式全集](http://tool.oschina.net/uploads/apidocs/jquery/regexp.html);\n\n# 字面量字符( Literal Characters )\n字符  |\t描述  |\t描述\n-|-|-\nf\t |    换页符 |\t(u000C)\nn\t |    换行符 |\t(u000A)\nn\t |    换行符 |\t(u000A)\nr\t |    回车 |\t(u000D)\no\t |    NUL字符 |\t(u0000)\nt\t |   制表符 |\t(u0009)\nv\t |  垂直制表符 |\t(u000B)\nxnn\t |由十六进制数nn指定的拉丁字符 |\tx0A等价于n\nuxxxx |\t由十六进行xxxx指定的Unicode字符 |\tu0009等价与t\ncX\t控制字符(X的值必须是A-Z或a-z) |\tcJ等价于换行符n\n\n# 字符类( Character Classes )\n\n字符 |\t描述 |\t示例\n-|-|-\n[xyz] |\t匹配位于括号内的任意字符 |\t[abc]匹配'plain'中的a\n[^xyz] |\t匹配不在括号之中的任意字符\t[^abc] | 匹配'plain'中的p\nw |\t等价于[a-zA-Z0-9_] |\tw匹配'sina'中的s\nW |\t等价于[^a-zA-Z0-9_] |\tw不能匹配'sina'\ns |\t任何Unicode空白符 |\t[ fnrtv]\nS |\t任何非空白字符 |\t[^ fnrtv]\nd |\t等价于[0-9] |\td匹配'sina123'中的1\nD |\t等价于[^0-9] |\tD不能匹配'sina1'中的1\n[b] |\t退格直接量(特例) \n\n# 重复\n\n\n字符 | \t描述 | \t                    示例\n-|-|-\n{n,m} | \t匹配至少n次,但不超过m次,n和m必须是非负整数,且n<=m |  `/\\d{4,6}/`匹配4-6位0-9的数字\n{n,} |  匹配至少n次\to{2,} |  不匹配'Bob'中的'o',但匹配'food'中的 o. \t   \n{n} | \t    恰好匹配n次\to{2} |  不匹配'Bob'中的'o',但匹配'food'中的o.\n? | \t    匹配0次或1次,等价于{0,1} | \tzo? 匹配 \"z\" and \"zo\", 但不匹配\"zoo\".\n+ | \t    匹配1次或多次,等价于{1,} | \tzo+ 匹配 \"zo\" and \"zoo\", 但不匹配 \"z\".\n* | \t    匹配0次或多次,等价于{0,} | \tzo* 匹配 \"z\" 和 \"zoo\".\n\n# 非贪婪的重复\n当？紧跟在其他限制符（*,+,?,{n},{n,},{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式是尽可能少的匹配所搜索的字符串。例如字符串\"ooooo\",\"o+?\"将匹配单个\"o\",而o+匹配所有o","slug":"正则表达式","published":1,"updated":"2021-03-01T03:47:26.031Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmejaesp002nxcvrhif0cul9","content":"<p>正则表达式的特点是：1. 灵活性、逻辑性和功能性非常的强；2. 可以迅速地用极简单的方式达到字符串的复杂控制。3. 对于刚接触的人来说，比较晦涩难懂。</p>\n<span id=\"more\"></span>\n\n<p><a href=\"http://tool.oschina.net/uploads/apidocs/jquery/regexp.html\">正则表达式全集</a>;</p>\n<h1 id=\"字面量字符-Literal-Characters\"><a href=\"#字面量字符-Literal-Characters\" class=\"headerlink\" title=\"字面量字符( Literal Characters )\"></a>字面量字符( Literal Characters )</h1><table>\n<thead>\n<tr>\n<th>字符</th>\n<th>描述</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>f</td>\n<td>换页符</td>\n<td>(u000C)</td>\n</tr>\n<tr>\n<td>n</td>\n<td>换行符</td>\n<td>(u000A)</td>\n</tr>\n<tr>\n<td>n</td>\n<td>换行符</td>\n<td>(u000A)</td>\n</tr>\n<tr>\n<td>r</td>\n<td>回车</td>\n<td>(u000D)</td>\n</tr>\n<tr>\n<td>o</td>\n<td>NUL字符</td>\n<td>(u0000)</td>\n</tr>\n<tr>\n<td>t</td>\n<td>制表符</td>\n<td>(u0009)</td>\n</tr>\n<tr>\n<td>v</td>\n<td>垂直制表符</td>\n<td>(u000B)</td>\n</tr>\n<tr>\n<td>xnn</td>\n<td>由十六进制数nn指定的拉丁字符</td>\n<td>x0A等价于n</td>\n</tr>\n<tr>\n<td>uxxxx</td>\n<td>由十六进行xxxx指定的Unicode字符</td>\n<td>u0009等价与t</td>\n</tr>\n<tr>\n<td>cX    控制字符(X的值必须是A-Z或a-z)</td>\n<td>cJ等价于换行符n</td>\n<td></td>\n</tr>\n</tbody></table>\n<h1 id=\"字符类-Character-Classes\"><a href=\"#字符类-Character-Classes\" class=\"headerlink\" title=\"字符类( Character Classes )\"></a>字符类( Character Classes )</h1><table>\n<thead>\n<tr>\n<th>字符</th>\n<th>描述</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[xyz]</td>\n<td>匹配位于括号内的任意字符</td>\n<td>[abc]匹配’plain’中的a</td>\n</tr>\n<tr>\n<td>[^xyz]</td>\n<td>匹配不在括号之中的任意字符    [^abc]</td>\n<td>匹配’plain’中的p</td>\n</tr>\n<tr>\n<td>w</td>\n<td>等价于[a-zA-Z0-9_]</td>\n<td>w匹配’sina’中的s</td>\n</tr>\n<tr>\n<td>W</td>\n<td>等价于[^a-zA-Z0-9_]</td>\n<td>w不能匹配’sina’</td>\n</tr>\n<tr>\n<td>s</td>\n<td>任何Unicode空白符</td>\n<td>[ fnrtv]</td>\n</tr>\n<tr>\n<td>S</td>\n<td>任何非空白字符</td>\n<td>[^ fnrtv]</td>\n</tr>\n<tr>\n<td>d</td>\n<td>等价于[0-9]</td>\n<td>d匹配’sina123’中的1</td>\n</tr>\n<tr>\n<td>D</td>\n<td>等价于[^0-9]</td>\n<td>D不能匹配’sina1’中的1</td>\n</tr>\n<tr>\n<td>[b]</td>\n<td>退格直接量(特例)</td>\n<td></td>\n</tr>\n</tbody></table>\n<h1 id=\"重复\"><a href=\"#重复\" class=\"headerlink\" title=\"重复\"></a>重复</h1><table>\n<thead>\n<tr>\n<th>字符</th>\n<th>描述</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>{n,m}</td>\n<td>匹配至少n次,但不超过m次,n和m必须是非负整数,且n&lt;=m</td>\n<td><code>/\\d&#123;4,6&#125;/</code>匹配4-6位0-9的数字</td>\n</tr>\n<tr>\n<td>{n,}</td>\n<td>匹配至少n次    o{2,}</td>\n<td>不匹配’Bob’中的’o’,但匹配’food’中的 o.</td>\n</tr>\n<tr>\n<td>{n}</td>\n<td>恰好匹配n次    o{2}</td>\n<td>不匹配’Bob’中的’o’,但匹配’food’中的o.</td>\n</tr>\n<tr>\n<td>?</td>\n<td>匹配0次或1次,等价于{0,1}</td>\n<td>zo? 匹配 “z” and “zo”, 但不匹配”zoo”.</td>\n</tr>\n</tbody></table>\n<ul>\n<li>|         匹配1次或多次,等价于{1,} |     zo+ 匹配 “zo” and “zoo”, 但不匹配 “z”.</li>\n</ul>\n<ul>\n<li>|         匹配0次或多次,等价于{0,} |     zo* 匹配 “z” 和 “zoo”.</li>\n</ul>\n<h1 id=\"非贪婪的重复\"><a href=\"#非贪婪的重复\" class=\"headerlink\" title=\"非贪婪的重复\"></a>非贪婪的重复</h1><p>当？紧跟在其他限制符（*,+,?,{n},{n,},{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式是尽可能少的匹配所搜索的字符串。例如字符串”ooooo”,”o+?”将匹配单个”o”,而o+匹配所有o</p>\n","site":{"data":{}},"excerpt":"<p>正则表达式的特点是：1. 灵活性、逻辑性和功能性非常的强；2. 可以迅速地用极简单的方式达到字符串的复杂控制。3. 对于刚接触的人来说，比较晦涩难懂。</p>","more":"<p><a href=\"http://tool.oschina.net/uploads/apidocs/jquery/regexp.html\">正则表达式全集</a>;</p>\n<h1 id=\"字面量字符-Literal-Characters\"><a href=\"#字面量字符-Literal-Characters\" class=\"headerlink\" title=\"字面量字符( Literal Characters )\"></a>字面量字符( Literal Characters )</h1><table>\n<thead>\n<tr>\n<th>字符</th>\n<th>描述</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>f</td>\n<td>换页符</td>\n<td>(u000C)</td>\n</tr>\n<tr>\n<td>n</td>\n<td>换行符</td>\n<td>(u000A)</td>\n</tr>\n<tr>\n<td>n</td>\n<td>换行符</td>\n<td>(u000A)</td>\n</tr>\n<tr>\n<td>r</td>\n<td>回车</td>\n<td>(u000D)</td>\n</tr>\n<tr>\n<td>o</td>\n<td>NUL字符</td>\n<td>(u0000)</td>\n</tr>\n<tr>\n<td>t</td>\n<td>制表符</td>\n<td>(u0009)</td>\n</tr>\n<tr>\n<td>v</td>\n<td>垂直制表符</td>\n<td>(u000B)</td>\n</tr>\n<tr>\n<td>xnn</td>\n<td>由十六进制数nn指定的拉丁字符</td>\n<td>x0A等价于n</td>\n</tr>\n<tr>\n<td>uxxxx</td>\n<td>由十六进行xxxx指定的Unicode字符</td>\n<td>u0009等价与t</td>\n</tr>\n<tr>\n<td>cX    控制字符(X的值必须是A-Z或a-z)</td>\n<td>cJ等价于换行符n</td>\n<td></td>\n</tr>\n</tbody></table>\n<h1 id=\"字符类-Character-Classes\"><a href=\"#字符类-Character-Classes\" class=\"headerlink\" title=\"字符类( Character Classes )\"></a>字符类( Character Classes )</h1><table>\n<thead>\n<tr>\n<th>字符</th>\n<th>描述</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[xyz]</td>\n<td>匹配位于括号内的任意字符</td>\n<td>[abc]匹配’plain’中的a</td>\n</tr>\n<tr>\n<td>[^xyz]</td>\n<td>匹配不在括号之中的任意字符    [^abc]</td>\n<td>匹配’plain’中的p</td>\n</tr>\n<tr>\n<td>w</td>\n<td>等价于[a-zA-Z0-9_]</td>\n<td>w匹配’sina’中的s</td>\n</tr>\n<tr>\n<td>W</td>\n<td>等价于[^a-zA-Z0-9_]</td>\n<td>w不能匹配’sina’</td>\n</tr>\n<tr>\n<td>s</td>\n<td>任何Unicode空白符</td>\n<td>[ fnrtv]</td>\n</tr>\n<tr>\n<td>S</td>\n<td>任何非空白字符</td>\n<td>[^ fnrtv]</td>\n</tr>\n<tr>\n<td>d</td>\n<td>等价于[0-9]</td>\n<td>d匹配’sina123’中的1</td>\n</tr>\n<tr>\n<td>D</td>\n<td>等价于[^0-9]</td>\n<td>D不能匹配’sina1’中的1</td>\n</tr>\n<tr>\n<td>[b]</td>\n<td>退格直接量(特例)</td>\n<td></td>\n</tr>\n</tbody></table>\n<h1 id=\"重复\"><a href=\"#重复\" class=\"headerlink\" title=\"重复\"></a>重复</h1><table>\n<thead>\n<tr>\n<th>字符</th>\n<th>描述</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>{n,m}</td>\n<td>匹配至少n次,但不超过m次,n和m必须是非负整数,且n&lt;=m</td>\n<td><code>/\\d&#123;4,6&#125;/</code>匹配4-6位0-9的数字</td>\n</tr>\n<tr>\n<td>{n,}</td>\n<td>匹配至少n次    o{2,}</td>\n<td>不匹配’Bob’中的’o’,但匹配’food’中的 o.</td>\n</tr>\n<tr>\n<td>{n}</td>\n<td>恰好匹配n次    o{2}</td>\n<td>不匹配’Bob’中的’o’,但匹配’food’中的o.</td>\n</tr>\n<tr>\n<td>?</td>\n<td>匹配0次或1次,等价于{0,1}</td>\n<td>zo? 匹配 “z” and “zo”, 但不匹配”zoo”.</td>\n</tr>\n</tbody></table>\n<ul>\n<li>|         匹配1次或多次,等价于{1,} |     zo+ 匹配 “zo” and “zoo”, 但不匹配 “z”.</li>\n</ul>\n<ul>\n<li>|         匹配0次或多次,等价于{0,} |     zo* 匹配 “z” 和 “zoo”.</li>\n</ul>\n<h1 id=\"非贪婪的重复\"><a href=\"#非贪婪的重复\" class=\"headerlink\" title=\"非贪婪的重复\"></a>非贪婪的重复</h1><p>当？紧跟在其他限制符（*,+,?,{n},{n,},{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式是尽可能少的匹配所搜索的字符串。例如字符串”ooooo”,”o+?”将匹配单个”o”,而o+匹配所有o</p>"},{"title":"浏览器存储机制","date":"2018-04-25T02:21:57.000Z","_content":"\nHTML5 中 Web Storage 的出现，主要是为了弥补使用 Cookie 作为本地存储的不足。**Cookie 存储的数据量非常小，而且数据会自动携带到请求头里，但服务器端可能并不关心这些数据，所以会造成带宽的浪费**。\n\nweb storage 提供了两个存储对象：localStorage 和 sessionStorage。\n\n<!--more-->\n\n## localStorage 的基本使用\n\n有两点需要注意一下。在 setItem 时，可能会达到大小限制，最好加上错误捕捉 ：\n\n```javascript\ntry {\n  localStorage.setItem(key, value);\n} catch(e) {\n  if (isQuotaExceeded(e)) {\n    // Storage full, maybe notify user or do some clean-up\n  }\n}\n\nfunction isQuotaExceeded(e) {\n  var quotaExceeded = false;\n  if (e) {\n    if (e.code) {\n      switch (e.code) {\n        case 22:\n          quotaExceeded = true;\n          break;\n        case 1014:\n          // Firefox\n          if (e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {\n            quotaExceeded = true;\n          }\n          break;\n      }\n    } else if (e.number === -2147024882) {\n      // Internet Explorer 8\n      quotaExceeded = true;\n    }\n  }\n  return quotaExceeded;\n```\n\n另外在存储容量快满时，会造成 getItem 性能急剧下降\n\n## sessionStorage,localStorage,cookie 区别\n\n**区别如下：**\n\n1. 都会在浏览器端保存，有大小限制，同源限制。\n2. cookie 会在请求时发送到服务器，作为会话标识，服务器可修改 cookie；web storage 不会发送到服务器，cookie 有 path 概念，子路径可以访问父路径 cookie，父路径不能访问子路径 cookie。\n3. localStorage 的修改会促发其他文档窗口的`update`事件，localStorage 可以永久存储，而且同源下数据多窗口可以共享。\n4. cookie 有 secure 属性要求 HTTPS 传输。\n5. 共享:sessionStorage 不能共享，localStorage 在同源文档之间共享，cookie 在同源且符合 path 规则的文档之间共享\n6. 浏览器不能保存超过 300 个 cookie，单个服务器不能超过 20 个，每个 cookie 不能超过 4k。web storage 大小支持能达到 5M。\n7. sessionStorage 存储的数据仅在本次会话有用，会话结束之后会自动失效，而且数据仅在当前窗口有效，同一源下新窗口也访问不到其他窗口基于 sessionStorage 存储的数据。也是由这些特性导致 sessionStorage 的使用场景较少。\n8. 有效期：cookie 在设置的有效期内有效，默认为浏览器关闭；sessionStorage 在窗口关闭前有效，localStorage 长期有效，直到用户删除\n\ncookie 和 session 都是用来跟踪浏览器用户身份的会话方式。\n\n## cookie 机制\n\n- cookie 数据始终在同源的 http 请求中携带（即使不需要），即 cookie 在浏览器和服务器间来回传递。cookie 数据还有路径（path）的概念，可以限制 cookie 只属于某个路径下\n- 如果不在浏览器中设置过期时间，cookie 会被保存在内存中，生命周期随浏览器的关闭而结束，这种 cookie 称为会话 cookie，如果设置了 cookie 过期时间会保存在硬盘中，关闭浏览器之后，cookie 数据仍然存在，直到过期时间结束才消失。\n- cookie 是服务器发给客户端的特殊信息，cookie 是以文本的方式保存在客户端，每次请求时会带上它。\n\n### 第一方 cookie 和 第三方 cookie 的区别\n\n第一方 cookie 是由地址栏中列出的网站域设置的 Cookie，而第三方 cookie 来自于在网页上嵌入广告或图片等项的其他域来源。\n\n访问 www.a.com 这个网址，这个网站设置了一个 Cookie，这个 cookie 也只能被 www.a.com 这个域下面的网页读取，这就是第一方 cookie。\n\n如果访问 www.a.com 这个网站，这个网站有用到 www.b.com 的图片，浏览器在 www.b.com 请求图片的时候，www.b.com 设置了一个 cookie，那这个 cookie 只能被 www.b.com 这个域访问，反而不能被 www.a.com 的域访问，这个就是第三方 cookie。\n\n## session 机制\n\n当服务器收到请求需要创建 seesion 对象时，首先会检查客户端请求是否包含 sessionId。如果有 seesionId,服务器将根据该 id 返回对象的 session 对象，如果没有 sessionid,服务器将会创建新的 session 对象，并把 sessionid 再本次响应中返回给客户端。通常使用 cookie 方式存储 sessionid 到客户端，再交互中浏览器按照规则将 sessionid 发给服务端。如果用户禁用 cookie，则要使用 URL 重写，可以通过 response.encodeURL(url)进行实现；API 对 encodeURL 的结束为，当浏览器支持 Cookie 时，url 不做任何处理；当浏览器不支持 Cookie 时，url 不做任何处理；当浏览器不支持 Cookie 的时候，将会重写 URL 将 seesionid 拼接到访问地址之后。\n\n## 存储内容\n\ncookie 只能保存字符串，以文本的方式；session 通过类型与 Hashtable 的数据结构来保存，能支持任何类型的对象（session 中可含有多个对象）。\n\n## 存储的大小\n\n- cookie:单个 cookie 保存的数据不能超过 4kb;\n- session:大小没有限制。\n\n## sessionStorage\n\n是一个 HTML5 新增的一个会话储存对象，用于临时保存同一个窗口（或标签页）的数据，再关闭窗口或关闭标签页之后会将删除这些数据。\n\n在 JavaScript 中可以通过 window。sessionStorage 或 sessionStrorage\n\n非常适合 SPA，可以方便再各业务模块进行传值\n\n不在不同的浏览器窗口中共享，即使是同一个页面；\n\n## localSotrage\n\nlocalStorage 存储的数据是永久性的。\n\n## Service Worker\n\n`Service Worker`本质上充当 web 应用程序与浏览器之间的代理服务器，也可以在网络可用是作为浏览器和网络之间的代理。他们旨在是的能够创建有效的离线体验。拦截网络请求并给予网络是否可用以及更新的资源是否驻留在服务器上来采取适当的动作。他们还允许访问推送通知和后台同步 API\n\n## 浏览器缓存读取规则\n\n可以分成 Service Worker、Memory Cache、Disk Cache 和 Push Cache，那请求的时候 from memory cache 和 from disk cache 的依据是什么，哪些数据什么时候存放在 Memory Cache 和 Disk Cache 中？\n\n总的来说:\n\n1. 如果开启了 service worker 首先会从 service worker 中拿\n2. 如果新开一个以前打开过的页面的缓存会从 disk cache 中拿（前提是命中强缓存）\n3. 刷新当前页面时浏览器会根据当前运行环境内存来决定是从 memory cache 还是 disk cache 中拿\n","source":"_posts/浏览器存储机制.md","raw":"---\ntitle: 浏览器存储机制\ndate: 2018-04-25 10:21:57\ncategories: WEB\n---\n\nHTML5 中 Web Storage 的出现，主要是为了弥补使用 Cookie 作为本地存储的不足。**Cookie 存储的数据量非常小，而且数据会自动携带到请求头里，但服务器端可能并不关心这些数据，所以会造成带宽的浪费**。\n\nweb storage 提供了两个存储对象：localStorage 和 sessionStorage。\n\n<!--more-->\n\n## localStorage 的基本使用\n\n有两点需要注意一下。在 setItem 时，可能会达到大小限制，最好加上错误捕捉 ：\n\n```javascript\ntry {\n  localStorage.setItem(key, value);\n} catch(e) {\n  if (isQuotaExceeded(e)) {\n    // Storage full, maybe notify user or do some clean-up\n  }\n}\n\nfunction isQuotaExceeded(e) {\n  var quotaExceeded = false;\n  if (e) {\n    if (e.code) {\n      switch (e.code) {\n        case 22:\n          quotaExceeded = true;\n          break;\n        case 1014:\n          // Firefox\n          if (e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {\n            quotaExceeded = true;\n          }\n          break;\n      }\n    } else if (e.number === -2147024882) {\n      // Internet Explorer 8\n      quotaExceeded = true;\n    }\n  }\n  return quotaExceeded;\n```\n\n另外在存储容量快满时，会造成 getItem 性能急剧下降\n\n## sessionStorage,localStorage,cookie 区别\n\n**区别如下：**\n\n1. 都会在浏览器端保存，有大小限制，同源限制。\n2. cookie 会在请求时发送到服务器，作为会话标识，服务器可修改 cookie；web storage 不会发送到服务器，cookie 有 path 概念，子路径可以访问父路径 cookie，父路径不能访问子路径 cookie。\n3. localStorage 的修改会促发其他文档窗口的`update`事件，localStorage 可以永久存储，而且同源下数据多窗口可以共享。\n4. cookie 有 secure 属性要求 HTTPS 传输。\n5. 共享:sessionStorage 不能共享，localStorage 在同源文档之间共享，cookie 在同源且符合 path 规则的文档之间共享\n6. 浏览器不能保存超过 300 个 cookie，单个服务器不能超过 20 个，每个 cookie 不能超过 4k。web storage 大小支持能达到 5M。\n7. sessionStorage 存储的数据仅在本次会话有用，会话结束之后会自动失效，而且数据仅在当前窗口有效，同一源下新窗口也访问不到其他窗口基于 sessionStorage 存储的数据。也是由这些特性导致 sessionStorage 的使用场景较少。\n8. 有效期：cookie 在设置的有效期内有效，默认为浏览器关闭；sessionStorage 在窗口关闭前有效，localStorage 长期有效，直到用户删除\n\ncookie 和 session 都是用来跟踪浏览器用户身份的会话方式。\n\n## cookie 机制\n\n- cookie 数据始终在同源的 http 请求中携带（即使不需要），即 cookie 在浏览器和服务器间来回传递。cookie 数据还有路径（path）的概念，可以限制 cookie 只属于某个路径下\n- 如果不在浏览器中设置过期时间，cookie 会被保存在内存中，生命周期随浏览器的关闭而结束，这种 cookie 称为会话 cookie，如果设置了 cookie 过期时间会保存在硬盘中，关闭浏览器之后，cookie 数据仍然存在，直到过期时间结束才消失。\n- cookie 是服务器发给客户端的特殊信息，cookie 是以文本的方式保存在客户端，每次请求时会带上它。\n\n### 第一方 cookie 和 第三方 cookie 的区别\n\n第一方 cookie 是由地址栏中列出的网站域设置的 Cookie，而第三方 cookie 来自于在网页上嵌入广告或图片等项的其他域来源。\n\n访问 www.a.com 这个网址，这个网站设置了一个 Cookie，这个 cookie 也只能被 www.a.com 这个域下面的网页读取，这就是第一方 cookie。\n\n如果访问 www.a.com 这个网站，这个网站有用到 www.b.com 的图片，浏览器在 www.b.com 请求图片的时候，www.b.com 设置了一个 cookie，那这个 cookie 只能被 www.b.com 这个域访问，反而不能被 www.a.com 的域访问，这个就是第三方 cookie。\n\n## session 机制\n\n当服务器收到请求需要创建 seesion 对象时，首先会检查客户端请求是否包含 sessionId。如果有 seesionId,服务器将根据该 id 返回对象的 session 对象，如果没有 sessionid,服务器将会创建新的 session 对象，并把 sessionid 再本次响应中返回给客户端。通常使用 cookie 方式存储 sessionid 到客户端，再交互中浏览器按照规则将 sessionid 发给服务端。如果用户禁用 cookie，则要使用 URL 重写，可以通过 response.encodeURL(url)进行实现；API 对 encodeURL 的结束为，当浏览器支持 Cookie 时，url 不做任何处理；当浏览器不支持 Cookie 时，url 不做任何处理；当浏览器不支持 Cookie 的时候，将会重写 URL 将 seesionid 拼接到访问地址之后。\n\n## 存储内容\n\ncookie 只能保存字符串，以文本的方式；session 通过类型与 Hashtable 的数据结构来保存，能支持任何类型的对象（session 中可含有多个对象）。\n\n## 存储的大小\n\n- cookie:单个 cookie 保存的数据不能超过 4kb;\n- session:大小没有限制。\n\n## sessionStorage\n\n是一个 HTML5 新增的一个会话储存对象，用于临时保存同一个窗口（或标签页）的数据，再关闭窗口或关闭标签页之后会将删除这些数据。\n\n在 JavaScript 中可以通过 window。sessionStorage 或 sessionStrorage\n\n非常适合 SPA，可以方便再各业务模块进行传值\n\n不在不同的浏览器窗口中共享，即使是同一个页面；\n\n## localSotrage\n\nlocalStorage 存储的数据是永久性的。\n\n## Service Worker\n\n`Service Worker`本质上充当 web 应用程序与浏览器之间的代理服务器，也可以在网络可用是作为浏览器和网络之间的代理。他们旨在是的能够创建有效的离线体验。拦截网络请求并给予网络是否可用以及更新的资源是否驻留在服务器上来采取适当的动作。他们还允许访问推送通知和后台同步 API\n\n## 浏览器缓存读取规则\n\n可以分成 Service Worker、Memory Cache、Disk Cache 和 Push Cache，那请求的时候 from memory cache 和 from disk cache 的依据是什么，哪些数据什么时候存放在 Memory Cache 和 Disk Cache 中？\n\n总的来说:\n\n1. 如果开启了 service worker 首先会从 service worker 中拿\n2. 如果新开一个以前打开过的页面的缓存会从 disk cache 中拿（前提是命中强缓存）\n3. 刷新当前页面时浏览器会根据当前运行环境内存来决定是从 memory cache 还是 disk cache 中拿\n","slug":"浏览器存储机制","published":1,"updated":"2021-03-01T03:47:26.032Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmejaesq002pxcvrhycs0cem","content":"<p>HTML5 中 Web Storage 的出现，主要是为了弥补使用 Cookie 作为本地存储的不足。<strong>Cookie 存储的数据量非常小，而且数据会自动携带到请求头里，但服务器端可能并不关心这些数据，所以会造成带宽的浪费</strong>。</p>\n<p>web storage 提供了两个存储对象：localStorage 和 sessionStorage。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"localStorage-的基本使用\"><a href=\"#localStorage-的基本使用\" class=\"headerlink\" title=\"localStorage 的基本使用\"></a>localStorage 的基本使用</h2><p>有两点需要注意一下。在 setItem 时，可能会达到大小限制，最好加上错误捕捉 ：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">localStorage</span>.setItem(key, value);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isQuotaExceeded(e)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Storage full, maybe notify user or do some clean-up</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isQuotaExceeded</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> quotaExceeded = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (e.code) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (e.code) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">22</span>:</span><br><span class=\"line\">          quotaExceeded = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1014</span>:</span><br><span class=\"line\">          <span class=\"comment\">// Firefox</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (e.name === <span class=\"string\">&#x27;NS_ERROR_DOM_QUOTA_REACHED&#x27;</span>) &#123;</span><br><span class=\"line\">            quotaExceeded = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e.number === -<span class=\"number\">2147024882</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Internet Explorer 8</span></span><br><span class=\"line\">      quotaExceeded = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> quotaExceeded;</span><br></pre></td></tr></table></figure>\n\n<p>另外在存储容量快满时，会造成 getItem 性能急剧下降</p>\n<h2 id=\"sessionStorage-localStorage-cookie-区别\"><a href=\"#sessionStorage-localStorage-cookie-区别\" class=\"headerlink\" title=\"sessionStorage,localStorage,cookie 区别\"></a>sessionStorage,localStorage,cookie 区别</h2><p><strong>区别如下：</strong></p>\n<ol>\n<li>都会在浏览器端保存，有大小限制，同源限制。</li>\n<li>cookie 会在请求时发送到服务器，作为会话标识，服务器可修改 cookie；web storage 不会发送到服务器，cookie 有 path 概念，子路径可以访问父路径 cookie，父路径不能访问子路径 cookie。</li>\n<li>localStorage 的修改会促发其他文档窗口的<code>update</code>事件，localStorage 可以永久存储，而且同源下数据多窗口可以共享。</li>\n<li>cookie 有 secure 属性要求 HTTPS 传输。</li>\n<li>共享:sessionStorage 不能共享，localStorage 在同源文档之间共享，cookie 在同源且符合 path 规则的文档之间共享</li>\n<li>浏览器不能保存超过 300 个 cookie，单个服务器不能超过 20 个，每个 cookie 不能超过 4k。web storage 大小支持能达到 5M。</li>\n<li>sessionStorage 存储的数据仅在本次会话有用，会话结束之后会自动失效，而且数据仅在当前窗口有效，同一源下新窗口也访问不到其他窗口基于 sessionStorage 存储的数据。也是由这些特性导致 sessionStorage 的使用场景较少。</li>\n<li>有效期：cookie 在设置的有效期内有效，默认为浏览器关闭；sessionStorage 在窗口关闭前有效，localStorage 长期有效，直到用户删除</li>\n</ol>\n<p>cookie 和 session 都是用来跟踪浏览器用户身份的会话方式。</p>\n<h2 id=\"cookie-机制\"><a href=\"#cookie-机制\" class=\"headerlink\" title=\"cookie 机制\"></a>cookie 机制</h2><ul>\n<li>cookie 数据始终在同源的 http 请求中携带（即使不需要），即 cookie 在浏览器和服务器间来回传递。cookie 数据还有路径（path）的概念，可以限制 cookie 只属于某个路径下</li>\n<li>如果不在浏览器中设置过期时间，cookie 会被保存在内存中，生命周期随浏览器的关闭而结束，这种 cookie 称为会话 cookie，如果设置了 cookie 过期时间会保存在硬盘中，关闭浏览器之后，cookie 数据仍然存在，直到过期时间结束才消失。</li>\n<li>cookie 是服务器发给客户端的特殊信息，cookie 是以文本的方式保存在客户端，每次请求时会带上它。</li>\n</ul>\n<h3 id=\"第一方-cookie-和-第三方-cookie-的区别\"><a href=\"#第一方-cookie-和-第三方-cookie-的区别\" class=\"headerlink\" title=\"第一方 cookie 和 第三方 cookie 的区别\"></a>第一方 cookie 和 第三方 cookie 的区别</h3><p>第一方 cookie 是由地址栏中列出的网站域设置的 Cookie，而第三方 cookie 来自于在网页上嵌入广告或图片等项的其他域来源。</p>\n<p>访问 <a href=\"http://www.a.com/\">www.a.com</a> 这个网址，这个网站设置了一个 Cookie，这个 cookie 也只能被 <a href=\"http://www.a.com/\">www.a.com</a> 这个域下面的网页读取，这就是第一方 cookie。</p>\n<p>如果访问 <a href=\"http://www.a.com/\">www.a.com</a> 这个网站，这个网站有用到 <a href=\"http://www.b.com/\">www.b.com</a> 的图片，浏览器在 <a href=\"http://www.b.com/\">www.b.com</a> 请求图片的时候，<a href=\"http://www.b.com/\">www.b.com</a> 设置了一个 cookie，那这个 cookie 只能被 <a href=\"http://www.b.com/\">www.b.com</a> 这个域访问，反而不能被 <a href=\"http://www.a.com/\">www.a.com</a> 的域访问，这个就是第三方 cookie。</p>\n<h2 id=\"session-机制\"><a href=\"#session-机制\" class=\"headerlink\" title=\"session 机制\"></a>session 机制</h2><p>当服务器收到请求需要创建 seesion 对象时，首先会检查客户端请求是否包含 sessionId。如果有 seesionId,服务器将根据该 id 返回对象的 session 对象，如果没有 sessionid,服务器将会创建新的 session 对象，并把 sessionid 再本次响应中返回给客户端。通常使用 cookie 方式存储 sessionid 到客户端，再交互中浏览器按照规则将 sessionid 发给服务端。如果用户禁用 cookie，则要使用 URL 重写，可以通过 response.encodeURL(url)进行实现；API 对 encodeURL 的结束为，当浏览器支持 Cookie 时，url 不做任何处理；当浏览器不支持 Cookie 时，url 不做任何处理；当浏览器不支持 Cookie 的时候，将会重写 URL 将 seesionid 拼接到访问地址之后。</p>\n<h2 id=\"存储内容\"><a href=\"#存储内容\" class=\"headerlink\" title=\"存储内容\"></a>存储内容</h2><p>cookie 只能保存字符串，以文本的方式；session 通过类型与 Hashtable 的数据结构来保存，能支持任何类型的对象（session 中可含有多个对象）。</p>\n<h2 id=\"存储的大小\"><a href=\"#存储的大小\" class=\"headerlink\" title=\"存储的大小\"></a>存储的大小</h2><ul>\n<li>cookie:单个 cookie 保存的数据不能超过 4kb;</li>\n<li>session:大小没有限制。</li>\n</ul>\n<h2 id=\"sessionStorage\"><a href=\"#sessionStorage\" class=\"headerlink\" title=\"sessionStorage\"></a>sessionStorage</h2><p>是一个 HTML5 新增的一个会话储存对象，用于临时保存同一个窗口（或标签页）的数据，再关闭窗口或关闭标签页之后会将删除这些数据。</p>\n<p>在 JavaScript 中可以通过 window。sessionStorage 或 sessionStrorage</p>\n<p>非常适合 SPA，可以方便再各业务模块进行传值</p>\n<p>不在不同的浏览器窗口中共享，即使是同一个页面；</p>\n<h2 id=\"localSotrage\"><a href=\"#localSotrage\" class=\"headerlink\" title=\"localSotrage\"></a>localSotrage</h2><p>localStorage 存储的数据是永久性的。</p>\n<h2 id=\"Service-Worker\"><a href=\"#Service-Worker\" class=\"headerlink\" title=\"Service Worker\"></a>Service Worker</h2><p><code>Service Worker</code>本质上充当 web 应用程序与浏览器之间的代理服务器，也可以在网络可用是作为浏览器和网络之间的代理。他们旨在是的能够创建有效的离线体验。拦截网络请求并给予网络是否可用以及更新的资源是否驻留在服务器上来采取适当的动作。他们还允许访问推送通知和后台同步 API</p>\n<h2 id=\"浏览器缓存读取规则\"><a href=\"#浏览器缓存读取规则\" class=\"headerlink\" title=\"浏览器缓存读取规则\"></a>浏览器缓存读取规则</h2><p>可以分成 Service Worker、Memory Cache、Disk Cache 和 Push Cache，那请求的时候 from memory cache 和 from disk cache 的依据是什么，哪些数据什么时候存放在 Memory Cache 和 Disk Cache 中？</p>\n<p>总的来说:</p>\n<ol>\n<li>如果开启了 service worker 首先会从 service worker 中拿</li>\n<li>如果新开一个以前打开过的页面的缓存会从 disk cache 中拿（前提是命中强缓存）</li>\n<li>刷新当前页面时浏览器会根据当前运行环境内存来决定是从 memory cache 还是 disk cache 中拿</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>HTML5 中 Web Storage 的出现，主要是为了弥补使用 Cookie 作为本地存储的不足。<strong>Cookie 存储的数据量非常小，而且数据会自动携带到请求头里，但服务器端可能并不关心这些数据，所以会造成带宽的浪费</strong>。</p>\n<p>web storage 提供了两个存储对象：localStorage 和 sessionStorage。</p>","more":"<h2 id=\"localStorage-的基本使用\"><a href=\"#localStorage-的基本使用\" class=\"headerlink\" title=\"localStorage 的基本使用\"></a>localStorage 的基本使用</h2><p>有两点需要注意一下。在 setItem 时，可能会达到大小限制，最好加上错误捕捉 ：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">localStorage</span>.setItem(key, value);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isQuotaExceeded(e)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Storage full, maybe notify user or do some clean-up</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isQuotaExceeded</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> quotaExceeded = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (e.code) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (e.code) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">22</span>:</span><br><span class=\"line\">          quotaExceeded = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1014</span>:</span><br><span class=\"line\">          <span class=\"comment\">// Firefox</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (e.name === <span class=\"string\">&#x27;NS_ERROR_DOM_QUOTA_REACHED&#x27;</span>) &#123;</span><br><span class=\"line\">            quotaExceeded = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e.number === -<span class=\"number\">2147024882</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Internet Explorer 8</span></span><br><span class=\"line\">      quotaExceeded = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> quotaExceeded;</span><br></pre></td></tr></table></figure>\n\n<p>另外在存储容量快满时，会造成 getItem 性能急剧下降</p>\n<h2 id=\"sessionStorage-localStorage-cookie-区别\"><a href=\"#sessionStorage-localStorage-cookie-区别\" class=\"headerlink\" title=\"sessionStorage,localStorage,cookie 区别\"></a>sessionStorage,localStorage,cookie 区别</h2><p><strong>区别如下：</strong></p>\n<ol>\n<li>都会在浏览器端保存，有大小限制，同源限制。</li>\n<li>cookie 会在请求时发送到服务器，作为会话标识，服务器可修改 cookie；web storage 不会发送到服务器，cookie 有 path 概念，子路径可以访问父路径 cookie，父路径不能访问子路径 cookie。</li>\n<li>localStorage 的修改会促发其他文档窗口的<code>update</code>事件，localStorage 可以永久存储，而且同源下数据多窗口可以共享。</li>\n<li>cookie 有 secure 属性要求 HTTPS 传输。</li>\n<li>共享:sessionStorage 不能共享，localStorage 在同源文档之间共享，cookie 在同源且符合 path 规则的文档之间共享</li>\n<li>浏览器不能保存超过 300 个 cookie，单个服务器不能超过 20 个，每个 cookie 不能超过 4k。web storage 大小支持能达到 5M。</li>\n<li>sessionStorage 存储的数据仅在本次会话有用，会话结束之后会自动失效，而且数据仅在当前窗口有效，同一源下新窗口也访问不到其他窗口基于 sessionStorage 存储的数据。也是由这些特性导致 sessionStorage 的使用场景较少。</li>\n<li>有效期：cookie 在设置的有效期内有效，默认为浏览器关闭；sessionStorage 在窗口关闭前有效，localStorage 长期有效，直到用户删除</li>\n</ol>\n<p>cookie 和 session 都是用来跟踪浏览器用户身份的会话方式。</p>\n<h2 id=\"cookie-机制\"><a href=\"#cookie-机制\" class=\"headerlink\" title=\"cookie 机制\"></a>cookie 机制</h2><ul>\n<li>cookie 数据始终在同源的 http 请求中携带（即使不需要），即 cookie 在浏览器和服务器间来回传递。cookie 数据还有路径（path）的概念，可以限制 cookie 只属于某个路径下</li>\n<li>如果不在浏览器中设置过期时间，cookie 会被保存在内存中，生命周期随浏览器的关闭而结束，这种 cookie 称为会话 cookie，如果设置了 cookie 过期时间会保存在硬盘中，关闭浏览器之后，cookie 数据仍然存在，直到过期时间结束才消失。</li>\n<li>cookie 是服务器发给客户端的特殊信息，cookie 是以文本的方式保存在客户端，每次请求时会带上它。</li>\n</ul>\n<h3 id=\"第一方-cookie-和-第三方-cookie-的区别\"><a href=\"#第一方-cookie-和-第三方-cookie-的区别\" class=\"headerlink\" title=\"第一方 cookie 和 第三方 cookie 的区别\"></a>第一方 cookie 和 第三方 cookie 的区别</h3><p>第一方 cookie 是由地址栏中列出的网站域设置的 Cookie，而第三方 cookie 来自于在网页上嵌入广告或图片等项的其他域来源。</p>\n<p>访问 <a href=\"http://www.a.com/\">www.a.com</a> 这个网址，这个网站设置了一个 Cookie，这个 cookie 也只能被 <a href=\"http://www.a.com/\">www.a.com</a> 这个域下面的网页读取，这就是第一方 cookie。</p>\n<p>如果访问 <a href=\"http://www.a.com/\">www.a.com</a> 这个网站，这个网站有用到 <a href=\"http://www.b.com/\">www.b.com</a> 的图片，浏览器在 <a href=\"http://www.b.com/\">www.b.com</a> 请求图片的时候，<a href=\"http://www.b.com/\">www.b.com</a> 设置了一个 cookie，那这个 cookie 只能被 <a href=\"http://www.b.com/\">www.b.com</a> 这个域访问，反而不能被 <a href=\"http://www.a.com/\">www.a.com</a> 的域访问，这个就是第三方 cookie。</p>\n<h2 id=\"session-机制\"><a href=\"#session-机制\" class=\"headerlink\" title=\"session 机制\"></a>session 机制</h2><p>当服务器收到请求需要创建 seesion 对象时，首先会检查客户端请求是否包含 sessionId。如果有 seesionId,服务器将根据该 id 返回对象的 session 对象，如果没有 sessionid,服务器将会创建新的 session 对象，并把 sessionid 再本次响应中返回给客户端。通常使用 cookie 方式存储 sessionid 到客户端，再交互中浏览器按照规则将 sessionid 发给服务端。如果用户禁用 cookie，则要使用 URL 重写，可以通过 response.encodeURL(url)进行实现；API 对 encodeURL 的结束为，当浏览器支持 Cookie 时，url 不做任何处理；当浏览器不支持 Cookie 时，url 不做任何处理；当浏览器不支持 Cookie 的时候，将会重写 URL 将 seesionid 拼接到访问地址之后。</p>\n<h2 id=\"存储内容\"><a href=\"#存储内容\" class=\"headerlink\" title=\"存储内容\"></a>存储内容</h2><p>cookie 只能保存字符串，以文本的方式；session 通过类型与 Hashtable 的数据结构来保存，能支持任何类型的对象（session 中可含有多个对象）。</p>\n<h2 id=\"存储的大小\"><a href=\"#存储的大小\" class=\"headerlink\" title=\"存储的大小\"></a>存储的大小</h2><ul>\n<li>cookie:单个 cookie 保存的数据不能超过 4kb;</li>\n<li>session:大小没有限制。</li>\n</ul>\n<h2 id=\"sessionStorage\"><a href=\"#sessionStorage\" class=\"headerlink\" title=\"sessionStorage\"></a>sessionStorage</h2><p>是一个 HTML5 新增的一个会话储存对象，用于临时保存同一个窗口（或标签页）的数据，再关闭窗口或关闭标签页之后会将删除这些数据。</p>\n<p>在 JavaScript 中可以通过 window。sessionStorage 或 sessionStrorage</p>\n<p>非常适合 SPA，可以方便再各业务模块进行传值</p>\n<p>不在不同的浏览器窗口中共享，即使是同一个页面；</p>\n<h2 id=\"localSotrage\"><a href=\"#localSotrage\" class=\"headerlink\" title=\"localSotrage\"></a>localSotrage</h2><p>localStorage 存储的数据是永久性的。</p>\n<h2 id=\"Service-Worker\"><a href=\"#Service-Worker\" class=\"headerlink\" title=\"Service Worker\"></a>Service Worker</h2><p><code>Service Worker</code>本质上充当 web 应用程序与浏览器之间的代理服务器，也可以在网络可用是作为浏览器和网络之间的代理。他们旨在是的能够创建有效的离线体验。拦截网络请求并给予网络是否可用以及更新的资源是否驻留在服务器上来采取适当的动作。他们还允许访问推送通知和后台同步 API</p>\n<h2 id=\"浏览器缓存读取规则\"><a href=\"#浏览器缓存读取规则\" class=\"headerlink\" title=\"浏览器缓存读取规则\"></a>浏览器缓存读取规则</h2><p>可以分成 Service Worker、Memory Cache、Disk Cache 和 Push Cache，那请求的时候 from memory cache 和 from disk cache 的依据是什么，哪些数据什么时候存放在 Memory Cache 和 Disk Cache 中？</p>\n<p>总的来说:</p>\n<ol>\n<li>如果开启了 service worker 首先会从 service worker 中拿</li>\n<li>如果新开一个以前打开过的页面的缓存会从 disk cache 中拿（前提是命中强缓存）</li>\n<li>刷新当前页面时浏览器会根据当前运行环境内存来决定是从 memory cache 还是 disk cache 中拿</li>\n</ol>"},{"title":"浏览器渲染与解析","date":"2018-05-17T01:47:28.000Z","_content":"\n以前在项目中遇到过‘监听浏览器的前进后退重新执行 JS’的需求的场景，所以现在综合一些资料和自己的测试进行总结一下。\n\n<!--more-->\n\n## 渲染机制\n\n浏览器的渲染机制一般分为以下几个步骤\n\n1. 处理 HTML 并构建 DOM 树\n   2。\n\n## 浏览器前进、后退使用机制\n\n用户点击浏览器工具栏中的后退按钮，或者是移动设备上的返回键的时候，或者是 JS 执行`history.go(-1)`的时候，浏览器会在当前窗口“打开”历史记录中的前一个页面。不同的浏览器在“打开”前一个页面的表现并不同意，这和浏览器的实现以及页面本身的设置都有关系。在浏览器中，“后退到前一个页面”意味着：前一个页面的 html/js/css 等等的静态资源的请求（甚至是 ajax 动态接口请求）根本不会重新发送，直接使用缓存的响应，而不管这些金泰资源响应的缓存策略是否被设置了禁用状态。\n\n---\n\n## history 中的操作\n\n1.  `window.history.back()`:后退\n2.  `window.history.dorward()`:前进\n3.  `window.history.go(num)`:前进或后退指定数量历史记录\n4.  `window.history.pushState(state,title,url)`:在页面中创建一个 histor 实体，直接天剑到历史记录。\n    - state:存储一个对象，可以添加相关信息，可以使用 history.state 读取其中的内容。\n    - title:历史记录的标题。\n    - url:创建的历史记录的链接，进行历史记录操作时会跳转到改链接。\n5.  `window.history.replaceState()`:修改当前的 history 实体。\n6.  `popstate`事件:history 实体改变时触发的事件。\n7.  `window.history.state`:会获得 history 实体中的 state 对象。\n\n## popstate\n\npopstate 只会在浏览器某些行为下触发，比如点击后退、前进按钮。\n\n在微信浏览器中，从一个 HTML 跳到另一个 HTML 页面后，点击浏览器返回按钮，或者在第二个页面中调用`history.back()`等返回上一页的方法，在安卓中会直接返回上一页(相当于重新加载上一页的所有内容，js 会重新执行一遍)，但苹果手机中，范湖上一页是，浏览器会读取缓存中的页面内容，js 不会重新执行，在此进入这个页面不会触发 onload 事件。\n\n```javascript\n//强制刷新：\nwindow.addEventListener(\n  'popstate',\n  function(e) {\n    //检测到用户点击浏览器返回按钮，进行操作\n    console.log(document.referrer);\n\n    //使用href的形式去用跳转的形式，跳转到上一页\n    document.location.href = document.referrer;\n  },\n  false\n);\nvar state = {\n  title: '',\n  url: ''\n};\nwindow.history.pushState(state, '', '');\n```\n\n## pageshow\n\nonpageshow 事件在页面显示时触发，如果页面不在“往返缓存”中，改时间会在 onload 后触发，在 onpageshow 事件中，可以利用 event.persisted\n\n```javascript\n    window.addEventListener('pageshow'.function(evernt){\n        alert(event.persisted);\n        if(event.persisted) location.reload();//如果检测到页面是从“往返缓存”中读取的，刷新页面。\n    });\n```\n\n## unload\n\n指定 unload 事件处理程序的页面会被自动排除在“往返缓存”之外，即使事件处理程序是空白的，原因在于，unload 最长用于撤销 load 中所执行的操作，而跳过 load 后再次显示页面很有可能会导致页面不正常。\n\n## 从输入 URL 到 页面加载发生了什么\n\n发生过程：\n\n- 查看 web 缓存\n- DNS 解析\n- TCP 连接\n- 发送 HTTP 请求\n- 服务器处理请求并返回 HTTP 报文\n- 浏览器解析渲染页面\n- 连接结束\n\n### 查看 web 缓存\n\n当浏览器再次访问一个已经访问过的资源时，它会：\n\n1. 看看是否命中强缓存，如果命中，则直接使用缓存。返回 200 状态不访问服务器。\n2. 如果没有命中强缓存，就发送请求到服务器检查是否命中协商缓存。\n3. 如果命中协商缓存，访问服务器，服务器返回 304 告诉浏览器使用本地缓存。\n4. 否则，请求网络返回最新资源。\n\n浏览器缓存的位置：\n\n1. service worker :它可以让我们自由控制哪些文件、如何匹配缓存，如何读取缓存，并且缓存是持续性的。\n2. memory cache:内存缓存，读取内存中的数据肯定比磁盘块，但是内存缓存虽然读取高效，可是缓存持续性很短，会随着进程的释放而释放，一旦关闭了 tap 页，内存中的缓存也得到了释放。\n3. disk cache：也就是存储在硬盘中的缓存，读取速度慢点，但是什么都能存储到磁盘中，比如 memory cache 胜在容量和存储时效性上。\n\n缓存实现：强缓存和协商缓存都是根据 HTTP Header 来实现的。\n\n#### 浏览器缓存机制\n\n![network](/images/problem/2.png)\n\n##### 当前缓存是否过期。\n\n如果浏览器通过某些条件 ( 条件之后再说 ) 判断出来，ok 现在这个缓存没有过期可以用，那么连请求都不会发的，直接是启用之前浏览器缓存下来的那份文件 (from memory cache). 浏览器直接通过缓存读取了出来，注意这个时候是不会向浏览器请求的！ 如果过期了就会向服务器重新发起请求，但是不一定就会重新拉取文件！\n\n##### 服务器中的文件是否改动。\n\n1. 缓存过期，文件有改动：如果服务器发现这个文件改变了那么你肯定不能再用以前浏览器的缓存了，那就返回个 200 并且带上新的文件。\n\n2. 缓存过期，文件无改动：同时如果发现虽然那个缓存虽然过期了，可你在服务器端的文件没有变过，那么服务器只会给你返回一个头信息 (304)，让你继续用你那过期的缓存，这样就节省了很多传输文件的时间带宽啥的\n\n过期了的缓存需要请求一次服务器，若服务器判断说这个文件没有改变还能用，那就返回 304。浏览器认识 304，它就会去读取过期缓存。否则就真的传一份新文件到浏览器。\n\n### DNS 解析\n\n浏览器查找域名对应的 IP 地址。互联网上每一台计算机的唯一识别是它的 IP 地址，DNS 解析就是讲网址转换为 IP 地址。\n\n查找过程：\n\n1. 浏览器搜索自己的 DNS 缓存（维护一张域名与 IP 地址的对应表）\n2. 搜索操作系统中的 DNS 缓存（维护一张域名与 IP 地址的对应表）\n3. 搜索操作系统的 host 文件（Windows 环境下，维护一张域名与 IP 地址的对应表）\n4. 操作系统间根域名发送至 LDNS（本地域名服务器），首先查找自己的缓存若是失败：\n   - 向根域名服务器发起请求，此处根域名服务器返回 com 域的 sing 机域名服务器地址。\n   - LDNS 向 com 域的顶级域名服务器发起请求，得到 www.baidu.com 的地址。\n   - LONS 向 baidu.com 域名服务器发起请求，得到 www.baidu.com 的 IP 地址。\n5. LDNS 将得到的 IP 地址返回给操作系统，同时将 IP 地址缓存起来；\n6. 操作系统将 IP 地址返回给浏览器，同时自己也缓存起来；\n\n此时浏览器得到了域名对应的 IP 地址。\n\n### TCP 连接\n\n浏览器根据 IP 地址与服务器建立 socket 连接 。\n\n### 发送 HTTP 请求\n\n1. 浏览器根据 URL 内容生成 HTTP 请求，请求中包含文件的位置，请求文件的方式等。\n2. 服务器接到请求后，会根据 HTTP 请求中的内容来决定如何获取相应的 HTML 文件。\n\n#### http 状态码\n\n1. 200 form memory cache 不访问服务器，直接读缓存 ，此时的缓存是缓存在内存中的，当 kill 进程之后数据就会不存在。这种方式只能缓存派生资源。\n2. 200 OK (from cache) 是浏览器没有跟服务器确认，直接用了浏览器缓存。\n3. 304 Not Modified 是浏览器和服务器多确认了一次缓存有效性，再用的缓存。200(from cache) 是速度最快的 , 因为不需要访问远程服务器 , 直接使用本地缓存 .304 的过程是 , 先请求服务器 , 然后服务器告诉我们这个资源没变 , 浏览器再使用本地缓存。\n4. 200 from dist cache 不访问服务器，直接度缓存，当进程 kill 时，数据依旧存在。只能缓存派生资源。\n\n![network](/images/problem/1.png)\n\n### 浏览器解析渲染页面\n\n现代浏览器渲染页面过程是：解码（字节流到字符流） ——> 分词（此法分析） ——> 解析（语法分析）——> 构建 DOM 树 ——> 构建渲染树 ——> 布局渲染树 ——> 绘制渲染树\n\n### 连接结束\n\n断开连接 --4 次挥手\n\n- 为什么服务器在接到断开请求时不立即同意断开：当服务器收到断开连接的请求时，可能仍然有数据未发送完毕，所以服务器先发送确认信号，等所有数据发送完毕后再同意断开。\n\n- 第四次握手后，主机发送确认信号后并没有立即断开连接，而是等待了 2 个报文传送周期，原因是：如果第四次握手的确认信息丢失，服务器将会重新发送第三次握手的断开连接的信号，而服务器发觉丢包与重新发送的断开连接到达主机的时间正好为 2 个报文传输周期。\n","source":"_posts/浏览器渲染与解析.md","raw":"---\ntitle: 浏览器渲染与解析\ndate: 2018-05-17 09:47:28\ncategories: WEB\n---\n\n以前在项目中遇到过‘监听浏览器的前进后退重新执行 JS’的需求的场景，所以现在综合一些资料和自己的测试进行总结一下。\n\n<!--more-->\n\n## 渲染机制\n\n浏览器的渲染机制一般分为以下几个步骤\n\n1. 处理 HTML 并构建 DOM 树\n   2。\n\n## 浏览器前进、后退使用机制\n\n用户点击浏览器工具栏中的后退按钮，或者是移动设备上的返回键的时候，或者是 JS 执行`history.go(-1)`的时候，浏览器会在当前窗口“打开”历史记录中的前一个页面。不同的浏览器在“打开”前一个页面的表现并不同意，这和浏览器的实现以及页面本身的设置都有关系。在浏览器中，“后退到前一个页面”意味着：前一个页面的 html/js/css 等等的静态资源的请求（甚至是 ajax 动态接口请求）根本不会重新发送，直接使用缓存的响应，而不管这些金泰资源响应的缓存策略是否被设置了禁用状态。\n\n---\n\n## history 中的操作\n\n1.  `window.history.back()`:后退\n2.  `window.history.dorward()`:前进\n3.  `window.history.go(num)`:前进或后退指定数量历史记录\n4.  `window.history.pushState(state,title,url)`:在页面中创建一个 histor 实体，直接天剑到历史记录。\n    - state:存储一个对象，可以添加相关信息，可以使用 history.state 读取其中的内容。\n    - title:历史记录的标题。\n    - url:创建的历史记录的链接，进行历史记录操作时会跳转到改链接。\n5.  `window.history.replaceState()`:修改当前的 history 实体。\n6.  `popstate`事件:history 实体改变时触发的事件。\n7.  `window.history.state`:会获得 history 实体中的 state 对象。\n\n## popstate\n\npopstate 只会在浏览器某些行为下触发，比如点击后退、前进按钮。\n\n在微信浏览器中，从一个 HTML 跳到另一个 HTML 页面后，点击浏览器返回按钮，或者在第二个页面中调用`history.back()`等返回上一页的方法，在安卓中会直接返回上一页(相当于重新加载上一页的所有内容，js 会重新执行一遍)，但苹果手机中，范湖上一页是，浏览器会读取缓存中的页面内容，js 不会重新执行，在此进入这个页面不会触发 onload 事件。\n\n```javascript\n//强制刷新：\nwindow.addEventListener(\n  'popstate',\n  function(e) {\n    //检测到用户点击浏览器返回按钮，进行操作\n    console.log(document.referrer);\n\n    //使用href的形式去用跳转的形式，跳转到上一页\n    document.location.href = document.referrer;\n  },\n  false\n);\nvar state = {\n  title: '',\n  url: ''\n};\nwindow.history.pushState(state, '', '');\n```\n\n## pageshow\n\nonpageshow 事件在页面显示时触发，如果页面不在“往返缓存”中，改时间会在 onload 后触发，在 onpageshow 事件中，可以利用 event.persisted\n\n```javascript\n    window.addEventListener('pageshow'.function(evernt){\n        alert(event.persisted);\n        if(event.persisted) location.reload();//如果检测到页面是从“往返缓存”中读取的，刷新页面。\n    });\n```\n\n## unload\n\n指定 unload 事件处理程序的页面会被自动排除在“往返缓存”之外，即使事件处理程序是空白的，原因在于，unload 最长用于撤销 load 中所执行的操作，而跳过 load 后再次显示页面很有可能会导致页面不正常。\n\n## 从输入 URL 到 页面加载发生了什么\n\n发生过程：\n\n- 查看 web 缓存\n- DNS 解析\n- TCP 连接\n- 发送 HTTP 请求\n- 服务器处理请求并返回 HTTP 报文\n- 浏览器解析渲染页面\n- 连接结束\n\n### 查看 web 缓存\n\n当浏览器再次访问一个已经访问过的资源时，它会：\n\n1. 看看是否命中强缓存，如果命中，则直接使用缓存。返回 200 状态不访问服务器。\n2. 如果没有命中强缓存，就发送请求到服务器检查是否命中协商缓存。\n3. 如果命中协商缓存，访问服务器，服务器返回 304 告诉浏览器使用本地缓存。\n4. 否则，请求网络返回最新资源。\n\n浏览器缓存的位置：\n\n1. service worker :它可以让我们自由控制哪些文件、如何匹配缓存，如何读取缓存，并且缓存是持续性的。\n2. memory cache:内存缓存，读取内存中的数据肯定比磁盘块，但是内存缓存虽然读取高效，可是缓存持续性很短，会随着进程的释放而释放，一旦关闭了 tap 页，内存中的缓存也得到了释放。\n3. disk cache：也就是存储在硬盘中的缓存，读取速度慢点，但是什么都能存储到磁盘中，比如 memory cache 胜在容量和存储时效性上。\n\n缓存实现：强缓存和协商缓存都是根据 HTTP Header 来实现的。\n\n#### 浏览器缓存机制\n\n![network](/images/problem/2.png)\n\n##### 当前缓存是否过期。\n\n如果浏览器通过某些条件 ( 条件之后再说 ) 判断出来，ok 现在这个缓存没有过期可以用，那么连请求都不会发的，直接是启用之前浏览器缓存下来的那份文件 (from memory cache). 浏览器直接通过缓存读取了出来，注意这个时候是不会向浏览器请求的！ 如果过期了就会向服务器重新发起请求，但是不一定就会重新拉取文件！\n\n##### 服务器中的文件是否改动。\n\n1. 缓存过期，文件有改动：如果服务器发现这个文件改变了那么你肯定不能再用以前浏览器的缓存了，那就返回个 200 并且带上新的文件。\n\n2. 缓存过期，文件无改动：同时如果发现虽然那个缓存虽然过期了，可你在服务器端的文件没有变过，那么服务器只会给你返回一个头信息 (304)，让你继续用你那过期的缓存，这样就节省了很多传输文件的时间带宽啥的\n\n过期了的缓存需要请求一次服务器，若服务器判断说这个文件没有改变还能用，那就返回 304。浏览器认识 304，它就会去读取过期缓存。否则就真的传一份新文件到浏览器。\n\n### DNS 解析\n\n浏览器查找域名对应的 IP 地址。互联网上每一台计算机的唯一识别是它的 IP 地址，DNS 解析就是讲网址转换为 IP 地址。\n\n查找过程：\n\n1. 浏览器搜索自己的 DNS 缓存（维护一张域名与 IP 地址的对应表）\n2. 搜索操作系统中的 DNS 缓存（维护一张域名与 IP 地址的对应表）\n3. 搜索操作系统的 host 文件（Windows 环境下，维护一张域名与 IP 地址的对应表）\n4. 操作系统间根域名发送至 LDNS（本地域名服务器），首先查找自己的缓存若是失败：\n   - 向根域名服务器发起请求，此处根域名服务器返回 com 域的 sing 机域名服务器地址。\n   - LDNS 向 com 域的顶级域名服务器发起请求，得到 www.baidu.com 的地址。\n   - LONS 向 baidu.com 域名服务器发起请求，得到 www.baidu.com 的 IP 地址。\n5. LDNS 将得到的 IP 地址返回给操作系统，同时将 IP 地址缓存起来；\n6. 操作系统将 IP 地址返回给浏览器，同时自己也缓存起来；\n\n此时浏览器得到了域名对应的 IP 地址。\n\n### TCP 连接\n\n浏览器根据 IP 地址与服务器建立 socket 连接 。\n\n### 发送 HTTP 请求\n\n1. 浏览器根据 URL 内容生成 HTTP 请求，请求中包含文件的位置，请求文件的方式等。\n2. 服务器接到请求后，会根据 HTTP 请求中的内容来决定如何获取相应的 HTML 文件。\n\n#### http 状态码\n\n1. 200 form memory cache 不访问服务器，直接读缓存 ，此时的缓存是缓存在内存中的，当 kill 进程之后数据就会不存在。这种方式只能缓存派生资源。\n2. 200 OK (from cache) 是浏览器没有跟服务器确认，直接用了浏览器缓存。\n3. 304 Not Modified 是浏览器和服务器多确认了一次缓存有效性，再用的缓存。200(from cache) 是速度最快的 , 因为不需要访问远程服务器 , 直接使用本地缓存 .304 的过程是 , 先请求服务器 , 然后服务器告诉我们这个资源没变 , 浏览器再使用本地缓存。\n4. 200 from dist cache 不访问服务器，直接度缓存，当进程 kill 时，数据依旧存在。只能缓存派生资源。\n\n![network](/images/problem/1.png)\n\n### 浏览器解析渲染页面\n\n现代浏览器渲染页面过程是：解码（字节流到字符流） ——> 分词（此法分析） ——> 解析（语法分析）——> 构建 DOM 树 ——> 构建渲染树 ——> 布局渲染树 ——> 绘制渲染树\n\n### 连接结束\n\n断开连接 --4 次挥手\n\n- 为什么服务器在接到断开请求时不立即同意断开：当服务器收到断开连接的请求时，可能仍然有数据未发送完毕，所以服务器先发送确认信号，等所有数据发送完毕后再同意断开。\n\n- 第四次握手后，主机发送确认信号后并没有立即断开连接，而是等待了 2 个报文传送周期，原因是：如果第四次握手的确认信息丢失，服务器将会重新发送第三次握手的断开连接的信号，而服务器发觉丢包与重新发送的断开连接到达主机的时间正好为 2 个报文传输周期。\n","slug":"浏览器渲染与解析","published":1,"updated":"2021-03-04T02:23:46.784Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmejaesr002rxcvrbdv4629b","content":"<p>以前在项目中遇到过‘监听浏览器的前进后退重新执行 JS’的需求的场景，所以现在综合一些资料和自己的测试进行总结一下。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"渲染机制\"><a href=\"#渲染机制\" class=\"headerlink\" title=\"渲染机制\"></a>渲染机制</h2><p>浏览器的渲染机制一般分为以下几个步骤</p>\n<ol>\n<li>处理 HTML 并构建 DOM 树<br>2。</li>\n</ol>\n<h2 id=\"浏览器前进、后退使用机制\"><a href=\"#浏览器前进、后退使用机制\" class=\"headerlink\" title=\"浏览器前进、后退使用机制\"></a>浏览器前进、后退使用机制</h2><p>用户点击浏览器工具栏中的后退按钮，或者是移动设备上的返回键的时候，或者是 JS 执行<code>history.go(-1)</code>的时候，浏览器会在当前窗口“打开”历史记录中的前一个页面。不同的浏览器在“打开”前一个页面的表现并不同意，这和浏览器的实现以及页面本身的设置都有关系。在浏览器中，“后退到前一个页面”意味着：前一个页面的 html/js/css 等等的静态资源的请求（甚至是 ajax 动态接口请求）根本不会重新发送，直接使用缓存的响应，而不管这些金泰资源响应的缓存策略是否被设置了禁用状态。</p>\n<hr>\n<h2 id=\"history-中的操作\"><a href=\"#history-中的操作\" class=\"headerlink\" title=\"history 中的操作\"></a>history 中的操作</h2><ol>\n<li> <code>window.history.back()</code>:后退</li>\n<li> <code>window.history.dorward()</code>:前进</li>\n<li> <code>window.history.go(num)</code>:前进或后退指定数量历史记录</li>\n<li><code>window.history.pushState(state,title,url)</code>:在页面中创建一个 histor 实体，直接天剑到历史记录。<ul>\n<li>state:存储一个对象，可以添加相关信息，可以使用 history.state 读取其中的内容。</li>\n<li>title:历史记录的标题。</li>\n<li>url:创建的历史记录的链接，进行历史记录操作时会跳转到改链接。</li>\n</ul>\n</li>\n<li> <code>window.history.replaceState()</code>:修改当前的 history 实体。</li>\n<li> <code>popstate</code>事件:history 实体改变时触发的事件。</li>\n<li> <code>window.history.state</code>:会获得 history 实体中的 state 对象。</li>\n</ol>\n<h2 id=\"popstate\"><a href=\"#popstate\" class=\"headerlink\" title=\"popstate\"></a>popstate</h2><p>popstate 只会在浏览器某些行为下触发，比如点击后退、前进按钮。</p>\n<p>在微信浏览器中，从一个 HTML 跳到另一个 HTML 页面后，点击浏览器返回按钮，或者在第二个页面中调用<code>history.back()</code>等返回上一页的方法，在安卓中会直接返回上一页(相当于重新加载上一页的所有内容，js 会重新执行一遍)，但苹果手机中，范湖上一页是，浏览器会读取缓存中的页面内容，js 不会重新执行，在此进入这个页面不会触发 onload 事件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//强制刷新：</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(</span><br><span class=\"line\">  <span class=\"string\">&#x27;popstate&#x27;</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//检测到用户点击浏览器返回按钮，进行操作</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.referrer);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用href的形式去用跳转的形式，跳转到上一页</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.location.href = <span class=\"built_in\">document</span>.referrer;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"literal\">false</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">var</span> state = &#123;</span><br><span class=\"line\">  title: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  url: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.history.pushState(state, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"pageshow\"><a href=\"#pageshow\" class=\"headerlink\" title=\"pageshow\"></a>pageshow</h2><p>onpageshow 事件在页面显示时触发，如果页面不在“往返缓存”中，改时间会在 onload 后触发，在 onpageshow 事件中，可以利用 event.persisted</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">&#x27;pageshow&#x27;</span>.function(evernt)&#123;</span><br><span class=\"line\">    alert(event.persisted);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(event.persisted) location.reload();<span class=\"comment\">//如果检测到页面是从“往返缓存”中读取的，刷新页面。</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"unload\"><a href=\"#unload\" class=\"headerlink\" title=\"unload\"></a>unload</h2><p>指定 unload 事件处理程序的页面会被自动排除在“往返缓存”之外，即使事件处理程序是空白的，原因在于，unload 最长用于撤销 load 中所执行的操作，而跳过 load 后再次显示页面很有可能会导致页面不正常。</p>\n<h2 id=\"从输入-URL-到-页面加载发生了什么\"><a href=\"#从输入-URL-到-页面加载发生了什么\" class=\"headerlink\" title=\"从输入 URL 到 页面加载发生了什么\"></a>从输入 URL 到 页面加载发生了什么</h2><p>发生过程：</p>\n<ul>\n<li>查看 web 缓存</li>\n<li>DNS 解析</li>\n<li>TCP 连接</li>\n<li>发送 HTTP 请求</li>\n<li>服务器处理请求并返回 HTTP 报文</li>\n<li>浏览器解析渲染页面</li>\n<li>连接结束</li>\n</ul>\n<h3 id=\"查看-web-缓存\"><a href=\"#查看-web-缓存\" class=\"headerlink\" title=\"查看 web 缓存\"></a>查看 web 缓存</h3><p>当浏览器再次访问一个已经访问过的资源时，它会：</p>\n<ol>\n<li>看看是否命中强缓存，如果命中，则直接使用缓存。返回 200 状态不访问服务器。</li>\n<li>如果没有命中强缓存，就发送请求到服务器检查是否命中协商缓存。</li>\n<li>如果命中协商缓存，访问服务器，服务器返回 304 告诉浏览器使用本地缓存。</li>\n<li>否则，请求网络返回最新资源。</li>\n</ol>\n<p>浏览器缓存的位置：</p>\n<ol>\n<li>service worker :它可以让我们自由控制哪些文件、如何匹配缓存，如何读取缓存，并且缓存是持续性的。</li>\n<li>memory cache:内存缓存，读取内存中的数据肯定比磁盘块，但是内存缓存虽然读取高效，可是缓存持续性很短，会随着进程的释放而释放，一旦关闭了 tap 页，内存中的缓存也得到了释放。</li>\n<li>disk cache：也就是存储在硬盘中的缓存，读取速度慢点，但是什么都能存储到磁盘中，比如 memory cache 胜在容量和存储时效性上。</li>\n</ol>\n<p>缓存实现：强缓存和协商缓存都是根据 HTTP Header 来实现的。</p>\n<h4 id=\"浏览器缓存机制\"><a href=\"#浏览器缓存机制\" class=\"headerlink\" title=\"浏览器缓存机制\"></a>浏览器缓存机制</h4><p><img src=\"/images/problem/2.png\" alt=\"network\"></p>\n<h5 id=\"当前缓存是否过期。\"><a href=\"#当前缓存是否过期。\" class=\"headerlink\" title=\"当前缓存是否过期。\"></a>当前缓存是否过期。</h5><p>如果浏览器通过某些条件 ( 条件之后再说 ) 判断出来，ok 现在这个缓存没有过期可以用，那么连请求都不会发的，直接是启用之前浏览器缓存下来的那份文件 (from memory cache). 浏览器直接通过缓存读取了出来，注意这个时候是不会向浏览器请求的！ 如果过期了就会向服务器重新发起请求，但是不一定就会重新拉取文件！</p>\n<h5 id=\"服务器中的文件是否改动。\"><a href=\"#服务器中的文件是否改动。\" class=\"headerlink\" title=\"服务器中的文件是否改动。\"></a>服务器中的文件是否改动。</h5><ol>\n<li><p>缓存过期，文件有改动：如果服务器发现这个文件改变了那么你肯定不能再用以前浏览器的缓存了，那就返回个 200 并且带上新的文件。</p>\n</li>\n<li><p>缓存过期，文件无改动：同时如果发现虽然那个缓存虽然过期了，可你在服务器端的文件没有变过，那么服务器只会给你返回一个头信息 (304)，让你继续用你那过期的缓存，这样就节省了很多传输文件的时间带宽啥的</p>\n</li>\n</ol>\n<p>过期了的缓存需要请求一次服务器，若服务器判断说这个文件没有改变还能用，那就返回 304。浏览器认识 304，它就会去读取过期缓存。否则就真的传一份新文件到浏览器。</p>\n<h3 id=\"DNS-解析\"><a href=\"#DNS-解析\" class=\"headerlink\" title=\"DNS 解析\"></a>DNS 解析</h3><p>浏览器查找域名对应的 IP 地址。互联网上每一台计算机的唯一识别是它的 IP 地址，DNS 解析就是讲网址转换为 IP 地址。</p>\n<p>查找过程：</p>\n<ol>\n<li>浏览器搜索自己的 DNS 缓存（维护一张域名与 IP 地址的对应表）</li>\n<li>搜索操作系统中的 DNS 缓存（维护一张域名与 IP 地址的对应表）</li>\n<li>搜索操作系统的 host 文件（Windows 环境下，维护一张域名与 IP 地址的对应表）</li>\n<li>操作系统间根域名发送至 LDNS（本地域名服务器），首先查找自己的缓存若是失败：<ul>\n<li>向根域名服务器发起请求，此处根域名服务器返回 com 域的 sing 机域名服务器地址。</li>\n<li>LDNS 向 com 域的顶级域名服务器发起请求，得到 <a href=\"http://www.baidu.com/\">www.baidu.com</a> 的地址。</li>\n<li>LONS 向 baidu.com 域名服务器发起请求，得到 <a href=\"http://www.baidu.com/\">www.baidu.com</a> 的 IP 地址。</li>\n</ul>\n</li>\n<li>LDNS 将得到的 IP 地址返回给操作系统，同时将 IP 地址缓存起来；</li>\n<li>操作系统将 IP 地址返回给浏览器，同时自己也缓存起来；</li>\n</ol>\n<p>此时浏览器得到了域名对应的 IP 地址。</p>\n<h3 id=\"TCP-连接\"><a href=\"#TCP-连接\" class=\"headerlink\" title=\"TCP 连接\"></a>TCP 连接</h3><p>浏览器根据 IP 地址与服务器建立 socket 连接 。</p>\n<h3 id=\"发送-HTTP-请求\"><a href=\"#发送-HTTP-请求\" class=\"headerlink\" title=\"发送 HTTP 请求\"></a>发送 HTTP 请求</h3><ol>\n<li>浏览器根据 URL 内容生成 HTTP 请求，请求中包含文件的位置，请求文件的方式等。</li>\n<li>服务器接到请求后，会根据 HTTP 请求中的内容来决定如何获取相应的 HTML 文件。</li>\n</ol>\n<h4 id=\"http-状态码\"><a href=\"#http-状态码\" class=\"headerlink\" title=\"http 状态码\"></a>http 状态码</h4><ol>\n<li>200 form memory cache 不访问服务器，直接读缓存 ，此时的缓存是缓存在内存中的，当 kill 进程之后数据就会不存在。这种方式只能缓存派生资源。</li>\n<li>200 OK (from cache) 是浏览器没有跟服务器确认，直接用了浏览器缓存。</li>\n<li>304 Not Modified 是浏览器和服务器多确认了一次缓存有效性，再用的缓存。200(from cache) 是速度最快的 , 因为不需要访问远程服务器 , 直接使用本地缓存 .304 的过程是 , 先请求服务器 , 然后服务器告诉我们这个资源没变 , 浏览器再使用本地缓存。</li>\n<li>200 from dist cache 不访问服务器，直接度缓存，当进程 kill 时，数据依旧存在。只能缓存派生资源。</li>\n</ol>\n<p><img src=\"/images/problem/1.png\" alt=\"network\"></p>\n<h3 id=\"浏览器解析渲染页面\"><a href=\"#浏览器解析渲染页面\" class=\"headerlink\" title=\"浏览器解析渲染页面\"></a>浏览器解析渲染页面</h3><p>现代浏览器渲染页面过程是：解码（字节流到字符流） ——&gt; 分词（此法分析） ——&gt; 解析（语法分析）——&gt; 构建 DOM 树 ——&gt; 构建渲染树 ——&gt; 布局渲染树 ——&gt; 绘制渲染树</p>\n<h3 id=\"连接结束\"><a href=\"#连接结束\" class=\"headerlink\" title=\"连接结束\"></a>连接结束</h3><p>断开连接 –4 次挥手</p>\n<ul>\n<li><p>为什么服务器在接到断开请求时不立即同意断开：当服务器收到断开连接的请求时，可能仍然有数据未发送完毕，所以服务器先发送确认信号，等所有数据发送完毕后再同意断开。</p>\n</li>\n<li><p>第四次握手后，主机发送确认信号后并没有立即断开连接，而是等待了 2 个报文传送周期，原因是：如果第四次握手的确认信息丢失，服务器将会重新发送第三次握手的断开连接的信号，而服务器发觉丢包与重新发送的断开连接到达主机的时间正好为 2 个报文传输周期。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>以前在项目中遇到过‘监听浏览器的前进后退重新执行 JS’的需求的场景，所以现在综合一些资料和自己的测试进行总结一下。</p>","more":"<h2 id=\"渲染机制\"><a href=\"#渲染机制\" class=\"headerlink\" title=\"渲染机制\"></a>渲染机制</h2><p>浏览器的渲染机制一般分为以下几个步骤</p>\n<ol>\n<li>处理 HTML 并构建 DOM 树<br>2。</li>\n</ol>\n<h2 id=\"浏览器前进、后退使用机制\"><a href=\"#浏览器前进、后退使用机制\" class=\"headerlink\" title=\"浏览器前进、后退使用机制\"></a>浏览器前进、后退使用机制</h2><p>用户点击浏览器工具栏中的后退按钮，或者是移动设备上的返回键的时候，或者是 JS 执行<code>history.go(-1)</code>的时候，浏览器会在当前窗口“打开”历史记录中的前一个页面。不同的浏览器在“打开”前一个页面的表现并不同意，这和浏览器的实现以及页面本身的设置都有关系。在浏览器中，“后退到前一个页面”意味着：前一个页面的 html/js/css 等等的静态资源的请求（甚至是 ajax 动态接口请求）根本不会重新发送，直接使用缓存的响应，而不管这些金泰资源响应的缓存策略是否被设置了禁用状态。</p>\n<hr>\n<h2 id=\"history-中的操作\"><a href=\"#history-中的操作\" class=\"headerlink\" title=\"history 中的操作\"></a>history 中的操作</h2><ol>\n<li> <code>window.history.back()</code>:后退</li>\n<li> <code>window.history.dorward()</code>:前进</li>\n<li> <code>window.history.go(num)</code>:前进或后退指定数量历史记录</li>\n<li><code>window.history.pushState(state,title,url)</code>:在页面中创建一个 histor 实体，直接天剑到历史记录。<ul>\n<li>state:存储一个对象，可以添加相关信息，可以使用 history.state 读取其中的内容。</li>\n<li>title:历史记录的标题。</li>\n<li>url:创建的历史记录的链接，进行历史记录操作时会跳转到改链接。</li>\n</ul>\n</li>\n<li> <code>window.history.replaceState()</code>:修改当前的 history 实体。</li>\n<li> <code>popstate</code>事件:history 实体改变时触发的事件。</li>\n<li> <code>window.history.state</code>:会获得 history 实体中的 state 对象。</li>\n</ol>\n<h2 id=\"popstate\"><a href=\"#popstate\" class=\"headerlink\" title=\"popstate\"></a>popstate</h2><p>popstate 只会在浏览器某些行为下触发，比如点击后退、前进按钮。</p>\n<p>在微信浏览器中，从一个 HTML 跳到另一个 HTML 页面后，点击浏览器返回按钮，或者在第二个页面中调用<code>history.back()</code>等返回上一页的方法，在安卓中会直接返回上一页(相当于重新加载上一页的所有内容，js 会重新执行一遍)，但苹果手机中，范湖上一页是，浏览器会读取缓存中的页面内容，js 不会重新执行，在此进入这个页面不会触发 onload 事件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//强制刷新：</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(</span><br><span class=\"line\">  <span class=\"string\">&#x27;popstate&#x27;</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//检测到用户点击浏览器返回按钮，进行操作</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.referrer);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用href的形式去用跳转的形式，跳转到上一页</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.location.href = <span class=\"built_in\">document</span>.referrer;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"literal\">false</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">var</span> state = &#123;</span><br><span class=\"line\">  title: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  url: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.history.pushState(state, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"pageshow\"><a href=\"#pageshow\" class=\"headerlink\" title=\"pageshow\"></a>pageshow</h2><p>onpageshow 事件在页面显示时触发，如果页面不在“往返缓存”中，改时间会在 onload 后触发，在 onpageshow 事件中，可以利用 event.persisted</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">&#x27;pageshow&#x27;</span>.function(evernt)&#123;</span><br><span class=\"line\">    alert(event.persisted);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(event.persisted) location.reload();<span class=\"comment\">//如果检测到页面是从“往返缓存”中读取的，刷新页面。</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"unload\"><a href=\"#unload\" class=\"headerlink\" title=\"unload\"></a>unload</h2><p>指定 unload 事件处理程序的页面会被自动排除在“往返缓存”之外，即使事件处理程序是空白的，原因在于，unload 最长用于撤销 load 中所执行的操作，而跳过 load 后再次显示页面很有可能会导致页面不正常。</p>\n<h2 id=\"从输入-URL-到-页面加载发生了什么\"><a href=\"#从输入-URL-到-页面加载发生了什么\" class=\"headerlink\" title=\"从输入 URL 到 页面加载发生了什么\"></a>从输入 URL 到 页面加载发生了什么</h2><p>发生过程：</p>\n<ul>\n<li>查看 web 缓存</li>\n<li>DNS 解析</li>\n<li>TCP 连接</li>\n<li>发送 HTTP 请求</li>\n<li>服务器处理请求并返回 HTTP 报文</li>\n<li>浏览器解析渲染页面</li>\n<li>连接结束</li>\n</ul>\n<h3 id=\"查看-web-缓存\"><a href=\"#查看-web-缓存\" class=\"headerlink\" title=\"查看 web 缓存\"></a>查看 web 缓存</h3><p>当浏览器再次访问一个已经访问过的资源时，它会：</p>\n<ol>\n<li>看看是否命中强缓存，如果命中，则直接使用缓存。返回 200 状态不访问服务器。</li>\n<li>如果没有命中强缓存，就发送请求到服务器检查是否命中协商缓存。</li>\n<li>如果命中协商缓存，访问服务器，服务器返回 304 告诉浏览器使用本地缓存。</li>\n<li>否则，请求网络返回最新资源。</li>\n</ol>\n<p>浏览器缓存的位置：</p>\n<ol>\n<li>service worker :它可以让我们自由控制哪些文件、如何匹配缓存，如何读取缓存，并且缓存是持续性的。</li>\n<li>memory cache:内存缓存，读取内存中的数据肯定比磁盘块，但是内存缓存虽然读取高效，可是缓存持续性很短，会随着进程的释放而释放，一旦关闭了 tap 页，内存中的缓存也得到了释放。</li>\n<li>disk cache：也就是存储在硬盘中的缓存，读取速度慢点，但是什么都能存储到磁盘中，比如 memory cache 胜在容量和存储时效性上。</li>\n</ol>\n<p>缓存实现：强缓存和协商缓存都是根据 HTTP Header 来实现的。</p>\n<h4 id=\"浏览器缓存机制\"><a href=\"#浏览器缓存机制\" class=\"headerlink\" title=\"浏览器缓存机制\"></a>浏览器缓存机制</h4><p><img src=\"/images/problem/2.png\" alt=\"network\"></p>\n<h5 id=\"当前缓存是否过期。\"><a href=\"#当前缓存是否过期。\" class=\"headerlink\" title=\"当前缓存是否过期。\"></a>当前缓存是否过期。</h5><p>如果浏览器通过某些条件 ( 条件之后再说 ) 判断出来，ok 现在这个缓存没有过期可以用，那么连请求都不会发的，直接是启用之前浏览器缓存下来的那份文件 (from memory cache). 浏览器直接通过缓存读取了出来，注意这个时候是不会向浏览器请求的！ 如果过期了就会向服务器重新发起请求，但是不一定就会重新拉取文件！</p>\n<h5 id=\"服务器中的文件是否改动。\"><a href=\"#服务器中的文件是否改动。\" class=\"headerlink\" title=\"服务器中的文件是否改动。\"></a>服务器中的文件是否改动。</h5><ol>\n<li><p>缓存过期，文件有改动：如果服务器发现这个文件改变了那么你肯定不能再用以前浏览器的缓存了，那就返回个 200 并且带上新的文件。</p>\n</li>\n<li><p>缓存过期，文件无改动：同时如果发现虽然那个缓存虽然过期了，可你在服务器端的文件没有变过，那么服务器只会给你返回一个头信息 (304)，让你继续用你那过期的缓存，这样就节省了很多传输文件的时间带宽啥的</p>\n</li>\n</ol>\n<p>过期了的缓存需要请求一次服务器，若服务器判断说这个文件没有改变还能用，那就返回 304。浏览器认识 304，它就会去读取过期缓存。否则就真的传一份新文件到浏览器。</p>\n<h3 id=\"DNS-解析\"><a href=\"#DNS-解析\" class=\"headerlink\" title=\"DNS 解析\"></a>DNS 解析</h3><p>浏览器查找域名对应的 IP 地址。互联网上每一台计算机的唯一识别是它的 IP 地址，DNS 解析就是讲网址转换为 IP 地址。</p>\n<p>查找过程：</p>\n<ol>\n<li>浏览器搜索自己的 DNS 缓存（维护一张域名与 IP 地址的对应表）</li>\n<li>搜索操作系统中的 DNS 缓存（维护一张域名与 IP 地址的对应表）</li>\n<li>搜索操作系统的 host 文件（Windows 环境下，维护一张域名与 IP 地址的对应表）</li>\n<li>操作系统间根域名发送至 LDNS（本地域名服务器），首先查找自己的缓存若是失败：<ul>\n<li>向根域名服务器发起请求，此处根域名服务器返回 com 域的 sing 机域名服务器地址。</li>\n<li>LDNS 向 com 域的顶级域名服务器发起请求，得到 <a href=\"http://www.baidu.com/\">www.baidu.com</a> 的地址。</li>\n<li>LONS 向 baidu.com 域名服务器发起请求，得到 <a href=\"http://www.baidu.com/\">www.baidu.com</a> 的 IP 地址。</li>\n</ul>\n</li>\n<li>LDNS 将得到的 IP 地址返回给操作系统，同时将 IP 地址缓存起来；</li>\n<li>操作系统将 IP 地址返回给浏览器，同时自己也缓存起来；</li>\n</ol>\n<p>此时浏览器得到了域名对应的 IP 地址。</p>\n<h3 id=\"TCP-连接\"><a href=\"#TCP-连接\" class=\"headerlink\" title=\"TCP 连接\"></a>TCP 连接</h3><p>浏览器根据 IP 地址与服务器建立 socket 连接 。</p>\n<h3 id=\"发送-HTTP-请求\"><a href=\"#发送-HTTP-请求\" class=\"headerlink\" title=\"发送 HTTP 请求\"></a>发送 HTTP 请求</h3><ol>\n<li>浏览器根据 URL 内容生成 HTTP 请求，请求中包含文件的位置，请求文件的方式等。</li>\n<li>服务器接到请求后，会根据 HTTP 请求中的内容来决定如何获取相应的 HTML 文件。</li>\n</ol>\n<h4 id=\"http-状态码\"><a href=\"#http-状态码\" class=\"headerlink\" title=\"http 状态码\"></a>http 状态码</h4><ol>\n<li>200 form memory cache 不访问服务器，直接读缓存 ，此时的缓存是缓存在内存中的，当 kill 进程之后数据就会不存在。这种方式只能缓存派生资源。</li>\n<li>200 OK (from cache) 是浏览器没有跟服务器确认，直接用了浏览器缓存。</li>\n<li>304 Not Modified 是浏览器和服务器多确认了一次缓存有效性，再用的缓存。200(from cache) 是速度最快的 , 因为不需要访问远程服务器 , 直接使用本地缓存 .304 的过程是 , 先请求服务器 , 然后服务器告诉我们这个资源没变 , 浏览器再使用本地缓存。</li>\n<li>200 from dist cache 不访问服务器，直接度缓存，当进程 kill 时，数据依旧存在。只能缓存派生资源。</li>\n</ol>\n<p><img src=\"/images/problem/1.png\" alt=\"network\"></p>\n<h3 id=\"浏览器解析渲染页面\"><a href=\"#浏览器解析渲染页面\" class=\"headerlink\" title=\"浏览器解析渲染页面\"></a>浏览器解析渲染页面</h3><p>现代浏览器渲染页面过程是：解码（字节流到字符流） ——&gt; 分词（此法分析） ——&gt; 解析（语法分析）——&gt; 构建 DOM 树 ——&gt; 构建渲染树 ——&gt; 布局渲染树 ——&gt; 绘制渲染树</p>\n<h3 id=\"连接结束\"><a href=\"#连接结束\" class=\"headerlink\" title=\"连接结束\"></a>连接结束</h3><p>断开连接 –4 次挥手</p>\n<ul>\n<li><p>为什么服务器在接到断开请求时不立即同意断开：当服务器收到断开连接的请求时，可能仍然有数据未发送完毕，所以服务器先发送确认信号，等所有数据发送完毕后再同意断开。</p>\n</li>\n<li><p>第四次握手后，主机发送确认信号后并没有立即断开连接，而是等待了 2 个报文传送周期，原因是：如果第四次握手的确认信息丢失，服务器将会重新发送第三次握手的断开连接的信号，而服务器发觉丢包与重新发送的断开连接到达主机的时间正好为 2 个报文传输周期。</p>\n</li>\n</ul>"},{"title":"疑难杂问整理（原生JS）","date":"2018-01-19T02:12:08.000Z","_content":"\n在学习原生的过程中的困惑与解惑的总结\n\n<!--more-->\n\n## 工厂模式\n\n```javascript\nfunction createPerson(name, age, job) {\n  var o = new Object();\n  o.name = name;\n  o.age = age;\n  o.job = job;\n  o.sayName = function() {\n    alert(this.name);\n  };\n  return 0;\n}\n\nvar person1 = createPerson('Nicholas', 29, 'Software Engineer');\nvar person2 = createPerson('Greg', 27, 'Doctor');\n\nperson1; // Person {name: \"Zaxlct\", age: 28, job: \"Software Engineer\", sayName: ƒ}\nperson2; // Person {name: \"Mick\", age: 23, job: \"Doctor\", sayName: ƒ}\n```\n\n## 构造函数\n\n```javascript\nfunction Person(name, age, job) {\n  this.name = name;\n  this.age = age;\n  this.job = job;\n  this.sayName = function() {\n    alert(this.name);\n  };\n}\nvar person1 = new Person('Zaxlct', 28, 'Software Engineer');\nvar person2 = new Person('Mick', 23, 'Doctor');\nvar person3 = new Person('Mick', 23, 'Doctor');\nperson1; // Person {name: \"Zaxlct\", age: 28, job: \"Software Engineer\", sayName: ƒ}\nperson2; // Person {name: \"Mick\", age: 23, job: \"Doctor\", sayName: ƒ}\nperson2 === person3; //false\nperson1.constructor == Person; //true\nPerson.prototype; // {constructor: ƒ}  为原型对象\nperson1.prototype; //undefined\nPerson.prototype.prototype; //undefined\nperson1.constructor == Person; //true\nPerson.prototype.constructor == Person; //true\n```\n\n实例的构造函数属性（constructor ）指向构造函数。所有的原型对象都会自动获得一个 constructor （构造函数属性）属性\n\n```javascript\nfunction Person(name, age, job) {\n  this.name = name;\n  this.age = age;\n  this.job = job;\n  this.sayName = function() {\n    alert(this.name);\n  };\n  return this;\n}\nvar person1 = Person('Zaxlct', 28, 'Software Engineer');\nvar person2 = Person('Mick', 23, 'Doctor');\nperson1; // this 指向window 且被person2覆盖\nperson2; // this 指向window\n```\n\n**与工厂模式的区别**\n\n- 没有显示创建对象（new 运算符创建并实例化新对象）。\n- 直接将属性和方法赋给了 this 对象。\n- 没有 return 语句。\n- 要创建新实例必须要使用 new 运算符，否者属性和方法将会被添加到 window 对象\n- 可以使用 instanceof 操作符检测对象类型。\n\n构造函数的问题：构造函数的内部方法会被重复构建，不同实例内的同名函数是不相等的。\n\n## html 页面的渲染过程\n\n当用户请求页面时，浏览器获取 HTML 并构造 DOM。然后获取 CSS 并构造 CSSOM。然后通过匹配 DOM 和 CSSDOM 生成渲染树。如果有任何的 javascript 需要解决，浏览器将不会开始渲染页面，知道 javascript 解决完毕。\n\n## 事件模型是什么\n\nw3c 中定义的事件发生过程中的 3 个阶段：捕获阶段，目标阶段，冒泡阶段\n\n## 为什么操作真实 DOM 有性能问题\n\n因为 DOM 是属于渲染引擎中的东西，而 JS 又是 JS 引擎中的东西。当通过 JS 操作 DOM 的时候，其实这个操作涉及到了两个线程之间的通信，那么势必会带来一些性能能上的损耗。操作 DOM 次数一多，也就等同于一直在进行进程之间的通信，并且操作 DOM 可能还会带来重绘回流的情况，所以就导致一些性能上的问题。\n","source":"_posts/疑难杂问整理（原生JS）.md","raw":"---\ntitle: 疑难杂问整理（原生JS）\ndate: 2018-01-19 10:12:08\ncategories: JavaScript\n---\n\n在学习原生的过程中的困惑与解惑的总结\n\n<!--more-->\n\n## 工厂模式\n\n```javascript\nfunction createPerson(name, age, job) {\n  var o = new Object();\n  o.name = name;\n  o.age = age;\n  o.job = job;\n  o.sayName = function() {\n    alert(this.name);\n  };\n  return 0;\n}\n\nvar person1 = createPerson('Nicholas', 29, 'Software Engineer');\nvar person2 = createPerson('Greg', 27, 'Doctor');\n\nperson1; // Person {name: \"Zaxlct\", age: 28, job: \"Software Engineer\", sayName: ƒ}\nperson2; // Person {name: \"Mick\", age: 23, job: \"Doctor\", sayName: ƒ}\n```\n\n## 构造函数\n\n```javascript\nfunction Person(name, age, job) {\n  this.name = name;\n  this.age = age;\n  this.job = job;\n  this.sayName = function() {\n    alert(this.name);\n  };\n}\nvar person1 = new Person('Zaxlct', 28, 'Software Engineer');\nvar person2 = new Person('Mick', 23, 'Doctor');\nvar person3 = new Person('Mick', 23, 'Doctor');\nperson1; // Person {name: \"Zaxlct\", age: 28, job: \"Software Engineer\", sayName: ƒ}\nperson2; // Person {name: \"Mick\", age: 23, job: \"Doctor\", sayName: ƒ}\nperson2 === person3; //false\nperson1.constructor == Person; //true\nPerson.prototype; // {constructor: ƒ}  为原型对象\nperson1.prototype; //undefined\nPerson.prototype.prototype; //undefined\nperson1.constructor == Person; //true\nPerson.prototype.constructor == Person; //true\n```\n\n实例的构造函数属性（constructor ）指向构造函数。所有的原型对象都会自动获得一个 constructor （构造函数属性）属性\n\n```javascript\nfunction Person(name, age, job) {\n  this.name = name;\n  this.age = age;\n  this.job = job;\n  this.sayName = function() {\n    alert(this.name);\n  };\n  return this;\n}\nvar person1 = Person('Zaxlct', 28, 'Software Engineer');\nvar person2 = Person('Mick', 23, 'Doctor');\nperson1; // this 指向window 且被person2覆盖\nperson2; // this 指向window\n```\n\n**与工厂模式的区别**\n\n- 没有显示创建对象（new 运算符创建并实例化新对象）。\n- 直接将属性和方法赋给了 this 对象。\n- 没有 return 语句。\n- 要创建新实例必须要使用 new 运算符，否者属性和方法将会被添加到 window 对象\n- 可以使用 instanceof 操作符检测对象类型。\n\n构造函数的问题：构造函数的内部方法会被重复构建，不同实例内的同名函数是不相等的。\n\n## html 页面的渲染过程\n\n当用户请求页面时，浏览器获取 HTML 并构造 DOM。然后获取 CSS 并构造 CSSOM。然后通过匹配 DOM 和 CSSDOM 生成渲染树。如果有任何的 javascript 需要解决，浏览器将不会开始渲染页面，知道 javascript 解决完毕。\n\n## 事件模型是什么\n\nw3c 中定义的事件发生过程中的 3 个阶段：捕获阶段，目标阶段，冒泡阶段\n\n## 为什么操作真实 DOM 有性能问题\n\n因为 DOM 是属于渲染引擎中的东西，而 JS 又是 JS 引擎中的东西。当通过 JS 操作 DOM 的时候，其实这个操作涉及到了两个线程之间的通信，那么势必会带来一些性能能上的损耗。操作 DOM 次数一多，也就等同于一直在进行进程之间的通信，并且操作 DOM 可能还会带来重绘回流的情况，所以就导致一些性能上的问题。\n","slug":"疑难杂问整理（原生JS）","published":1,"updated":"2019-07-09T07:04:31.463Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmejaesr002txcvr1cq39gtm","content":"<p>在学习原生的过程中的困惑与解惑的总结</p>\n<span id=\"more\"></span>\n\n<h2 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPerson</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">  o.name = name;</span><br><span class=\"line\">  o.age = age;</span><br><span class=\"line\">  o.job = job;</span><br><span class=\"line\">  o.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = createPerson(<span class=\"string\">&#x27;Nicholas&#x27;</span>, <span class=\"number\">29</span>, <span class=\"string\">&#x27;Software Engineer&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = createPerson(<span class=\"string\">&#x27;Greg&#x27;</span>, <span class=\"number\">27</span>, <span class=\"string\">&#x27;Doctor&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">person1; <span class=\"comment\">// Person &#123;name: &quot;Zaxlct&quot;, age: 28, job: &quot;Software Engineer&quot;, sayName: ƒ&#125;</span></span><br><span class=\"line\">person2; <span class=\"comment\">// Person &#123;name: &quot;Mick&quot;, age: 23, job: &quot;Doctor&quot;, sayName: ƒ&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.job = job;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&#x27;Zaxlct&#x27;</span>, <span class=\"number\">28</span>, <span class=\"string\">&#x27;Software Engineer&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&#x27;Mick&#x27;</span>, <span class=\"number\">23</span>, <span class=\"string\">&#x27;Doctor&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> person3 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&#x27;Mick&#x27;</span>, <span class=\"number\">23</span>, <span class=\"string\">&#x27;Doctor&#x27;</span>);</span><br><span class=\"line\">person1; <span class=\"comment\">// Person &#123;name: &quot;Zaxlct&quot;, age: 28, job: &quot;Software Engineer&quot;, sayName: ƒ&#125;</span></span><br><span class=\"line\">person2; <span class=\"comment\">// Person &#123;name: &quot;Mick&quot;, age: 23, job: &quot;Doctor&quot;, sayName: ƒ&#125;</span></span><br><span class=\"line\">person2 === person3; <span class=\"comment\">//false</span></span><br><span class=\"line\">person1.constructor == Person; <span class=\"comment\">//true</span></span><br><span class=\"line\">Person.prototype; <span class=\"comment\">// &#123;constructor: ƒ&#125;  为原型对象</span></span><br><span class=\"line\">person1.prototype; <span class=\"comment\">//undefined</span></span><br><span class=\"line\">Person.prototype.prototype; <span class=\"comment\">//undefined</span></span><br><span class=\"line\">person1.constructor == Person; <span class=\"comment\">//true</span></span><br><span class=\"line\">Person.prototype.constructor == Person; <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>实例的构造函数属性（constructor ）指向构造函数。所有的原型对象都会自动获得一个 constructor （构造函数属性）属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.job = job;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = Person(<span class=\"string\">&#x27;Zaxlct&#x27;</span>, <span class=\"number\">28</span>, <span class=\"string\">&#x27;Software Engineer&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = Person(<span class=\"string\">&#x27;Mick&#x27;</span>, <span class=\"number\">23</span>, <span class=\"string\">&#x27;Doctor&#x27;</span>);</span><br><span class=\"line\">person1; <span class=\"comment\">// this 指向window 且被person2覆盖</span></span><br><span class=\"line\">person2; <span class=\"comment\">// this 指向window</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>与工厂模式的区别</strong></p>\n<ul>\n<li>没有显示创建对象（new 运算符创建并实例化新对象）。</li>\n<li>直接将属性和方法赋给了 this 对象。</li>\n<li>没有 return 语句。</li>\n<li>要创建新实例必须要使用 new 运算符，否者属性和方法将会被添加到 window 对象</li>\n<li>可以使用 instanceof 操作符检测对象类型。</li>\n</ul>\n<p>构造函数的问题：构造函数的内部方法会被重复构建，不同实例内的同名函数是不相等的。</p>\n<h2 id=\"html-页面的渲染过程\"><a href=\"#html-页面的渲染过程\" class=\"headerlink\" title=\"html 页面的渲染过程\"></a>html 页面的渲染过程</h2><p>当用户请求页面时，浏览器获取 HTML 并构造 DOM。然后获取 CSS 并构造 CSSOM。然后通过匹配 DOM 和 CSSDOM 生成渲染树。如果有任何的 javascript 需要解决，浏览器将不会开始渲染页面，知道 javascript 解决完毕。</p>\n<h2 id=\"事件模型是什么\"><a href=\"#事件模型是什么\" class=\"headerlink\" title=\"事件模型是什么\"></a>事件模型是什么</h2><p>w3c 中定义的事件发生过程中的 3 个阶段：捕获阶段，目标阶段，冒泡阶段</p>\n<h2 id=\"为什么操作真实-DOM-有性能问题\"><a href=\"#为什么操作真实-DOM-有性能问题\" class=\"headerlink\" title=\"为什么操作真实 DOM 有性能问题\"></a>为什么操作真实 DOM 有性能问题</h2><p>因为 DOM 是属于渲染引擎中的东西，而 JS 又是 JS 引擎中的东西。当通过 JS 操作 DOM 的时候，其实这个操作涉及到了两个线程之间的通信，那么势必会带来一些性能能上的损耗。操作 DOM 次数一多，也就等同于一直在进行进程之间的通信，并且操作 DOM 可能还会带来重绘回流的情况，所以就导致一些性能上的问题。</p>\n","site":{"data":{}},"excerpt":"<p>在学习原生的过程中的困惑与解惑的总结</p>","more":"<h2 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPerson</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">  o.name = name;</span><br><span class=\"line\">  o.age = age;</span><br><span class=\"line\">  o.job = job;</span><br><span class=\"line\">  o.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = createPerson(<span class=\"string\">&#x27;Nicholas&#x27;</span>, <span class=\"number\">29</span>, <span class=\"string\">&#x27;Software Engineer&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = createPerson(<span class=\"string\">&#x27;Greg&#x27;</span>, <span class=\"number\">27</span>, <span class=\"string\">&#x27;Doctor&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">person1; <span class=\"comment\">// Person &#123;name: &quot;Zaxlct&quot;, age: 28, job: &quot;Software Engineer&quot;, sayName: ƒ&#125;</span></span><br><span class=\"line\">person2; <span class=\"comment\">// Person &#123;name: &quot;Mick&quot;, age: 23, job: &quot;Doctor&quot;, sayName: ƒ&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.job = job;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&#x27;Zaxlct&#x27;</span>, <span class=\"number\">28</span>, <span class=\"string\">&#x27;Software Engineer&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&#x27;Mick&#x27;</span>, <span class=\"number\">23</span>, <span class=\"string\">&#x27;Doctor&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> person3 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&#x27;Mick&#x27;</span>, <span class=\"number\">23</span>, <span class=\"string\">&#x27;Doctor&#x27;</span>);</span><br><span class=\"line\">person1; <span class=\"comment\">// Person &#123;name: &quot;Zaxlct&quot;, age: 28, job: &quot;Software Engineer&quot;, sayName: ƒ&#125;</span></span><br><span class=\"line\">person2; <span class=\"comment\">// Person &#123;name: &quot;Mick&quot;, age: 23, job: &quot;Doctor&quot;, sayName: ƒ&#125;</span></span><br><span class=\"line\">person2 === person3; <span class=\"comment\">//false</span></span><br><span class=\"line\">person1.constructor == Person; <span class=\"comment\">//true</span></span><br><span class=\"line\">Person.prototype; <span class=\"comment\">// &#123;constructor: ƒ&#125;  为原型对象</span></span><br><span class=\"line\">person1.prototype; <span class=\"comment\">//undefined</span></span><br><span class=\"line\">Person.prototype.prototype; <span class=\"comment\">//undefined</span></span><br><span class=\"line\">person1.constructor == Person; <span class=\"comment\">//true</span></span><br><span class=\"line\">Person.prototype.constructor == Person; <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>实例的构造函数属性（constructor ）指向构造函数。所有的原型对象都会自动获得一个 constructor （构造函数属性）属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.job = job;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = Person(<span class=\"string\">&#x27;Zaxlct&#x27;</span>, <span class=\"number\">28</span>, <span class=\"string\">&#x27;Software Engineer&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = Person(<span class=\"string\">&#x27;Mick&#x27;</span>, <span class=\"number\">23</span>, <span class=\"string\">&#x27;Doctor&#x27;</span>);</span><br><span class=\"line\">person1; <span class=\"comment\">// this 指向window 且被person2覆盖</span></span><br><span class=\"line\">person2; <span class=\"comment\">// this 指向window</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>与工厂模式的区别</strong></p>\n<ul>\n<li>没有显示创建对象（new 运算符创建并实例化新对象）。</li>\n<li>直接将属性和方法赋给了 this 对象。</li>\n<li>没有 return 语句。</li>\n<li>要创建新实例必须要使用 new 运算符，否者属性和方法将会被添加到 window 对象</li>\n<li>可以使用 instanceof 操作符检测对象类型。</li>\n</ul>\n<p>构造函数的问题：构造函数的内部方法会被重复构建，不同实例内的同名函数是不相等的。</p>\n<h2 id=\"html-页面的渲染过程\"><a href=\"#html-页面的渲染过程\" class=\"headerlink\" title=\"html 页面的渲染过程\"></a>html 页面的渲染过程</h2><p>当用户请求页面时，浏览器获取 HTML 并构造 DOM。然后获取 CSS 并构造 CSSOM。然后通过匹配 DOM 和 CSSDOM 生成渲染树。如果有任何的 javascript 需要解决，浏览器将不会开始渲染页面，知道 javascript 解决完毕。</p>\n<h2 id=\"事件模型是什么\"><a href=\"#事件模型是什么\" class=\"headerlink\" title=\"事件模型是什么\"></a>事件模型是什么</h2><p>w3c 中定义的事件发生过程中的 3 个阶段：捕获阶段，目标阶段，冒泡阶段</p>\n<h2 id=\"为什么操作真实-DOM-有性能问题\"><a href=\"#为什么操作真实-DOM-有性能问题\" class=\"headerlink\" title=\"为什么操作真实 DOM 有性能问题\"></a>为什么操作真实 DOM 有性能问题</h2><p>因为 DOM 是属于渲染引擎中的东西，而 JS 又是 JS 引擎中的东西。当通过 JS 操作 DOM 的时候，其实这个操作涉及到了两个线程之间的通信，那么势必会带来一些性能能上的损耗。操作 DOM 次数一多，也就等同于一直在进行进程之间的通信，并且操作 DOM 可能还会带来重绘回流的情况，所以就导致一些性能上的问题。</p>"},{"title":"跨域-解决方案","date":"2018-04-19T01:55:30.000Z","_content":"\n具体概念如下：只要协议、域名、端口有任何一个不同，都被当作是不同的域。\n\n** 凡是拥有 “src” 这个属性的标签都有跨域的能力**\n\n<!--more-->\n\n## 跨\n\n**如果是协议和端口造成的跨域问题。则前台无法解决。** 同源策略具体分为以下几类：\n\n-   不同域名\n-   相同域名不同端口号，如`https://www.oschina.net:8000`和`https://www.oschina.net:8001`\n-   同一个域名不同协议，如`http://www.oschina.net/`和`https://www.oschina.net/`\n-   域名和域名对应的的 IP，如`http://b.qq.com/`和 `http://10.198.7.85`\n-   主域和子域，如`http://www.oschina.net/`和`https://test.oschina.net`\n-   子域和子域，如`https://test1.oschina.net`和`https://test2.oschina.net` 以上情况只要出现了，那么就会产生跨域问题。那么如果解决跨域问题呢，下面的小节会总结一些解决跨域常用的方法。\n\n## JSONP 带 callback 的 json\n\n有个通俗易懂的解释 -JSONP（JSON with Padding ）是数据格式 JSON 的一种 “ 使用模式 ”，可以让网页从别的网域要数据。利用`<script>`标签没有跨域限制，来达到与第 3 方通讯的目的。\n\n** jsonp 的客户端具体实现：**\n\n1. 远程服务器 remoteserver.com 根目录下有个 remote.js 文件代码如下：\n\n```javascript\nalert(\"我是远程文件\");\n```\n\n2. 本地服务器 localserver.com 下有个 jsonp.html 页面代码如下：\n\n```javascript\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n    <title></title>\n    <script type=\"text/javascript\" src=\"http://remoteserver.com/remote.js\"></script>\n</head>\n<body>\n\n</body>\n</html>\n```\n\n页面将会弹出一个提示窗体，显示跨域调用成功。\n\n3. 现在我们在 jsonp.html 页面定义一个函数，然后在远程 remote.js 中传入数据进行调用。\n\njsonp.html 页面代码如下：\n\n```javascript\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n    <title></title>\n    <script type=\"text/javascript\">\n    var localHandler = function(data){\n        alert('我是本地函数，可以被跨域的remote.js文件调用，远程js带来的数据是：' + data.result);\n    };\n    </script>\n    <script type=\"text/javascript\" src=\"http://remoteserver.com/remote.js\"></script>\n</head>\n<body>\n\n</body>\n</html>\n```\n\n4. remote.js 文件代码如下：\n\n```javascript\nlocalHandler({ result: \"我是远程js带来的数据\" });\n```\n\n**要注意的是他支持 GET 这一种 HTTP 请求类型**\n\n## 跨域资源共享（CORS-Cross Origin Resource Sharing ）\n\n跨域资源共享（ CORS ）机制允许 Web 应用服务器进行跨域访问控制，从而使跨域数据传输得以安全进行。\n\nCORS 除了 GET 要求方法以外也支持其他的 HTTP 要求。浏览器 CORS 请求分成两种：\n\n1. 简单请求\n2. 协商模型 / 预检请求（Preflighted Request ），即非简单请求如何区分请求具体属于哪一种呢，下面我总结了几点：\n\n    1. 请求方式：\n\n    - GET\n    - HEAD\n    - POST\n\n    2. HTTP 的头信息子段\n\n    - Accept\n    - Accept-Language\n    - Content-Language\n    - Last-Event-ID\n    - Content-Type：只限于三个值 application/x-www-form-urlencoded、multipart/form-data 、 text/plain，其中 'text/plain' 默认支持，其他两种则需要预检请求和服务器协商。\n\n满足以上两大点的即为简单请求，否则为非简单请求。\n\n假如站点 http://foo.example 的网页应用想要访问 http://bar.other 的资源。http://foo.example 的网页中可能包含类似于下面的 JavaScript 代码：\n\n```javascript\nvar invocation = new XMLHttpRequest();\nvar url = \"http://bar.other/resources/public-data/\";\n\nfunction callOtherDomain() {\n    if (invocation) {\n        invocation.open(\"GET\", url, true);\n        invocation.onreadystatechange = handler;\n        invocation.send();\n    }\n}\n```\n\n## document.domain+iframe （适用于主域名相同的情况）\n\n比如，有一个页面，它的地址是http://www.damonare.cn/a.html ， 在这个页面里面有一个 iframe，它的 src 是http://damonare.cn/b.html, 很显然，这个页面与它里面的 iframe 框架是不同域的，所以我们是无法通过在页面中书写 js 代码来获取 iframe 中的东西的：\n\n```javascript\n<script type=\"text/javascript\">\n    function test(){\n        var iframe = document.getElementById('￼ifame');\n        var win = iframe.contentWindow;//可以获取到iframe里的window对象，但该window对象的属性和方法几乎是不可用的\n        var doc = win.document;//这里获取不到iframe里的document对象\n        var name = win.name;//这里同样获取不到window对象的name属性\n    }\n</script>\n<iframe id = \"iframe\" src=\"http://damonare.cn/b.html\" onload = \"test()\"><\\/iframe>\n```\n\n这时只要把http://www.damonare.cn/a.html和http://damonare.cn/b.html这两个页面的document.domain都设成相同的域名就可以了。但要注意的是，document.domain的设置是有限制的，我们只能把document.domain设置成自身或更高一级的父域，且主域必须相同。\n\n-   在页面http://www.damonare.cn/a.html 中设置 document.domain:\n\n```javascript\n<iframe id = \"iframe\" src=\"http://damonare.cn/b.html\" onload = \"test()\"></iframe>\n<script type=\"text/javascript\">\n    document.domain = 'damonare.cn';//设置成主域\n    function test(){\n        alert(document.getElementById('￼iframe').contentWindow);//contentWindow 可取得子窗口的 window 对象\n    }\n</script>\n```\n\n-   在页面http://damonare.cn/b.html 中也设置 document.domain:\n\n```html\n<script type=\"text/javascript\">\n    document.domain = \"damonare.cn\"; //在iframe载入这个页面也设置document.domain，使之与主页面的document.domain相同\n</script>\n```\n\n修改 document.domain 的方法只适用于不同子域的框架间的交互。\n\n## 通过 location.hash 跨域\n\n此方法的原理就是改变 URL 的 hash 部分来进行双向通信。每个 window 通过改变其他 window 的 location 来发送消息（由于两个页面不在同一个域下 IE、Chrome 不允许修改 parent.location.hash 的值，所以要借助于父窗口域名下的一个代理 iframe），并通过监听自己的 URL 的变化来接收消息。这个方式的通信会造成一些不必要的浏览器历史记录，而且有些浏览器不支持 onhashchange 事件，需要轮询来获知 URL 的改变，最后，这样做也存在缺点，诸如数据直接暴露在了 url 中，数据容量和类型都有限等。\n\n## 通过 HTML5 的 postMessage 方法跨域\n\n这个功能主要包括接受信息的 ”message” 事件和发送消息的 ”postMessage” 方法。比如http://damonare.cn域的A页面通过iframe嵌入了一个http://google.com域的B页面，可以通过以下方法实现A和B的通信\n\nA 页面通过 postMessage 方法发送消息：\n\n```javascript\nwindow.onload = function() {\n    var ifr = document.getElementById(\"ifr\");\n    var targetOrigin = \"http://www.google.com\";\n    ifr.contentWindow.postMessage(\"hello world!\", targetOrigin);\n};\n```\n\n**postMessage 的使用方法**\n\notherWindow.postMessage(message, targetOrigin);\n\n-   otherWindow: 指目标窗口，也就是给哪个 window 发消息，是 window.frames 属性的成员或者由 window.open 方法创建的窗口\n-   message: 是要发送的消息，类型为 String、Object (IE8 、 9 不支持 )\n-   targetOrigin: 是限定消息接收范围，不限制请使用 ‘\\*\n\nB 页面通过 message 事件监听并接受消息 :\n\n```javascript\nvar onmessage = function(event) {\n    var data = event.data; //消息\n    var origin = event.origin; //消息来源地址\n    var source = event.source; //源Window对象\n    if (origin == \"http://www.baidu.com\") {\n        console.log(data); //hello world!\n    }\n};\nif (typeof window.addEventListener != \"undefined\") {\n    window.addEventListener(\"message\", onmessage, false);\n} else if (typeof window.attachEvent != \"undefined\") {\n    //for ie\n    window.attachEvent(\"onmessage\", onmessage);\n}\n```\n\n## 通过 window.name 跨域\n\n在一个窗口生命周期内，窗口载入的所有的页面都是共享一个 window.name 的，每一个页面对 window.name 都有读写的权限，window.name 是持久的存在于一个窗口载入的所有页面，并不会因为新的页面的载入而被重置。\n\n下面为 a.html 中代码\n\n```javascript\nwindow.name = \"我是页面a中设置的值\";\nsetInterval(function() {\n    window.location = \"b.html\";\n}, 2000); //两秒后把一个新页面b.html载入到当前的window中\n```\n\nb.html 中的代码\n\n```javascript\n<script>console.log(window.name);//读取window.name的值</script>\n```\n\n## 服务器端设置 http header\n\n这是需要在服务器端设置的，作为前端工程师我们不用详细掌握，但是要知道有这么个解决方案。而且，现在推崇的跨域解决方案是这一种，比 JSONP 简单许多。\n\n```javascript\nresponse.setHeader(\"Access-Control-Allow-Origin\", \"http://m.juejin.com/\"); // 第二个参数填写允许跨域的域名称，不建议直接写 \"*\"\nresponse.setHeader(\"Access-Control-Allow-Headers\", \"X-Requested-With\");\nresponse.setHeader(\n    \"Access-Control-Allow-Methods\",\n    \"PUT,POST,GET,DELETE,OPTIONS\"\n);\n\n// 接收跨域的cookie\nresponse.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n```\n\n## XMLHttpRequest Level 2 使用指南\n\nXMLHttpRequest 是一个浏览器接口，是的 Javascript 可以进行 HTTP(S)通信。\n\n### 老版本的 XMLHttpRequest 对象\n\n```javascript\n//首先 ，新建一个XMLHttpRequest 的实例。\nvar xhr = new XMLHttpRequest();\n\n//然后向主机发送一个HTTP请求。\nxhr.open(\"GET\", \"example.php\");\nxhr.send();\n\n//接着，就等待远程主机做出回应。这时需要监控XMLHttpRequest对象的状态变化，指定回调函数。\n\nxhr.onreadystatechange = function() {\n    if (xhr.readyState == 4 && xhr.status == 200) {\n        alert(xhr.responseText);\n    } else {\n        alert(xhr.statusText);\n    }\n};\n```\n\n### 老版本的 XMLHttpRequest 的缺点\n\n-   只支持文本数据的传送，无法用来读取和上传二进制文件。\n-   传送和接收数据时，没有进度信息，只能提示有没有完成。\n-   受到\"同源限制\"，只能向同一域名的服务器请求数据。\n\n### 新版本的功能\n\n-   可以设置 HTTP 请求发的时限。\n-   可以使用 FormData 对象管理表单数据。\n-   可以上传文件。\n-   可以请求不同域名下的数据。（跨域请求）\n-   可以获取服务器端的二进制数据。\n-   可以获的数据传输的进度信息。\n","source":"_posts/跨域-解决方案.md","raw":"---\ntitle: 跨域-解决方案\ndate: 2018-04-19 09:55:30\ncategories: WEB\n---\n\n具体概念如下：只要协议、域名、端口有任何一个不同，都被当作是不同的域。\n\n** 凡是拥有 “src” 这个属性的标签都有跨域的能力**\n\n<!--more-->\n\n## 跨\n\n**如果是协议和端口造成的跨域问题。则前台无法解决。** 同源策略具体分为以下几类：\n\n-   不同域名\n-   相同域名不同端口号，如`https://www.oschina.net:8000`和`https://www.oschina.net:8001`\n-   同一个域名不同协议，如`http://www.oschina.net/`和`https://www.oschina.net/`\n-   域名和域名对应的的 IP，如`http://b.qq.com/`和 `http://10.198.7.85`\n-   主域和子域，如`http://www.oschina.net/`和`https://test.oschina.net`\n-   子域和子域，如`https://test1.oschina.net`和`https://test2.oschina.net` 以上情况只要出现了，那么就会产生跨域问题。那么如果解决跨域问题呢，下面的小节会总结一些解决跨域常用的方法。\n\n## JSONP 带 callback 的 json\n\n有个通俗易懂的解释 -JSONP（JSON with Padding ）是数据格式 JSON 的一种 “ 使用模式 ”，可以让网页从别的网域要数据。利用`<script>`标签没有跨域限制，来达到与第 3 方通讯的目的。\n\n** jsonp 的客户端具体实现：**\n\n1. 远程服务器 remoteserver.com 根目录下有个 remote.js 文件代码如下：\n\n```javascript\nalert(\"我是远程文件\");\n```\n\n2. 本地服务器 localserver.com 下有个 jsonp.html 页面代码如下：\n\n```javascript\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n    <title></title>\n    <script type=\"text/javascript\" src=\"http://remoteserver.com/remote.js\"></script>\n</head>\n<body>\n\n</body>\n</html>\n```\n\n页面将会弹出一个提示窗体，显示跨域调用成功。\n\n3. 现在我们在 jsonp.html 页面定义一个函数，然后在远程 remote.js 中传入数据进行调用。\n\njsonp.html 页面代码如下：\n\n```javascript\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n    <title></title>\n    <script type=\"text/javascript\">\n    var localHandler = function(data){\n        alert('我是本地函数，可以被跨域的remote.js文件调用，远程js带来的数据是：' + data.result);\n    };\n    </script>\n    <script type=\"text/javascript\" src=\"http://remoteserver.com/remote.js\"></script>\n</head>\n<body>\n\n</body>\n</html>\n```\n\n4. remote.js 文件代码如下：\n\n```javascript\nlocalHandler({ result: \"我是远程js带来的数据\" });\n```\n\n**要注意的是他支持 GET 这一种 HTTP 请求类型**\n\n## 跨域资源共享（CORS-Cross Origin Resource Sharing ）\n\n跨域资源共享（ CORS ）机制允许 Web 应用服务器进行跨域访问控制，从而使跨域数据传输得以安全进行。\n\nCORS 除了 GET 要求方法以外也支持其他的 HTTP 要求。浏览器 CORS 请求分成两种：\n\n1. 简单请求\n2. 协商模型 / 预检请求（Preflighted Request ），即非简单请求如何区分请求具体属于哪一种呢，下面我总结了几点：\n\n    1. 请求方式：\n\n    - GET\n    - HEAD\n    - POST\n\n    2. HTTP 的头信息子段\n\n    - Accept\n    - Accept-Language\n    - Content-Language\n    - Last-Event-ID\n    - Content-Type：只限于三个值 application/x-www-form-urlencoded、multipart/form-data 、 text/plain，其中 'text/plain' 默认支持，其他两种则需要预检请求和服务器协商。\n\n满足以上两大点的即为简单请求，否则为非简单请求。\n\n假如站点 http://foo.example 的网页应用想要访问 http://bar.other 的资源。http://foo.example 的网页中可能包含类似于下面的 JavaScript 代码：\n\n```javascript\nvar invocation = new XMLHttpRequest();\nvar url = \"http://bar.other/resources/public-data/\";\n\nfunction callOtherDomain() {\n    if (invocation) {\n        invocation.open(\"GET\", url, true);\n        invocation.onreadystatechange = handler;\n        invocation.send();\n    }\n}\n```\n\n## document.domain+iframe （适用于主域名相同的情况）\n\n比如，有一个页面，它的地址是http://www.damonare.cn/a.html ， 在这个页面里面有一个 iframe，它的 src 是http://damonare.cn/b.html, 很显然，这个页面与它里面的 iframe 框架是不同域的，所以我们是无法通过在页面中书写 js 代码来获取 iframe 中的东西的：\n\n```javascript\n<script type=\"text/javascript\">\n    function test(){\n        var iframe = document.getElementById('￼ifame');\n        var win = iframe.contentWindow;//可以获取到iframe里的window对象，但该window对象的属性和方法几乎是不可用的\n        var doc = win.document;//这里获取不到iframe里的document对象\n        var name = win.name;//这里同样获取不到window对象的name属性\n    }\n</script>\n<iframe id = \"iframe\" src=\"http://damonare.cn/b.html\" onload = \"test()\"><\\/iframe>\n```\n\n这时只要把http://www.damonare.cn/a.html和http://damonare.cn/b.html这两个页面的document.domain都设成相同的域名就可以了。但要注意的是，document.domain的设置是有限制的，我们只能把document.domain设置成自身或更高一级的父域，且主域必须相同。\n\n-   在页面http://www.damonare.cn/a.html 中设置 document.domain:\n\n```javascript\n<iframe id = \"iframe\" src=\"http://damonare.cn/b.html\" onload = \"test()\"></iframe>\n<script type=\"text/javascript\">\n    document.domain = 'damonare.cn';//设置成主域\n    function test(){\n        alert(document.getElementById('￼iframe').contentWindow);//contentWindow 可取得子窗口的 window 对象\n    }\n</script>\n```\n\n-   在页面http://damonare.cn/b.html 中也设置 document.domain:\n\n```html\n<script type=\"text/javascript\">\n    document.domain = \"damonare.cn\"; //在iframe载入这个页面也设置document.domain，使之与主页面的document.domain相同\n</script>\n```\n\n修改 document.domain 的方法只适用于不同子域的框架间的交互。\n\n## 通过 location.hash 跨域\n\n此方法的原理就是改变 URL 的 hash 部分来进行双向通信。每个 window 通过改变其他 window 的 location 来发送消息（由于两个页面不在同一个域下 IE、Chrome 不允许修改 parent.location.hash 的值，所以要借助于父窗口域名下的一个代理 iframe），并通过监听自己的 URL 的变化来接收消息。这个方式的通信会造成一些不必要的浏览器历史记录，而且有些浏览器不支持 onhashchange 事件，需要轮询来获知 URL 的改变，最后，这样做也存在缺点，诸如数据直接暴露在了 url 中，数据容量和类型都有限等。\n\n## 通过 HTML5 的 postMessage 方法跨域\n\n这个功能主要包括接受信息的 ”message” 事件和发送消息的 ”postMessage” 方法。比如http://damonare.cn域的A页面通过iframe嵌入了一个http://google.com域的B页面，可以通过以下方法实现A和B的通信\n\nA 页面通过 postMessage 方法发送消息：\n\n```javascript\nwindow.onload = function() {\n    var ifr = document.getElementById(\"ifr\");\n    var targetOrigin = \"http://www.google.com\";\n    ifr.contentWindow.postMessage(\"hello world!\", targetOrigin);\n};\n```\n\n**postMessage 的使用方法**\n\notherWindow.postMessage(message, targetOrigin);\n\n-   otherWindow: 指目标窗口，也就是给哪个 window 发消息，是 window.frames 属性的成员或者由 window.open 方法创建的窗口\n-   message: 是要发送的消息，类型为 String、Object (IE8 、 9 不支持 )\n-   targetOrigin: 是限定消息接收范围，不限制请使用 ‘\\*\n\nB 页面通过 message 事件监听并接受消息 :\n\n```javascript\nvar onmessage = function(event) {\n    var data = event.data; //消息\n    var origin = event.origin; //消息来源地址\n    var source = event.source; //源Window对象\n    if (origin == \"http://www.baidu.com\") {\n        console.log(data); //hello world!\n    }\n};\nif (typeof window.addEventListener != \"undefined\") {\n    window.addEventListener(\"message\", onmessage, false);\n} else if (typeof window.attachEvent != \"undefined\") {\n    //for ie\n    window.attachEvent(\"onmessage\", onmessage);\n}\n```\n\n## 通过 window.name 跨域\n\n在一个窗口生命周期内，窗口载入的所有的页面都是共享一个 window.name 的，每一个页面对 window.name 都有读写的权限，window.name 是持久的存在于一个窗口载入的所有页面，并不会因为新的页面的载入而被重置。\n\n下面为 a.html 中代码\n\n```javascript\nwindow.name = \"我是页面a中设置的值\";\nsetInterval(function() {\n    window.location = \"b.html\";\n}, 2000); //两秒后把一个新页面b.html载入到当前的window中\n```\n\nb.html 中的代码\n\n```javascript\n<script>console.log(window.name);//读取window.name的值</script>\n```\n\n## 服务器端设置 http header\n\n这是需要在服务器端设置的，作为前端工程师我们不用详细掌握，但是要知道有这么个解决方案。而且，现在推崇的跨域解决方案是这一种，比 JSONP 简单许多。\n\n```javascript\nresponse.setHeader(\"Access-Control-Allow-Origin\", \"http://m.juejin.com/\"); // 第二个参数填写允许跨域的域名称，不建议直接写 \"*\"\nresponse.setHeader(\"Access-Control-Allow-Headers\", \"X-Requested-With\");\nresponse.setHeader(\n    \"Access-Control-Allow-Methods\",\n    \"PUT,POST,GET,DELETE,OPTIONS\"\n);\n\n// 接收跨域的cookie\nresponse.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n```\n\n## XMLHttpRequest Level 2 使用指南\n\nXMLHttpRequest 是一个浏览器接口，是的 Javascript 可以进行 HTTP(S)通信。\n\n### 老版本的 XMLHttpRequest 对象\n\n```javascript\n//首先 ，新建一个XMLHttpRequest 的实例。\nvar xhr = new XMLHttpRequest();\n\n//然后向主机发送一个HTTP请求。\nxhr.open(\"GET\", \"example.php\");\nxhr.send();\n\n//接着，就等待远程主机做出回应。这时需要监控XMLHttpRequest对象的状态变化，指定回调函数。\n\nxhr.onreadystatechange = function() {\n    if (xhr.readyState == 4 && xhr.status == 200) {\n        alert(xhr.responseText);\n    } else {\n        alert(xhr.statusText);\n    }\n};\n```\n\n### 老版本的 XMLHttpRequest 的缺点\n\n-   只支持文本数据的传送，无法用来读取和上传二进制文件。\n-   传送和接收数据时，没有进度信息，只能提示有没有完成。\n-   受到\"同源限制\"，只能向同一域名的服务器请求数据。\n\n### 新版本的功能\n\n-   可以设置 HTTP 请求发的时限。\n-   可以使用 FormData 对象管理表单数据。\n-   可以上传文件。\n-   可以请求不同域名下的数据。（跨域请求）\n-   可以获取服务器端的二进制数据。\n-   可以获的数据传输的进度信息。\n","slug":"跨域-解决方案","published":1,"updated":"2019-07-25T10:21:43.246Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmejaess002vxcvr5uj2dbur","content":"<p>具体概念如下：只要协议、域名、端口有任何一个不同，都被当作是不同的域。</p>\n<p>** 凡是拥有 “src” 这个属性的标签都有跨域的能力**</p>\n<span id=\"more\"></span>\n\n<h2 id=\"跨\"><a href=\"#跨\" class=\"headerlink\" title=\"跨\"></a>跨</h2><p><strong>如果是协议和端口造成的跨域问题。则前台无法解决。</strong> 同源策略具体分为以下几类：</p>\n<ul>\n<li>  不同域名</li>\n<li>  相同域名不同端口号，如<code>https://www.oschina.net:8000</code>和<code>https://www.oschina.net:8001</code></li>\n<li>  同一个域名不同协议，如<code>http://www.oschina.net/</code>和<code>https://www.oschina.net/</code></li>\n<li>  域名和域名对应的的 IP，如<code>http://b.qq.com/</code>和 <code>http://10.198.7.85</code></li>\n<li>  主域和子域，如<code>http://www.oschina.net/</code>和<code>https://test.oschina.net</code></li>\n<li>  子域和子域，如<code>https://test1.oschina.net</code>和<code>https://test2.oschina.net</code> 以上情况只要出现了，那么就会产生跨域问题。那么如果解决跨域问题呢，下面的小节会总结一些解决跨域常用的方法。</li>\n</ul>\n<h2 id=\"JSONP-带-callback-的-json\"><a href=\"#JSONP-带-callback-的-json\" class=\"headerlink\" title=\"JSONP 带 callback 的 json\"></a>JSONP 带 callback 的 json</h2><p>有个通俗易懂的解释 -JSONP（JSON with Padding ）是数据格式 JSON 的一种 “ 使用模式 ”，可以让网页从别的网域要数据。利用<code>&lt;script&gt;</code>标签没有跨域限制，来达到与第 3 方通讯的目的。</p>\n<p>** jsonp 的客户端具体实现：**</p>\n<ol>\n<li>远程服务器 remoteserver.com 根目录下有个 remote.js 文件代码如下：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(<span class=\"string\">&quot;我是远程文件&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>本地服务器 localserver.com 下有个 jsonp.html 页面代码如下：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html PUBLIC <span class=\"string\">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class=\"string\">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span><br><span class=\"line\">&lt;html xmlns=<span class=\"string\">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">    &lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span> src=<span class=\"string\">&quot;http://remoteserver.com/remote.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>页面将会弹出一个提示窗体，显示跨域调用成功。</p>\n<ol start=\"3\">\n<li>现在我们在 jsonp.html 页面定义一个函数，然后在远程 remote.js 中传入数据进行调用。</li>\n</ol>\n<p>jsonp.html 页面代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html PUBLIC <span class=\"string\">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class=\"string\">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span><br><span class=\"line\">&lt;html xmlns=<span class=\"string\">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">    &lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> localHandler = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">&#x27;我是本地函数，可以被跨域的remote.js文件调用，远程js带来的数据是：&#x27;</span> + data.result);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">    &lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span> src=<span class=\"string\">&quot;http://remoteserver.com/remote.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>remote.js 文件代码如下：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localHandler(&#123; <span class=\"attr\">result</span>: <span class=\"string\">&quot;我是远程js带来的数据&quot;</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>要注意的是他支持 GET 这一种 HTTP 请求类型</strong></p>\n<h2 id=\"跨域资源共享（CORS-Cross-Origin-Resource-Sharing-）\"><a href=\"#跨域资源共享（CORS-Cross-Origin-Resource-Sharing-）\" class=\"headerlink\" title=\"跨域资源共享（CORS-Cross Origin Resource Sharing ）\"></a>跨域资源共享（CORS-Cross Origin Resource Sharing ）</h2><p>跨域资源共享（ CORS ）机制允许 Web 应用服务器进行跨域访问控制，从而使跨域数据传输得以安全进行。</p>\n<p>CORS 除了 GET 要求方法以外也支持其他的 HTTP 要求。浏览器 CORS 请求分成两种：</p>\n<ol>\n<li><p>简单请求</p>\n</li>\n<li><p>协商模型 / 预检请求（Preflighted Request ），即非简单请求如何区分请求具体属于哪一种呢，下面我总结了几点：</p>\n<ol>\n<li>请求方式：</li>\n</ol>\n<ul>\n<li>GET</li>\n<li>HEAD</li>\n<li>POST</li>\n</ul>\n<ol start=\"2\">\n<li>HTTP 的头信息子段</li>\n</ol>\n<ul>\n<li>Accept</li>\n<li>Accept-Language</li>\n<li>Content-Language</li>\n<li>Last-Event-ID</li>\n<li>Content-Type：只限于三个值 application/x-www-form-urlencoded、multipart/form-data 、 text/plain，其中 ‘text/plain’ 默认支持，其他两种则需要预检请求和服务器协商。</li>\n</ul>\n</li>\n</ol>\n<p>满足以上两大点的即为简单请求，否则为非简单请求。</p>\n<p>假如站点 <a href=\"http://foo.example/\">http://foo.example</a> 的网页应用想要访问 <a href=\"http://bar.other/\">http://bar.other</a> 的资源。<a href=\"http://foo.example/\">http://foo.example</a> 的网页中可能包含类似于下面的 JavaScript 代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> invocation = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">&quot;http://bar.other/resources/public-data/&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callOtherDomain</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (invocation) &#123;</span><br><span class=\"line\">        invocation.open(<span class=\"string\">&quot;GET&quot;</span>, url, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        invocation.onreadystatechange = handler;</span><br><span class=\"line\">        invocation.send();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"document-domain-iframe-（适用于主域名相同的情况）\"><a href=\"#document-domain-iframe-（适用于主域名相同的情况）\" class=\"headerlink\" title=\"document.domain+iframe （适用于主域名相同的情况）\"></a>document.domain+iframe （适用于主域名相同的情况）</h2><p>比如，有一个页面，它的地址是<a href=\"http://www.damonare.cn/a.html\">http://www.damonare.cn/a.html</a> ， 在这个页面里面有一个 iframe，它的 src 是<a href=\"http://damonare.cn/b.html\">http://damonare.cn/b.html</a>, 很显然，这个页面与它里面的 iframe 框架是不同域的，所以我们是无法通过在页面中书写 js 代码来获取 iframe 中的东西的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;￼ifame&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> win = iframe.contentWindow;<span class=\"comment\">//可以获取到iframe里的window对象，但该window对象的属性和方法几乎是不可用的</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> doc = win.document;<span class=\"comment\">//这里获取不到iframe里的document对象</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> name = win.name;<span class=\"comment\">//这里同样获取不到window对象的name属性</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;iframe id = <span class=\"string\">&quot;iframe&quot;</span> src=<span class=\"string\">&quot;http://damonare.cn/b.html&quot;</span> onload = <span class=\"string\">&quot;test()&quot;</span>&gt;<span class=\"xml\">&lt;\\/iframe&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这时只要把<a href=\"http://www.damonare.cn/a.html%E5%92%8Chttp://damonare.cn/b.html%E8%BF%99%E4%B8%A4%E4%B8%AA%E9%A1%B5%E9%9D%A2%E7%9A%84document.domain%E9%83%BD%E8%AE%BE%E6%88%90%E7%9B%B8%E5%90%8C%E7%9A%84%E5%9F%9F%E5%90%8D%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%BA%86%E3%80%82%E4%BD%86%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E6%98%AF%EF%BC%8Cdocument.domain%E7%9A%84%E8%AE%BE%E7%BD%AE%E6%98%AF%E6%9C%89%E9%99%90%E5%88%B6%E7%9A%84%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AA%E8%83%BD%E6%8A%8Adocument.domain%E8%AE%BE%E7%BD%AE%E6%88%90%E8%87%AA%E8%BA%AB%E6%88%96%E6%9B%B4%E9%AB%98%E4%B8%80%E7%BA%A7%E7%9A%84%E7%88%B6%E5%9F%9F%EF%BC%8C%E4%B8%94%E4%B8%BB%E5%9F%9F%E5%BF%85%E9%A1%BB%E7%9B%B8%E5%90%8C%E3%80%82\">http://www.damonare.cn/a.html和http://damonare.cn/b.html这两个页面的document.domain都设成相同的域名就可以了。但要注意的是，document.domain的设置是有限制的，我们只能把document.domain设置成自身或更高一级的父域，且主域必须相同。</a></p>\n<ul>\n<li>  在页面<a href=\"http://www.damonare.cn/a.html\">http://www.damonare.cn/a.html</a> 中设置 document.domain:</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;iframe id = <span class=\"string\">&quot;iframe&quot;</span> src=<span class=\"string\">&quot;http://damonare.cn/b.html&quot;</span> onload = <span class=\"string\">&quot;test()&quot;</span>&gt;&lt;/iframe&gt;</span><br><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.domain = <span class=\"string\">&#x27;damonare.cn&#x27;</span>;<span class=\"comment\">//设置成主域</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;￼iframe&#x27;</span>).contentWindow);<span class=\"comment\">//contentWindow 可取得子窗口的 window 对象</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>  在页面<a href=\"http://damonare.cn/b.html\">http://damonare.cn/b.html</a> 中也设置 document.domain:</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.domain = <span class=\"string\">&quot;damonare.cn&quot;</span>; <span class=\"comment\">//在iframe载入这个页面也设置document.domain，使之与主页面的document.domain相同</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>修改 document.domain 的方法只适用于不同子域的框架间的交互。</p>\n<h2 id=\"通过-location-hash-跨域\"><a href=\"#通过-location-hash-跨域\" class=\"headerlink\" title=\"通过 location.hash 跨域\"></a>通过 location.hash 跨域</h2><p>此方法的原理就是改变 URL 的 hash 部分来进行双向通信。每个 window 通过改变其他 window 的 location 来发送消息（由于两个页面不在同一个域下 IE、Chrome 不允许修改 parent.location.hash 的值，所以要借助于父窗口域名下的一个代理 iframe），并通过监听自己的 URL 的变化来接收消息。这个方式的通信会造成一些不必要的浏览器历史记录，而且有些浏览器不支持 onhashchange 事件，需要轮询来获知 URL 的改变，最后，这样做也存在缺点，诸如数据直接暴露在了 url 中，数据容量和类型都有限等。</p>\n<h2 id=\"通过-HTML5-的-postMessage-方法跨域\"><a href=\"#通过-HTML5-的-postMessage-方法跨域\" class=\"headerlink\" title=\"通过 HTML5 的 postMessage 方法跨域\"></a>通过 HTML5 的 postMessage 方法跨域</h2><p>这个功能主要包括接受信息的 ”message” 事件和发送消息的 ”postMessage” 方法。比如<a href=\"http://damonare.cn域的a页面通过iframe嵌入了一个http//google.com%E5%9F%9F%E7%9A%84B%E9%A1%B5%E9%9D%A2%EF%BC%8C%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E4%BB%A5%E4%B8%8B%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0A%E5%92%8CB%E7%9A%84%E9%80%9A%E4%BF%A1\">http://damonare.cn域的A页面通过iframe嵌入了一个http://google.com域的B页面，可以通过以下方法实现A和B的通信</a></p>\n<p>A 页面通过 postMessage 方法发送消息：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ifr = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;ifr&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> targetOrigin = <span class=\"string\">&quot;http://www.google.com&quot;</span>;</span><br><span class=\"line\">    ifr.contentWindow.postMessage(<span class=\"string\">&quot;hello world!&quot;</span>, targetOrigin);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>postMessage 的使用方法</strong></p>\n<p>otherWindow.postMessage(message, targetOrigin);</p>\n<ul>\n<li>  otherWindow: 指目标窗口，也就是给哪个 window 发消息，是 window.frames 属性的成员或者由 window.open 方法创建的窗口</li>\n<li>  message: 是要发送的消息，类型为 String、Object (IE8 、 9 不支持 )</li>\n<li>  targetOrigin: 是限定消息接收范围，不限制请使用 ‘*</li>\n</ul>\n<p>B 页面通过 message 事件监听并接受消息 :</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> onmessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> data = event.data; <span class=\"comment\">//消息</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> origin = event.origin; <span class=\"comment\">//消息来源地址</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> source = event.source; <span class=\"comment\">//源Window对象</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (origin == <span class=\"string\">&quot;http://www.baidu.com&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(data); <span class=\"comment\">//hello world!</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span>.addEventListener != <span class=\"string\">&quot;undefined&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">&quot;message&quot;</span>, onmessage, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span>.attachEvent != <span class=\"string\">&quot;undefined&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//for ie</span></span><br><span class=\"line\">    <span class=\"built_in\">window</span>.attachEvent(<span class=\"string\">&quot;onmessage&quot;</span>, onmessage);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"通过-window-name-跨域\"><a href=\"#通过-window-name-跨域\" class=\"headerlink\" title=\"通过 window.name 跨域\"></a>通过 window.name 跨域</h2><p>在一个窗口生命周期内，窗口载入的所有的页面都是共享一个 window.name 的，每一个页面对 window.name 都有读写的权限，window.name 是持久的存在于一个窗口载入的所有页面，并不会因为新的页面的载入而被重置。</p>\n<p>下面为 a.html 中代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.name = <span class=\"string\">&quot;我是页面a中设置的值&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.location = <span class=\"string\">&quot;b.html&quot;</span>;</span><br><span class=\"line\">&#125;, <span class=\"number\">2000</span>); <span class=\"comment\">//两秒后把一个新页面b.html载入到当前的window中</span></span><br></pre></td></tr></table></figure>\n\n<p>b.html 中的代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;<span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.name);<span class=\"comment\">//读取window.name的值&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"服务器端设置-http-header\"><a href=\"#服务器端设置-http-header\" class=\"headerlink\" title=\"服务器端设置 http header\"></a>服务器端设置 http header</h2><p>这是需要在服务器端设置的，作为前端工程师我们不用详细掌握，但是要知道有这么个解决方案。而且，现在推崇的跨域解决方案是这一种，比 JSONP 简单许多。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setHeader(<span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>, <span class=\"string\">&quot;http://m.juejin.com/&quot;</span>); <span class=\"comment\">// 第二个参数填写允许跨域的域名称，不建议直接写 &quot;*&quot;</span></span><br><span class=\"line\">response.setHeader(<span class=\"string\">&quot;Access-Control-Allow-Headers&quot;</span>, <span class=\"string\">&quot;X-Requested-With&quot;</span>);</span><br><span class=\"line\">response.setHeader(</span><br><span class=\"line\">    <span class=\"string\">&quot;Access-Control-Allow-Methods&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;PUT,POST,GET,DELETE,OPTIONS&quot;</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 接收跨域的cookie</span></span><br><span class=\"line\">response.setHeader(<span class=\"string\">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class=\"string\">&quot;true&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"XMLHttpRequest-Level-2-使用指南\"><a href=\"#XMLHttpRequest-Level-2-使用指南\" class=\"headerlink\" title=\"XMLHttpRequest Level 2 使用指南\"></a>XMLHttpRequest Level 2 使用指南</h2><p>XMLHttpRequest 是一个浏览器接口，是的 Javascript 可以进行 HTTP(S)通信。</p>\n<h3 id=\"老版本的-XMLHttpRequest-对象\"><a href=\"#老版本的-XMLHttpRequest-对象\" class=\"headerlink\" title=\"老版本的 XMLHttpRequest 对象\"></a>老版本的 XMLHttpRequest 对象</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//首先 ，新建一个XMLHttpRequest 的实例。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//然后向主机发送一个HTTP请求。</span></span><br><span class=\"line\">xhr.open(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;example.php&quot;</span>);</span><br><span class=\"line\">xhr.send();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//接着，就等待远程主机做出回应。这时需要监控XMLHttpRequest对象的状态变化，指定回调函数。</span></span><br><span class=\"line\"></span><br><span class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (xhr.readyState == <span class=\"number\">4</span> &amp;&amp; xhr.status == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        alert(xhr.responseText);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        alert(xhr.statusText);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"老版本的-XMLHttpRequest-的缺点\"><a href=\"#老版本的-XMLHttpRequest-的缺点\" class=\"headerlink\" title=\"老版本的 XMLHttpRequest 的缺点\"></a>老版本的 XMLHttpRequest 的缺点</h3><ul>\n<li>  只支持文本数据的传送，无法用来读取和上传二进制文件。</li>\n<li>  传送和接收数据时，没有进度信息，只能提示有没有完成。</li>\n<li>  受到”同源限制”，只能向同一域名的服务器请求数据。</li>\n</ul>\n<h3 id=\"新版本的功能\"><a href=\"#新版本的功能\" class=\"headerlink\" title=\"新版本的功能\"></a>新版本的功能</h3><ul>\n<li>  可以设置 HTTP 请求发的时限。</li>\n<li>  可以使用 FormData 对象管理表单数据。</li>\n<li>  可以上传文件。</li>\n<li>  可以请求不同域名下的数据。（跨域请求）</li>\n<li>  可以获取服务器端的二进制数据。</li>\n<li>  可以获的数据传输的进度信息。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>具体概念如下：只要协议、域名、端口有任何一个不同，都被当作是不同的域。</p>\n<p>** 凡是拥有 “src” 这个属性的标签都有跨域的能力**</p>","more":"<h2 id=\"跨\"><a href=\"#跨\" class=\"headerlink\" title=\"跨\"></a>跨</h2><p><strong>如果是协议和端口造成的跨域问题。则前台无法解决。</strong> 同源策略具体分为以下几类：</p>\n<ul>\n<li>  不同域名</li>\n<li>  相同域名不同端口号，如<code>https://www.oschina.net:8000</code>和<code>https://www.oschina.net:8001</code></li>\n<li>  同一个域名不同协议，如<code>http://www.oschina.net/</code>和<code>https://www.oschina.net/</code></li>\n<li>  域名和域名对应的的 IP，如<code>http://b.qq.com/</code>和 <code>http://10.198.7.85</code></li>\n<li>  主域和子域，如<code>http://www.oschina.net/</code>和<code>https://test.oschina.net</code></li>\n<li>  子域和子域，如<code>https://test1.oschina.net</code>和<code>https://test2.oschina.net</code> 以上情况只要出现了，那么就会产生跨域问题。那么如果解决跨域问题呢，下面的小节会总结一些解决跨域常用的方法。</li>\n</ul>\n<h2 id=\"JSONP-带-callback-的-json\"><a href=\"#JSONP-带-callback-的-json\" class=\"headerlink\" title=\"JSONP 带 callback 的 json\"></a>JSONP 带 callback 的 json</h2><p>有个通俗易懂的解释 -JSONP（JSON with Padding ）是数据格式 JSON 的一种 “ 使用模式 ”，可以让网页从别的网域要数据。利用<code>&lt;script&gt;</code>标签没有跨域限制，来达到与第 3 方通讯的目的。</p>\n<p>** jsonp 的客户端具体实现：**</p>\n<ol>\n<li>远程服务器 remoteserver.com 根目录下有个 remote.js 文件代码如下：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(<span class=\"string\">&quot;我是远程文件&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>本地服务器 localserver.com 下有个 jsonp.html 页面代码如下：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html PUBLIC <span class=\"string\">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class=\"string\">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span><br><span class=\"line\">&lt;html xmlns=<span class=\"string\">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">    &lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span> src=<span class=\"string\">&quot;http://remoteserver.com/remote.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>页面将会弹出一个提示窗体，显示跨域调用成功。</p>\n<ol start=\"3\">\n<li>现在我们在 jsonp.html 页面定义一个函数，然后在远程 remote.js 中传入数据进行调用。</li>\n</ol>\n<p>jsonp.html 页面代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html PUBLIC <span class=\"string\">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class=\"string\">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span><br><span class=\"line\">&lt;html xmlns=<span class=\"string\">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">    &lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> localHandler = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">&#x27;我是本地函数，可以被跨域的remote.js文件调用，远程js带来的数据是：&#x27;</span> + data.result);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">    &lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span> src=<span class=\"string\">&quot;http://remoteserver.com/remote.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>remote.js 文件代码如下：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localHandler(&#123; <span class=\"attr\">result</span>: <span class=\"string\">&quot;我是远程js带来的数据&quot;</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>要注意的是他支持 GET 这一种 HTTP 请求类型</strong></p>\n<h2 id=\"跨域资源共享（CORS-Cross-Origin-Resource-Sharing-）\"><a href=\"#跨域资源共享（CORS-Cross-Origin-Resource-Sharing-）\" class=\"headerlink\" title=\"跨域资源共享（CORS-Cross Origin Resource Sharing ）\"></a>跨域资源共享（CORS-Cross Origin Resource Sharing ）</h2><p>跨域资源共享（ CORS ）机制允许 Web 应用服务器进行跨域访问控制，从而使跨域数据传输得以安全进行。</p>\n<p>CORS 除了 GET 要求方法以外也支持其他的 HTTP 要求。浏览器 CORS 请求分成两种：</p>\n<ol>\n<li><p>简单请求</p>\n</li>\n<li><p>协商模型 / 预检请求（Preflighted Request ），即非简单请求如何区分请求具体属于哪一种呢，下面我总结了几点：</p>\n<ol>\n<li>请求方式：</li>\n</ol>\n<ul>\n<li>GET</li>\n<li>HEAD</li>\n<li>POST</li>\n</ul>\n<ol start=\"2\">\n<li>HTTP 的头信息子段</li>\n</ol>\n<ul>\n<li>Accept</li>\n<li>Accept-Language</li>\n<li>Content-Language</li>\n<li>Last-Event-ID</li>\n<li>Content-Type：只限于三个值 application/x-www-form-urlencoded、multipart/form-data 、 text/plain，其中 ‘text/plain’ 默认支持，其他两种则需要预检请求和服务器协商。</li>\n</ul>\n</li>\n</ol>\n<p>满足以上两大点的即为简单请求，否则为非简单请求。</p>\n<p>假如站点 <a href=\"http://foo.example/\">http://foo.example</a> 的网页应用想要访问 <a href=\"http://bar.other/\">http://bar.other</a> 的资源。<a href=\"http://foo.example/\">http://foo.example</a> 的网页中可能包含类似于下面的 JavaScript 代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> invocation = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">&quot;http://bar.other/resources/public-data/&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callOtherDomain</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (invocation) &#123;</span><br><span class=\"line\">        invocation.open(<span class=\"string\">&quot;GET&quot;</span>, url, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        invocation.onreadystatechange = handler;</span><br><span class=\"line\">        invocation.send();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"document-domain-iframe-（适用于主域名相同的情况）\"><a href=\"#document-domain-iframe-（适用于主域名相同的情况）\" class=\"headerlink\" title=\"document.domain+iframe （适用于主域名相同的情况）\"></a>document.domain+iframe （适用于主域名相同的情况）</h2><p>比如，有一个页面，它的地址是<a href=\"http://www.damonare.cn/a.html\">http://www.damonare.cn/a.html</a> ， 在这个页面里面有一个 iframe，它的 src 是<a href=\"http://damonare.cn/b.html\">http://damonare.cn/b.html</a>, 很显然，这个页面与它里面的 iframe 框架是不同域的，所以我们是无法通过在页面中书写 js 代码来获取 iframe 中的东西的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;￼ifame&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> win = iframe.contentWindow;<span class=\"comment\">//可以获取到iframe里的window对象，但该window对象的属性和方法几乎是不可用的</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> doc = win.document;<span class=\"comment\">//这里获取不到iframe里的document对象</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> name = win.name;<span class=\"comment\">//这里同样获取不到window对象的name属性</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;iframe id = <span class=\"string\">&quot;iframe&quot;</span> src=<span class=\"string\">&quot;http://damonare.cn/b.html&quot;</span> onload = <span class=\"string\">&quot;test()&quot;</span>&gt;<span class=\"xml\">&lt;\\/iframe&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这时只要把<a href=\"http://www.damonare.cn/a.html%E5%92%8Chttp://damonare.cn/b.html%E8%BF%99%E4%B8%A4%E4%B8%AA%E9%A1%B5%E9%9D%A2%E7%9A%84document.domain%E9%83%BD%E8%AE%BE%E6%88%90%E7%9B%B8%E5%90%8C%E7%9A%84%E5%9F%9F%E5%90%8D%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%BA%86%E3%80%82%E4%BD%86%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E6%98%AF%EF%BC%8Cdocument.domain%E7%9A%84%E8%AE%BE%E7%BD%AE%E6%98%AF%E6%9C%89%E9%99%90%E5%88%B6%E7%9A%84%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AA%E8%83%BD%E6%8A%8Adocument.domain%E8%AE%BE%E7%BD%AE%E6%88%90%E8%87%AA%E8%BA%AB%E6%88%96%E6%9B%B4%E9%AB%98%E4%B8%80%E7%BA%A7%E7%9A%84%E7%88%B6%E5%9F%9F%EF%BC%8C%E4%B8%94%E4%B8%BB%E5%9F%9F%E5%BF%85%E9%A1%BB%E7%9B%B8%E5%90%8C%E3%80%82\">http://www.damonare.cn/a.html和http://damonare.cn/b.html这两个页面的document.domain都设成相同的域名就可以了。但要注意的是，document.domain的设置是有限制的，我们只能把document.domain设置成自身或更高一级的父域，且主域必须相同。</a></p>\n<ul>\n<li>  在页面<a href=\"http://www.damonare.cn/a.html\">http://www.damonare.cn/a.html</a> 中设置 document.domain:</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;iframe id = <span class=\"string\">&quot;iframe&quot;</span> src=<span class=\"string\">&quot;http://damonare.cn/b.html&quot;</span> onload = <span class=\"string\">&quot;test()&quot;</span>&gt;&lt;/iframe&gt;</span><br><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.domain = <span class=\"string\">&#x27;damonare.cn&#x27;</span>;<span class=\"comment\">//设置成主域</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;￼iframe&#x27;</span>).contentWindow);<span class=\"comment\">//contentWindow 可取得子窗口的 window 对象</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>  在页面<a href=\"http://damonare.cn/b.html\">http://damonare.cn/b.html</a> 中也设置 document.domain:</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.domain = <span class=\"string\">&quot;damonare.cn&quot;</span>; <span class=\"comment\">//在iframe载入这个页面也设置document.domain，使之与主页面的document.domain相同</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>修改 document.domain 的方法只适用于不同子域的框架间的交互。</p>\n<h2 id=\"通过-location-hash-跨域\"><a href=\"#通过-location-hash-跨域\" class=\"headerlink\" title=\"通过 location.hash 跨域\"></a>通过 location.hash 跨域</h2><p>此方法的原理就是改变 URL 的 hash 部分来进行双向通信。每个 window 通过改变其他 window 的 location 来发送消息（由于两个页面不在同一个域下 IE、Chrome 不允许修改 parent.location.hash 的值，所以要借助于父窗口域名下的一个代理 iframe），并通过监听自己的 URL 的变化来接收消息。这个方式的通信会造成一些不必要的浏览器历史记录，而且有些浏览器不支持 onhashchange 事件，需要轮询来获知 URL 的改变，最后，这样做也存在缺点，诸如数据直接暴露在了 url 中，数据容量和类型都有限等。</p>\n<h2 id=\"通过-HTML5-的-postMessage-方法跨域\"><a href=\"#通过-HTML5-的-postMessage-方法跨域\" class=\"headerlink\" title=\"通过 HTML5 的 postMessage 方法跨域\"></a>通过 HTML5 的 postMessage 方法跨域</h2><p>这个功能主要包括接受信息的 ”message” 事件和发送消息的 ”postMessage” 方法。比如<a href=\"http://damonare.cn域的a页面通过iframe嵌入了一个http//google.com%E5%9F%9F%E7%9A%84B%E9%A1%B5%E9%9D%A2%EF%BC%8C%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E4%BB%A5%E4%B8%8B%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0A%E5%92%8CB%E7%9A%84%E9%80%9A%E4%BF%A1\">http://damonare.cn域的A页面通过iframe嵌入了一个http://google.com域的B页面，可以通过以下方法实现A和B的通信</a></p>\n<p>A 页面通过 postMessage 方法发送消息：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ifr = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;ifr&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> targetOrigin = <span class=\"string\">&quot;http://www.google.com&quot;</span>;</span><br><span class=\"line\">    ifr.contentWindow.postMessage(<span class=\"string\">&quot;hello world!&quot;</span>, targetOrigin);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>postMessage 的使用方法</strong></p>\n<p>otherWindow.postMessage(message, targetOrigin);</p>\n<ul>\n<li>  otherWindow: 指目标窗口，也就是给哪个 window 发消息，是 window.frames 属性的成员或者由 window.open 方法创建的窗口</li>\n<li>  message: 是要发送的消息，类型为 String、Object (IE8 、 9 不支持 )</li>\n<li>  targetOrigin: 是限定消息接收范围，不限制请使用 ‘*</li>\n</ul>\n<p>B 页面通过 message 事件监听并接受消息 :</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> onmessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> data = event.data; <span class=\"comment\">//消息</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> origin = event.origin; <span class=\"comment\">//消息来源地址</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> source = event.source; <span class=\"comment\">//源Window对象</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (origin == <span class=\"string\">&quot;http://www.baidu.com&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(data); <span class=\"comment\">//hello world!</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span>.addEventListener != <span class=\"string\">&quot;undefined&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">&quot;message&quot;</span>, onmessage, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span>.attachEvent != <span class=\"string\">&quot;undefined&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//for ie</span></span><br><span class=\"line\">    <span class=\"built_in\">window</span>.attachEvent(<span class=\"string\">&quot;onmessage&quot;</span>, onmessage);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"通过-window-name-跨域\"><a href=\"#通过-window-name-跨域\" class=\"headerlink\" title=\"通过 window.name 跨域\"></a>通过 window.name 跨域</h2><p>在一个窗口生命周期内，窗口载入的所有的页面都是共享一个 window.name 的，每一个页面对 window.name 都有读写的权限，window.name 是持久的存在于一个窗口载入的所有页面，并不会因为新的页面的载入而被重置。</p>\n<p>下面为 a.html 中代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.name = <span class=\"string\">&quot;我是页面a中设置的值&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.location = <span class=\"string\">&quot;b.html&quot;</span>;</span><br><span class=\"line\">&#125;, <span class=\"number\">2000</span>); <span class=\"comment\">//两秒后把一个新页面b.html载入到当前的window中</span></span><br></pre></td></tr></table></figure>\n\n<p>b.html 中的代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;<span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.name);<span class=\"comment\">//读取window.name的值&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"服务器端设置-http-header\"><a href=\"#服务器端设置-http-header\" class=\"headerlink\" title=\"服务器端设置 http header\"></a>服务器端设置 http header</h2><p>这是需要在服务器端设置的，作为前端工程师我们不用详细掌握，但是要知道有这么个解决方案。而且，现在推崇的跨域解决方案是这一种，比 JSONP 简单许多。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setHeader(<span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>, <span class=\"string\">&quot;http://m.juejin.com/&quot;</span>); <span class=\"comment\">// 第二个参数填写允许跨域的域名称，不建议直接写 &quot;*&quot;</span></span><br><span class=\"line\">response.setHeader(<span class=\"string\">&quot;Access-Control-Allow-Headers&quot;</span>, <span class=\"string\">&quot;X-Requested-With&quot;</span>);</span><br><span class=\"line\">response.setHeader(</span><br><span class=\"line\">    <span class=\"string\">&quot;Access-Control-Allow-Methods&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;PUT,POST,GET,DELETE,OPTIONS&quot;</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 接收跨域的cookie</span></span><br><span class=\"line\">response.setHeader(<span class=\"string\">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class=\"string\">&quot;true&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"XMLHttpRequest-Level-2-使用指南\"><a href=\"#XMLHttpRequest-Level-2-使用指南\" class=\"headerlink\" title=\"XMLHttpRequest Level 2 使用指南\"></a>XMLHttpRequest Level 2 使用指南</h2><p>XMLHttpRequest 是一个浏览器接口，是的 Javascript 可以进行 HTTP(S)通信。</p>\n<h3 id=\"老版本的-XMLHttpRequest-对象\"><a href=\"#老版本的-XMLHttpRequest-对象\" class=\"headerlink\" title=\"老版本的 XMLHttpRequest 对象\"></a>老版本的 XMLHttpRequest 对象</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//首先 ，新建一个XMLHttpRequest 的实例。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//然后向主机发送一个HTTP请求。</span></span><br><span class=\"line\">xhr.open(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;example.php&quot;</span>);</span><br><span class=\"line\">xhr.send();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//接着，就等待远程主机做出回应。这时需要监控XMLHttpRequest对象的状态变化，指定回调函数。</span></span><br><span class=\"line\"></span><br><span class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (xhr.readyState == <span class=\"number\">4</span> &amp;&amp; xhr.status == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        alert(xhr.responseText);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        alert(xhr.statusText);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"老版本的-XMLHttpRequest-的缺点\"><a href=\"#老版本的-XMLHttpRequest-的缺点\" class=\"headerlink\" title=\"老版本的 XMLHttpRequest 的缺点\"></a>老版本的 XMLHttpRequest 的缺点</h3><ul>\n<li>  只支持文本数据的传送，无法用来读取和上传二进制文件。</li>\n<li>  传送和接收数据时，没有进度信息，只能提示有没有完成。</li>\n<li>  受到”同源限制”，只能向同一域名的服务器请求数据。</li>\n</ul>\n<h3 id=\"新版本的功能\"><a href=\"#新版本的功能\" class=\"headerlink\" title=\"新版本的功能\"></a>新版本的功能</h3><ul>\n<li>  可以设置 HTTP 请求发的时限。</li>\n<li>  可以使用 FormData 对象管理表单数据。</li>\n<li>  可以上传文件。</li>\n<li>  可以请求不同域名下的数据。（跨域请求）</li>\n<li>  可以获取服务器端的二进制数据。</li>\n<li>  可以获的数据传输的进度信息。</li>\n</ul>"},{"title":"闭包","date":"2019-04-08T09:26:54.000Z","_content":"\n闭包一直都理解的比较零散，而且在实际运中中并不是很熟练，在此记录一下，并且希望在以后能够更加深入。\n\n<!--more-->\n红宝书上对于闭包的定义：闭包是指有权访问另外一个函数作用域中的变量的函数的关键在于以下两点：\n- 是一个函数\n- 能访问另外一个函数作用域的变量（即使外部函数已经返回）仍能访问外部变量。\n\n闭包主要有 2 个应用场景：\n\n- 函数作为返回值\n- 函数作为参数传递\n\n```javascript\nfunction F1() {\n  var a = 100;\n  return function() {\n    console.log(a);\n  };\n}\nvar f1 = F1();\nvar a = 200;\nf1(); //100\n```\n\n## 闭包\n\n闭包的定义非常简单：函数 A 返回一个函数 B，并且函数 B 中使用函数 A 中的变量，函数 B 被称为闭包。\n\n```javascript\nfunction A() {\n  let a = 1;\n  function B() {\n    console.log(a);\n  }\n  return B;\n}\n```\n\n你是否会疑惑为什么函数 A 已经弹出调用栈了，为什么函数 B 还能引用函数 A 中的变量，因为函数 A 中的变量这时候是存储在堆上的。现在的 JS 引擎可以通过逃逸分析辨别出那些变量需要存储在堆上，哪些需要存储在栈上。\n\n创建闭包最常见的方式就是在一个函数内部创建另一个函数。通常，函数的作用域及其所有变量都会在函数执行结束后被销毁。但是，在创建了一个闭包以后，这个函数的作用域就会一直保存到闭包不存在为止。\n\n```javascript\nfunction test() {\n  for (var i = 0; i < 4; i++) {\n    console.log('i:' + i);\n    (function(e) {\n      setTimeout(function() {\n        console.log(e);\n      }, 0);\n    })(i);\n  }\n}\ntest(); //i:0 => i:1 => i:2=> i:3=>  0 => 1=> 2 => 3\n```\n\n循环当中，匿名函数会立即执行，并且会将循环当前的 i 作为参数传入，将其作为当前匿名函数中的形参 e 的指向，即会保存对 i 的引用，它是不会被循环改变的。\n\n```javascript\nfunction makeAdder(x) {\n  console.log('x:' + x);\n  return function(y) {\n    console.log('y:' + y);\n    return x + y;\n  };\n}\n\nvar add5 = makeAdder(5);\n//x:5 undefined\nadd5;\n//f(y){  console.log('y:' + y) return x + y}\nvar add10 = makeAdder(10);\n\nconsole.log(add5(2)); // y:2 => 7\nconsole.log(add10(2)); // 12\n\n// 释放对闭包的引用\nadd5 = null;\nadd10 = null;\n```\n\nadd5 和 add10 都是闭包。他们共享相同的函数定义，但是保存了不同的环境。在 add5 中，x 为 5，在 add10 中，x 则为 10 ，最后通过 null 释放对闭包的引用。\n\n在 javascript 中，如果一个对象不再被引用，那么这个对象就会被垃圾回收机制回收； 如果两个对象互相引用，而不再被第 3 者所引用，那么这两个互相引用的对象也会被回收。\n\n**闭包只能取得包含函数中任何变量的最后一个值，这是因为闭包所保存的是整个变量对象，而不是某个特殊的变量**\n\n```javascript\nfunction test() {\n  var arr = [];\n  for (var i = 0; i < 10; i++) {\n    //作用域1\n    arr[i] = function() {\n      //作用域2 声明arr[]()\n      return i;\n    };\n  }\n  for (var a = 0; a < 10; a++) {\n    console.log(arr[a]());\n  }\n}\ntest();\n// 毫无疑问连续打印 10 个 10。因为在for循环中 a[i] 为一个函数声明\n//1.执行完for之后，在for作用域中i的值为10\n```\n\n改动一下\n\n```javascript\nfunction test() {\n  var arr = [];\n  //块1作用域\n  for (let i = 0; i < 10; i++) {\n    //块2作用域\n    arr[i] = function() {\n      //块3作用域\n      return i;\n    };\n  }\n  //块1作用域\n  for (var a = 0; a < 10; a++) {\n    console.log(arr[a]());\n  }\n}\ntest(); // 连续打印 0 到 9\n```\n\n**实现原因 :**\n\n- 当用 var 的时候 函数 2 作用域中没有 i 就向函数作用域 1 中去找，而执行到 `console.log(arr[a]())` 时 i 已经循环完毕，因此 i 全为 10。\n\n* 当使用 let 时，每次迭代 i 都被**重新声明**，即每层迭代会生成一个块作用域，并且变量 i 被定义为上一次结算的值。\n* var 是函数作用域，for 循环无论执行多少次，都是去最近的函数里面找，而不是块中找，所以只有一个 i，现在的 i 是 10。\n\n### 闭包中的 this 对象\n\n```javascript\nvar name = 'The Window';\n\nvar obj = {\n  name: 'My Object',\n\n  getName: function() {\n    return function() {\n      return this.name;\n    };\n  }\n};\n\nconsole.log(obj.getName()()); // The Window\n```\n\nobj.getName()() 实际上是在全局作用域中调用了匿名函数，this 指向了 window。这里要理解函数名与函数功能（或者称函数值）是分割开的，不要认为函数在哪里，其内部的 this 就指向哪里。匿名函数的执行环境具有全局性，因此其 this 对象通常指向 window。\n\n### 闭包的应用\n\n**应用闭包的主要场合是：设计私有的方法和变量。** 闭包的作用：\n\n- 访问函数的内部变量\n- 让被引用的变量值始终保存在内存中\n\n```javascript\nfunction fun(n, o) {\n  console.log(o);\n  return {\n    fun: function(m) {\n      return fun(m, n);\n    }\n  };\n}\n\nvar a = fun(0); // undefined\na.fun(1); // 0\na.fun(2); // 0\na.fun(3); // 0\n\nvar b = fun(0)\n  .fun(1)\n  .fun(2)\n  .fun(3); // undefined,0,1,2\n\nvar c = fun(0).fun(1); // undefined,0\nc.fun(2); // 1\nc.fun(3); // 1\n```\n\n```javascript\nfunction fn1() {\n  var a = 1;\n  return function() {\n    console.log(++a);\n  };\n}\n\nvar fn2 = fn1();\n\nfn2(); //输出2\n\nfn2(); //输出3\n```\n","source":"_posts/闭包.md","raw":"---\ntitle: 闭包\ndate: 2019-04-08 17:26:54\ncategories: JavaScript\n---\n\n闭包一直都理解的比较零散，而且在实际运中中并不是很熟练，在此记录一下，并且希望在以后能够更加深入。\n\n<!--more-->\n红宝书上对于闭包的定义：闭包是指有权访问另外一个函数作用域中的变量的函数的关键在于以下两点：\n- 是一个函数\n- 能访问另外一个函数作用域的变量（即使外部函数已经返回）仍能访问外部变量。\n\n闭包主要有 2 个应用场景：\n\n- 函数作为返回值\n- 函数作为参数传递\n\n```javascript\nfunction F1() {\n  var a = 100;\n  return function() {\n    console.log(a);\n  };\n}\nvar f1 = F1();\nvar a = 200;\nf1(); //100\n```\n\n## 闭包\n\n闭包的定义非常简单：函数 A 返回一个函数 B，并且函数 B 中使用函数 A 中的变量，函数 B 被称为闭包。\n\n```javascript\nfunction A() {\n  let a = 1;\n  function B() {\n    console.log(a);\n  }\n  return B;\n}\n```\n\n你是否会疑惑为什么函数 A 已经弹出调用栈了，为什么函数 B 还能引用函数 A 中的变量，因为函数 A 中的变量这时候是存储在堆上的。现在的 JS 引擎可以通过逃逸分析辨别出那些变量需要存储在堆上，哪些需要存储在栈上。\n\n创建闭包最常见的方式就是在一个函数内部创建另一个函数。通常，函数的作用域及其所有变量都会在函数执行结束后被销毁。但是，在创建了一个闭包以后，这个函数的作用域就会一直保存到闭包不存在为止。\n\n```javascript\nfunction test() {\n  for (var i = 0; i < 4; i++) {\n    console.log('i:' + i);\n    (function(e) {\n      setTimeout(function() {\n        console.log(e);\n      }, 0);\n    })(i);\n  }\n}\ntest(); //i:0 => i:1 => i:2=> i:3=>  0 => 1=> 2 => 3\n```\n\n循环当中，匿名函数会立即执行，并且会将循环当前的 i 作为参数传入，将其作为当前匿名函数中的形参 e 的指向，即会保存对 i 的引用，它是不会被循环改变的。\n\n```javascript\nfunction makeAdder(x) {\n  console.log('x:' + x);\n  return function(y) {\n    console.log('y:' + y);\n    return x + y;\n  };\n}\n\nvar add5 = makeAdder(5);\n//x:5 undefined\nadd5;\n//f(y){  console.log('y:' + y) return x + y}\nvar add10 = makeAdder(10);\n\nconsole.log(add5(2)); // y:2 => 7\nconsole.log(add10(2)); // 12\n\n// 释放对闭包的引用\nadd5 = null;\nadd10 = null;\n```\n\nadd5 和 add10 都是闭包。他们共享相同的函数定义，但是保存了不同的环境。在 add5 中，x 为 5，在 add10 中，x 则为 10 ，最后通过 null 释放对闭包的引用。\n\n在 javascript 中，如果一个对象不再被引用，那么这个对象就会被垃圾回收机制回收； 如果两个对象互相引用，而不再被第 3 者所引用，那么这两个互相引用的对象也会被回收。\n\n**闭包只能取得包含函数中任何变量的最后一个值，这是因为闭包所保存的是整个变量对象，而不是某个特殊的变量**\n\n```javascript\nfunction test() {\n  var arr = [];\n  for (var i = 0; i < 10; i++) {\n    //作用域1\n    arr[i] = function() {\n      //作用域2 声明arr[]()\n      return i;\n    };\n  }\n  for (var a = 0; a < 10; a++) {\n    console.log(arr[a]());\n  }\n}\ntest();\n// 毫无疑问连续打印 10 个 10。因为在for循环中 a[i] 为一个函数声明\n//1.执行完for之后，在for作用域中i的值为10\n```\n\n改动一下\n\n```javascript\nfunction test() {\n  var arr = [];\n  //块1作用域\n  for (let i = 0; i < 10; i++) {\n    //块2作用域\n    arr[i] = function() {\n      //块3作用域\n      return i;\n    };\n  }\n  //块1作用域\n  for (var a = 0; a < 10; a++) {\n    console.log(arr[a]());\n  }\n}\ntest(); // 连续打印 0 到 9\n```\n\n**实现原因 :**\n\n- 当用 var 的时候 函数 2 作用域中没有 i 就向函数作用域 1 中去找，而执行到 `console.log(arr[a]())` 时 i 已经循环完毕，因此 i 全为 10。\n\n* 当使用 let 时，每次迭代 i 都被**重新声明**，即每层迭代会生成一个块作用域，并且变量 i 被定义为上一次结算的值。\n* var 是函数作用域，for 循环无论执行多少次，都是去最近的函数里面找，而不是块中找，所以只有一个 i，现在的 i 是 10。\n\n### 闭包中的 this 对象\n\n```javascript\nvar name = 'The Window';\n\nvar obj = {\n  name: 'My Object',\n\n  getName: function() {\n    return function() {\n      return this.name;\n    };\n  }\n};\n\nconsole.log(obj.getName()()); // The Window\n```\n\nobj.getName()() 实际上是在全局作用域中调用了匿名函数，this 指向了 window。这里要理解函数名与函数功能（或者称函数值）是分割开的，不要认为函数在哪里，其内部的 this 就指向哪里。匿名函数的执行环境具有全局性，因此其 this 对象通常指向 window。\n\n### 闭包的应用\n\n**应用闭包的主要场合是：设计私有的方法和变量。** 闭包的作用：\n\n- 访问函数的内部变量\n- 让被引用的变量值始终保存在内存中\n\n```javascript\nfunction fun(n, o) {\n  console.log(o);\n  return {\n    fun: function(m) {\n      return fun(m, n);\n    }\n  };\n}\n\nvar a = fun(0); // undefined\na.fun(1); // 0\na.fun(2); // 0\na.fun(3); // 0\n\nvar b = fun(0)\n  .fun(1)\n  .fun(2)\n  .fun(3); // undefined,0,1,2\n\nvar c = fun(0).fun(1); // undefined,0\nc.fun(2); // 1\nc.fun(3); // 1\n```\n\n```javascript\nfunction fn1() {\n  var a = 1;\n  return function() {\n    console.log(++a);\n  };\n}\n\nvar fn2 = fn1();\n\nfn2(); //输出2\n\nfn2(); //输出3\n```\n","slug":"闭包","published":1,"updated":"2019-07-25T03:54:14.147Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmejaest002xxcvr8rsrdqtt","content":"<p>闭包一直都理解的比较零散，而且在实际运中中并不是很熟练，在此记录一下，并且希望在以后能够更加深入。</p>\n<span id=\"more\"></span>\n<p>红宝书上对于闭包的定义：闭包是指有权访问另外一个函数作用域中的变量的函数的关键在于以下两点：</p>\n<ul>\n<li>是一个函数</li>\n<li>能访问另外一个函数作用域的变量（即使外部函数已经返回）仍能访问外部变量。</li>\n</ul>\n<p>闭包主要有 2 个应用场景：</p>\n<ul>\n<li>函数作为返回值</li>\n<li>函数作为参数传递</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">100</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f1 = F1();</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">200</span>;</span><br><span class=\"line\">f1(); <span class=\"comment\">//100</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><p>闭包的定义非常简单：函数 A 返回一个函数 B，并且函数 B 中使用函数 A 中的变量，函数 B 被称为闭包。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">B</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> B;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你是否会疑惑为什么函数 A 已经弹出调用栈了，为什么函数 B 还能引用函数 A 中的变量，因为函数 A 中的变量这时候是存储在堆上的。现在的 JS 引擎可以通过逃逸分析辨别出那些变量需要存储在堆上，哪些需要存储在栈上。</p>\n<p>创建闭包最常见的方式就是在一个函数内部创建另一个函数。通常，函数的作用域及其所有变量都会在函数执行结束后被销毁。但是，在创建了一个闭包以后，这个函数的作用域就会一直保存到闭包不存在为止。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i:&#x27;</span> + i);</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">      &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;)(i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(); <span class=\"comment\">//i:0 =&gt; i:1 =&gt; i:2=&gt; i:3=&gt;  0 =&gt; 1=&gt; 2 =&gt; 3</span></span><br></pre></td></tr></table></figure>\n\n<p>循环当中，匿名函数会立即执行，并且会将循环当前的 i 作为参数传入，将其作为当前匿名函数中的形参 e 的指向，即会保存对 i 的引用，它是不会被循环改变的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeAdder</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;x:&#x27;</span> + x);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;y:&#x27;</span> + y);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> add5 = makeAdder(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"comment\">//x:5 undefined</span></span><br><span class=\"line\">add5;</span><br><span class=\"line\"><span class=\"comment\">//f(y)&#123;  console.log(&#x27;y:&#x27; + y) return x + y&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> add10 = makeAdder(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(add5(<span class=\"number\">2</span>)); <span class=\"comment\">// y:2 =&gt; 7</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(add10(<span class=\"number\">2</span>)); <span class=\"comment\">// 12</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 释放对闭包的引用</span></span><br><span class=\"line\">add5 = <span class=\"literal\">null</span>;</span><br><span class=\"line\">add10 = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n\n<p>add5 和 add10 都是闭包。他们共享相同的函数定义，但是保存了不同的环境。在 add5 中，x 为 5，在 add10 中，x 则为 10 ，最后通过 null 释放对闭包的引用。</p>\n<p>在 javascript 中，如果一个对象不再被引用，那么这个对象就会被垃圾回收机制回收； 如果两个对象互相引用，而不再被第 3 者所引用，那么这两个互相引用的对象也会被回收。</p>\n<p><strong>闭包只能取得包含函数中任何变量的最后一个值，这是因为闭包所保存的是整个变量对象，而不是某个特殊的变量</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//作用域1</span></span><br><span class=\"line\">    arr[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//作用域2 声明arr[]()</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> a = <span class=\"number\">0</span>; a &lt; <span class=\"number\">10</span>; a++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arr[a]());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test();</span><br><span class=\"line\"><span class=\"comment\">// 毫无疑问连续打印 10 个 10。因为在for循环中 a[i] 为一个函数声明</span></span><br><span class=\"line\"><span class=\"comment\">//1.执行完for之后，在for作用域中i的值为10</span></span><br></pre></td></tr></table></figure>\n\n<p>改动一下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">  <span class=\"comment\">//块1作用域</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//块2作用域</span></span><br><span class=\"line\">    arr[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//块3作用域</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//块1作用域</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> a = <span class=\"number\">0</span>; a &lt; <span class=\"number\">10</span>; a++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arr[a]());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(); <span class=\"comment\">// 连续打印 0 到 9</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>实现原因 :</strong></p>\n<ul>\n<li>当用 var 的时候 函数 2 作用域中没有 i 就向函数作用域 1 中去找，而执行到 <code>console.log(arr[a]())</code> 时 i 已经循环完毕，因此 i 全为 10。</li>\n</ul>\n<ul>\n<li>当使用 let 时，每次迭代 i 都被<strong>重新声明</strong>，即每层迭代会生成一个块作用域，并且变量 i 被定义为上一次结算的值。</li>\n<li>var 是函数作用域，for 循环无论执行多少次，都是去最近的函数里面找，而不是块中找，所以只有一个 i，现在的 i 是 10。</li>\n</ul>\n<h3 id=\"闭包中的-this-对象\"><a href=\"#闭包中的-this-对象\" class=\"headerlink\" title=\"闭包中的 this 对象\"></a>闭包中的 this 对象</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;The Window&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;My Object&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  getName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.getName()()); <span class=\"comment\">// The Window</span></span><br></pre></td></tr></table></figure>\n\n<p>obj.getName()() 实际上是在全局作用域中调用了匿名函数，this 指向了 window。这里要理解函数名与函数功能（或者称函数值）是分割开的，不要认为函数在哪里，其内部的 this 就指向哪里。匿名函数的执行环境具有全局性，因此其 this 对象通常指向 window。</p>\n<h3 id=\"闭包的应用\"><a href=\"#闭包的应用\" class=\"headerlink\" title=\"闭包的应用\"></a>闭包的应用</h3><p><strong>应用闭包的主要场合是：设计私有的方法和变量。</strong> 闭包的作用：</p>\n<ul>\n<li>访问函数的内部变量</li>\n<li>让被引用的变量值始终保存在内存中</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\">n, o</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(o);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    fun: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">m</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> fun(m, n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = fun(<span class=\"number\">0</span>); <span class=\"comment\">// undefined</span></span><br><span class=\"line\">a.fun(<span class=\"number\">1</span>); <span class=\"comment\">// 0</span></span><br><span class=\"line\">a.fun(<span class=\"number\">2</span>); <span class=\"comment\">// 0</span></span><br><span class=\"line\">a.fun(<span class=\"number\">3</span>); <span class=\"comment\">// 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = fun(<span class=\"number\">0</span>)</span><br><span class=\"line\">  .fun(<span class=\"number\">1</span>)</span><br><span class=\"line\">  .fun(<span class=\"number\">2</span>)</span><br><span class=\"line\">  .fun(<span class=\"number\">3</span>); <span class=\"comment\">// undefined,0,1,2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = fun(<span class=\"number\">0</span>).fun(<span class=\"number\">1</span>); <span class=\"comment\">// undefined,0</span></span><br><span class=\"line\">c.fun(<span class=\"number\">2</span>); <span class=\"comment\">// 1</span></span><br><span class=\"line\">c.fun(<span class=\"number\">3</span>); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(++a);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn2 = fn1();</span><br><span class=\"line\"></span><br><span class=\"line\">fn2(); <span class=\"comment\">//输出2</span></span><br><span class=\"line\"></span><br><span class=\"line\">fn2(); <span class=\"comment\">//输出3</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>闭包一直都理解的比较零散，而且在实际运中中并不是很熟练，在此记录一下，并且希望在以后能够更加深入。</p>","more":"<p>红宝书上对于闭包的定义：闭包是指有权访问另外一个函数作用域中的变量的函数的关键在于以下两点：</p>\n<ul>\n<li>是一个函数</li>\n<li>能访问另外一个函数作用域的变量（即使外部函数已经返回）仍能访问外部变量。</li>\n</ul>\n<p>闭包主要有 2 个应用场景：</p>\n<ul>\n<li>函数作为返回值</li>\n<li>函数作为参数传递</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">100</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f1 = F1();</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">200</span>;</span><br><span class=\"line\">f1(); <span class=\"comment\">//100</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><p>闭包的定义非常简单：函数 A 返回一个函数 B，并且函数 B 中使用函数 A 中的变量，函数 B 被称为闭包。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">B</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> B;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你是否会疑惑为什么函数 A 已经弹出调用栈了，为什么函数 B 还能引用函数 A 中的变量，因为函数 A 中的变量这时候是存储在堆上的。现在的 JS 引擎可以通过逃逸分析辨别出那些变量需要存储在堆上，哪些需要存储在栈上。</p>\n<p>创建闭包最常见的方式就是在一个函数内部创建另一个函数。通常，函数的作用域及其所有变量都会在函数执行结束后被销毁。但是，在创建了一个闭包以后，这个函数的作用域就会一直保存到闭包不存在为止。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i:&#x27;</span> + i);</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">      &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;)(i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(); <span class=\"comment\">//i:0 =&gt; i:1 =&gt; i:2=&gt; i:3=&gt;  0 =&gt; 1=&gt; 2 =&gt; 3</span></span><br></pre></td></tr></table></figure>\n\n<p>循环当中，匿名函数会立即执行，并且会将循环当前的 i 作为参数传入，将其作为当前匿名函数中的形参 e 的指向，即会保存对 i 的引用，它是不会被循环改变的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeAdder</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;x:&#x27;</span> + x);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;y:&#x27;</span> + y);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> add5 = makeAdder(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"comment\">//x:5 undefined</span></span><br><span class=\"line\">add5;</span><br><span class=\"line\"><span class=\"comment\">//f(y)&#123;  console.log(&#x27;y:&#x27; + y) return x + y&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> add10 = makeAdder(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(add5(<span class=\"number\">2</span>)); <span class=\"comment\">// y:2 =&gt; 7</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(add10(<span class=\"number\">2</span>)); <span class=\"comment\">// 12</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 释放对闭包的引用</span></span><br><span class=\"line\">add5 = <span class=\"literal\">null</span>;</span><br><span class=\"line\">add10 = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n\n<p>add5 和 add10 都是闭包。他们共享相同的函数定义，但是保存了不同的环境。在 add5 中，x 为 5，在 add10 中，x 则为 10 ，最后通过 null 释放对闭包的引用。</p>\n<p>在 javascript 中，如果一个对象不再被引用，那么这个对象就会被垃圾回收机制回收； 如果两个对象互相引用，而不再被第 3 者所引用，那么这两个互相引用的对象也会被回收。</p>\n<p><strong>闭包只能取得包含函数中任何变量的最后一个值，这是因为闭包所保存的是整个变量对象，而不是某个特殊的变量</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//作用域1</span></span><br><span class=\"line\">    arr[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//作用域2 声明arr[]()</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> a = <span class=\"number\">0</span>; a &lt; <span class=\"number\">10</span>; a++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arr[a]());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test();</span><br><span class=\"line\"><span class=\"comment\">// 毫无疑问连续打印 10 个 10。因为在for循环中 a[i] 为一个函数声明</span></span><br><span class=\"line\"><span class=\"comment\">//1.执行完for之后，在for作用域中i的值为10</span></span><br></pre></td></tr></table></figure>\n\n<p>改动一下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">  <span class=\"comment\">//块1作用域</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//块2作用域</span></span><br><span class=\"line\">    arr[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//块3作用域</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//块1作用域</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> a = <span class=\"number\">0</span>; a &lt; <span class=\"number\">10</span>; a++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arr[a]());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(); <span class=\"comment\">// 连续打印 0 到 9</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>实现原因 :</strong></p>\n<ul>\n<li>当用 var 的时候 函数 2 作用域中没有 i 就向函数作用域 1 中去找，而执行到 <code>console.log(arr[a]())</code> 时 i 已经循环完毕，因此 i 全为 10。</li>\n</ul>\n<ul>\n<li>当使用 let 时，每次迭代 i 都被<strong>重新声明</strong>，即每层迭代会生成一个块作用域，并且变量 i 被定义为上一次结算的值。</li>\n<li>var 是函数作用域，for 循环无论执行多少次，都是去最近的函数里面找，而不是块中找，所以只有一个 i，现在的 i 是 10。</li>\n</ul>\n<h3 id=\"闭包中的-this-对象\"><a href=\"#闭包中的-this-对象\" class=\"headerlink\" title=\"闭包中的 this 对象\"></a>闭包中的 this 对象</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;The Window&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;My Object&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  getName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.getName()()); <span class=\"comment\">// The Window</span></span><br></pre></td></tr></table></figure>\n\n<p>obj.getName()() 实际上是在全局作用域中调用了匿名函数，this 指向了 window。这里要理解函数名与函数功能（或者称函数值）是分割开的，不要认为函数在哪里，其内部的 this 就指向哪里。匿名函数的执行环境具有全局性，因此其 this 对象通常指向 window。</p>\n<h3 id=\"闭包的应用\"><a href=\"#闭包的应用\" class=\"headerlink\" title=\"闭包的应用\"></a>闭包的应用</h3><p><strong>应用闭包的主要场合是：设计私有的方法和变量。</strong> 闭包的作用：</p>\n<ul>\n<li>访问函数的内部变量</li>\n<li>让被引用的变量值始终保存在内存中</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\">n, o</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(o);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    fun: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">m</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> fun(m, n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = fun(<span class=\"number\">0</span>); <span class=\"comment\">// undefined</span></span><br><span class=\"line\">a.fun(<span class=\"number\">1</span>); <span class=\"comment\">// 0</span></span><br><span class=\"line\">a.fun(<span class=\"number\">2</span>); <span class=\"comment\">// 0</span></span><br><span class=\"line\">a.fun(<span class=\"number\">3</span>); <span class=\"comment\">// 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = fun(<span class=\"number\">0</span>)</span><br><span class=\"line\">  .fun(<span class=\"number\">1</span>)</span><br><span class=\"line\">  .fun(<span class=\"number\">2</span>)</span><br><span class=\"line\">  .fun(<span class=\"number\">3</span>); <span class=\"comment\">// undefined,0,1,2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = fun(<span class=\"number\">0</span>).fun(<span class=\"number\">1</span>); <span class=\"comment\">// undefined,0</span></span><br><span class=\"line\">c.fun(<span class=\"number\">2</span>); <span class=\"comment\">// 1</span></span><br><span class=\"line\">c.fun(<span class=\"number\">3</span>); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(++a);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn2 = fn1();</span><br><span class=\"line\"></span><br><span class=\"line\">fn2(); <span class=\"comment\">//输出2</span></span><br><span class=\"line\"></span><br><span class=\"line\">fn2(); <span class=\"comment\">//输出3</span></span><br></pre></td></tr></table></figure>"},{"title":"面试积累","date":"2018-03-08T10:21:15.000Z","_content":"\n总结一些面试及笔试题\n\n<!--more-->\n\n## CSS 有哪些样式可以给子元素继承\n\n- 可继承的:`font-size`,`font-weight`,`line-height`,`color`,`cursor` 等 。\n- 不可继承的一般是会改变盒子模型的:`display`,`margin`、`border`、`padding`、`height` 等。\n\n## box-sizing 常用的属性有哪些? 分别有啥作用?\n\n这个 css 主要是改变盒子模型的大小。有两个值:`content-box`(标准模型),`border-box`（怪异模型）\n\n```html\n<style>\n  .test {\n    box-sizing: content-box;\n    border: 5px solid #f00;\n    padding: 5px;\n    width: 100px;\n    height: 100px;\n  }\n</style>\n<div class=\"test\"></div>\n<!--\ncontent-box的计算公式会把宽高的定义指向 content,border和 padding 另外计算,\n也就是说 content + padding + border = 120px(盒子实际大小)\n\n而border-box的计算公式是总的大小涵盖这三者, content 会缩小,来让给另外两者\ncontent(80px) + padding(5*2px) + border(5*2px) = 100px\n-->\n```\n\n## 说说样式权重的优先级;\n\n`!important` > `行内样式` > `id` > `class` > `tag`\n\n## 对数组 ['2018-03-05', '2013-06-12','2019-03-12','2018-03-05','2014-02-22'] 去重且排序\n\n```javascript\n//很好理解, Set 具有值唯一性(但不是所有值,等会我抛出我的另外一篇文章)\n// 结合...解构,可以把可迭代(比如 arguments/nodelist 等)的转为数组\n// sort 里面传入 两个值比较,返回-1和1是因为1代表这个数大排后(相对),-1代表小(相对),0为相等\n\nlet arr = [\n  ...new Set([\n    '2018-03-05',\n    '2013-06-12',\n    '2019-03-12',\n    '2018-03-05',\n    '2014-02-22'\n  ])\n].sort(function(a, b) {\n  return a < b ? -1 : 1; // 这里返回的是升序的,降序改下返回值就好了.所以是相对\n});\n\n// [\"2013-06-12\", \"2014-02-22\", \"2018-03-05\", \"2019-03-12\"]\n```\n\n## 对数组[1,2,3,4,5,'6',7,'8','a','b','z']进行乱序\n\n```javascript\n// 我们依旧可以用上面的 sort 的原理实现乱序\n\nlet tempArr = [1, 2, 3, 4, 5, '6', 7, '8', 'a', 'b', 'z'].sort(function() {\n  return Math.random() > 0.5 ? -1 : 1;\n});\n\n// 因为里面有随机数,所以答案没有标准答案,我这边跑了一次是输出这个\n//[\"6\", \"z\", 3, \"b\", 5, 2, 7, \"8\", \"a\", 1, 4]\n```\n\n##　 求[1, 10, 11, -1,'-5',12, 13, 14, 15, 2, 3, 4, 7, 8, 9]内最大值与最小值之差\n\n```javascript\n// 来一个很粗糙的版本,只当传入是数组且可以隐性转为数字的\nfunction MaxMinPlus(arr) {\n  // 返回最大值与最小值之差\n  return Array.isArray(arr)\n    ? Math.max.apply(Math, arr) - Math.min.apply(Math, arr)\n    : console.log('传入的不是数组亦或者未能解决的错误');\n}\n\n// 结果是 20\n\n// 若是要完善的话,要考虑传入的是非数组,\n//传入字符串的时候要判断,然后切割为数组..\n// 都要考虑进去代码量不短\n```\n\n## JS 的作用域是什么?有什么特别之处么\n\n作用域就是有它自身的上下文区域(比如函数内),内部会有变量声明提升,函数声明提升这些;\n\n函数声明提升优于变量声明提升..\n\n作用域有全局作用域和块级作用域(局部,比如用 let 或者单纯花括号的);\n\n作用域会影响 this 的指向\n\n###  作用域链\n当访问一个变量时，解释器会首先在当前作用域查找标示符，如果没有找到，就去父作用域找，直到找到该变量的标示符或者不在父作用域中，这就是作用域链\n\n作用域链和原型继承查找时的区别：如果去查找一个普通对象的属性，但是在当前对象和其原型中都找不到时，会返回undefined；但查找的属性在作用域链中不存在的话就会抛出ReferenceError。\n\n作用域链的顶端是全局对象，在全局环境中定义的变量就会绑定到全局对象中。\n\n## javascript 里面的继承怎么实现，如何避免原型链上面的对象共享\n\n- ES5:寄生组合式继承:通过借用构造函数来继承属性和原型链来实现子继承父。\n\n```javascript\nfunction ParentClass(name) {\n  this.name = name;\n}\nParentClass.prototype.sayHello = function() {\n  console.log(\"I'm parent!\" + this.name);\n};\nfunction SubClass(name, age) {\n  //若是要多个参数可以用apply 结合 ...解构\n  ParentClass.call(this, name);\n  this.age = age;\n}\nSubClass.prototype = Object.create(ParentClass.prototype);\nSubClass.prototype.constructor = SubClass;\nSubClass.prototype.sayChildHello = function(name) {\n  console.log(\"I'm child \" + this.name);\n};\n\nlet testA = new SubClass('CRPER');\n\n// Object.create()的polyfill\n/*\n    function pureObject(o){\n        //定义了一个临时构造函数\n         function F() {}\n         //将这个临时构造函数的原型指向了传入进来的对象。\n         F.prototype = obj;\n         //返回这个构造函数的一个实例。该实例拥有obj的所有属性和方法。\n         //因为该实例的原型是obj对象。\n         return new F();\n    }\n    */\n```\n\n- ES6: 其实就是 ES5 的语法糖,不过可读性很强\n\n```javascript\nclass ParentClass {\n  constructor(name) {\n    this.name = name;\n  }\n  sayHello() {\n    console.log(\"I'm parent!\" + this.name);\n  }\n}\n\nclass SubClass extends ParentClass {\n  constructor(name) {\n    super(name);\n  }\n  sayChildHello() {\n    console.log(\"I'm child \" + this.name);\n  }\n  // 重新声明父类同名方法会覆写,ES5的话就是直接操作自己的原型链上\n  sayHello() {\n    console.log(\"override parent method !,I'm sayHello Method\");\n  }\n}\n\nlet testA = new SubClass('CRPER');\n```\n\n## 渲染海量数据且给每条内容添加监听事件\n\n现在浏览器提供了`requestAnimationFrame`API 来解决非常耗时的代码段对渲染阻塞问题。\n\n```javascript\n(() => {\n  const ndContainer = document.getElementById('js-list');\n  if (!ndContainer) {\n    return;\n  }\n\n  const total = 30000;\n  const batchSize = 4; // 每批插入的节点次数，越大越卡\n  const batchCount = total / batchSize; // 需要批量处理多少次\n  let batchDone = 0; // 已经完成的批处理个数\n\n  function appendItems() {\n    //这是掘金答案，可是个人觉得innerHTML会更好，经测试是真的更好\n    const fragment = document.createDocumentFragment();\n    for (let i = 0; i < batchSize; i++) {\n      const ndItem = document.createElement('li');\n      ndItem.innerText = batchDone * batchSize + i + 1;\n      fragment.appendChild(ndItem);\n    }\n\n    // 每次批处理只修改 1 次 DOM\n    ndContainer.appendChild(fragment);\n\n    batchDone += 1;\n    doBatchAppend();\n  }\n\n  function doBatchAppend() {\n    if (batchDone < batchCount) {\n      window.requestAnimationFrame(appendItems);\n    }\n  }\n\n  // kickoff\n  doBatchAppend();\n\n  ndContainer.addEventListener('click', function(e) {\n    const target = e.target;\n    if (target.tagName === 'LI') {\n      alert(target.innerHTML);\n    }\n  });\n})();\n```\n\n## vue 中 watch 和计算属性的区别\n\n- 计算属性是自动监听依赖值的变化，从而动态返回内容，监听到值变化时，可以出发一次回调，并做一些事情，若是仅需要动态值就使用计算属性\n- 需要知道值改变后执行业务逻辑，才用 watch\n\n## 为什么通常在发送数据买点请求的时候使用的是1*1像素的透明gif图片。\n\n1. 没有跨域问题，一般这种数据上报，代码要写通用的\n2. 不会阻塞页面加载，影响用户体验，只要 new image 对象就好了\n3. 在所有图片中，体积最小\n4. 相比XMLHttpRequest 对象发送GET请求，性能上更好。\n\n另外该脚本的位置一般放在页面最后以免阻塞页面渲染,并且一般情况下也不需要append到DOM中。通过它的onerror和onload事件来检测发送状态\n\n```javascript\n\n var thisPage = location.href;\n var referringPage = (document.referrer) ? document.referrer : \"none\";\n var beacon = new Image();\n beacon.src = \"http://www.example.com/logger/beacon.gif?page=\" + encodeURI(thisPage)\n + \"&ref=\" + encodeURI(referringPage);\n\n```\n\n## input 搜索如何防抖，如何处理中文输入\n\n```javascript\nvar isInputZh = false;\nvar search = document.querySelector('input');\n\nsearch.addEventListener('compositionstart', function (e) {\n  isInputZh = true;\n}, false);\nsearch.addEventListener('compositionend', function (e) {\n  isInputZh = false;\n\n  doSomething(search.value);\n}, false);\nsearch.addEventListener('input', function (e) {\n  if (isInputZh) return;\n  var value = this.value;\n\n  doSomething(value);\n}, false);\n```\n有兼容问题","source":"_posts/面试积累.md","raw":"---\ntitle: 面试积累\ndate: 2018-03-08 18:21:15\ncategories: JavaScript\n---\n\n总结一些面试及笔试题\n\n<!--more-->\n\n## CSS 有哪些样式可以给子元素继承\n\n- 可继承的:`font-size`,`font-weight`,`line-height`,`color`,`cursor` 等 。\n- 不可继承的一般是会改变盒子模型的:`display`,`margin`、`border`、`padding`、`height` 等。\n\n## box-sizing 常用的属性有哪些? 分别有啥作用?\n\n这个 css 主要是改变盒子模型的大小。有两个值:`content-box`(标准模型),`border-box`（怪异模型）\n\n```html\n<style>\n  .test {\n    box-sizing: content-box;\n    border: 5px solid #f00;\n    padding: 5px;\n    width: 100px;\n    height: 100px;\n  }\n</style>\n<div class=\"test\"></div>\n<!--\ncontent-box的计算公式会把宽高的定义指向 content,border和 padding 另外计算,\n也就是说 content + padding + border = 120px(盒子实际大小)\n\n而border-box的计算公式是总的大小涵盖这三者, content 会缩小,来让给另外两者\ncontent(80px) + padding(5*2px) + border(5*2px) = 100px\n-->\n```\n\n## 说说样式权重的优先级;\n\n`!important` > `行内样式` > `id` > `class` > `tag`\n\n## 对数组 ['2018-03-05', '2013-06-12','2019-03-12','2018-03-05','2014-02-22'] 去重且排序\n\n```javascript\n//很好理解, Set 具有值唯一性(但不是所有值,等会我抛出我的另外一篇文章)\n// 结合...解构,可以把可迭代(比如 arguments/nodelist 等)的转为数组\n// sort 里面传入 两个值比较,返回-1和1是因为1代表这个数大排后(相对),-1代表小(相对),0为相等\n\nlet arr = [\n  ...new Set([\n    '2018-03-05',\n    '2013-06-12',\n    '2019-03-12',\n    '2018-03-05',\n    '2014-02-22'\n  ])\n].sort(function(a, b) {\n  return a < b ? -1 : 1; // 这里返回的是升序的,降序改下返回值就好了.所以是相对\n});\n\n// [\"2013-06-12\", \"2014-02-22\", \"2018-03-05\", \"2019-03-12\"]\n```\n\n## 对数组[1,2,3,4,5,'6',7,'8','a','b','z']进行乱序\n\n```javascript\n// 我们依旧可以用上面的 sort 的原理实现乱序\n\nlet tempArr = [1, 2, 3, 4, 5, '6', 7, '8', 'a', 'b', 'z'].sort(function() {\n  return Math.random() > 0.5 ? -1 : 1;\n});\n\n// 因为里面有随机数,所以答案没有标准答案,我这边跑了一次是输出这个\n//[\"6\", \"z\", 3, \"b\", 5, 2, 7, \"8\", \"a\", 1, 4]\n```\n\n##　 求[1, 10, 11, -1,'-5',12, 13, 14, 15, 2, 3, 4, 7, 8, 9]内最大值与最小值之差\n\n```javascript\n// 来一个很粗糙的版本,只当传入是数组且可以隐性转为数字的\nfunction MaxMinPlus(arr) {\n  // 返回最大值与最小值之差\n  return Array.isArray(arr)\n    ? Math.max.apply(Math, arr) - Math.min.apply(Math, arr)\n    : console.log('传入的不是数组亦或者未能解决的错误');\n}\n\n// 结果是 20\n\n// 若是要完善的话,要考虑传入的是非数组,\n//传入字符串的时候要判断,然后切割为数组..\n// 都要考虑进去代码量不短\n```\n\n## JS 的作用域是什么?有什么特别之处么\n\n作用域就是有它自身的上下文区域(比如函数内),内部会有变量声明提升,函数声明提升这些;\n\n函数声明提升优于变量声明提升..\n\n作用域有全局作用域和块级作用域(局部,比如用 let 或者单纯花括号的);\n\n作用域会影响 this 的指向\n\n###  作用域链\n当访问一个变量时，解释器会首先在当前作用域查找标示符，如果没有找到，就去父作用域找，直到找到该变量的标示符或者不在父作用域中，这就是作用域链\n\n作用域链和原型继承查找时的区别：如果去查找一个普通对象的属性，但是在当前对象和其原型中都找不到时，会返回undefined；但查找的属性在作用域链中不存在的话就会抛出ReferenceError。\n\n作用域链的顶端是全局对象，在全局环境中定义的变量就会绑定到全局对象中。\n\n## javascript 里面的继承怎么实现，如何避免原型链上面的对象共享\n\n- ES5:寄生组合式继承:通过借用构造函数来继承属性和原型链来实现子继承父。\n\n```javascript\nfunction ParentClass(name) {\n  this.name = name;\n}\nParentClass.prototype.sayHello = function() {\n  console.log(\"I'm parent!\" + this.name);\n};\nfunction SubClass(name, age) {\n  //若是要多个参数可以用apply 结合 ...解构\n  ParentClass.call(this, name);\n  this.age = age;\n}\nSubClass.prototype = Object.create(ParentClass.prototype);\nSubClass.prototype.constructor = SubClass;\nSubClass.prototype.sayChildHello = function(name) {\n  console.log(\"I'm child \" + this.name);\n};\n\nlet testA = new SubClass('CRPER');\n\n// Object.create()的polyfill\n/*\n    function pureObject(o){\n        //定义了一个临时构造函数\n         function F() {}\n         //将这个临时构造函数的原型指向了传入进来的对象。\n         F.prototype = obj;\n         //返回这个构造函数的一个实例。该实例拥有obj的所有属性和方法。\n         //因为该实例的原型是obj对象。\n         return new F();\n    }\n    */\n```\n\n- ES6: 其实就是 ES5 的语法糖,不过可读性很强\n\n```javascript\nclass ParentClass {\n  constructor(name) {\n    this.name = name;\n  }\n  sayHello() {\n    console.log(\"I'm parent!\" + this.name);\n  }\n}\n\nclass SubClass extends ParentClass {\n  constructor(name) {\n    super(name);\n  }\n  sayChildHello() {\n    console.log(\"I'm child \" + this.name);\n  }\n  // 重新声明父类同名方法会覆写,ES5的话就是直接操作自己的原型链上\n  sayHello() {\n    console.log(\"override parent method !,I'm sayHello Method\");\n  }\n}\n\nlet testA = new SubClass('CRPER');\n```\n\n## 渲染海量数据且给每条内容添加监听事件\n\n现在浏览器提供了`requestAnimationFrame`API 来解决非常耗时的代码段对渲染阻塞问题。\n\n```javascript\n(() => {\n  const ndContainer = document.getElementById('js-list');\n  if (!ndContainer) {\n    return;\n  }\n\n  const total = 30000;\n  const batchSize = 4; // 每批插入的节点次数，越大越卡\n  const batchCount = total / batchSize; // 需要批量处理多少次\n  let batchDone = 0; // 已经完成的批处理个数\n\n  function appendItems() {\n    //这是掘金答案，可是个人觉得innerHTML会更好，经测试是真的更好\n    const fragment = document.createDocumentFragment();\n    for (let i = 0; i < batchSize; i++) {\n      const ndItem = document.createElement('li');\n      ndItem.innerText = batchDone * batchSize + i + 1;\n      fragment.appendChild(ndItem);\n    }\n\n    // 每次批处理只修改 1 次 DOM\n    ndContainer.appendChild(fragment);\n\n    batchDone += 1;\n    doBatchAppend();\n  }\n\n  function doBatchAppend() {\n    if (batchDone < batchCount) {\n      window.requestAnimationFrame(appendItems);\n    }\n  }\n\n  // kickoff\n  doBatchAppend();\n\n  ndContainer.addEventListener('click', function(e) {\n    const target = e.target;\n    if (target.tagName === 'LI') {\n      alert(target.innerHTML);\n    }\n  });\n})();\n```\n\n## vue 中 watch 和计算属性的区别\n\n- 计算属性是自动监听依赖值的变化，从而动态返回内容，监听到值变化时，可以出发一次回调，并做一些事情，若是仅需要动态值就使用计算属性\n- 需要知道值改变后执行业务逻辑，才用 watch\n\n## 为什么通常在发送数据买点请求的时候使用的是1*1像素的透明gif图片。\n\n1. 没有跨域问题，一般这种数据上报，代码要写通用的\n2. 不会阻塞页面加载，影响用户体验，只要 new image 对象就好了\n3. 在所有图片中，体积最小\n4. 相比XMLHttpRequest 对象发送GET请求，性能上更好。\n\n另外该脚本的位置一般放在页面最后以免阻塞页面渲染,并且一般情况下也不需要append到DOM中。通过它的onerror和onload事件来检测发送状态\n\n```javascript\n\n var thisPage = location.href;\n var referringPage = (document.referrer) ? document.referrer : \"none\";\n var beacon = new Image();\n beacon.src = \"http://www.example.com/logger/beacon.gif?page=\" + encodeURI(thisPage)\n + \"&ref=\" + encodeURI(referringPage);\n\n```\n\n## input 搜索如何防抖，如何处理中文输入\n\n```javascript\nvar isInputZh = false;\nvar search = document.querySelector('input');\n\nsearch.addEventListener('compositionstart', function (e) {\n  isInputZh = true;\n}, false);\nsearch.addEventListener('compositionend', function (e) {\n  isInputZh = false;\n\n  doSomething(search.value);\n}, false);\nsearch.addEventListener('input', function (e) {\n  if (isInputZh) return;\n  var value = this.value;\n\n  doSomething(value);\n}, false);\n```\n有兼容问题","slug":"面试积累","published":1,"updated":"2021-02-02T07:18:05.346Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmejaest002zxcvray0jb4a4","content":"<p>总结一些面试及笔试题</p>\n<span id=\"more\"></span>\n\n<h2 id=\"CSS-有哪些样式可以给子元素继承\"><a href=\"#CSS-有哪些样式可以给子元素继承\" class=\"headerlink\" title=\"CSS 有哪些样式可以给子元素继承\"></a>CSS 有哪些样式可以给子元素继承</h2><ul>\n<li>可继承的:<code>font-size</code>,<code>font-weight</code>,<code>line-height</code>,<code>color</code>,<code>cursor</code> 等 。</li>\n<li>不可继承的一般是会改变盒子模型的:<code>display</code>,<code>margin</code>、<code>border</code>、<code>padding</code>、<code>height</code> 等。</li>\n</ul>\n<h2 id=\"box-sizing-常用的属性有哪些-分别有啥作用\"><a href=\"#box-sizing-常用的属性有哪些-分别有啥作用\" class=\"headerlink\" title=\"box-sizing 常用的属性有哪些? 分别有啥作用?\"></a>box-sizing 常用的属性有哪些? 分别有啥作用?</h2><p>这个 css 主要是改变盒子模型的大小。有两个值:<code>content-box</code>(标准模型),<code>border-box</code>（怪异模型）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  .test &#123;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"attribute\">box-sizing</span>: content-box;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"attribute\">border</span>: <span class=\"number\">5px</span> solid <span class=\"number\">#f00</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"attribute\">padding</span>: <span class=\"number\">5px</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;test&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">content-box的计算公式会把宽高的定义指向 content,border和 padding 另外计算,</span></span><br><span class=\"line\"><span class=\"comment\">也就是说 content + padding + border = 120px(盒子实际大小)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">而border-box的计算公式是总的大小涵盖这三者, content 会缩小,来让给另外两者</span></span><br><span class=\"line\"><span class=\"comment\">content(80px) + padding(5*2px) + border(5*2px) = 100px</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"说说样式权重的优先级\"><a href=\"#说说样式权重的优先级\" class=\"headerlink\" title=\"说说样式权重的优先级;\"></a>说说样式权重的优先级;</h2><p><code>!important</code> &gt; <code>行内样式</code> &gt; <code>id</code> &gt; <code>class</code> &gt; <code>tag</code></p>\n<h2 id=\"对数组-‘2018-03-05’-‘2013-06-12’-’2019-03-12’-’2018-03-05’-’2014-02-22’-去重且排序\"><a href=\"#对数组-‘2018-03-05’-‘2013-06-12’-’2019-03-12’-’2018-03-05’-’2014-02-22’-去重且排序\" class=\"headerlink\" title=\"对数组 [‘2018-03-05’, ‘2013-06-12’,’2019-03-12’,’2018-03-05’,’2014-02-22’] 去重且排序\"></a>对数组 [‘2018-03-05’, ‘2013-06-12’,’2019-03-12’,’2018-03-05’,’2014-02-22’] 去重且排序</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//很好理解, Set 具有值唯一性(但不是所有值,等会我抛出我的另外一篇文章)</span></span><br><span class=\"line\"><span class=\"comment\">// 结合...解构,可以把可迭代(比如 arguments/nodelist 等)的转为数组</span></span><br><span class=\"line\"><span class=\"comment\">// sort 里面传入 两个值比较,返回-1和1是因为1代表这个数大排后(相对),-1代表小(相对),0为相等</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [</span><br><span class=\"line\">  ...new <span class=\"built_in\">Set</span>([</span><br><span class=\"line\">    <span class=\"string\">&#x27;2018-03-05&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;2013-06-12&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;2019-03-12&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;2018-03-05&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;2014-02-22&#x27;</span></span><br><span class=\"line\">  ])</span><br><span class=\"line\">].sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a &lt; b ? -<span class=\"number\">1</span> : <span class=\"number\">1</span>; <span class=\"comment\">// 这里返回的是升序的,降序改下返回值就好了.所以是相对</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// [&quot;2013-06-12&quot;, &quot;2014-02-22&quot;, &quot;2018-03-05&quot;, &quot;2019-03-12&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对数组-1-2-3-4-5-’6’-7-’8’-’a’-’b’-’z’-进行乱序\"><a href=\"#对数组-1-2-3-4-5-’6’-7-’8’-’a’-’b’-’z’-进行乱序\" class=\"headerlink\" title=\"对数组[1,2,3,4,5,’6’,7,’8’,’a’,’b’,’z’]进行乱序\"></a>对数组[1,2,3,4,5,’6’,7,’8’,’a’,’b’,’z’]进行乱序</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 我们依旧可以用上面的 sort 的原理实现乱序</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> tempArr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"string\">&#x27;6&#x27;</span>, <span class=\"number\">7</span>, <span class=\"string\">&#x27;8&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;z&#x27;</span>].sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.random() &gt; <span class=\"number\">0.5</span> ? -<span class=\"number\">1</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 因为里面有随机数,所以答案没有标准答案,我这边跑了一次是输出这个</span></span><br><span class=\"line\"><span class=\"comment\">//[&quot;6&quot;, &quot;z&quot;, 3, &quot;b&quot;, 5, 2, 7, &quot;8&quot;, &quot;a&quot;, 1, 4]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"求-1-10-11-1-’-5’-12-13-14-15-2-3-4-7-8-9-内最大值与最小值之差\"><a href=\"#求-1-10-11-1-’-5’-12-13-14-15-2-3-4-7-8-9-内最大值与最小值之差\" class=\"headerlink\" title=\"求[1, 10, 11, -1,’-5’,12, 13, 14, 15, 2, 3, 4, 7, 8, 9]内最大值与最小值之差\"></a>求[1, 10, 11, -1,’-5’,12, 13, 14, 15, 2, 3, 4, 7, 8, 9]内最大值与最小值之差</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 来一个很粗糙的版本,只当传入是数组且可以隐性转为数字的</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MaxMinPlus</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 返回最大值与最小值之差</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.isArray(arr)</span><br><span class=\"line\">    ? <span class=\"built_in\">Math</span>.max.apply(<span class=\"built_in\">Math</span>, arr) - <span class=\"built_in\">Math</span>.min.apply(<span class=\"built_in\">Math</span>, arr)</span><br><span class=\"line\">    : <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;传入的不是数组亦或者未能解决的错误&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结果是 20</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 若是要完善的话,要考虑传入的是非数组,</span></span><br><span class=\"line\"><span class=\"comment\">//传入字符串的时候要判断,然后切割为数组..</span></span><br><span class=\"line\"><span class=\"comment\">// 都要考虑进去代码量不短</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JS-的作用域是什么-有什么特别之处么\"><a href=\"#JS-的作用域是什么-有什么特别之处么\" class=\"headerlink\" title=\"JS 的作用域是什么?有什么特别之处么\"></a>JS 的作用域是什么?有什么特别之处么</h2><p>作用域就是有它自身的上下文区域(比如函数内),内部会有变量声明提升,函数声明提升这些;</p>\n<p>函数声明提升优于变量声明提升..</p>\n<p>作用域有全局作用域和块级作用域(局部,比如用 let 或者单纯花括号的);</p>\n<p>作用域会影响 this 的指向</p>\n<h3 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h3><p>当访问一个变量时，解释器会首先在当前作用域查找标示符，如果没有找到，就去父作用域找，直到找到该变量的标示符或者不在父作用域中，这就是作用域链</p>\n<p>作用域链和原型继承查找时的区别：如果去查找一个普通对象的属性，但是在当前对象和其原型中都找不到时，会返回undefined；但查找的属性在作用域链中不存在的话就会抛出ReferenceError。</p>\n<p>作用域链的顶端是全局对象，在全局环境中定义的变量就会绑定到全局对象中。</p>\n<h2 id=\"javascript-里面的继承怎么实现，如何避免原型链上面的对象共享\"><a href=\"#javascript-里面的继承怎么实现，如何避免原型链上面的对象共享\" class=\"headerlink\" title=\"javascript 里面的继承怎么实现，如何避免原型链上面的对象共享\"></a>javascript 里面的继承怎么实现，如何避免原型链上面的对象共享</h2><ul>\n<li>ES5:寄生组合式继承:通过借用构造函数来继承属性和原型链来实现子继承父。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ParentClass</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ParentClass.prototype.sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;I&#x27;m parent!&quot;</span> + <span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubClass</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//若是要多个参数可以用apply 结合 ...解构</span></span><br><span class=\"line\">  ParentClass.call(<span class=\"built_in\">this</span>, name);</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SubClass.prototype = <span class=\"built_in\">Object</span>.create(ParentClass.prototype);</span><br><span class=\"line\">SubClass.prototype.constructor = SubClass;</span><br><span class=\"line\">SubClass.prototype.sayChildHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;I&#x27;m child &quot;</span> + <span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> testA = <span class=\"keyword\">new</span> SubClass(<span class=\"string\">&#x27;CRPER&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Object.create()的polyfill</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    function pureObject(o)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        //定义了一个临时构造函数</span></span><br><span class=\"line\"><span class=\"comment\">         function F() &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">         //将这个临时构造函数的原型指向了传入进来的对象。</span></span><br><span class=\"line\"><span class=\"comment\">         F.prototype = obj;</span></span><br><span class=\"line\"><span class=\"comment\">         //返回这个构造函数的一个实例。该实例拥有obj的所有属性和方法。</span></span><br><span class=\"line\"><span class=\"comment\">         //因为该实例的原型是obj对象。</span></span><br><span class=\"line\"><span class=\"comment\">         return new F();</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>ES6: 其实就是 ES5 的语法糖,不过可读性很强</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ParentClass</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;I&#x27;m parent!&quot;</span> + <span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubClass</span> <span class=\"keyword\">extends</span> <span class=\"title\">ParentClass</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">sayChildHello</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;I&#x27;m child &quot;</span> + <span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 重新声明父类同名方法会覆写,ES5的话就是直接操作自己的原型链上</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;override parent method !,I&#x27;m sayHello Method&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> testA = <span class=\"keyword\">new</span> SubClass(<span class=\"string\">&#x27;CRPER&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"渲染海量数据且给每条内容添加监听事件\"><a href=\"#渲染海量数据且给每条内容添加监听事件\" class=\"headerlink\" title=\"渲染海量数据且给每条内容添加监听事件\"></a>渲染海量数据且给每条内容添加监听事件</h2><p>现在浏览器提供了<code>requestAnimationFrame</code>API 来解决非常耗时的代码段对渲染阻塞问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ndContainer = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;js-list&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!ndContainer) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> total = <span class=\"number\">30000</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> batchSize = <span class=\"number\">4</span>; <span class=\"comment\">// 每批插入的节点次数，越大越卡</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> batchCount = total / batchSize; <span class=\"comment\">// 需要批量处理多少次</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> batchDone = <span class=\"number\">0</span>; <span class=\"comment\">// 已经完成的批处理个数</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">appendItems</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这是掘金答案，可是个人觉得innerHTML会更好，经测试是真的更好</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> fragment = <span class=\"built_in\">document</span>.createDocumentFragment();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; batchSize; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> ndItem = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;li&#x27;</span>);</span><br><span class=\"line\">      ndItem.innerText = batchDone * batchSize + i + <span class=\"number\">1</span>;</span><br><span class=\"line\">      fragment.appendChild(ndItem);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 每次批处理只修改 1 次 DOM</span></span><br><span class=\"line\">    ndContainer.appendChild(fragment);</span><br><span class=\"line\"></span><br><span class=\"line\">    batchDone += <span class=\"number\">1</span>;</span><br><span class=\"line\">    doBatchAppend();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doBatchAppend</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (batchDone &lt; batchCount) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">window</span>.requestAnimationFrame(appendItems);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// kickoff</span></span><br><span class=\"line\">  doBatchAppend();</span><br><span class=\"line\"></span><br><span class=\"line\">  ndContainer.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> target = e.target;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target.tagName === <span class=\"string\">&#x27;LI&#x27;</span>) &#123;</span><br><span class=\"line\">      alert(target.innerHTML);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"vue-中-watch-和计算属性的区别\"><a href=\"#vue-中-watch-和计算属性的区别\" class=\"headerlink\" title=\"vue 中 watch 和计算属性的区别\"></a>vue 中 watch 和计算属性的区别</h2><ul>\n<li>计算属性是自动监听依赖值的变化，从而动态返回内容，监听到值变化时，可以出发一次回调，并做一些事情，若是仅需要动态值就使用计算属性</li>\n<li>需要知道值改变后执行业务逻辑，才用 watch</li>\n</ul>\n<h2 id=\"为什么通常在发送数据买点请求的时候使用的是1-1像素的透明gif图片。\"><a href=\"#为什么通常在发送数据买点请求的时候使用的是1-1像素的透明gif图片。\" class=\"headerlink\" title=\"为什么通常在发送数据买点请求的时候使用的是1*1像素的透明gif图片。\"></a>为什么通常在发送数据买点请求的时候使用的是1*1像素的透明gif图片。</h2><ol>\n<li>没有跨域问题，一般这种数据上报，代码要写通用的</li>\n<li>不会阻塞页面加载，影响用户体验，只要 new image 对象就好了</li>\n<li>在所有图片中，体积最小</li>\n<li>相比XMLHttpRequest 对象发送GET请求，性能上更好。</li>\n</ol>\n<p>另外该脚本的位置一般放在页面最后以免阻塞页面渲染,并且一般情况下也不需要append到DOM中。通过它的onerror和onload事件来检测发送状态</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> thisPage = location.href;</span><br><span class=\"line\"><span class=\"keyword\">var</span> referringPage = (<span class=\"built_in\">document</span>.referrer) ? <span class=\"built_in\">document</span>.referrer : <span class=\"string\">&quot;none&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> beacon = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">beacon.src = <span class=\"string\">&quot;http://www.example.com/logger/beacon.gif?page=&quot;</span> + <span class=\"built_in\">encodeURI</span>(thisPage)</span><br><span class=\"line\">+ <span class=\"string\">&quot;&amp;ref=&quot;</span> + <span class=\"built_in\">encodeURI</span>(referringPage);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"input-搜索如何防抖，如何处理中文输入\"><a href=\"#input-搜索如何防抖，如何处理中文输入\" class=\"headerlink\" title=\"input 搜索如何防抖，如何处理中文输入\"></a>input 搜索如何防抖，如何处理中文输入</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> isInputZh = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> search = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;input&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">search.addEventListener(<span class=\"string\">&#x27;compositionstart&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  isInputZh = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\">search.addEventListener(<span class=\"string\">&#x27;compositionend&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  isInputZh = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  doSomething(search.value);</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\">search.addEventListener(<span class=\"string\">&#x27;input&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isInputZh) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> value = <span class=\"built_in\">this</span>.value;</span><br><span class=\"line\"></span><br><span class=\"line\">  doSomething(value);</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<p>有兼容问题</p>\n","site":{"data":{}},"excerpt":"<p>总结一些面试及笔试题</p>","more":"<h2 id=\"CSS-有哪些样式可以给子元素继承\"><a href=\"#CSS-有哪些样式可以给子元素继承\" class=\"headerlink\" title=\"CSS 有哪些样式可以给子元素继承\"></a>CSS 有哪些样式可以给子元素继承</h2><ul>\n<li>可继承的:<code>font-size</code>,<code>font-weight</code>,<code>line-height</code>,<code>color</code>,<code>cursor</code> 等 。</li>\n<li>不可继承的一般是会改变盒子模型的:<code>display</code>,<code>margin</code>、<code>border</code>、<code>padding</code>、<code>height</code> 等。</li>\n</ul>\n<h2 id=\"box-sizing-常用的属性有哪些-分别有啥作用\"><a href=\"#box-sizing-常用的属性有哪些-分别有啥作用\" class=\"headerlink\" title=\"box-sizing 常用的属性有哪些? 分别有啥作用?\"></a>box-sizing 常用的属性有哪些? 分别有啥作用?</h2><p>这个 css 主要是改变盒子模型的大小。有两个值:<code>content-box</code>(标准模型),<code>border-box</code>（怪异模型）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  .test &#123;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"attribute\">box-sizing</span>: content-box;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"attribute\">border</span>: <span class=\"number\">5px</span> solid <span class=\"number\">#f00</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"attribute\">padding</span>: <span class=\"number\">5px</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;test&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">content-box的计算公式会把宽高的定义指向 content,border和 padding 另外计算,</span></span><br><span class=\"line\"><span class=\"comment\">也就是说 content + padding + border = 120px(盒子实际大小)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">而border-box的计算公式是总的大小涵盖这三者, content 会缩小,来让给另外两者</span></span><br><span class=\"line\"><span class=\"comment\">content(80px) + padding(5*2px) + border(5*2px) = 100px</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"说说样式权重的优先级\"><a href=\"#说说样式权重的优先级\" class=\"headerlink\" title=\"说说样式权重的优先级;\"></a>说说样式权重的优先级;</h2><p><code>!important</code> &gt; <code>行内样式</code> &gt; <code>id</code> &gt; <code>class</code> &gt; <code>tag</code></p>\n<h2 id=\"对数组-‘2018-03-05’-‘2013-06-12’-’2019-03-12’-’2018-03-05’-’2014-02-22’-去重且排序\"><a href=\"#对数组-‘2018-03-05’-‘2013-06-12’-’2019-03-12’-’2018-03-05’-’2014-02-22’-去重且排序\" class=\"headerlink\" title=\"对数组 [‘2018-03-05’, ‘2013-06-12’,’2019-03-12’,’2018-03-05’,’2014-02-22’] 去重且排序\"></a>对数组 [‘2018-03-05’, ‘2013-06-12’,’2019-03-12’,’2018-03-05’,’2014-02-22’] 去重且排序</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//很好理解, Set 具有值唯一性(但不是所有值,等会我抛出我的另外一篇文章)</span></span><br><span class=\"line\"><span class=\"comment\">// 结合...解构,可以把可迭代(比如 arguments/nodelist 等)的转为数组</span></span><br><span class=\"line\"><span class=\"comment\">// sort 里面传入 两个值比较,返回-1和1是因为1代表这个数大排后(相对),-1代表小(相对),0为相等</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [</span><br><span class=\"line\">  ...new <span class=\"built_in\">Set</span>([</span><br><span class=\"line\">    <span class=\"string\">&#x27;2018-03-05&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;2013-06-12&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;2019-03-12&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;2018-03-05&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;2014-02-22&#x27;</span></span><br><span class=\"line\">  ])</span><br><span class=\"line\">].sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a &lt; b ? -<span class=\"number\">1</span> : <span class=\"number\">1</span>; <span class=\"comment\">// 这里返回的是升序的,降序改下返回值就好了.所以是相对</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// [&quot;2013-06-12&quot;, &quot;2014-02-22&quot;, &quot;2018-03-05&quot;, &quot;2019-03-12&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对数组-1-2-3-4-5-’6’-7-’8’-’a’-’b’-’z’-进行乱序\"><a href=\"#对数组-1-2-3-4-5-’6’-7-’8’-’a’-’b’-’z’-进行乱序\" class=\"headerlink\" title=\"对数组[1,2,3,4,5,’6’,7,’8’,’a’,’b’,’z’]进行乱序\"></a>对数组[1,2,3,4,5,’6’,7,’8’,’a’,’b’,’z’]进行乱序</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 我们依旧可以用上面的 sort 的原理实现乱序</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> tempArr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"string\">&#x27;6&#x27;</span>, <span class=\"number\">7</span>, <span class=\"string\">&#x27;8&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;z&#x27;</span>].sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.random() &gt; <span class=\"number\">0.5</span> ? -<span class=\"number\">1</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 因为里面有随机数,所以答案没有标准答案,我这边跑了一次是输出这个</span></span><br><span class=\"line\"><span class=\"comment\">//[&quot;6&quot;, &quot;z&quot;, 3, &quot;b&quot;, 5, 2, 7, &quot;8&quot;, &quot;a&quot;, 1, 4]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"求-1-10-11-1-’-5’-12-13-14-15-2-3-4-7-8-9-内最大值与最小值之差\"><a href=\"#求-1-10-11-1-’-5’-12-13-14-15-2-3-4-7-8-9-内最大值与最小值之差\" class=\"headerlink\" title=\"求[1, 10, 11, -1,’-5’,12, 13, 14, 15, 2, 3, 4, 7, 8, 9]内最大值与最小值之差\"></a>求[1, 10, 11, -1,’-5’,12, 13, 14, 15, 2, 3, 4, 7, 8, 9]内最大值与最小值之差</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 来一个很粗糙的版本,只当传入是数组且可以隐性转为数字的</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MaxMinPlus</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 返回最大值与最小值之差</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.isArray(arr)</span><br><span class=\"line\">    ? <span class=\"built_in\">Math</span>.max.apply(<span class=\"built_in\">Math</span>, arr) - <span class=\"built_in\">Math</span>.min.apply(<span class=\"built_in\">Math</span>, arr)</span><br><span class=\"line\">    : <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;传入的不是数组亦或者未能解决的错误&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结果是 20</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 若是要完善的话,要考虑传入的是非数组,</span></span><br><span class=\"line\"><span class=\"comment\">//传入字符串的时候要判断,然后切割为数组..</span></span><br><span class=\"line\"><span class=\"comment\">// 都要考虑进去代码量不短</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JS-的作用域是什么-有什么特别之处么\"><a href=\"#JS-的作用域是什么-有什么特别之处么\" class=\"headerlink\" title=\"JS 的作用域是什么?有什么特别之处么\"></a>JS 的作用域是什么?有什么特别之处么</h2><p>作用域就是有它自身的上下文区域(比如函数内),内部会有变量声明提升,函数声明提升这些;</p>\n<p>函数声明提升优于变量声明提升..</p>\n<p>作用域有全局作用域和块级作用域(局部,比如用 let 或者单纯花括号的);</p>\n<p>作用域会影响 this 的指向</p>\n<h3 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h3><p>当访问一个变量时，解释器会首先在当前作用域查找标示符，如果没有找到，就去父作用域找，直到找到该变量的标示符或者不在父作用域中，这就是作用域链</p>\n<p>作用域链和原型继承查找时的区别：如果去查找一个普通对象的属性，但是在当前对象和其原型中都找不到时，会返回undefined；但查找的属性在作用域链中不存在的话就会抛出ReferenceError。</p>\n<p>作用域链的顶端是全局对象，在全局环境中定义的变量就会绑定到全局对象中。</p>\n<h2 id=\"javascript-里面的继承怎么实现，如何避免原型链上面的对象共享\"><a href=\"#javascript-里面的继承怎么实现，如何避免原型链上面的对象共享\" class=\"headerlink\" title=\"javascript 里面的继承怎么实现，如何避免原型链上面的对象共享\"></a>javascript 里面的继承怎么实现，如何避免原型链上面的对象共享</h2><ul>\n<li>ES5:寄生组合式继承:通过借用构造函数来继承属性和原型链来实现子继承父。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ParentClass</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ParentClass.prototype.sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;I&#x27;m parent!&quot;</span> + <span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubClass</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//若是要多个参数可以用apply 结合 ...解构</span></span><br><span class=\"line\">  ParentClass.call(<span class=\"built_in\">this</span>, name);</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SubClass.prototype = <span class=\"built_in\">Object</span>.create(ParentClass.prototype);</span><br><span class=\"line\">SubClass.prototype.constructor = SubClass;</span><br><span class=\"line\">SubClass.prototype.sayChildHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;I&#x27;m child &quot;</span> + <span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> testA = <span class=\"keyword\">new</span> SubClass(<span class=\"string\">&#x27;CRPER&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Object.create()的polyfill</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    function pureObject(o)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        //定义了一个临时构造函数</span></span><br><span class=\"line\"><span class=\"comment\">         function F() &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">         //将这个临时构造函数的原型指向了传入进来的对象。</span></span><br><span class=\"line\"><span class=\"comment\">         F.prototype = obj;</span></span><br><span class=\"line\"><span class=\"comment\">         //返回这个构造函数的一个实例。该实例拥有obj的所有属性和方法。</span></span><br><span class=\"line\"><span class=\"comment\">         //因为该实例的原型是obj对象。</span></span><br><span class=\"line\"><span class=\"comment\">         return new F();</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>ES6: 其实就是 ES5 的语法糖,不过可读性很强</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ParentClass</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;I&#x27;m parent!&quot;</span> + <span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubClass</span> <span class=\"keyword\">extends</span> <span class=\"title\">ParentClass</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">sayChildHello</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;I&#x27;m child &quot;</span> + <span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 重新声明父类同名方法会覆写,ES5的话就是直接操作自己的原型链上</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;override parent method !,I&#x27;m sayHello Method&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> testA = <span class=\"keyword\">new</span> SubClass(<span class=\"string\">&#x27;CRPER&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"渲染海量数据且给每条内容添加监听事件\"><a href=\"#渲染海量数据且给每条内容添加监听事件\" class=\"headerlink\" title=\"渲染海量数据且给每条内容添加监听事件\"></a>渲染海量数据且给每条内容添加监听事件</h2><p>现在浏览器提供了<code>requestAnimationFrame</code>API 来解决非常耗时的代码段对渲染阻塞问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ndContainer = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;js-list&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!ndContainer) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> total = <span class=\"number\">30000</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> batchSize = <span class=\"number\">4</span>; <span class=\"comment\">// 每批插入的节点次数，越大越卡</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> batchCount = total / batchSize; <span class=\"comment\">// 需要批量处理多少次</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> batchDone = <span class=\"number\">0</span>; <span class=\"comment\">// 已经完成的批处理个数</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">appendItems</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这是掘金答案，可是个人觉得innerHTML会更好，经测试是真的更好</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> fragment = <span class=\"built_in\">document</span>.createDocumentFragment();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; batchSize; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> ndItem = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;li&#x27;</span>);</span><br><span class=\"line\">      ndItem.innerText = batchDone * batchSize + i + <span class=\"number\">1</span>;</span><br><span class=\"line\">      fragment.appendChild(ndItem);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 每次批处理只修改 1 次 DOM</span></span><br><span class=\"line\">    ndContainer.appendChild(fragment);</span><br><span class=\"line\"></span><br><span class=\"line\">    batchDone += <span class=\"number\">1</span>;</span><br><span class=\"line\">    doBatchAppend();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doBatchAppend</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (batchDone &lt; batchCount) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">window</span>.requestAnimationFrame(appendItems);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// kickoff</span></span><br><span class=\"line\">  doBatchAppend();</span><br><span class=\"line\"></span><br><span class=\"line\">  ndContainer.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> target = e.target;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target.tagName === <span class=\"string\">&#x27;LI&#x27;</span>) &#123;</span><br><span class=\"line\">      alert(target.innerHTML);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"vue-中-watch-和计算属性的区别\"><a href=\"#vue-中-watch-和计算属性的区别\" class=\"headerlink\" title=\"vue 中 watch 和计算属性的区别\"></a>vue 中 watch 和计算属性的区别</h2><ul>\n<li>计算属性是自动监听依赖值的变化，从而动态返回内容，监听到值变化时，可以出发一次回调，并做一些事情，若是仅需要动态值就使用计算属性</li>\n<li>需要知道值改变后执行业务逻辑，才用 watch</li>\n</ul>\n<h2 id=\"为什么通常在发送数据买点请求的时候使用的是1-1像素的透明gif图片。\"><a href=\"#为什么通常在发送数据买点请求的时候使用的是1-1像素的透明gif图片。\" class=\"headerlink\" title=\"为什么通常在发送数据买点请求的时候使用的是1*1像素的透明gif图片。\"></a>为什么通常在发送数据买点请求的时候使用的是1*1像素的透明gif图片。</h2><ol>\n<li>没有跨域问题，一般这种数据上报，代码要写通用的</li>\n<li>不会阻塞页面加载，影响用户体验，只要 new image 对象就好了</li>\n<li>在所有图片中，体积最小</li>\n<li>相比XMLHttpRequest 对象发送GET请求，性能上更好。</li>\n</ol>\n<p>另外该脚本的位置一般放在页面最后以免阻塞页面渲染,并且一般情况下也不需要append到DOM中。通过它的onerror和onload事件来检测发送状态</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> thisPage = location.href;</span><br><span class=\"line\"><span class=\"keyword\">var</span> referringPage = (<span class=\"built_in\">document</span>.referrer) ? <span class=\"built_in\">document</span>.referrer : <span class=\"string\">&quot;none&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> beacon = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">beacon.src = <span class=\"string\">&quot;http://www.example.com/logger/beacon.gif?page=&quot;</span> + <span class=\"built_in\">encodeURI</span>(thisPage)</span><br><span class=\"line\">+ <span class=\"string\">&quot;&amp;ref=&quot;</span> + <span class=\"built_in\">encodeURI</span>(referringPage);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"input-搜索如何防抖，如何处理中文输入\"><a href=\"#input-搜索如何防抖，如何处理中文输入\" class=\"headerlink\" title=\"input 搜索如何防抖，如何处理中文输入\"></a>input 搜索如何防抖，如何处理中文输入</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> isInputZh = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> search = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;input&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">search.addEventListener(<span class=\"string\">&#x27;compositionstart&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  isInputZh = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\">search.addEventListener(<span class=\"string\">&#x27;compositionend&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  isInputZh = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  doSomething(search.value);</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\">search.addEventListener(<span class=\"string\">&#x27;input&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isInputZh) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> value = <span class=\"built_in\">this</span>.value;</span><br><span class=\"line\"></span><br><span class=\"line\">  doSomething(value);</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<p>有兼容问题</p>"},{"title":"JS原生-ES6","date":"2018-01-24T02:51:11.000Z","_content":"\n发现自己对于 javascript 的底层 API 所知甚少，在这里记录一下所遇到的有趣又实在的 API 用法。\n\nES6 的更新内容主要分为以下几点\n\n- 表达式：声明、解构赋值\n- 内置对象：字符串扩展、数值扩展、对象扩展、数组扩展、函数扩展、正则扩展、Symbol、Set、Map、Proxy、Reflect\n- 语句与运算：Class、Module、lterator\n- 异步编程：Promise、Generator、Async\n\n<!--more-->\n\n## var 与 let 的区别\n\n使用 var 关键字来声明变量，会出现重复声明导致变量被覆盖不会报错的问题；\n在 ES6 中引入了 let 来解决 var 关键字带来的潜在问题，若是重复声明则会在控制台报错。\n\n## `Symbol`数据类型\n\n`Symbol`是通过`Symbol`函数生成的，凡是属性名属于`symbol`类型，就都是独一无二的，可以保证不会与其他属性名冲突。\n\n### 使用 Symbol 来作为唯一标志\n\n```javascript\nconst PROP_NAME = Symbol() //解救无意义的赋值\nconst PROP_AGE = Symbol()\n\nlet obj = {\n  [PROP_NAME]: '一斤代码', //对象key值或是常量使用，原理相同\n}\nobj[PROP_AGE] = 18\n\nobj[PROP_NAME] // '一斤代码'\nobj[PROP_AGE] // 18\n```\n\n### 使用 Symbol 定义类的私有属性\n\n在 JS 中是没有私有变量的，雷伤所有定义的属性或是方法都是公开访问的。因此可能存在污染等情况，而有了 Symbol 以及模块化机制，类的私有属性和方法才能变成可能。\n\n在文件 a.js 中\n\n```javascript\nconst PASSWORD = Symbol()\n\nclass Login {\n  constructor(username, password) {\n    this.username = username\n    this[PASSWORD] = password\n  }\n\n  checkPassword(pwd) {\n    return this[PASSWORD] === pwd\n  }\n}\n\nexport default Login\n```\n\n在文件 b.js 中\n\n```javascript\nimport Login from './a'\n\nconst login = new Login('admin', '123456')\n\nlogin.checkPassword('admin') // true\n\nlogin.PASSWORD // oh!no!\nlogin[PASSWORD] // oh!no!\nlogin['PASSWORD'] // oh!no!\n```\n\n由于 Symbol 常量 PASSWORD 被定义在 a.js 所在的模块中，外面的模块获取不到这个 Symbol,也不可能在创建一个一个一样的 Symbol 出来，所以这个 PASSWORD 只能被限制在 a.js 内部使用，达到一个私有化的效果\n\n### 注册和获取全局 Symbol\n\nSymbol 在不同 window 中创建的 Symbol 实例总是唯一的，如果应用涉及到多个 window（ifram），并需要这些 window 使用的是同一个，那就不能使用 Symbol()了（若是微前端里面又是什么样的呢？有时间试试），这时可以使用 Symbol.for()，它来注册或获取一个 window 间全局的 Symbol 实例：\n\n```javascript\nlet gs1 = Symbol.for('global_symbol_1') //注册一个全局Symbol\nlet gs2 = Symbol.for('global_symbol_1') //获取全局Symbol\n\ngs1 === gs2 // true\n```\n\n这时，在多个相关 window 间也是唯一的。\n\n### Symbol.iterator\n\n在 Symbol.iterator 出现后，JS 可以定义自己的迭代器\niterator 模式总是用同一种逻辑来遍历集合\n\n```javascript\nfor(Iterator it = c.iterater(); it.hasNext(); ) { ... }\n//这样就在一定程度上解决了不同的数据类型需要不同的遍历方法\n```\n\n```javascript\nlet students = {\n  [Symbol.iterator]: function* () {\n    for (var i = 0; i <= 100; i++) {\n      yield i\n    }\n  },\n}\nfor (var s of students) {\n  console.log(s)\n}\n//这个yield其实最后返回的就是iterator函数\n```\n\n## yield\n\nyield 关键字用来暂停和恢复一个生成器函数.yield 关键字只能在生成器函数内部使用，用在其他地方会抛出错误。类似函数的 return 关键字，yield 关键字必须直接位于生成器函数定义中，出现在嵌套的非生成器函数中会抛出语法错误\n\nyield 关键字实际返回一个 IteratorResult 对象，它有两个属性，value 和 done。value 属性是对 yield 表达式求值的结果，而 done 是 false，表示生成器函数尚未完全完成。\n\n```javascript\nfunction* countAppleSales() {\n  var saleList = [3, 7, 5]\n  for (var i = 0; i < saleList.length; i++) {\n    yield saleList[i]\n  }\n}\n//一旦生成器函数已定义，可以通过一个构造一个迭代器来使用它\n\nvar appleStore = countAppleSales() // Generator { }\nconsole.log(appleStore.next()) // { value: 3, done: false }\nconsole.log(appleStore.next()) // { value: 7, done: false }\nconsole.log(appleStore.next()) // { value: 5, done: false }\nconsole.log(appleStore.next()) // { value: undefined, done: true }\n```\n\n## 类\n\n面向对象编程中的一个核心概念就是类（多态、封装、继承）。可以把事物都抽象成一个个的类来描述他们的信息和行为。\n\nJavaScript 是一个基于对象的语言，而不是面对对象的语言，它是一个基于 prototype 的语言。它的语法中没有像 Java 之类典型面向对象语言中定义一个类的语法，因此在 ES6 中，提供了一个面向对象风格的类定义方式：使用 class 关键字。\n\n```javascript\nclass Person {\n  constructor(name, age) {\n    this.name = name\n    this.age = age\n  }\n\n  walk() {\n    console.log(\"I'm walking...\")\n  }\n\n  static create(name, age) {\n    //定义静态方法\n    return new Person(name, age)\n  }\n}\n```\n\n### super\n\nsuper 关键字用于访问和调用一个对象的父对象的函数。( 只能在 class 内部用 )\n\n在构造函数中使用时，super 关键字将单独出现，并且必须在使用 this 之前使用。\n\nsuper 关键字也可以用来调用父对象上的函数。\n\n```javascript\nsuper([arguments])\n// 调用 父对象/父类 的构造函数\n\nsuper.functionOnParent([arguments])\n// 调用 父对象/父类 上的方法\n```\n\n```javascript\nclass Polygon {\n  construector(height, width) {\n    this.name = 'Polygon'\n    this.height = height\n    this.width = width\n  }\n  sayName() {\n    console.log('Hi,I am a', this.name + '.')\n  }\n  class Square extends Polygon{\n    constructor(length){\n      this.height;\n      // ReferenceError ,super 需要先被调用！\n\n      /*\n       这里，它调用父类的构造函数的length,\n       作为Polygon 的 width 和 height\n       */\n       super(length,length)\n       /*\n       注意，在派生的类中，在你可以使用this之前，必须 先调用super()。忽略这，这将导致引用错误。\n       */\n       this.name = 'Square'\n    }\n    get area(){\n      return this.height * this.width\n    }\n    set area(value){\n      this.area = value\n    }\n  }\n}\n```\n\n**使用 super 调用父类的静态方法。**\n\n```javascript\nclass Human{}\n  constructor(){}\n    static ping(){\n      return 'ping'\n  }\n}\n\nclass computer eatends Human{ //使用extend 实现继承另一个类\n  constructor(){}\n  static pingpong(){\n    return super.ping()+'pong'\n  }\n}\n\nComputer.pingpong()\n```\n\n**原始 class 实现方式**\n\n```javascript\nfunction Parent(name) {\n  this.name = name\n}\nParent.prototype.getName = function () {\n  return this.name\n}\nfunction Child(name, age) {\n  Parent.call(this, name)\n  this.age = age\n}\n//实现继承\nChild.prototype = new Parent()\nChild.prototype.constructor = Child\n\nChild.prototype.getAge = function () {\n  return this.Age\n}\nvar people = new Child('lily', 20)\nconsole.log(people.getName())\n```\n\n**语法糖**\n\n```javascript\nclass Parent {\n  construtor(name) {\n    this.name = name\n  }\n  getAge() {\n    return this.age\n  }\n  const people = new Child(\"lily\",20);\n  console.log(people.getName())\n}\n```\n\n## 异步函数\n\n除了 javascript Promise , 异步函数进一步重写了传统的异步代码结构。\n\n### 一个以 async 为前缀的常规函数\n\n```javascript\nasync function fetchdata(url) {}\n```\n\n### 在异步函数（Async function ）内，使用 await 关键字调用异步操作函数\n\n```javascript\nfunction getaSync(url) {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest()\n    xhr.open('GET', url)\n    xhr.onload = () => resolve(xhr.responseText)\n    xhr.onerror = () => reject(xhr.statusText)\n    xhr.send()\n  })\n}\n\nasync function fetchdata() {\n  var text1 = await getasync('test.txt')\n  console.logtex(text1)\n  var text2 = await getasync('test2.text')\n  console.log(text2)\n  var text3 = await getasync('text3.text')\n  console.log(text3)\n  return 'Finished'\n}\n\nfetchdata().then((msg) => {\n  console.log(msg) //“test.txt”，“test2.txt”，“test3.txt”\n})\n```\n\n在异步函数中，我们把异步函数 getasync() 当做是同步函数，没有 then() 方法或回调函数通知下一步。无论何时遇到关键字 await , 执行都会停止，直到 getasync() 解决，然后再转到异步函数中的下一行。结果与纯粹的基于 Promise , 使用一串 then 方法的方式一样\n\n## 解构\n\nES6 解构并非一个新的功能，而是一个新的复制语法，可以快速解压缩对象属性和数组中的值，并将它们分配给各个变量。\n\n```javascript\nvar profile = { name: 'georage', age: 39, hobby: 'Tennis' }\nvar { name, hobby } = profile\nconsole.log(name) //'georage'\nconsole.log(hobby) //'Tennis'\n```\n\n这里我用解构快速提取 profile 对象的 name 和 hobby 属性。\n\n使用别名，你可以使用与你正在提取值的对象属性不同的变量名：\n\n```javascript\nvar profile = { name: 'georage', age: 39, hobby: 'Tennis' }\nvar { name: n, hobby: h } = profile\nconsole.log(n) //'georage'\nconsole.log(h) //'Tennis'\n```\n\n---\n\n### 嵌套对象解构\n\n解构也可以与嵌套对象一起工作，可以使用它来快速解开来自复杂的 JSON 请求的值。\n\n```javascript\nvar jsondata = {\n  title: 'XX',\n  details: {\n    data: {\n      created: '2017/09/19',\n      modified: '2017/09/20',\n    },\n    catrgory: 'js',\n  },\n  url: '/baidu/',\n}\nvar {\n  title,\n  details: {\n    data: { created, modified },\n  },\n} = jsondata\nconsole.log(title)\nconsole.log(created)\nconsole.log(modified)\n```\n\n---\n\n### 解构数组\n\n数组的解构与对象上的工作方式类似，除了左边的花括号使用**方括号**代替：\n\n```javascript\nvar soccerteam = ['George', 'Dennis', 'Sandy']\nvar [a, b] = soccerteam\nconsole.log(a) // \"George\"\nconsole.log(b) // \"Dennis\"\n```\n\n你可以跳过某些数组元素，通过使用 (,)\n\n```javascript\nvar var soccerteam = ['George', 'Dennis', 'Sandy']\nvar [a,,b] = soccerteam\nconsole.log(a) // \"George\"\nconsole.log(b) // \"Sandy\"\n```\n\n---\n\n### 解构赋值\n\n```javascript\nlet [a, b, c] = [1, 2, 3];\n//定义了三个变量，并对应赋了值；如果值的个数与变量名个数不匹配，没有对应上的变量值为 undefined\n\nlet [a, b, c='default'] = [1, 2];\n//指定默认值，在定义变量时就指定了默认值，如果赋值时，没有给定内容，则会取默认值\n\nlet [a, …b] = [1,2,3];\n//这里 b 的值为[2，3]，这样可以快速使用剩余的数据赋值给变量，\n//但实际使用中为了避免代码阅读的歧义，不推荐这么使用，仅作了解即可\n\nlet [a,b,c] = 'yes';\nconsole.log(a);//y\nconsole.log(b);//e\nconsole.log(c);//s\n```\n\n字符串的结构赋值会以单个字符串的方式进行赋值。\n\n```javascript\nlet { length } = 'yes'\nconsole.log(length) //3\n```\n\n以对象赋值的方法，如果名称是字符串的自带属性，则会获得属性值\n\n```javascript\nlet arr = [1, 2]\nlet obj = { a: 1, b: 2 }\nfunction test({ a = 10, b, c = 10 }) {\n  console.log(arguments) //{ a: 1, b: 2 }\n  console.log(a) //1\n  console.log(b) //2\n  console.log(c) //10\n}\ntest(obj)\n```\n\n## Spread 操作符\n\nspread(...)操作符也称作展开操作符，作用是讲可迭代的对象进行展开\n\n```javascript\nvar fruits = ['apple', 'orange', 'peach']\nvar shoppingList = ['t-shirt', ...fruits, 'egg']\n\n// shoppingList的值：[\"t-shirt\", \"apple\", \"organe\", \"peach\", \"egg\"]\n```\n\nSpread 操作符可以展开 Iterable 的对象，这样的话，除了数组之外，所有实现了 Symbol.iterator 的对象，如：Set, Map 和 Generator 等等，都可以使用 Spread 操作符。\n\n```javascript\nvar map = new Map()\nmap.set('a', 1)\nmap.set('b', 2)\nvar arr1 = [...map] //[[\"a\", 1], [\"b\", 2]]\n\nvar set = new Set()\nset.add(1)\nset.add(2)\nset.add(1)\nset.add(3)\nvar arr2 = [...set] //[1, 2, 3]\n\nfunction* myGen() {\n  yield 'hello'\n  yield 'world'\n}\nvar arr2 = [...myGen()] //[\"hello\", \"world\"]\n```\n\n## 默认和剩余参数\n\n### 默认参数\n\n在这之前我们都使用：\n\n```javascript\nfunction getarea(w, h) {\n  var w = w || 10\n  var h = h || 15\n  return w * h\n}\n```\n\n有了 ES6 对默认参数的支持后\n\n```javascript\nfunction getarea(w = 10, h = 15) {\n  return w * h\n}\ngetarea(5) //75\n```\n\n### 剩余参数 （Rest Parameters）\n\nES6 中的 Rest Parameters 使得将函数参数转换成数组的操作变得简单。\n\n```javascript\nfunction addit(...theNumber) {\n  //get the sum of the array elements\n  return theNumber.reduce((prevnum.curnum) => prevnu + curnum, 0)\n}\naddit(1, 2, 3, 4) //10\n```\n\n通过在命名参数前添加 3 个点。在该位置和之后输入到函数中的参数将自动转换为数组。\n\n没有 Rest Parameters 则会手动将参数转换为数组 :\n\n```javascript\nfunction addit(theNumbers) {\n  // force arguments object into array\n  var numArray = Array.prototype.slice.call(arguments)\n  return numArray.reduce((prevnum, curnum) => prevnum + curnum, 0)\n}\n\naddit(1, 2, 3, 4) // returns 10\n```\n\n```javascript\nfunction f(...[a, b, c]) {\n  return a + b + c\n}\n\nf(1) // NaN (b and c are undefined)\nf(1, 2, 3) // 6\nf(1, 2, 3, 4) //6 (the fourth parameter is not destructured)\n```\n\n## Generator 函数\n\nGenerator 函数是协程在 ES6 的实现，最大特点就是可以交出函数的执行权（即暂停执行）。协程：多个现成互相协作，完成异步任务。\n\n协程有点像函数，又有点想线程。他的运行流程大致如下：\n\n- 第一步，协程 A 开始执行。\n- 第二步，协程执行懂啊一半，进入暂停，执行权转移到协程 B。\n- 第三步，一段时间后协程 B 交换执行权。\n- 第四步，协程 A 恢复执行。\n\n```javascript\nfunction* gen(x) {\n  var y = yield x + 2\n  return y\n}\n```\n\n上面整个代码就是一个封装的异步任务，或者说是异步任务的容器。异步操作需要暂停的地方，都用 yield 语句注明。Generator 函数的执行方法如下。\n\n```javascript\nvar g = gen(1)\ng.next() // { value: 3, done: false }\ng.next() // { value: undefined, done: true }\n```\n\nnext 方法的作用是分阶段执行 Generator 函数。每次调用 next 方法，返回一个对象，表示当前阶段的信息（value 和 done 属性）。value 属性是 yield 语法后面表达式的值。表示当前阶段的值；done 属性是一个布尔值，表示 Generator 函数是否执行完毕，即是否还有下一个阶段。\n\n这是一个生成器的例子：\n\n```javascript\nfunction* genFn() {\n  console.log('begin')\n  var value = yield 'a'\n  console.log(value) // 'B'\n  return 'end'\n}\n\nvar gen = genFn()\nconsole.log(typeof gen) // 'object'\nvar g1 = gen.next()\ng1.value // 'a'\ng1.done // false\nvar g2 = gen.next('B')\ng2.value // 'end'\ng2.done // true\n```\n\n## 字符串扩展\n\n### 字符串内容测试\n\n```javascript\n'abcdef'.includes('c') //true\n'abcdef'.includes('ye') //false\n'abcdef'.startsWith('a') //true\n'abcdef'.endswidth('f') //true\n//includes(), startsWith(), endsWith() 都支持第二个参数，\n//类型为数字类型，意为从第 n 个字符开始，endsWith()的第二个参数有点不一样\n'abcdef'.includes('c', 4) //false 从第5个字符开始查找是否有 'c' 这个字符\n'abcdef'.startsWith('d', 3) //true 从第4个字符开始查找是否是以 'd' 字符为开头\n'abcdef'.endsWith('d', 4) //true 前面的4个字符里，是否以 'd' 字符为结尾\n```\n\n**字符串重复输出：**\n这个方法接受一个整数参数，表示要将字符串复制多少次，然后返回拼接所有副本后的结果\n\n```javascript\n'a'.repeat(5) //aaaaa 重复输出5遍\n```\n\n### 模板字符串(``)\n\n```javascript\nfunction authorize(user, action) {\n  if (!user.hasPrivilege(action)) {\n    throw new Error(`用户 ${user.name} 未被授权执行 ${action} 操作。`)\n  }\n}\n```\n\n在这个示例中，`${user.name}`,`${action}`被称为模板占位符，javascript 将把 user.name 和 action 的值插入到最终生成的字符串中。\n\n```javascript\n$('#warning').html(`\n  <h1>小心！>/h1>\n  <p>未经授权打冰球可能受罚\n  将近${maxPenalty}分钟。</p>\n`)\n```\n\n模板字符串中所有的空格、新进、缩进，都会原样输出在生成的字符串中。\n\n### 原生支持模板语言\n\n```javascript\n//es5\n$('#result').append(\n  'There are <b>' +\n    basket.count +\n    '</b> ' +\n    'items in your basket, ' +\n    '<em>' +\n    basket.onSale +\n    '</em> are on sale!'\n)\n//es6\n//在es6中，内容模板，可以定义在 `` 包起来的字符串中，其中的内容会保持原有格式\n//另外可以在字符串中直接使用模板语言进行变量填充，优雅而简洁\n$('#result').append(`\n  There are <b>${basket.count}</b> items\n   in your basket, <em>${basket.onSale}</em>\n  are on sale!\n`)\n```\n\n### 字符串遍历输出\n\n```javascript\n//for ...of 格式为 es6 中的 Iterator 迭代器的输出方式\nfor (let c of 'abc') {\n  console.log(c)\n}\n//a\n//b\n//c\n```\n\n### 字符串补全\n\n```javascript\n//参数1：[number] 目标字符串长度\n//参数2：[string] 进行补全的字符串\n'12345'.padStart(7, '0') //0012345 - 字符串不足7位，在头部补充不足长度的目标字符串\n'12345'.padEnd(7, '0') //1234500 - 在尾部进行字符串补全\n```\n\n### 字符串迭代与结构\n\n```javascript\nlet message = 'abc'\nlet stringIterator = message[Symbol.iterator]()\nstringIterator.next() //{value:a,done:false}\nstringIterator.next() //{value:b,done:false}\n```\n\n或是用 for of\n\n## 数组扩展\n\n### Array.from()\n\n从一个类似数组或可迭代对象中创建一个新的数组实例。\n\n### 合并数组\n\n```javascript\nlet a = [1, 2]\nlet b = [3]\nlet c = [2, 4]\nlet d = [...a, ...b, ...c] //[1, 2, 3, 2, 4] 所有内容合并，但并不会去除重复\n```\n\n### 快速转换为数组\n\n```javascript\nArray.of(3, 4, 5) //[3,4,5]\n```\n\n### 内容过滤\n\n```javascript\n//判断对象是否为数组\nif(Array.isArray(obj)){...}\n\n[1,2,3].includes(5);//false，检索数据中是否有5\n\n//找出第一个匹配表达式的结果，注意是只要匹配到一项，函数即会返回\nlet a = [1, 3, -4, 10].find(function(value, index, arr){\n  return value < 0;\n});\nconsole.log(a);//-4\n\n//找出第一个匹配表达式的结果下标\nlet a = [1, 3, -4, 10].findIndex(function(value, index, arr){\n  return value < 0;\n});\nconsole.log(a);//2\n\n//排除负数内容\nlet a = [1, 3, -4, 10].filter(function(item){\n  return item > 0;\n});\nconsole.log(a);//[1, 3, 10]\n```\n\n## 对象扩展\n\n### 可计算属性\n\n```javascript\nlet nameKey = 'name'\nlet ageKey = '27'\nlet jobKey = 'job'\nlet person = {\n  [nameKey]: 'matt',\n  [ageKey]: 27,\n  [jobKey]: 'software engineer',\n}\n```\n\n可变 key 是在申明时进行值赋值，而不是地址赋值，就算使用对象作为 key 值，key 值在之后也不是可变的\n\n### 属性的简洁表示\n\n```javascript\n//直接使用变量/常量的名称个为对象属性的名称\nlet a = 'abc'\nlet b = { a } //{a: 'abc'}\n\nfunction f(x, y) {\n  return { x, y }\n}\n//等效于\nfunction f(x, y) {\n  return { x: x, y: y }\n}\n\nlet o = {\n  f() {\n    return 1\n  },\n}\n//等效于\nlet o = {\n  f: function () {\n    return 1\n  },\n}\n```\n\n### 对象内容合并\n\n```javascript\nlet a = { a: 1, b: 2 },\n  b = { b: 3 },\n  c = { b: 4, c: 5 }\nlet d = Object.assign(a, b, c)\nconsole.log(d) //{a:1,b:4,c:5}\nconsole.log(a) //{a:1,b:4}\n//上面的合并方式会同时更新 a 对象的内容，a 的属性如果有多次合并会被更新数据，\n//但自身没有的属性，其它对象有的属性不会被添加到 a 身上；\n//参数列中的对象只会影响第一个，后面的参数对象不会被修改数据\n\n//推荐使用这种方式进行对象数据合并\nlet a = { a: 1, b: 2 },\n  b = { b: 3 },\n  c = { b: 4, c: 5 }\nlet d = Object.assign({}, a, b, c) //第一个参数增加一个空对象，在合并时让它被更新，不影响实际的对象变量内容\nconsole.log(d) //{a:1,b:4,c:5}//与上面的方式合并结果一致，使用这种方式, a 对象的内容就不会被影响了\n```\n\n对象内容合并的方向是从参数顺序的后向前合并\n\n### 对象内容集合\n\n#### Object.keys()\n\n获取对象中所有的键名，以数组的形式返回\n\n```javascript\nvar obj = { a: 1, b: 2 }\nvar name = Object.keys(obj) //['a','b,]\n```\n\n#### Object.values()\n\n获取对象中所有值内容，以数组的形式返回\n\n```javascript\nvar obj = { a: 1, b: 2 }\nvar values = Object.values(obj) //[1,2]\n```\n\n#### Object.entries()\n\n获得对象中所有成员的数据，以数组的形式返回，成员的内容也是数组形式\n\n```javascript\nvar obj = { a: 1, b: 2 }\nvar values = Object.entries(obj) //[['a',1],['b',2]]\n```\n\n#### 对象内容测试\n\n```javascript\n//判断对象是否为数组对象\nif (Object.isArray(someobj)) {\n}\n//判断目标对象是否为空对象\nif (someobj && Object.keys(someobj).length);\n```\n\n### Map\n\nMap 的用法和普通对象基本一致，但是主要差异是，Map 实例会维护键值对的插入顺序，因此可以根据插入顺序执行迭代操作。\n\n对象和映射之间存在着显著的内存和性能问题：\n\n- 在给定固定大小的内存时，Map 大约可以比 Object 多存储 50% 的键/值对。\n- Map 在所有的浏览器中一般会比 Object 的插入速度快\n- 从大型 Object 和 Map 中查找键/值对，则 Object 有时候速度会更快。在把 Object 当成数组使用的情况下（比如使用连续整数作为属性），浏览器引擎可以进行优化，在内存中使用更高效的布局。对于这两个类型而言，查找书读不会随着键/值对数量增加而现行增加，如果代码设计大量查找操作，那么某些情况下可能选 Object 更好\n- Object 的 delete 性能很差，在现在很多浏览器依然如此，Map 的 delete 操作都比插入和查找更快，如果代码涉及大量删除操作，那么毫无以为应该选择 map\n\n(思考：vue 中的 data 数据使用 Map 是什么样的呢？)\n\n先看一下它能用非法字符串或者数字作为 key 的特性。\n\n```javascript\nconst map = Map()\nconst obj = { p: 'hellow' }\nmap.set(obj, 'ok') //ok\nconsole.log(obj) //{ p: 'hellow' }\nmap.get(obj) //ok\nmap.has(obj) //true\nmap.delete(obj) //true\nmap.has(obj) //false\n```\n\n需要使用 new Map()初始化一个实例。\n\n- size:获取成员数量\n- set:设置成员 key 和 value\n- get:获取成员属性值\n- has:判断成员是否存在\n- delete:删除成员\n- clear:清空所有\n- keys():返回键名的遍历器\n- values():返回键值的遍历器\n- entries():返回所有成员的遍历器\n- forEach():遍历 Map 的所有成员\n\n### set 对象 （可用于去重）\n\nset 独享允许你存储任何类型唯一值，无论是原始值或是对象。NaN 之间视为相同的值。\n\n```javascript\nconst set1 = new Set([1, 1, 2, NaN, NaN, 5])\n\nconsole.log(set1.has(1)) // expected output: true\n\nconsole.log(set1.has(5)) // expected output: true\n\nconsole.log(set1.has(6)) // expected output:false\n\nconsole.log(Array.from(set1)) // Array [1, 2, 3, 4, NaN, 5]\n```\n\n### 定型数组\n\n所谓定型数组，就是将任何数字转换成一个包含数字比特的数组，随后就可以通过 JS 数组进一步处理\n\n在 JavaScript 中，数字类型变量都是以 64 位浮点型数据格式存储；比如新建一个只需要 8 比特的整数，也需要为其开辟 64 位存储空间，浪费资源，效率也低。而 CanvasFloatArray 需要的是 Float32Array\n\n所有与定型数组有关的操作和对象都集中在这 8 个数据类型上，但是在使用他们之前，需要穿件一个数组缓冲区存储这些数据\n\n数据缓冲区是所有定型数组的根基，它是一段可以包含特定数量字节的内存地址。\n\n## isInteger 与安全整数\n\nisInteger 用于判断一个数值是否为整数。\n\n```javascript\nconsole.log(Number.isInteger(1)) //  true\nconsole.log(Number.isInteger(1.0)) //true\nconsole.log(Nmber.isInteger(1.01)) //false\n```\n\n为了鉴别整数是否在安全范围科研使用 Number.isSafeInteger()方法\n\n## 生成器\n\n```javascript\nfunction* generatorFn() {\n  yield 'foo'\n  yield 'bar'\n  return 'baz'\n}\nlet generatorObject1 = generatorFn()\nlet generatorObject2 = generatorFn()\nconsole.log(generatorObject1.next()) //{done:false,value:'foo'}\nconsole.log(generatorObject2.next()) //{done:false,value:'foo'}\nconsole.log(generatorObject2.next()) //{done:false,value:'bar'}\nconsole.log(generatorObject1.next()) //{done:false,value:'bar'}\n```\n\n**也可以用 for of 对 generatorObject1 进行迭代，那这个可以结合 promise 使用吗？是可以的，就是用 yield 实现了 await**。async 和 await，比起星号和 yield，语义更清楚了。async 表示函数里有异步操作，await 表示紧跟在后面的表达式需要等待结果。co 函数库约定，yield 命令后面只能是 Thunk 函数或 Promise 对象，而 async 函数的 await 命令后面，可以跟 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作）。\n\n### 使用 yield\\* 实现递归算法\n\nyield\\* 表达式迭代操作数，并产生它返回的每个值\n\nyield\\* 表达式本身的值是当迭代器关闭时返回的值（即 done 为 true）时\n\nyield\\*最有用的地方是实现递归操作，此时生成器可以产生自身：\n\n```javascript\nfunction* nTimes(n) {\n  if (n > 0) {\n    yield* nTimes(n - 1)\n    yield n - 1\n  }\n}\n\nfor (const x of nTimes(3)) {\n  console.log(x)\n}\n//0\n//1\n//2\n```\n\n## 箭头函数\n\n**箭头函数不能作为构造函数**：\n\n箭头函数没有自己的this,arguments,super或new.target。箭头函数表达式更实用于那些需要匿名函数的地方，并且它不能用作构造函数，和new一起用会抛出错误，箭头函数没有prototype属性。\n\n箭头函数是有_proto_属性的，所以箭头函数本身是存在原型链的，他也是有自己的构造函数的，但是因为没有prototype 属性，他的实例_proto_没法指向，所以箭头函数也就无法作为构造函数。\n\n同时箭头函数由于没有this指针，通过call()和apply方法调用一个函数时，只能传递参数，不能绑定this。","source":"_posts/JS原生-ES6.md","raw":"---\ntitle: JS原生-ES6\ndate: 2018-01-24 10:51:11\ncategories: JavaScript\n---\n\n发现自己对于 javascript 的底层 API 所知甚少，在这里记录一下所遇到的有趣又实在的 API 用法。\n\nES6 的更新内容主要分为以下几点\n\n- 表达式：声明、解构赋值\n- 内置对象：字符串扩展、数值扩展、对象扩展、数组扩展、函数扩展、正则扩展、Symbol、Set、Map、Proxy、Reflect\n- 语句与运算：Class、Module、lterator\n- 异步编程：Promise、Generator、Async\n\n<!--more-->\n\n## var 与 let 的区别\n\n使用 var 关键字来声明变量，会出现重复声明导致变量被覆盖不会报错的问题；\n在 ES6 中引入了 let 来解决 var 关键字带来的潜在问题，若是重复声明则会在控制台报错。\n\n## `Symbol`数据类型\n\n`Symbol`是通过`Symbol`函数生成的，凡是属性名属于`symbol`类型，就都是独一无二的，可以保证不会与其他属性名冲突。\n\n### 使用 Symbol 来作为唯一标志\n\n```javascript\nconst PROP_NAME = Symbol() //解救无意义的赋值\nconst PROP_AGE = Symbol()\n\nlet obj = {\n  [PROP_NAME]: '一斤代码', //对象key值或是常量使用，原理相同\n}\nobj[PROP_AGE] = 18\n\nobj[PROP_NAME] // '一斤代码'\nobj[PROP_AGE] // 18\n```\n\n### 使用 Symbol 定义类的私有属性\n\n在 JS 中是没有私有变量的，雷伤所有定义的属性或是方法都是公开访问的。因此可能存在污染等情况，而有了 Symbol 以及模块化机制，类的私有属性和方法才能变成可能。\n\n在文件 a.js 中\n\n```javascript\nconst PASSWORD = Symbol()\n\nclass Login {\n  constructor(username, password) {\n    this.username = username\n    this[PASSWORD] = password\n  }\n\n  checkPassword(pwd) {\n    return this[PASSWORD] === pwd\n  }\n}\n\nexport default Login\n```\n\n在文件 b.js 中\n\n```javascript\nimport Login from './a'\n\nconst login = new Login('admin', '123456')\n\nlogin.checkPassword('admin') // true\n\nlogin.PASSWORD // oh!no!\nlogin[PASSWORD] // oh!no!\nlogin['PASSWORD'] // oh!no!\n```\n\n由于 Symbol 常量 PASSWORD 被定义在 a.js 所在的模块中，外面的模块获取不到这个 Symbol,也不可能在创建一个一个一样的 Symbol 出来，所以这个 PASSWORD 只能被限制在 a.js 内部使用，达到一个私有化的效果\n\n### 注册和获取全局 Symbol\n\nSymbol 在不同 window 中创建的 Symbol 实例总是唯一的，如果应用涉及到多个 window（ifram），并需要这些 window 使用的是同一个，那就不能使用 Symbol()了（若是微前端里面又是什么样的呢？有时间试试），这时可以使用 Symbol.for()，它来注册或获取一个 window 间全局的 Symbol 实例：\n\n```javascript\nlet gs1 = Symbol.for('global_symbol_1') //注册一个全局Symbol\nlet gs2 = Symbol.for('global_symbol_1') //获取全局Symbol\n\ngs1 === gs2 // true\n```\n\n这时，在多个相关 window 间也是唯一的。\n\n### Symbol.iterator\n\n在 Symbol.iterator 出现后，JS 可以定义自己的迭代器\niterator 模式总是用同一种逻辑来遍历集合\n\n```javascript\nfor(Iterator it = c.iterater(); it.hasNext(); ) { ... }\n//这样就在一定程度上解决了不同的数据类型需要不同的遍历方法\n```\n\n```javascript\nlet students = {\n  [Symbol.iterator]: function* () {\n    for (var i = 0; i <= 100; i++) {\n      yield i\n    }\n  },\n}\nfor (var s of students) {\n  console.log(s)\n}\n//这个yield其实最后返回的就是iterator函数\n```\n\n## yield\n\nyield 关键字用来暂停和恢复一个生成器函数.yield 关键字只能在生成器函数内部使用，用在其他地方会抛出错误。类似函数的 return 关键字，yield 关键字必须直接位于生成器函数定义中，出现在嵌套的非生成器函数中会抛出语法错误\n\nyield 关键字实际返回一个 IteratorResult 对象，它有两个属性，value 和 done。value 属性是对 yield 表达式求值的结果，而 done 是 false，表示生成器函数尚未完全完成。\n\n```javascript\nfunction* countAppleSales() {\n  var saleList = [3, 7, 5]\n  for (var i = 0; i < saleList.length; i++) {\n    yield saleList[i]\n  }\n}\n//一旦生成器函数已定义，可以通过一个构造一个迭代器来使用它\n\nvar appleStore = countAppleSales() // Generator { }\nconsole.log(appleStore.next()) // { value: 3, done: false }\nconsole.log(appleStore.next()) // { value: 7, done: false }\nconsole.log(appleStore.next()) // { value: 5, done: false }\nconsole.log(appleStore.next()) // { value: undefined, done: true }\n```\n\n## 类\n\n面向对象编程中的一个核心概念就是类（多态、封装、继承）。可以把事物都抽象成一个个的类来描述他们的信息和行为。\n\nJavaScript 是一个基于对象的语言，而不是面对对象的语言，它是一个基于 prototype 的语言。它的语法中没有像 Java 之类典型面向对象语言中定义一个类的语法，因此在 ES6 中，提供了一个面向对象风格的类定义方式：使用 class 关键字。\n\n```javascript\nclass Person {\n  constructor(name, age) {\n    this.name = name\n    this.age = age\n  }\n\n  walk() {\n    console.log(\"I'm walking...\")\n  }\n\n  static create(name, age) {\n    //定义静态方法\n    return new Person(name, age)\n  }\n}\n```\n\n### super\n\nsuper 关键字用于访问和调用一个对象的父对象的函数。( 只能在 class 内部用 )\n\n在构造函数中使用时，super 关键字将单独出现，并且必须在使用 this 之前使用。\n\nsuper 关键字也可以用来调用父对象上的函数。\n\n```javascript\nsuper([arguments])\n// 调用 父对象/父类 的构造函数\n\nsuper.functionOnParent([arguments])\n// 调用 父对象/父类 上的方法\n```\n\n```javascript\nclass Polygon {\n  construector(height, width) {\n    this.name = 'Polygon'\n    this.height = height\n    this.width = width\n  }\n  sayName() {\n    console.log('Hi,I am a', this.name + '.')\n  }\n  class Square extends Polygon{\n    constructor(length){\n      this.height;\n      // ReferenceError ,super 需要先被调用！\n\n      /*\n       这里，它调用父类的构造函数的length,\n       作为Polygon 的 width 和 height\n       */\n       super(length,length)\n       /*\n       注意，在派生的类中，在你可以使用this之前，必须 先调用super()。忽略这，这将导致引用错误。\n       */\n       this.name = 'Square'\n    }\n    get area(){\n      return this.height * this.width\n    }\n    set area(value){\n      this.area = value\n    }\n  }\n}\n```\n\n**使用 super 调用父类的静态方法。**\n\n```javascript\nclass Human{}\n  constructor(){}\n    static ping(){\n      return 'ping'\n  }\n}\n\nclass computer eatends Human{ //使用extend 实现继承另一个类\n  constructor(){}\n  static pingpong(){\n    return super.ping()+'pong'\n  }\n}\n\nComputer.pingpong()\n```\n\n**原始 class 实现方式**\n\n```javascript\nfunction Parent(name) {\n  this.name = name\n}\nParent.prototype.getName = function () {\n  return this.name\n}\nfunction Child(name, age) {\n  Parent.call(this, name)\n  this.age = age\n}\n//实现继承\nChild.prototype = new Parent()\nChild.prototype.constructor = Child\n\nChild.prototype.getAge = function () {\n  return this.Age\n}\nvar people = new Child('lily', 20)\nconsole.log(people.getName())\n```\n\n**语法糖**\n\n```javascript\nclass Parent {\n  construtor(name) {\n    this.name = name\n  }\n  getAge() {\n    return this.age\n  }\n  const people = new Child(\"lily\",20);\n  console.log(people.getName())\n}\n```\n\n## 异步函数\n\n除了 javascript Promise , 异步函数进一步重写了传统的异步代码结构。\n\n### 一个以 async 为前缀的常规函数\n\n```javascript\nasync function fetchdata(url) {}\n```\n\n### 在异步函数（Async function ）内，使用 await 关键字调用异步操作函数\n\n```javascript\nfunction getaSync(url) {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest()\n    xhr.open('GET', url)\n    xhr.onload = () => resolve(xhr.responseText)\n    xhr.onerror = () => reject(xhr.statusText)\n    xhr.send()\n  })\n}\n\nasync function fetchdata() {\n  var text1 = await getasync('test.txt')\n  console.logtex(text1)\n  var text2 = await getasync('test2.text')\n  console.log(text2)\n  var text3 = await getasync('text3.text')\n  console.log(text3)\n  return 'Finished'\n}\n\nfetchdata().then((msg) => {\n  console.log(msg) //“test.txt”，“test2.txt”，“test3.txt”\n})\n```\n\n在异步函数中，我们把异步函数 getasync() 当做是同步函数，没有 then() 方法或回调函数通知下一步。无论何时遇到关键字 await , 执行都会停止，直到 getasync() 解决，然后再转到异步函数中的下一行。结果与纯粹的基于 Promise , 使用一串 then 方法的方式一样\n\n## 解构\n\nES6 解构并非一个新的功能，而是一个新的复制语法，可以快速解压缩对象属性和数组中的值，并将它们分配给各个变量。\n\n```javascript\nvar profile = { name: 'georage', age: 39, hobby: 'Tennis' }\nvar { name, hobby } = profile\nconsole.log(name) //'georage'\nconsole.log(hobby) //'Tennis'\n```\n\n这里我用解构快速提取 profile 对象的 name 和 hobby 属性。\n\n使用别名，你可以使用与你正在提取值的对象属性不同的变量名：\n\n```javascript\nvar profile = { name: 'georage', age: 39, hobby: 'Tennis' }\nvar { name: n, hobby: h } = profile\nconsole.log(n) //'georage'\nconsole.log(h) //'Tennis'\n```\n\n---\n\n### 嵌套对象解构\n\n解构也可以与嵌套对象一起工作，可以使用它来快速解开来自复杂的 JSON 请求的值。\n\n```javascript\nvar jsondata = {\n  title: 'XX',\n  details: {\n    data: {\n      created: '2017/09/19',\n      modified: '2017/09/20',\n    },\n    catrgory: 'js',\n  },\n  url: '/baidu/',\n}\nvar {\n  title,\n  details: {\n    data: { created, modified },\n  },\n} = jsondata\nconsole.log(title)\nconsole.log(created)\nconsole.log(modified)\n```\n\n---\n\n### 解构数组\n\n数组的解构与对象上的工作方式类似，除了左边的花括号使用**方括号**代替：\n\n```javascript\nvar soccerteam = ['George', 'Dennis', 'Sandy']\nvar [a, b] = soccerteam\nconsole.log(a) // \"George\"\nconsole.log(b) // \"Dennis\"\n```\n\n你可以跳过某些数组元素，通过使用 (,)\n\n```javascript\nvar var soccerteam = ['George', 'Dennis', 'Sandy']\nvar [a,,b] = soccerteam\nconsole.log(a) // \"George\"\nconsole.log(b) // \"Sandy\"\n```\n\n---\n\n### 解构赋值\n\n```javascript\nlet [a, b, c] = [1, 2, 3];\n//定义了三个变量，并对应赋了值；如果值的个数与变量名个数不匹配，没有对应上的变量值为 undefined\n\nlet [a, b, c='default'] = [1, 2];\n//指定默认值，在定义变量时就指定了默认值，如果赋值时，没有给定内容，则会取默认值\n\nlet [a, …b] = [1,2,3];\n//这里 b 的值为[2，3]，这样可以快速使用剩余的数据赋值给变量，\n//但实际使用中为了避免代码阅读的歧义，不推荐这么使用，仅作了解即可\n\nlet [a,b,c] = 'yes';\nconsole.log(a);//y\nconsole.log(b);//e\nconsole.log(c);//s\n```\n\n字符串的结构赋值会以单个字符串的方式进行赋值。\n\n```javascript\nlet { length } = 'yes'\nconsole.log(length) //3\n```\n\n以对象赋值的方法，如果名称是字符串的自带属性，则会获得属性值\n\n```javascript\nlet arr = [1, 2]\nlet obj = { a: 1, b: 2 }\nfunction test({ a = 10, b, c = 10 }) {\n  console.log(arguments) //{ a: 1, b: 2 }\n  console.log(a) //1\n  console.log(b) //2\n  console.log(c) //10\n}\ntest(obj)\n```\n\n## Spread 操作符\n\nspread(...)操作符也称作展开操作符，作用是讲可迭代的对象进行展开\n\n```javascript\nvar fruits = ['apple', 'orange', 'peach']\nvar shoppingList = ['t-shirt', ...fruits, 'egg']\n\n// shoppingList的值：[\"t-shirt\", \"apple\", \"organe\", \"peach\", \"egg\"]\n```\n\nSpread 操作符可以展开 Iterable 的对象，这样的话，除了数组之外，所有实现了 Symbol.iterator 的对象，如：Set, Map 和 Generator 等等，都可以使用 Spread 操作符。\n\n```javascript\nvar map = new Map()\nmap.set('a', 1)\nmap.set('b', 2)\nvar arr1 = [...map] //[[\"a\", 1], [\"b\", 2]]\n\nvar set = new Set()\nset.add(1)\nset.add(2)\nset.add(1)\nset.add(3)\nvar arr2 = [...set] //[1, 2, 3]\n\nfunction* myGen() {\n  yield 'hello'\n  yield 'world'\n}\nvar arr2 = [...myGen()] //[\"hello\", \"world\"]\n```\n\n## 默认和剩余参数\n\n### 默认参数\n\n在这之前我们都使用：\n\n```javascript\nfunction getarea(w, h) {\n  var w = w || 10\n  var h = h || 15\n  return w * h\n}\n```\n\n有了 ES6 对默认参数的支持后\n\n```javascript\nfunction getarea(w = 10, h = 15) {\n  return w * h\n}\ngetarea(5) //75\n```\n\n### 剩余参数 （Rest Parameters）\n\nES6 中的 Rest Parameters 使得将函数参数转换成数组的操作变得简单。\n\n```javascript\nfunction addit(...theNumber) {\n  //get the sum of the array elements\n  return theNumber.reduce((prevnum.curnum) => prevnu + curnum, 0)\n}\naddit(1, 2, 3, 4) //10\n```\n\n通过在命名参数前添加 3 个点。在该位置和之后输入到函数中的参数将自动转换为数组。\n\n没有 Rest Parameters 则会手动将参数转换为数组 :\n\n```javascript\nfunction addit(theNumbers) {\n  // force arguments object into array\n  var numArray = Array.prototype.slice.call(arguments)\n  return numArray.reduce((prevnum, curnum) => prevnum + curnum, 0)\n}\n\naddit(1, 2, 3, 4) // returns 10\n```\n\n```javascript\nfunction f(...[a, b, c]) {\n  return a + b + c\n}\n\nf(1) // NaN (b and c are undefined)\nf(1, 2, 3) // 6\nf(1, 2, 3, 4) //6 (the fourth parameter is not destructured)\n```\n\n## Generator 函数\n\nGenerator 函数是协程在 ES6 的实现，最大特点就是可以交出函数的执行权（即暂停执行）。协程：多个现成互相协作，完成异步任务。\n\n协程有点像函数，又有点想线程。他的运行流程大致如下：\n\n- 第一步，协程 A 开始执行。\n- 第二步，协程执行懂啊一半，进入暂停，执行权转移到协程 B。\n- 第三步，一段时间后协程 B 交换执行权。\n- 第四步，协程 A 恢复执行。\n\n```javascript\nfunction* gen(x) {\n  var y = yield x + 2\n  return y\n}\n```\n\n上面整个代码就是一个封装的异步任务，或者说是异步任务的容器。异步操作需要暂停的地方，都用 yield 语句注明。Generator 函数的执行方法如下。\n\n```javascript\nvar g = gen(1)\ng.next() // { value: 3, done: false }\ng.next() // { value: undefined, done: true }\n```\n\nnext 方法的作用是分阶段执行 Generator 函数。每次调用 next 方法，返回一个对象，表示当前阶段的信息（value 和 done 属性）。value 属性是 yield 语法后面表达式的值。表示当前阶段的值；done 属性是一个布尔值，表示 Generator 函数是否执行完毕，即是否还有下一个阶段。\n\n这是一个生成器的例子：\n\n```javascript\nfunction* genFn() {\n  console.log('begin')\n  var value = yield 'a'\n  console.log(value) // 'B'\n  return 'end'\n}\n\nvar gen = genFn()\nconsole.log(typeof gen) // 'object'\nvar g1 = gen.next()\ng1.value // 'a'\ng1.done // false\nvar g2 = gen.next('B')\ng2.value // 'end'\ng2.done // true\n```\n\n## 字符串扩展\n\n### 字符串内容测试\n\n```javascript\n'abcdef'.includes('c') //true\n'abcdef'.includes('ye') //false\n'abcdef'.startsWith('a') //true\n'abcdef'.endswidth('f') //true\n//includes(), startsWith(), endsWith() 都支持第二个参数，\n//类型为数字类型，意为从第 n 个字符开始，endsWith()的第二个参数有点不一样\n'abcdef'.includes('c', 4) //false 从第5个字符开始查找是否有 'c' 这个字符\n'abcdef'.startsWith('d', 3) //true 从第4个字符开始查找是否是以 'd' 字符为开头\n'abcdef'.endsWith('d', 4) //true 前面的4个字符里，是否以 'd' 字符为结尾\n```\n\n**字符串重复输出：**\n这个方法接受一个整数参数，表示要将字符串复制多少次，然后返回拼接所有副本后的结果\n\n```javascript\n'a'.repeat(5) //aaaaa 重复输出5遍\n```\n\n### 模板字符串(``)\n\n```javascript\nfunction authorize(user, action) {\n  if (!user.hasPrivilege(action)) {\n    throw new Error(`用户 ${user.name} 未被授权执行 ${action} 操作。`)\n  }\n}\n```\n\n在这个示例中，`${user.name}`,`${action}`被称为模板占位符，javascript 将把 user.name 和 action 的值插入到最终生成的字符串中。\n\n```javascript\n$('#warning').html(`\n  <h1>小心！>/h1>\n  <p>未经授权打冰球可能受罚\n  将近${maxPenalty}分钟。</p>\n`)\n```\n\n模板字符串中所有的空格、新进、缩进，都会原样输出在生成的字符串中。\n\n### 原生支持模板语言\n\n```javascript\n//es5\n$('#result').append(\n  'There are <b>' +\n    basket.count +\n    '</b> ' +\n    'items in your basket, ' +\n    '<em>' +\n    basket.onSale +\n    '</em> are on sale!'\n)\n//es6\n//在es6中，内容模板，可以定义在 `` 包起来的字符串中，其中的内容会保持原有格式\n//另外可以在字符串中直接使用模板语言进行变量填充，优雅而简洁\n$('#result').append(`\n  There are <b>${basket.count}</b> items\n   in your basket, <em>${basket.onSale}</em>\n  are on sale!\n`)\n```\n\n### 字符串遍历输出\n\n```javascript\n//for ...of 格式为 es6 中的 Iterator 迭代器的输出方式\nfor (let c of 'abc') {\n  console.log(c)\n}\n//a\n//b\n//c\n```\n\n### 字符串补全\n\n```javascript\n//参数1：[number] 目标字符串长度\n//参数2：[string] 进行补全的字符串\n'12345'.padStart(7, '0') //0012345 - 字符串不足7位，在头部补充不足长度的目标字符串\n'12345'.padEnd(7, '0') //1234500 - 在尾部进行字符串补全\n```\n\n### 字符串迭代与结构\n\n```javascript\nlet message = 'abc'\nlet stringIterator = message[Symbol.iterator]()\nstringIterator.next() //{value:a,done:false}\nstringIterator.next() //{value:b,done:false}\n```\n\n或是用 for of\n\n## 数组扩展\n\n### Array.from()\n\n从一个类似数组或可迭代对象中创建一个新的数组实例。\n\n### 合并数组\n\n```javascript\nlet a = [1, 2]\nlet b = [3]\nlet c = [2, 4]\nlet d = [...a, ...b, ...c] //[1, 2, 3, 2, 4] 所有内容合并，但并不会去除重复\n```\n\n### 快速转换为数组\n\n```javascript\nArray.of(3, 4, 5) //[3,4,5]\n```\n\n### 内容过滤\n\n```javascript\n//判断对象是否为数组\nif(Array.isArray(obj)){...}\n\n[1,2,3].includes(5);//false，检索数据中是否有5\n\n//找出第一个匹配表达式的结果，注意是只要匹配到一项，函数即会返回\nlet a = [1, 3, -4, 10].find(function(value, index, arr){\n  return value < 0;\n});\nconsole.log(a);//-4\n\n//找出第一个匹配表达式的结果下标\nlet a = [1, 3, -4, 10].findIndex(function(value, index, arr){\n  return value < 0;\n});\nconsole.log(a);//2\n\n//排除负数内容\nlet a = [1, 3, -4, 10].filter(function(item){\n  return item > 0;\n});\nconsole.log(a);//[1, 3, 10]\n```\n\n## 对象扩展\n\n### 可计算属性\n\n```javascript\nlet nameKey = 'name'\nlet ageKey = '27'\nlet jobKey = 'job'\nlet person = {\n  [nameKey]: 'matt',\n  [ageKey]: 27,\n  [jobKey]: 'software engineer',\n}\n```\n\n可变 key 是在申明时进行值赋值，而不是地址赋值，就算使用对象作为 key 值，key 值在之后也不是可变的\n\n### 属性的简洁表示\n\n```javascript\n//直接使用变量/常量的名称个为对象属性的名称\nlet a = 'abc'\nlet b = { a } //{a: 'abc'}\n\nfunction f(x, y) {\n  return { x, y }\n}\n//等效于\nfunction f(x, y) {\n  return { x: x, y: y }\n}\n\nlet o = {\n  f() {\n    return 1\n  },\n}\n//等效于\nlet o = {\n  f: function () {\n    return 1\n  },\n}\n```\n\n### 对象内容合并\n\n```javascript\nlet a = { a: 1, b: 2 },\n  b = { b: 3 },\n  c = { b: 4, c: 5 }\nlet d = Object.assign(a, b, c)\nconsole.log(d) //{a:1,b:4,c:5}\nconsole.log(a) //{a:1,b:4}\n//上面的合并方式会同时更新 a 对象的内容，a 的属性如果有多次合并会被更新数据，\n//但自身没有的属性，其它对象有的属性不会被添加到 a 身上；\n//参数列中的对象只会影响第一个，后面的参数对象不会被修改数据\n\n//推荐使用这种方式进行对象数据合并\nlet a = { a: 1, b: 2 },\n  b = { b: 3 },\n  c = { b: 4, c: 5 }\nlet d = Object.assign({}, a, b, c) //第一个参数增加一个空对象，在合并时让它被更新，不影响实际的对象变量内容\nconsole.log(d) //{a:1,b:4,c:5}//与上面的方式合并结果一致，使用这种方式, a 对象的内容就不会被影响了\n```\n\n对象内容合并的方向是从参数顺序的后向前合并\n\n### 对象内容集合\n\n#### Object.keys()\n\n获取对象中所有的键名，以数组的形式返回\n\n```javascript\nvar obj = { a: 1, b: 2 }\nvar name = Object.keys(obj) //['a','b,]\n```\n\n#### Object.values()\n\n获取对象中所有值内容，以数组的形式返回\n\n```javascript\nvar obj = { a: 1, b: 2 }\nvar values = Object.values(obj) //[1,2]\n```\n\n#### Object.entries()\n\n获得对象中所有成员的数据，以数组的形式返回，成员的内容也是数组形式\n\n```javascript\nvar obj = { a: 1, b: 2 }\nvar values = Object.entries(obj) //[['a',1],['b',2]]\n```\n\n#### 对象内容测试\n\n```javascript\n//判断对象是否为数组对象\nif (Object.isArray(someobj)) {\n}\n//判断目标对象是否为空对象\nif (someobj && Object.keys(someobj).length);\n```\n\n### Map\n\nMap 的用法和普通对象基本一致，但是主要差异是，Map 实例会维护键值对的插入顺序，因此可以根据插入顺序执行迭代操作。\n\n对象和映射之间存在着显著的内存和性能问题：\n\n- 在给定固定大小的内存时，Map 大约可以比 Object 多存储 50% 的键/值对。\n- Map 在所有的浏览器中一般会比 Object 的插入速度快\n- 从大型 Object 和 Map 中查找键/值对，则 Object 有时候速度会更快。在把 Object 当成数组使用的情况下（比如使用连续整数作为属性），浏览器引擎可以进行优化，在内存中使用更高效的布局。对于这两个类型而言，查找书读不会随着键/值对数量增加而现行增加，如果代码设计大量查找操作，那么某些情况下可能选 Object 更好\n- Object 的 delete 性能很差，在现在很多浏览器依然如此，Map 的 delete 操作都比插入和查找更快，如果代码涉及大量删除操作，那么毫无以为应该选择 map\n\n(思考：vue 中的 data 数据使用 Map 是什么样的呢？)\n\n先看一下它能用非法字符串或者数字作为 key 的特性。\n\n```javascript\nconst map = Map()\nconst obj = { p: 'hellow' }\nmap.set(obj, 'ok') //ok\nconsole.log(obj) //{ p: 'hellow' }\nmap.get(obj) //ok\nmap.has(obj) //true\nmap.delete(obj) //true\nmap.has(obj) //false\n```\n\n需要使用 new Map()初始化一个实例。\n\n- size:获取成员数量\n- set:设置成员 key 和 value\n- get:获取成员属性值\n- has:判断成员是否存在\n- delete:删除成员\n- clear:清空所有\n- keys():返回键名的遍历器\n- values():返回键值的遍历器\n- entries():返回所有成员的遍历器\n- forEach():遍历 Map 的所有成员\n\n### set 对象 （可用于去重）\n\nset 独享允许你存储任何类型唯一值，无论是原始值或是对象。NaN 之间视为相同的值。\n\n```javascript\nconst set1 = new Set([1, 1, 2, NaN, NaN, 5])\n\nconsole.log(set1.has(1)) // expected output: true\n\nconsole.log(set1.has(5)) // expected output: true\n\nconsole.log(set1.has(6)) // expected output:false\n\nconsole.log(Array.from(set1)) // Array [1, 2, 3, 4, NaN, 5]\n```\n\n### 定型数组\n\n所谓定型数组，就是将任何数字转换成一个包含数字比特的数组，随后就可以通过 JS 数组进一步处理\n\n在 JavaScript 中，数字类型变量都是以 64 位浮点型数据格式存储；比如新建一个只需要 8 比特的整数，也需要为其开辟 64 位存储空间，浪费资源，效率也低。而 CanvasFloatArray 需要的是 Float32Array\n\n所有与定型数组有关的操作和对象都集中在这 8 个数据类型上，但是在使用他们之前，需要穿件一个数组缓冲区存储这些数据\n\n数据缓冲区是所有定型数组的根基，它是一段可以包含特定数量字节的内存地址。\n\n## isInteger 与安全整数\n\nisInteger 用于判断一个数值是否为整数。\n\n```javascript\nconsole.log(Number.isInteger(1)) //  true\nconsole.log(Number.isInteger(1.0)) //true\nconsole.log(Nmber.isInteger(1.01)) //false\n```\n\n为了鉴别整数是否在安全范围科研使用 Number.isSafeInteger()方法\n\n## 生成器\n\n```javascript\nfunction* generatorFn() {\n  yield 'foo'\n  yield 'bar'\n  return 'baz'\n}\nlet generatorObject1 = generatorFn()\nlet generatorObject2 = generatorFn()\nconsole.log(generatorObject1.next()) //{done:false,value:'foo'}\nconsole.log(generatorObject2.next()) //{done:false,value:'foo'}\nconsole.log(generatorObject2.next()) //{done:false,value:'bar'}\nconsole.log(generatorObject1.next()) //{done:false,value:'bar'}\n```\n\n**也可以用 for of 对 generatorObject1 进行迭代，那这个可以结合 promise 使用吗？是可以的，就是用 yield 实现了 await**。async 和 await，比起星号和 yield，语义更清楚了。async 表示函数里有异步操作，await 表示紧跟在后面的表达式需要等待结果。co 函数库约定，yield 命令后面只能是 Thunk 函数或 Promise 对象，而 async 函数的 await 命令后面，可以跟 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作）。\n\n### 使用 yield\\* 实现递归算法\n\nyield\\* 表达式迭代操作数，并产生它返回的每个值\n\nyield\\* 表达式本身的值是当迭代器关闭时返回的值（即 done 为 true）时\n\nyield\\*最有用的地方是实现递归操作，此时生成器可以产生自身：\n\n```javascript\nfunction* nTimes(n) {\n  if (n > 0) {\n    yield* nTimes(n - 1)\n    yield n - 1\n  }\n}\n\nfor (const x of nTimes(3)) {\n  console.log(x)\n}\n//0\n//1\n//2\n```\n\n## 箭头函数\n\n**箭头函数不能作为构造函数**：\n\n箭头函数没有自己的this,arguments,super或new.target。箭头函数表达式更实用于那些需要匿名函数的地方，并且它不能用作构造函数，和new一起用会抛出错误，箭头函数没有prototype属性。\n\n箭头函数是有_proto_属性的，所以箭头函数本身是存在原型链的，他也是有自己的构造函数的，但是因为没有prototype 属性，他的实例_proto_没法指向，所以箭头函数也就无法作为构造函数。\n\n同时箭头函数由于没有this指针，通过call()和apply方法调用一个函数时，只能传递参数，不能绑定this。","slug":"JS原生-ES6","published":1,"updated":"2021-03-30T03:37:08.672Z","_id":"ckmejaeta0038xcvr9uzi6w34","comments":1,"layout":"post","photos":[],"link":"","content":"<p>发现自己对于 javascript 的底层 API 所知甚少，在这里记录一下所遇到的有趣又实在的 API 用法。</p>\n<p>ES6 的更新内容主要分为以下几点</p>\n<ul>\n<li>表达式：声明、解构赋值</li>\n<li>内置对象：字符串扩展、数值扩展、对象扩展、数组扩展、函数扩展、正则扩展、Symbol、Set、Map、Proxy、Reflect</li>\n<li>语句与运算：Class、Module、lterator</li>\n<li>异步编程：Promise、Generator、Async</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"var-与-let-的区别\"><a href=\"#var-与-let-的区别\" class=\"headerlink\" title=\"var 与 let 的区别\"></a>var 与 let 的区别</h2><p>使用 var 关键字来声明变量，会出现重复声明导致变量被覆盖不会报错的问题；<br>在 ES6 中引入了 let 来解决 var 关键字带来的潜在问题，若是重复声明则会在控制台报错。</p>\n<h2 id=\"Symbol数据类型\"><a href=\"#Symbol数据类型\" class=\"headerlink\" title=\"Symbol数据类型\"></a><code>Symbol</code>数据类型</h2><p><code>Symbol</code>是通过<code>Symbol</code>函数生成的，凡是属性名属于<code>symbol</code>类型，就都是独一无二的，可以保证不会与其他属性名冲突。</p>\n<h3 id=\"使用-Symbol-来作为唯一标志\"><a href=\"#使用-Symbol-来作为唯一标志\" class=\"headerlink\" title=\"使用 Symbol 来作为唯一标志\"></a>使用 Symbol 来作为唯一标志</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> PROP_NAME = <span class=\"built_in\">Symbol</span>() <span class=\"comment\">//解救无意义的赋值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> PROP_AGE = <span class=\"built_in\">Symbol</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  [PROP_NAME]: <span class=\"string\">&#x27;一斤代码&#x27;</span>, <span class=\"comment\">//对象key值或是常量使用，原理相同</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj[PROP_AGE] = <span class=\"number\">18</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj[PROP_NAME] <span class=\"comment\">// &#x27;一斤代码&#x27;</span></span><br><span class=\"line\">obj[PROP_AGE] <span class=\"comment\">// 18</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-Symbol-定义类的私有属性\"><a href=\"#使用-Symbol-定义类的私有属性\" class=\"headerlink\" title=\"使用 Symbol 定义类的私有属性\"></a>使用 Symbol 定义类的私有属性</h3><p>在 JS 中是没有私有变量的，雷伤所有定义的属性或是方法都是公开访问的。因此可能存在污染等情况，而有了 Symbol 以及模块化机制，类的私有属性和方法才能变成可能。</p>\n<p>在文件 a.js 中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> PASSWORD = <span class=\"built_in\">Symbol</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Login</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">username, password</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.username = username</span><br><span class=\"line\">    <span class=\"built_in\">this</span>[PASSWORD] = password</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">checkPassword</span>(<span class=\"params\">pwd</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>[PASSWORD] === pwd</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Login</span><br></pre></td></tr></table></figure>\n\n<p>在文件 b.js 中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Login <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./a&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> login = <span class=\"keyword\">new</span> Login(<span class=\"string\">&#x27;admin&#x27;</span>, <span class=\"string\">&#x27;123456&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">login.checkPassword(<span class=\"string\">&#x27;admin&#x27;</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">login.PASSWORD <span class=\"comment\">// oh!no!</span></span><br><span class=\"line\">login[PASSWORD] <span class=\"comment\">// oh!no!</span></span><br><span class=\"line\">login[<span class=\"string\">&#x27;PASSWORD&#x27;</span>] <span class=\"comment\">// oh!no!</span></span><br></pre></td></tr></table></figure>\n\n<p>由于 Symbol 常量 PASSWORD 被定义在 a.js 所在的模块中，外面的模块获取不到这个 Symbol,也不可能在创建一个一个一样的 Symbol 出来，所以这个 PASSWORD 只能被限制在 a.js 内部使用，达到一个私有化的效果</p>\n<h3 id=\"注册和获取全局-Symbol\"><a href=\"#注册和获取全局-Symbol\" class=\"headerlink\" title=\"注册和获取全局 Symbol\"></a>注册和获取全局 Symbol</h3><p>Symbol 在不同 window 中创建的 Symbol 实例总是唯一的，如果应用涉及到多个 window（ifram），并需要这些 window 使用的是同一个，那就不能使用 Symbol()了（若是微前端里面又是什么样的呢？有时间试试），这时可以使用 Symbol.for()，它来注册或获取一个 window 间全局的 Symbol 实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> gs1 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">&#x27;global_symbol_1&#x27;</span>) <span class=\"comment\">//注册一个全局Symbol</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> gs2 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">&#x27;global_symbol_1&#x27;</span>) <span class=\"comment\">//获取全局Symbol</span></span><br><span class=\"line\"></span><br><span class=\"line\">gs1 === gs2 <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>这时，在多个相关 window 间也是唯一的。</p>\n<h3 id=\"Symbol-iterator\"><a href=\"#Symbol-iterator\" class=\"headerlink\" title=\"Symbol.iterator\"></a>Symbol.iterator</h3><p>在 Symbol.iterator 出现后，JS 可以定义自己的迭代器<br>iterator 模式总是用同一种逻辑来遍历集合</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(Iterator it = c.iterater(); it.hasNext(); ) &#123; ... &#125;</span><br><span class=\"line\"><span class=\"comment\">//这样就在一定程度上解决了不同的数据类型需要不同的遍历方法</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> students = &#123;</span><br><span class=\"line\">  [<span class=\"built_in\">Symbol</span>.iterator]: <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> i</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> s <span class=\"keyword\">of</span> students) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(s)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//这个yield其实最后返回的就是iterator函数</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"yield\"><a href=\"#yield\" class=\"headerlink\" title=\"yield\"></a>yield</h2><p>yield 关键字用来暂停和恢复一个生成器函数.yield 关键字只能在生成器函数内部使用，用在其他地方会抛出错误。类似函数的 return 关键字，yield 关键字必须直接位于生成器函数定义中，出现在嵌套的非生成器函数中会抛出语法错误</p>\n<p>yield 关键字实际返回一个 IteratorResult 对象，它有两个属性，value 和 done。value 属性是对 yield 表达式求值的结果，而 done 是 false，表示生成器函数尚未完全完成。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">countAppleSales</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> saleList = [<span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; saleList.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> saleList[i]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//一旦生成器函数已定义，可以通过一个构造一个迭代器来使用它</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> appleStore = countAppleSales() <span class=\"comment\">// Generator &#123; &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(appleStore.next()) <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(appleStore.next()) <span class=\"comment\">// &#123; value: 7, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(appleStore.next()) <span class=\"comment\">// &#123; value: 5, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(appleStore.next()) <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h2><p>面向对象编程中的一个核心概念就是类（多态、封装、继承）。可以把事物都抽象成一个个的类来描述他们的信息和行为。</p>\n<p>JavaScript 是一个基于对象的语言，而不是面对对象的语言，它是一个基于 prototype 的语言。它的语法中没有像 Java 之类典型面向对象语言中定义一个类的语法，因此在 ES6 中，提供了一个面向对象风格的类定义方式：使用 class 关键字。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name, age</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.age = age</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">walk</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;I&#x27;m walking...&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"title\">create</span>(<span class=\"params\">name, age</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义静态方法</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Person(name, age)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"super\"><a href=\"#super\" class=\"headerlink\" title=\"super\"></a>super</h3><p>super 关键字用于访问和调用一个对象的父对象的函数。( 只能在 class 内部用 )</p>\n<p>在构造函数中使用时，super 关键字将单独出现，并且必须在使用 this 之前使用。</p>\n<p>super 关键字也可以用来调用父对象上的函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">super</span>([<span class=\"built_in\">arguments</span>])</span><br><span class=\"line\"><span class=\"comment\">// 调用 父对象/父类 的构造函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">super</span>.functionOnParent([<span class=\"built_in\">arguments</span>])</span><br><span class=\"line\"><span class=\"comment\">// 调用 父对象/父类 上的方法</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Polygon</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">construector</span>(<span class=\"params\">height, width</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;Polygon&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.height = height</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.width = width</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">sayName</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Hi,I am a&#x27;</span>, <span class=\"built_in\">this</span>.name + <span class=\"string\">&#x27;.&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">extends</span> <span class=\"title\">Polygon</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">length</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.height;</span><br><span class=\"line\">      <span class=\"comment\">// ReferenceError ,super 需要先被调用！</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">       这里，它调用父类的构造函数的length,</span></span><br><span class=\"line\"><span class=\"comment\">       作为Polygon 的 width 和 height</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">       <span class=\"built_in\">super</span>(length,length)</span><br><span class=\"line\">       <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">       注意，在派生的类中，在你可以使用this之前，必须 先调用super()。忽略这，这将导致引用错误。</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">       <span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;Square&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> <span class=\"title\">area</span>()&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.height * <span class=\"built_in\">this</span>.width</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">set</span> <span class=\"title\">area</span>(<span class=\"params\">value</span>)&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.area = value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用 super 调用父类的静态方法。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Human</span></span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"title\">ping</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;ping&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">computer</span> <span class=\"title\">eatends</span> <span class=\"title\">Human</span></span>&#123; <span class=\"comment\">//使用extend 实现继承另一个类</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"title\">pingpong</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.ping()+<span class=\"string\">&#x27;pong&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Computer.pingpong()</span><br></pre></td></tr></table></figure>\n\n<p><strong>原始 class 实现方式</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Parent.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  Parent.call(<span class=\"built_in\">this</span>, name)</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//实现继承</span></span><br><span class=\"line\">Child.prototype = <span class=\"keyword\">new</span> Parent()</span><br><span class=\"line\">Child.prototype.constructor = Child</span><br><span class=\"line\"></span><br><span class=\"line\">Child.prototype.getAge = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.Age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> people = <span class=\"keyword\">new</span> Child(<span class=\"string\">&#x27;lily&#x27;</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(people.getName())</span><br></pre></td></tr></table></figure>\n\n<p><strong>语法糖</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">construtor</span>(<span class=\"params\">name</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">getAge</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.age</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> people = <span class=\"keyword\">new</span> Child(<span class=\"string\">&quot;lily&quot;</span>,<span class=\"number\">20</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(people.getName())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"异步函数\"><a href=\"#异步函数\" class=\"headerlink\" title=\"异步函数\"></a>异步函数</h2><p>除了 javascript Promise , 异步函数进一步重写了传统的异步代码结构。</p>\n<h3 id=\"一个以-async-为前缀的常规函数\"><a href=\"#一个以-async-为前缀的常规函数\" class=\"headerlink\" title=\"一个以 async 为前缀的常规函数\"></a>一个以 async 为前缀的常规函数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetchdata</span>(<span class=\"params\">url</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在异步函数（Async-function-）内，使用-await-关键字调用异步操作函数\"><a href=\"#在异步函数（Async-function-）内，使用-await-关键字调用异步操作函数\" class=\"headerlink\" title=\"在异步函数（Async function ）内，使用 await 关键字调用异步操作函数\"></a>在异步函数（Async function ）内，使用 await 关键字调用异步操作函数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getaSync</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\">    xhr.open(<span class=\"string\">&#x27;GET&#x27;</span>, url)</span><br><span class=\"line\">    xhr.onload = <span class=\"function\">() =&gt;</span> resolve(xhr.responseText)</span><br><span class=\"line\">    xhr.onerror = <span class=\"function\">() =&gt;</span> reject(xhr.statusText)</span><br><span class=\"line\">    xhr.send()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetchdata</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> text1 = <span class=\"keyword\">await</span> getasync(<span class=\"string\">&#x27;test.txt&#x27;</span>)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.logtex(text1)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> text2 = <span class=\"keyword\">await</span> getasync(<span class=\"string\">&#x27;test2.text&#x27;</span>)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(text2)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> text3 = <span class=\"keyword\">await</span> getasync(<span class=\"string\">&#x27;text3.text&#x27;</span>)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(text3)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Finished&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fetchdata().then(<span class=\"function\">(<span class=\"params\">msg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(msg) <span class=\"comment\">//“test.txt”，“test2.txt”，“test3.txt”</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在异步函数中，我们把异步函数 getasync() 当做是同步函数，没有 then() 方法或回调函数通知下一步。无论何时遇到关键字 await , 执行都会停止，直到 getasync() 解决，然后再转到异步函数中的下一行。结果与纯粹的基于 Promise , 使用一串 then 方法的方式一样</p>\n<h2 id=\"解构\"><a href=\"#解构\" class=\"headerlink\" title=\"解构\"></a>解构</h2><p>ES6 解构并非一个新的功能，而是一个新的复制语法，可以快速解压缩对象属性和数组中的值，并将它们分配给各个变量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> profile = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;georage&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">39</span>, <span class=\"attr\">hobby</span>: <span class=\"string\">&#x27;Tennis&#x27;</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; name, hobby &#125; = profile</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name) <span class=\"comment\">//&#x27;georage&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hobby) <span class=\"comment\">//&#x27;Tennis&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里我用解构快速提取 profile 对象的 name 和 hobby 属性。</p>\n<p>使用别名，你可以使用与你正在提取值的对象属性不同的变量名：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> profile = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;georage&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">39</span>, <span class=\"attr\">hobby</span>: <span class=\"string\">&#x27;Tennis&#x27;</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">name</span>: n, <span class=\"attr\">hobby</span>: h &#125; = profile</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(n) <span class=\"comment\">//&#x27;georage&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(h) <span class=\"comment\">//&#x27;Tennis&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"嵌套对象解构\"><a href=\"#嵌套对象解构\" class=\"headerlink\" title=\"嵌套对象解构\"></a>嵌套对象解构</h3><p>解构也可以与嵌套对象一起工作，可以使用它来快速解开来自复杂的 JSON 请求的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jsondata = &#123;</span><br><span class=\"line\">  title: <span class=\"string\">&#x27;XX&#x27;</span>,</span><br><span class=\"line\">  details: &#123;</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      created: <span class=\"string\">&#x27;2017/09/19&#x27;</span>,</span><br><span class=\"line\">      modified: <span class=\"string\">&#x27;2017/09/20&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    catrgory: <span class=\"string\">&#x27;js&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  url: <span class=\"string\">&#x27;/baidu/&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;</span><br><span class=\"line\">  title,</span><br><span class=\"line\">  details: &#123;</span><br><span class=\"line\">    data: &#123; created, modified &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125; = jsondata</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(title)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(created)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(modified)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"解构数组\"><a href=\"#解构数组\" class=\"headerlink\" title=\"解构数组\"></a>解构数组</h3><p>数组的解构与对象上的工作方式类似，除了左边的花括号使用<strong>方括号</strong>代替：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> soccerteam = [<span class=\"string\">&#x27;George&#x27;</span>, <span class=\"string\">&#x27;Dennis&#x27;</span>, <span class=\"string\">&#x27;Sandy&#x27;</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> [a, b] = soccerteam</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// &quot;George&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">// &quot;Dennis&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>你可以跳过某些数组元素，通过使用 (,)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"keyword\">var</span> soccerteam = [<span class=\"string\">&#x27;George&#x27;</span>, <span class=\"string\">&#x27;Dennis&#x27;</span>, <span class=\"string\">&#x27;Sandy&#x27;</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> [a,,b] = soccerteam</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// &quot;George&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">// &quot;Sandy&quot;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"comment\">//定义了三个变量，并对应赋了值；如果值的个数与变量名个数不匹配，没有对应上的变量值为 undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c=<span class=\"string\">&#x27;default&#x27;</span>] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"comment\">//指定默认值，在定义变量时就指定了默认值，如果赋值时，没有给定内容，则会取默认值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, …b] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"comment\">//这里 b 的值为[2，3]，这样可以快速使用剩余的数据赋值给变量，</span></span><br><span class=\"line\"><span class=\"comment\">//但实际使用中为了避免代码阅读的歧义，不推荐这么使用，仅作了解即可</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a,b,c] = <span class=\"string\">&#x27;yes&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);<span class=\"comment\">//y</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);<span class=\"comment\">//e</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c);<span class=\"comment\">//s</span></span><br></pre></td></tr></table></figure>\n\n<p>字符串的结构赋值会以单个字符串的方式进行赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; length &#125; = <span class=\"string\">&#x27;yes&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(length) <span class=\"comment\">//3</span></span><br></pre></td></tr></table></figure>\n\n<p>以对象赋值的方法，如果名称是字符串的自带属性，则会获得属性值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">&#123; a = <span class=\"number\">10</span>, b, c = <span class=\"number\">10</span> &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>) <span class=\"comment\">//&#123; a: 1, b: 2 &#125;</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//1</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b) <span class=\"comment\">//2</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(c) <span class=\"comment\">//10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(obj)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Spread-操作符\"><a href=\"#Spread-操作符\" class=\"headerlink\" title=\"Spread 操作符\"></a>Spread 操作符</h2><p>spread(…)操作符也称作展开操作符，作用是讲可迭代的对象进行展开</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fruits = [<span class=\"string\">&#x27;apple&#x27;</span>, <span class=\"string\">&#x27;orange&#x27;</span>, <span class=\"string\">&#x27;peach&#x27;</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> shoppingList = [<span class=\"string\">&#x27;t-shirt&#x27;</span>, ...fruits, <span class=\"string\">&#x27;egg&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// shoppingList的值：[&quot;t-shirt&quot;, &quot;apple&quot;, &quot;organe&quot;, &quot;peach&quot;, &quot;egg&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<p>Spread 操作符可以展开 Iterable 的对象，这样的话，除了数组之外，所有实现了 Symbol.iterator 的对象，如：Set, Map 和 Generator 等等，都可以使用 Spread 操作符。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">map.set(<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">map.set(<span class=\"string\">&#x27;b&#x27;</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [...map] <span class=\"comment\">//[[&quot;a&quot;, 1], [&quot;b&quot;, 2]]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>()</span><br><span class=\"line\">set.add(<span class=\"number\">1</span>)</span><br><span class=\"line\">set.add(<span class=\"number\">2</span>)</span><br><span class=\"line\">set.add(<span class=\"number\">1</span>)</span><br><span class=\"line\">set.add(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [...set] <span class=\"comment\">//[1, 2, 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">myGen</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;world&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [...myGen()] <span class=\"comment\">//[&quot;hello&quot;, &quot;world&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"默认和剩余参数\"><a href=\"#默认和剩余参数\" class=\"headerlink\" title=\"默认和剩余参数\"></a>默认和剩余参数</h2><h3 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数\"></a>默认参数</h3><p>在这之前我们都使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getarea</span>(<span class=\"params\">w, h</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> w = w || <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> h = h || <span class=\"number\">15</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> w * h</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>有了 ES6 对默认参数的支持后</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getarea</span>(<span class=\"params\">w = <span class=\"number\">10</span>, h = <span class=\"number\">15</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> w * h</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getarea(<span class=\"number\">5</span>) <span class=\"comment\">//75</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"剩余参数-（Rest-Parameters）\"><a href=\"#剩余参数-（Rest-Parameters）\" class=\"headerlink\" title=\"剩余参数 （Rest Parameters）\"></a>剩余参数 （Rest Parameters）</h3><p>ES6 中的 Rest Parameters 使得将函数参数转换成数组的操作变得简单。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addit</span>(<span class=\"params\">...theNumber</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//get the sum of the array elements</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> theNumber.reduce(<span class=\"function\">(<span class=\"params\">prevnum.curnum</span>) =&gt;</span> prevnu + curnum, <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">addit(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>) <span class=\"comment\">//10</span></span><br></pre></td></tr></table></figure>\n\n<p>通过在命名参数前添加 3 个点。在该位置和之后输入到函数中的参数将自动转换为数组。</p>\n<p>没有 Rest Parameters 则会手动将参数转换为数组 :</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addit</span>(<span class=\"params\">theNumbers</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// force arguments object into array</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> numArray = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> numArray.reduce(<span class=\"function\">(<span class=\"params\">prevnum, curnum</span>) =&gt;</span> prevnum + curnum, <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">addit(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>) <span class=\"comment\">// returns 10</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">...[a, b, c]</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b + c</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f(<span class=\"number\">1</span>) <span class=\"comment\">// NaN (b and c are undefined)</span></span><br><span class=\"line\">f(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>) <span class=\"comment\">// 6</span></span><br><span class=\"line\">f(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>) <span class=\"comment\">//6 (the fourth parameter is not destructured)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Generator-函数\"><a href=\"#Generator-函数\" class=\"headerlink\" title=\"Generator 函数\"></a>Generator 函数</h2><p>Generator 函数是协程在 ES6 的实现，最大特点就是可以交出函数的执行权（即暂停执行）。协程：多个现成互相协作，完成异步任务。</p>\n<p>协程有点像函数，又有点想线程。他的运行流程大致如下：</p>\n<ul>\n<li>第一步，协程 A 开始执行。</li>\n<li>第二步，协程执行懂啊一半，进入暂停，执行权转移到协程 B。</li>\n<li>第三步，一段时间后协程 B 交换执行权。</li>\n<li>第四步，协程 A 恢复执行。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> y = <span class=\"keyword\">yield</span> x + <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> y</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面整个代码就是一个封装的异步任务，或者说是异步任务的容器。异步操作需要暂停的地方，都用 yield 语句注明。Generator 函数的执行方法如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> g = gen(<span class=\"number\">1</span>)</span><br><span class=\"line\">g.next() <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\">g.next() <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>next 方法的作用是分阶段执行 Generator 函数。每次调用 next 方法，返回一个对象，表示当前阶段的信息（value 和 done 属性）。value 属性是 yield 语法后面表达式的值。表示当前阶段的值；done 属性是一个布尔值，表示 Generator 函数是否执行完毕，即是否还有下一个阶段。</p>\n<p>这是一个生成器的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">genFn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;begin&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> value = <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;a&#x27;</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value) <span class=\"comment\">// &#x27;B&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;end&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> gen = genFn()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> gen) <span class=\"comment\">// &#x27;object&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> g1 = gen.next()</span><br><span class=\"line\">g1.value <span class=\"comment\">// &#x27;a&#x27;</span></span><br><span class=\"line\">g1.done <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> g2 = gen.next(<span class=\"string\">&#x27;B&#x27;</span>)</span><br><span class=\"line\">g2.value <span class=\"comment\">// &#x27;end&#x27;</span></span><br><span class=\"line\">g2.done <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串扩展\"><a href=\"#字符串扩展\" class=\"headerlink\" title=\"字符串扩展\"></a>字符串扩展</h2><h3 id=\"字符串内容测试\"><a href=\"#字符串内容测试\" class=\"headerlink\" title=\"字符串内容测试\"></a>字符串内容测试</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;abcdef&#x27;</span>.includes(<span class=\"string\">&#x27;c&#x27;</span>) <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"string\">&#x27;abcdef&#x27;</span>.includes(<span class=\"string\">&#x27;ye&#x27;</span>) <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"string\">&#x27;abcdef&#x27;</span>.startsWith(<span class=\"string\">&#x27;a&#x27;</span>) <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"string\">&#x27;abcdef&#x27;</span>.endswidth(<span class=\"string\">&#x27;f&#x27;</span>) <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"comment\">//includes(), startsWith(), endsWith() 都支持第二个参数，</span></span><br><span class=\"line\"><span class=\"comment\">//类型为数字类型，意为从第 n 个字符开始，endsWith()的第二个参数有点不一样</span></span><br><span class=\"line\"><span class=\"string\">&#x27;abcdef&#x27;</span>.includes(<span class=\"string\">&#x27;c&#x27;</span>, <span class=\"number\">4</span>) <span class=\"comment\">//false 从第5个字符开始查找是否有 &#x27;c&#x27; 这个字符</span></span><br><span class=\"line\"><span class=\"string\">&#x27;abcdef&#x27;</span>.startsWith(<span class=\"string\">&#x27;d&#x27;</span>, <span class=\"number\">3</span>) <span class=\"comment\">//true 从第4个字符开始查找是否是以 &#x27;d&#x27; 字符为开头</span></span><br><span class=\"line\"><span class=\"string\">&#x27;abcdef&#x27;</span>.endsWith(<span class=\"string\">&#x27;d&#x27;</span>, <span class=\"number\">4</span>) <span class=\"comment\">//true 前面的4个字符里，是否以 &#x27;d&#x27; 字符为结尾</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>字符串重复输出：</strong><br>这个方法接受一个整数参数，表示要将字符串复制多少次，然后返回拼接所有副本后的结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;a&#x27;</span>.repeat(<span class=\"number\">5</span>) <span class=\"comment\">//aaaaa 重复输出5遍</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串(``)\"></a>模板字符串(``)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">authorize</span>(<span class=\"params\">user, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!user.hasPrivilege(action)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`用户 <span class=\"subst\">$&#123;user.name&#125;</span> 未被授权执行 <span class=\"subst\">$&#123;action&#125;</span> 操作。`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个示例中，<code>$&#123;user.name&#125;</code>,<code>$&#123;action&#125;</code>被称为模板占位符，javascript 将把 user.name 和 action 的值插入到最终生成的字符串中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;#warning&#x27;</span>).html(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  &lt;h1&gt;小心！&gt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;p&gt;未经授权打冰球可能受罚</span></span><br><span class=\"line\"><span class=\"string\">  将近<span class=\"subst\">$&#123;maxPenalty&#125;</span>分钟。&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span>)</span><br></pre></td></tr></table></figure>\n\n<p>模板字符串中所有的空格、新进、缩进，都会原样输出在生成的字符串中。</p>\n<h3 id=\"原生支持模板语言\"><a href=\"#原生支持模板语言\" class=\"headerlink\" title=\"原生支持模板语言\"></a>原生支持模板语言</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//es5</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#result&#x27;</span>).append(</span><br><span class=\"line\">  <span class=\"string\">&#x27;There are &lt;b&gt;&#x27;</span> +</span><br><span class=\"line\">    basket.count +</span><br><span class=\"line\">    <span class=\"string\">&#x27;&lt;/b&gt; &#x27;</span> +</span><br><span class=\"line\">    <span class=\"string\">&#x27;items in your basket, &#x27;</span> +</span><br><span class=\"line\">    <span class=\"string\">&#x27;&lt;em&gt;&#x27;</span> +</span><br><span class=\"line\">    basket.onSale +</span><br><span class=\"line\">    <span class=\"string\">&#x27;&lt;/em&gt; are on sale!&#x27;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">//es6</span></span><br><span class=\"line\"><span class=\"comment\">//在es6中，内容模板，可以定义在 `` 包起来的字符串中，其中的内容会保持原有格式</span></span><br><span class=\"line\"><span class=\"comment\">//另外可以在字符串中直接使用模板语言进行变量填充，优雅而简洁</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#result&#x27;</span>).append(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  There are &lt;b&gt;<span class=\"subst\">$&#123;basket.count&#125;</span>&lt;/b&gt; items</span></span><br><span class=\"line\"><span class=\"string\">   in your basket, &lt;em&gt;<span class=\"subst\">$&#123;basket.onSale&#125;</span>&lt;/em&gt;</span></span><br><span class=\"line\"><span class=\"string\">  are on sale!</span></span><br><span class=\"line\"><span class=\"string\">`</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串遍历输出\"><a href=\"#字符串遍历输出\" class=\"headerlink\" title=\"字符串遍历输出\"></a>字符串遍历输出</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//for ...of 格式为 es6 中的 Iterator 迭代器的输出方式</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> c <span class=\"keyword\">of</span> <span class=\"string\">&#x27;abc&#x27;</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(c)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//a</span></span><br><span class=\"line\"><span class=\"comment\">//b</span></span><br><span class=\"line\"><span class=\"comment\">//c</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串补全\"><a href=\"#字符串补全\" class=\"headerlink\" title=\"字符串补全\"></a>字符串补全</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//参数1：[number] 目标字符串长度</span></span><br><span class=\"line\"><span class=\"comment\">//参数2：[string] 进行补全的字符串</span></span><br><span class=\"line\"><span class=\"string\">&#x27;12345&#x27;</span>.padStart(<span class=\"number\">7</span>, <span class=\"string\">&#x27;0&#x27;</span>) <span class=\"comment\">//0012345 - 字符串不足7位，在头部补充不足长度的目标字符串</span></span><br><span class=\"line\"><span class=\"string\">&#x27;12345&#x27;</span>.padEnd(<span class=\"number\">7</span>, <span class=\"string\">&#x27;0&#x27;</span>) <span class=\"comment\">//1234500 - 在尾部进行字符串补全</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串迭代与结构\"><a href=\"#字符串迭代与结构\" class=\"headerlink\" title=\"字符串迭代与结构\"></a>字符串迭代与结构</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> message = <span class=\"string\">&#x27;abc&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> stringIterator = message[<span class=\"built_in\">Symbol</span>.iterator]()</span><br><span class=\"line\">stringIterator.next() <span class=\"comment\">//&#123;value:a,done:false&#125;</span></span><br><span class=\"line\">stringIterator.next() <span class=\"comment\">//&#123;value:b,done:false&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>或是用 for of</p>\n<h2 id=\"数组扩展\"><a href=\"#数组扩展\" class=\"headerlink\" title=\"数组扩展\"></a>数组扩展</h2><h3 id=\"Array-from\"><a href=\"#Array-from\" class=\"headerlink\" title=\"Array.from()\"></a>Array.from()</h3><p>从一个类似数组或可迭代对象中创建一个新的数组实例。</p>\n<h3 id=\"合并数组\"><a href=\"#合并数组\" class=\"headerlink\" title=\"合并数组\"></a>合并数组</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = [<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> c = [<span class=\"number\">2</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> d = [...a, ...b, ...c] <span class=\"comment\">//[1, 2, 3, 2, 4] 所有内容合并，但并不会去除重复</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"快速转换为数组\"><a href=\"#快速转换为数组\" class=\"headerlink\" title=\"快速转换为数组\"></a>快速转换为数组</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>) <span class=\"comment\">//[3,4,5]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"内容过滤\"><a href=\"#内容过滤\" class=\"headerlink\" title=\"内容过滤\"></a>内容过滤</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//判断对象是否为数组</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">Array</span>.isArray(obj))&#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].includes(<span class=\"number\">5</span>);<span class=\"comment\">//false，检索数据中是否有5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//找出第一个匹配表达式的结果，注意是只要匹配到一项，函数即会返回</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, -<span class=\"number\">4</span>, <span class=\"number\">10</span>].find(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, arr</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);<span class=\"comment\">//-4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//找出第一个匹配表达式的结果下标</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, -<span class=\"number\">4</span>, <span class=\"number\">10</span>].findIndex(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, arr</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);<span class=\"comment\">//2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//排除负数内容</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, -<span class=\"number\">4</span>, <span class=\"number\">10</span>].filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);<span class=\"comment\">//[1, 3, 10]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对象扩展\"><a href=\"#对象扩展\" class=\"headerlink\" title=\"对象扩展\"></a>对象扩展</h2><h3 id=\"可计算属性\"><a href=\"#可计算属性\" class=\"headerlink\" title=\"可计算属性\"></a>可计算属性</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> nameKey = <span class=\"string\">&#x27;name&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ageKey = <span class=\"string\">&#x27;27&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> jobKey = <span class=\"string\">&#x27;job&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  [nameKey]: <span class=\"string\">&#x27;matt&#x27;</span>,</span><br><span class=\"line\">  [ageKey]: <span class=\"number\">27</span>,</span><br><span class=\"line\">  [jobKey]: <span class=\"string\">&#x27;software engineer&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可变 key 是在申明时进行值赋值，而不是地址赋值，就算使用对象作为 key 值，key 值在之后也不是可变的</p>\n<h3 id=\"属性的简洁表示\"><a href=\"#属性的简洁表示\" class=\"headerlink\" title=\"属性的简洁表示\"></a>属性的简洁表示</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//直接使用变量/常量的名称个为对象属性的名称</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">&#x27;abc&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = &#123; a &#125; <span class=\"comment\">//&#123;a: &#x27;abc&#x27;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; x, y &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//等效于</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">x</span>: x, <span class=\"attr\">y</span>: y &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> o = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">f</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//等效于</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> o = &#123;</span><br><span class=\"line\">  f: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对象内容合并\"><a href=\"#对象内容合并\" class=\"headerlink\" title=\"对象内容合并\"></a>对象内容合并</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">  b = &#123; <span class=\"attr\">b</span>: <span class=\"number\">3</span> &#125;,</span><br><span class=\"line\">  c = &#123; <span class=\"attr\">b</span>: <span class=\"number\">4</span>, <span class=\"attr\">c</span>: <span class=\"number\">5</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> d = <span class=\"built_in\">Object</span>.assign(a, b, c)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d) <span class=\"comment\">//&#123;a:1,b:4,c:5&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//&#123;a:1,b:4&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//上面的合并方式会同时更新 a 对象的内容，a 的属性如果有多次合并会被更新数据，</span></span><br><span class=\"line\"><span class=\"comment\">//但自身没有的属性，其它对象有的属性不会被添加到 a 身上；</span></span><br><span class=\"line\"><span class=\"comment\">//参数列中的对象只会影响第一个，后面的参数对象不会被修改数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//推荐使用这种方式进行对象数据合并</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">  b = &#123; <span class=\"attr\">b</span>: <span class=\"number\">3</span> &#125;,</span><br><span class=\"line\">  c = &#123; <span class=\"attr\">b</span>: <span class=\"number\">4</span>, <span class=\"attr\">c</span>: <span class=\"number\">5</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> d = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, a, b, c) <span class=\"comment\">//第一个参数增加一个空对象，在合并时让它被更新，不影响实际的对象变量内容</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d) <span class=\"comment\">//&#123;a:1,b:4,c:5&#125;//与上面的方式合并结果一致，使用这种方式, a 对象的内容就不会被影响了</span></span><br></pre></td></tr></table></figure>\n\n<p>对象内容合并的方向是从参数顺序的后向前合并</p>\n<h3 id=\"对象内容集合\"><a href=\"#对象内容集合\" class=\"headerlink\" title=\"对象内容集合\"></a>对象内容集合</h3><h4 id=\"Object-keys\"><a href=\"#Object-keys\" class=\"headerlink\" title=\"Object.keys()\"></a>Object.keys()</h4><p>获取对象中所有的键名，以数组的形式返回</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"built_in\">Object</span>.keys(obj) <span class=\"comment\">//[&#x27;a&#x27;,&#x27;b,]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Object-values\"><a href=\"#Object-values\" class=\"headerlink\" title=\"Object.values()\"></a>Object.values()</h4><p>获取对象中所有值内容，以数组的形式返回</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> values = <span class=\"built_in\">Object</span>.values(obj) <span class=\"comment\">//[1,2]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Object-entries\"><a href=\"#Object-entries\" class=\"headerlink\" title=\"Object.entries()\"></a>Object.entries()</h4><p>获得对象中所有成员的数据，以数组的形式返回，成员的内容也是数组形式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> values = <span class=\"built_in\">Object</span>.entries(obj) <span class=\"comment\">//[[&#x27;a&#x27;,1],[&#x27;b&#x27;,2]]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"对象内容测试\"><a href=\"#对象内容测试\" class=\"headerlink\" title=\"对象内容测试\"></a>对象内容测试</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//判断对象是否为数组对象</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.isArray(someobj)) &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//判断目标对象是否为空对象</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (someobj &amp;&amp; <span class=\"built_in\">Object</span>.keys(someobj).length);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h3><p>Map 的用法和普通对象基本一致，但是主要差异是，Map 实例会维护键值对的插入顺序，因此可以根据插入顺序执行迭代操作。</p>\n<p>对象和映射之间存在着显著的内存和性能问题：</p>\n<ul>\n<li>在给定固定大小的内存时，Map 大约可以比 Object 多存储 50% 的键/值对。</li>\n<li>Map 在所有的浏览器中一般会比 Object 的插入速度快</li>\n<li>从大型 Object 和 Map 中查找键/值对，则 Object 有时候速度会更快。在把 Object 当成数组使用的情况下（比如使用连续整数作为属性），浏览器引擎可以进行优化，在内存中使用更高效的布局。对于这两个类型而言，查找书读不会随着键/值对数量增加而现行增加，如果代码设计大量查找操作，那么某些情况下可能选 Object 更好</li>\n<li>Object 的 delete 性能很差，在现在很多浏览器依然如此，Map 的 delete 操作都比插入和查找更快，如果代码涉及大量删除操作，那么毫无以为应该选择 map</li>\n</ul>\n<p>(思考：vue 中的 data 数据使用 Map 是什么样的呢？)</p>\n<p>先看一下它能用非法字符串或者数字作为 key 的特性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"built_in\">Map</span>()</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123; <span class=\"attr\">p</span>: <span class=\"string\">&#x27;hellow&#x27;</span> &#125;</span><br><span class=\"line\">map.set(obj, <span class=\"string\">&#x27;ok&#x27;</span>) <span class=\"comment\">//ok</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj) <span class=\"comment\">//&#123; p: &#x27;hellow&#x27; &#125;</span></span><br><span class=\"line\">map.get(obj) <span class=\"comment\">//ok</span></span><br><span class=\"line\">map.has(obj) <span class=\"comment\">//true</span></span><br><span class=\"line\">map.delete(obj) <span class=\"comment\">//true</span></span><br><span class=\"line\">map.has(obj) <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<p>需要使用 new Map()初始化一个实例。</p>\n<ul>\n<li>size:获取成员数量</li>\n<li>set:设置成员 key 和 value</li>\n<li>get:获取成员属性值</li>\n<li>has:判断成员是否存在</li>\n<li>delete:删除成员</li>\n<li>clear:清空所有</li>\n<li>keys():返回键名的遍历器</li>\n<li>values():返回键值的遍历器</li>\n<li>entries():返回所有成员的遍历器</li>\n<li>forEach():遍历 Map 的所有成员</li>\n</ul>\n<h3 id=\"set-对象-（可用于去重）\"><a href=\"#set-对象-（可用于去重）\" class=\"headerlink\" title=\"set 对象 （可用于去重）\"></a>set 对象 （可用于去重）</h3><p>set 独享允许你存储任何类型唯一值，无论是原始值或是对象。NaN 之间视为相同的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> set1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"literal\">NaN</span>, <span class=\"literal\">NaN</span>, <span class=\"number\">5</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(set1.has(<span class=\"number\">1</span>)) <span class=\"comment\">// expected output: true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(set1.has(<span class=\"number\">5</span>)) <span class=\"comment\">// expected output: true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(set1.has(<span class=\"number\">6</span>)) <span class=\"comment\">// expected output:false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.from(set1)) <span class=\"comment\">// Array [1, 2, 3, 4, NaN, 5]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定型数组\"><a href=\"#定型数组\" class=\"headerlink\" title=\"定型数组\"></a>定型数组</h3><p>所谓定型数组，就是将任何数字转换成一个包含数字比特的数组，随后就可以通过 JS 数组进一步处理</p>\n<p>在 JavaScript 中，数字类型变量都是以 64 位浮点型数据格式存储；比如新建一个只需要 8 比特的整数，也需要为其开辟 64 位存储空间，浪费资源，效率也低。而 CanvasFloatArray 需要的是 Float32Array</p>\n<p>所有与定型数组有关的操作和对象都集中在这 8 个数据类型上，但是在使用他们之前，需要穿件一个数组缓冲区存储这些数据</p>\n<p>数据缓冲区是所有定型数组的根基，它是一段可以包含特定数量字节的内存地址。</p>\n<h2 id=\"isInteger-与安全整数\"><a href=\"#isInteger-与安全整数\" class=\"headerlink\" title=\"isInteger 与安全整数\"></a>isInteger 与安全整数</h2><p>isInteger 用于判断一个数值是否为整数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isInteger(<span class=\"number\">1</span>)) <span class=\"comment\">//  true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isInteger(<span class=\"number\">1.0</span>)) <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Nmber.isInteger(<span class=\"number\">1.01</span>)) <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<p>为了鉴别整数是否在安全范围科研使用 Number.isSafeInteger()方法</p>\n<h2 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">generatorFn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;foo&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;bar&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;baz&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> generatorObject1 = generatorFn()</span><br><span class=\"line\"><span class=\"keyword\">let</span> generatorObject2 = generatorFn()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(generatorObject1.next()) <span class=\"comment\">//&#123;done:false,value:&#x27;foo&#x27;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(generatorObject2.next()) <span class=\"comment\">//&#123;done:false,value:&#x27;foo&#x27;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(generatorObject2.next()) <span class=\"comment\">//&#123;done:false,value:&#x27;bar&#x27;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(generatorObject1.next()) <span class=\"comment\">//&#123;done:false,value:&#x27;bar&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>也可以用 for of 对 generatorObject1 进行迭代，那这个可以结合 promise 使用吗？是可以的，就是用 yield 实现了 await</strong>。async 和 await，比起星号和 yield，语义更清楚了。async 表示函数里有异步操作，await 表示紧跟在后面的表达式需要等待结果。co 函数库约定，yield 命令后面只能是 Thunk 函数或 Promise 对象，而 async 函数的 await 命令后面，可以跟 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作）。</p>\n<h3 id=\"使用-yield-实现递归算法\"><a href=\"#使用-yield-实现递归算法\" class=\"headerlink\" title=\"使用 yield* 实现递归算法\"></a>使用 yield* 实现递归算法</h3><p>yield* 表达式迭代操作数，并产生它返回的每个值</p>\n<p>yield* 表达式本身的值是当迭代器关闭时返回的值（即 done 为 true）时</p>\n<p>yield*最有用的地方是实现递归操作，此时生成器可以产生自身：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">nTimes</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span>* nTimes(n - <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> n - <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> x <span class=\"keyword\">of</span> nTimes(<span class=\"number\">3</span>)) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//0</span></span><br><span class=\"line\"><span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h2><p><strong>箭头函数不能作为构造函数</strong>：</p>\n<p>箭头函数没有自己的this,arguments,super或new.target。箭头函数表达式更实用于那些需要匿名函数的地方，并且它不能用作构造函数，和new一起用会抛出错误，箭头函数没有prototype属性。</p>\n<p>箭头函数是有_proto_属性的，所以箭头函数本身是存在原型链的，他也是有自己的构造函数的，但是因为没有prototype 属性，他的实例_proto_没法指向，所以箭头函数也就无法作为构造函数。</p>\n<p>同时箭头函数由于没有this指针，通过call()和apply方法调用一个函数时，只能传递参数，不能绑定this。</p>\n","site":{"data":{}},"excerpt":"<p>发现自己对于 javascript 的底层 API 所知甚少，在这里记录一下所遇到的有趣又实在的 API 用法。</p>\n<p>ES6 的更新内容主要分为以下几点</p>\n<ul>\n<li>表达式：声明、解构赋值</li>\n<li>内置对象：字符串扩展、数值扩展、对象扩展、数组扩展、函数扩展、正则扩展、Symbol、Set、Map、Proxy、Reflect</li>\n<li>语句与运算：Class、Module、lterator</li>\n<li>异步编程：Promise、Generator、Async</li>\n</ul>","more":"<h2 id=\"var-与-let-的区别\"><a href=\"#var-与-let-的区别\" class=\"headerlink\" title=\"var 与 let 的区别\"></a>var 与 let 的区别</h2><p>使用 var 关键字来声明变量，会出现重复声明导致变量被覆盖不会报错的问题；<br>在 ES6 中引入了 let 来解决 var 关键字带来的潜在问题，若是重复声明则会在控制台报错。</p>\n<h2 id=\"Symbol数据类型\"><a href=\"#Symbol数据类型\" class=\"headerlink\" title=\"Symbol数据类型\"></a><code>Symbol</code>数据类型</h2><p><code>Symbol</code>是通过<code>Symbol</code>函数生成的，凡是属性名属于<code>symbol</code>类型，就都是独一无二的，可以保证不会与其他属性名冲突。</p>\n<h3 id=\"使用-Symbol-来作为唯一标志\"><a href=\"#使用-Symbol-来作为唯一标志\" class=\"headerlink\" title=\"使用 Symbol 来作为唯一标志\"></a>使用 Symbol 来作为唯一标志</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> PROP_NAME = <span class=\"built_in\">Symbol</span>() <span class=\"comment\">//解救无意义的赋值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> PROP_AGE = <span class=\"built_in\">Symbol</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  [PROP_NAME]: <span class=\"string\">&#x27;一斤代码&#x27;</span>, <span class=\"comment\">//对象key值或是常量使用，原理相同</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj[PROP_AGE] = <span class=\"number\">18</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj[PROP_NAME] <span class=\"comment\">// &#x27;一斤代码&#x27;</span></span><br><span class=\"line\">obj[PROP_AGE] <span class=\"comment\">// 18</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-Symbol-定义类的私有属性\"><a href=\"#使用-Symbol-定义类的私有属性\" class=\"headerlink\" title=\"使用 Symbol 定义类的私有属性\"></a>使用 Symbol 定义类的私有属性</h3><p>在 JS 中是没有私有变量的，雷伤所有定义的属性或是方法都是公开访问的。因此可能存在污染等情况，而有了 Symbol 以及模块化机制，类的私有属性和方法才能变成可能。</p>\n<p>在文件 a.js 中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> PASSWORD = <span class=\"built_in\">Symbol</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Login</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">username, password</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.username = username</span><br><span class=\"line\">    <span class=\"built_in\">this</span>[PASSWORD] = password</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">checkPassword</span>(<span class=\"params\">pwd</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>[PASSWORD] === pwd</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Login</span><br></pre></td></tr></table></figure>\n\n<p>在文件 b.js 中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Login <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./a&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> login = <span class=\"keyword\">new</span> Login(<span class=\"string\">&#x27;admin&#x27;</span>, <span class=\"string\">&#x27;123456&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">login.checkPassword(<span class=\"string\">&#x27;admin&#x27;</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">login.PASSWORD <span class=\"comment\">// oh!no!</span></span><br><span class=\"line\">login[PASSWORD] <span class=\"comment\">// oh!no!</span></span><br><span class=\"line\">login[<span class=\"string\">&#x27;PASSWORD&#x27;</span>] <span class=\"comment\">// oh!no!</span></span><br></pre></td></tr></table></figure>\n\n<p>由于 Symbol 常量 PASSWORD 被定义在 a.js 所在的模块中，外面的模块获取不到这个 Symbol,也不可能在创建一个一个一样的 Symbol 出来，所以这个 PASSWORD 只能被限制在 a.js 内部使用，达到一个私有化的效果</p>\n<h3 id=\"注册和获取全局-Symbol\"><a href=\"#注册和获取全局-Symbol\" class=\"headerlink\" title=\"注册和获取全局 Symbol\"></a>注册和获取全局 Symbol</h3><p>Symbol 在不同 window 中创建的 Symbol 实例总是唯一的，如果应用涉及到多个 window（ifram），并需要这些 window 使用的是同一个，那就不能使用 Symbol()了（若是微前端里面又是什么样的呢？有时间试试），这时可以使用 Symbol.for()，它来注册或获取一个 window 间全局的 Symbol 实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> gs1 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">&#x27;global_symbol_1&#x27;</span>) <span class=\"comment\">//注册一个全局Symbol</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> gs2 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">&#x27;global_symbol_1&#x27;</span>) <span class=\"comment\">//获取全局Symbol</span></span><br><span class=\"line\"></span><br><span class=\"line\">gs1 === gs2 <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>这时，在多个相关 window 间也是唯一的。</p>\n<h3 id=\"Symbol-iterator\"><a href=\"#Symbol-iterator\" class=\"headerlink\" title=\"Symbol.iterator\"></a>Symbol.iterator</h3><p>在 Symbol.iterator 出现后，JS 可以定义自己的迭代器<br>iterator 模式总是用同一种逻辑来遍历集合</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(Iterator it = c.iterater(); it.hasNext(); ) &#123; ... &#125;</span><br><span class=\"line\"><span class=\"comment\">//这样就在一定程度上解决了不同的数据类型需要不同的遍历方法</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> students = &#123;</span><br><span class=\"line\">  [<span class=\"built_in\">Symbol</span>.iterator]: <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> i</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> s <span class=\"keyword\">of</span> students) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(s)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//这个yield其实最后返回的就是iterator函数</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"yield\"><a href=\"#yield\" class=\"headerlink\" title=\"yield\"></a>yield</h2><p>yield 关键字用来暂停和恢复一个生成器函数.yield 关键字只能在生成器函数内部使用，用在其他地方会抛出错误。类似函数的 return 关键字，yield 关键字必须直接位于生成器函数定义中，出现在嵌套的非生成器函数中会抛出语法错误</p>\n<p>yield 关键字实际返回一个 IteratorResult 对象，它有两个属性，value 和 done。value 属性是对 yield 表达式求值的结果，而 done 是 false，表示生成器函数尚未完全完成。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">countAppleSales</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> saleList = [<span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; saleList.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> saleList[i]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//一旦生成器函数已定义，可以通过一个构造一个迭代器来使用它</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> appleStore = countAppleSales() <span class=\"comment\">// Generator &#123; &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(appleStore.next()) <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(appleStore.next()) <span class=\"comment\">// &#123; value: 7, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(appleStore.next()) <span class=\"comment\">// &#123; value: 5, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(appleStore.next()) <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h2><p>面向对象编程中的一个核心概念就是类（多态、封装、继承）。可以把事物都抽象成一个个的类来描述他们的信息和行为。</p>\n<p>JavaScript 是一个基于对象的语言，而不是面对对象的语言，它是一个基于 prototype 的语言。它的语法中没有像 Java 之类典型面向对象语言中定义一个类的语法，因此在 ES6 中，提供了一个面向对象风格的类定义方式：使用 class 关键字。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name, age</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.age = age</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">walk</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;I&#x27;m walking...&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"title\">create</span>(<span class=\"params\">name, age</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义静态方法</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Person(name, age)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"super\"><a href=\"#super\" class=\"headerlink\" title=\"super\"></a>super</h3><p>super 关键字用于访问和调用一个对象的父对象的函数。( 只能在 class 内部用 )</p>\n<p>在构造函数中使用时，super 关键字将单独出现，并且必须在使用 this 之前使用。</p>\n<p>super 关键字也可以用来调用父对象上的函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">super</span>([<span class=\"built_in\">arguments</span>])</span><br><span class=\"line\"><span class=\"comment\">// 调用 父对象/父类 的构造函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">super</span>.functionOnParent([<span class=\"built_in\">arguments</span>])</span><br><span class=\"line\"><span class=\"comment\">// 调用 父对象/父类 上的方法</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Polygon</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">construector</span>(<span class=\"params\">height, width</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;Polygon&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.height = height</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.width = width</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">sayName</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Hi,I am a&#x27;</span>, <span class=\"built_in\">this</span>.name + <span class=\"string\">&#x27;.&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">extends</span> <span class=\"title\">Polygon</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">length</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.height;</span><br><span class=\"line\">      <span class=\"comment\">// ReferenceError ,super 需要先被调用！</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">       这里，它调用父类的构造函数的length,</span></span><br><span class=\"line\"><span class=\"comment\">       作为Polygon 的 width 和 height</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">       <span class=\"built_in\">super</span>(length,length)</span><br><span class=\"line\">       <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">       注意，在派生的类中，在你可以使用this之前，必须 先调用super()。忽略这，这将导致引用错误。</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">       <span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;Square&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> <span class=\"title\">area</span>()&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.height * <span class=\"built_in\">this</span>.width</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">set</span> <span class=\"title\">area</span>(<span class=\"params\">value</span>)&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.area = value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用 super 调用父类的静态方法。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Human</span></span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"title\">ping</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;ping&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">computer</span> <span class=\"title\">eatends</span> <span class=\"title\">Human</span></span>&#123; <span class=\"comment\">//使用extend 实现继承另一个类</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"title\">pingpong</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.ping()+<span class=\"string\">&#x27;pong&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Computer.pingpong()</span><br></pre></td></tr></table></figure>\n\n<p><strong>原始 class 实现方式</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Parent.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  Parent.call(<span class=\"built_in\">this</span>, name)</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//实现继承</span></span><br><span class=\"line\">Child.prototype = <span class=\"keyword\">new</span> Parent()</span><br><span class=\"line\">Child.prototype.constructor = Child</span><br><span class=\"line\"></span><br><span class=\"line\">Child.prototype.getAge = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.Age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> people = <span class=\"keyword\">new</span> Child(<span class=\"string\">&#x27;lily&#x27;</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(people.getName())</span><br></pre></td></tr></table></figure>\n\n<p><strong>语法糖</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">construtor</span>(<span class=\"params\">name</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">getAge</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.age</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> people = <span class=\"keyword\">new</span> Child(<span class=\"string\">&quot;lily&quot;</span>,<span class=\"number\">20</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(people.getName())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"异步函数\"><a href=\"#异步函数\" class=\"headerlink\" title=\"异步函数\"></a>异步函数</h2><p>除了 javascript Promise , 异步函数进一步重写了传统的异步代码结构。</p>\n<h3 id=\"一个以-async-为前缀的常规函数\"><a href=\"#一个以-async-为前缀的常规函数\" class=\"headerlink\" title=\"一个以 async 为前缀的常规函数\"></a>一个以 async 为前缀的常规函数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetchdata</span>(<span class=\"params\">url</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在异步函数（Async-function-）内，使用-await-关键字调用异步操作函数\"><a href=\"#在异步函数（Async-function-）内，使用-await-关键字调用异步操作函数\" class=\"headerlink\" title=\"在异步函数（Async function ）内，使用 await 关键字调用异步操作函数\"></a>在异步函数（Async function ）内，使用 await 关键字调用异步操作函数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getaSync</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\">    xhr.open(<span class=\"string\">&#x27;GET&#x27;</span>, url)</span><br><span class=\"line\">    xhr.onload = <span class=\"function\">() =&gt;</span> resolve(xhr.responseText)</span><br><span class=\"line\">    xhr.onerror = <span class=\"function\">() =&gt;</span> reject(xhr.statusText)</span><br><span class=\"line\">    xhr.send()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetchdata</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> text1 = <span class=\"keyword\">await</span> getasync(<span class=\"string\">&#x27;test.txt&#x27;</span>)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.logtex(text1)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> text2 = <span class=\"keyword\">await</span> getasync(<span class=\"string\">&#x27;test2.text&#x27;</span>)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(text2)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> text3 = <span class=\"keyword\">await</span> getasync(<span class=\"string\">&#x27;text3.text&#x27;</span>)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(text3)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Finished&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fetchdata().then(<span class=\"function\">(<span class=\"params\">msg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(msg) <span class=\"comment\">//“test.txt”，“test2.txt”，“test3.txt”</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在异步函数中，我们把异步函数 getasync() 当做是同步函数，没有 then() 方法或回调函数通知下一步。无论何时遇到关键字 await , 执行都会停止，直到 getasync() 解决，然后再转到异步函数中的下一行。结果与纯粹的基于 Promise , 使用一串 then 方法的方式一样</p>\n<h2 id=\"解构\"><a href=\"#解构\" class=\"headerlink\" title=\"解构\"></a>解构</h2><p>ES6 解构并非一个新的功能，而是一个新的复制语法，可以快速解压缩对象属性和数组中的值，并将它们分配给各个变量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> profile = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;georage&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">39</span>, <span class=\"attr\">hobby</span>: <span class=\"string\">&#x27;Tennis&#x27;</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; name, hobby &#125; = profile</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name) <span class=\"comment\">//&#x27;georage&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hobby) <span class=\"comment\">//&#x27;Tennis&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里我用解构快速提取 profile 对象的 name 和 hobby 属性。</p>\n<p>使用别名，你可以使用与你正在提取值的对象属性不同的变量名：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> profile = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;georage&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">39</span>, <span class=\"attr\">hobby</span>: <span class=\"string\">&#x27;Tennis&#x27;</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">name</span>: n, <span class=\"attr\">hobby</span>: h &#125; = profile</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(n) <span class=\"comment\">//&#x27;georage&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(h) <span class=\"comment\">//&#x27;Tennis&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"嵌套对象解构\"><a href=\"#嵌套对象解构\" class=\"headerlink\" title=\"嵌套对象解构\"></a>嵌套对象解构</h3><p>解构也可以与嵌套对象一起工作，可以使用它来快速解开来自复杂的 JSON 请求的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jsondata = &#123;</span><br><span class=\"line\">  title: <span class=\"string\">&#x27;XX&#x27;</span>,</span><br><span class=\"line\">  details: &#123;</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      created: <span class=\"string\">&#x27;2017/09/19&#x27;</span>,</span><br><span class=\"line\">      modified: <span class=\"string\">&#x27;2017/09/20&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    catrgory: <span class=\"string\">&#x27;js&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  url: <span class=\"string\">&#x27;/baidu/&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;</span><br><span class=\"line\">  title,</span><br><span class=\"line\">  details: &#123;</span><br><span class=\"line\">    data: &#123; created, modified &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125; = jsondata</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(title)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(created)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(modified)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"解构数组\"><a href=\"#解构数组\" class=\"headerlink\" title=\"解构数组\"></a>解构数组</h3><p>数组的解构与对象上的工作方式类似，除了左边的花括号使用<strong>方括号</strong>代替：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> soccerteam = [<span class=\"string\">&#x27;George&#x27;</span>, <span class=\"string\">&#x27;Dennis&#x27;</span>, <span class=\"string\">&#x27;Sandy&#x27;</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> [a, b] = soccerteam</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// &quot;George&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">// &quot;Dennis&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>你可以跳过某些数组元素，通过使用 (,)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"keyword\">var</span> soccerteam = [<span class=\"string\">&#x27;George&#x27;</span>, <span class=\"string\">&#x27;Dennis&#x27;</span>, <span class=\"string\">&#x27;Sandy&#x27;</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> [a,,b] = soccerteam</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// &quot;George&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">// &quot;Sandy&quot;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"comment\">//定义了三个变量，并对应赋了值；如果值的个数与变量名个数不匹配，没有对应上的变量值为 undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c=<span class=\"string\">&#x27;default&#x27;</span>] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"comment\">//指定默认值，在定义变量时就指定了默认值，如果赋值时，没有给定内容，则会取默认值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, …b] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"comment\">//这里 b 的值为[2，3]，这样可以快速使用剩余的数据赋值给变量，</span></span><br><span class=\"line\"><span class=\"comment\">//但实际使用中为了避免代码阅读的歧义，不推荐这么使用，仅作了解即可</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a,b,c] = <span class=\"string\">&#x27;yes&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);<span class=\"comment\">//y</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);<span class=\"comment\">//e</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c);<span class=\"comment\">//s</span></span><br></pre></td></tr></table></figure>\n\n<p>字符串的结构赋值会以单个字符串的方式进行赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; length &#125; = <span class=\"string\">&#x27;yes&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(length) <span class=\"comment\">//3</span></span><br></pre></td></tr></table></figure>\n\n<p>以对象赋值的方法，如果名称是字符串的自带属性，则会获得属性值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">&#123; a = <span class=\"number\">10</span>, b, c = <span class=\"number\">10</span> &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>) <span class=\"comment\">//&#123; a: 1, b: 2 &#125;</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//1</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b) <span class=\"comment\">//2</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(c) <span class=\"comment\">//10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(obj)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Spread-操作符\"><a href=\"#Spread-操作符\" class=\"headerlink\" title=\"Spread 操作符\"></a>Spread 操作符</h2><p>spread(…)操作符也称作展开操作符，作用是讲可迭代的对象进行展开</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fruits = [<span class=\"string\">&#x27;apple&#x27;</span>, <span class=\"string\">&#x27;orange&#x27;</span>, <span class=\"string\">&#x27;peach&#x27;</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> shoppingList = [<span class=\"string\">&#x27;t-shirt&#x27;</span>, ...fruits, <span class=\"string\">&#x27;egg&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// shoppingList的值：[&quot;t-shirt&quot;, &quot;apple&quot;, &quot;organe&quot;, &quot;peach&quot;, &quot;egg&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<p>Spread 操作符可以展开 Iterable 的对象，这样的话，除了数组之外，所有实现了 Symbol.iterator 的对象，如：Set, Map 和 Generator 等等，都可以使用 Spread 操作符。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">map.set(<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">map.set(<span class=\"string\">&#x27;b&#x27;</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [...map] <span class=\"comment\">//[[&quot;a&quot;, 1], [&quot;b&quot;, 2]]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>()</span><br><span class=\"line\">set.add(<span class=\"number\">1</span>)</span><br><span class=\"line\">set.add(<span class=\"number\">2</span>)</span><br><span class=\"line\">set.add(<span class=\"number\">1</span>)</span><br><span class=\"line\">set.add(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [...set] <span class=\"comment\">//[1, 2, 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">myGen</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;world&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [...myGen()] <span class=\"comment\">//[&quot;hello&quot;, &quot;world&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"默认和剩余参数\"><a href=\"#默认和剩余参数\" class=\"headerlink\" title=\"默认和剩余参数\"></a>默认和剩余参数</h2><h3 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数\"></a>默认参数</h3><p>在这之前我们都使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getarea</span>(<span class=\"params\">w, h</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> w = w || <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> h = h || <span class=\"number\">15</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> w * h</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>有了 ES6 对默认参数的支持后</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getarea</span>(<span class=\"params\">w = <span class=\"number\">10</span>, h = <span class=\"number\">15</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> w * h</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getarea(<span class=\"number\">5</span>) <span class=\"comment\">//75</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"剩余参数-（Rest-Parameters）\"><a href=\"#剩余参数-（Rest-Parameters）\" class=\"headerlink\" title=\"剩余参数 （Rest Parameters）\"></a>剩余参数 （Rest Parameters）</h3><p>ES6 中的 Rest Parameters 使得将函数参数转换成数组的操作变得简单。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addit</span>(<span class=\"params\">...theNumber</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//get the sum of the array elements</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> theNumber.reduce(<span class=\"function\">(<span class=\"params\">prevnum.curnum</span>) =&gt;</span> prevnu + curnum, <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">addit(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>) <span class=\"comment\">//10</span></span><br></pre></td></tr></table></figure>\n\n<p>通过在命名参数前添加 3 个点。在该位置和之后输入到函数中的参数将自动转换为数组。</p>\n<p>没有 Rest Parameters 则会手动将参数转换为数组 :</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addit</span>(<span class=\"params\">theNumbers</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// force arguments object into array</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> numArray = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> numArray.reduce(<span class=\"function\">(<span class=\"params\">prevnum, curnum</span>) =&gt;</span> prevnum + curnum, <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">addit(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>) <span class=\"comment\">// returns 10</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">...[a, b, c]</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b + c</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f(<span class=\"number\">1</span>) <span class=\"comment\">// NaN (b and c are undefined)</span></span><br><span class=\"line\">f(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>) <span class=\"comment\">// 6</span></span><br><span class=\"line\">f(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>) <span class=\"comment\">//6 (the fourth parameter is not destructured)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Generator-函数\"><a href=\"#Generator-函数\" class=\"headerlink\" title=\"Generator 函数\"></a>Generator 函数</h2><p>Generator 函数是协程在 ES6 的实现，最大特点就是可以交出函数的执行权（即暂停执行）。协程：多个现成互相协作，完成异步任务。</p>\n<p>协程有点像函数，又有点想线程。他的运行流程大致如下：</p>\n<ul>\n<li>第一步，协程 A 开始执行。</li>\n<li>第二步，协程执行懂啊一半，进入暂停，执行权转移到协程 B。</li>\n<li>第三步，一段时间后协程 B 交换执行权。</li>\n<li>第四步，协程 A 恢复执行。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> y = <span class=\"keyword\">yield</span> x + <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> y</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面整个代码就是一个封装的异步任务，或者说是异步任务的容器。异步操作需要暂停的地方，都用 yield 语句注明。Generator 函数的执行方法如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> g = gen(<span class=\"number\">1</span>)</span><br><span class=\"line\">g.next() <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\">g.next() <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>next 方法的作用是分阶段执行 Generator 函数。每次调用 next 方法，返回一个对象，表示当前阶段的信息（value 和 done 属性）。value 属性是 yield 语法后面表达式的值。表示当前阶段的值；done 属性是一个布尔值，表示 Generator 函数是否执行完毕，即是否还有下一个阶段。</p>\n<p>这是一个生成器的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">genFn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;begin&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> value = <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;a&#x27;</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value) <span class=\"comment\">// &#x27;B&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;end&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> gen = genFn()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> gen) <span class=\"comment\">// &#x27;object&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> g1 = gen.next()</span><br><span class=\"line\">g1.value <span class=\"comment\">// &#x27;a&#x27;</span></span><br><span class=\"line\">g1.done <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> g2 = gen.next(<span class=\"string\">&#x27;B&#x27;</span>)</span><br><span class=\"line\">g2.value <span class=\"comment\">// &#x27;end&#x27;</span></span><br><span class=\"line\">g2.done <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串扩展\"><a href=\"#字符串扩展\" class=\"headerlink\" title=\"字符串扩展\"></a>字符串扩展</h2><h3 id=\"字符串内容测试\"><a href=\"#字符串内容测试\" class=\"headerlink\" title=\"字符串内容测试\"></a>字符串内容测试</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;abcdef&#x27;</span>.includes(<span class=\"string\">&#x27;c&#x27;</span>) <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"string\">&#x27;abcdef&#x27;</span>.includes(<span class=\"string\">&#x27;ye&#x27;</span>) <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"string\">&#x27;abcdef&#x27;</span>.startsWith(<span class=\"string\">&#x27;a&#x27;</span>) <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"string\">&#x27;abcdef&#x27;</span>.endswidth(<span class=\"string\">&#x27;f&#x27;</span>) <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"comment\">//includes(), startsWith(), endsWith() 都支持第二个参数，</span></span><br><span class=\"line\"><span class=\"comment\">//类型为数字类型，意为从第 n 个字符开始，endsWith()的第二个参数有点不一样</span></span><br><span class=\"line\"><span class=\"string\">&#x27;abcdef&#x27;</span>.includes(<span class=\"string\">&#x27;c&#x27;</span>, <span class=\"number\">4</span>) <span class=\"comment\">//false 从第5个字符开始查找是否有 &#x27;c&#x27; 这个字符</span></span><br><span class=\"line\"><span class=\"string\">&#x27;abcdef&#x27;</span>.startsWith(<span class=\"string\">&#x27;d&#x27;</span>, <span class=\"number\">3</span>) <span class=\"comment\">//true 从第4个字符开始查找是否是以 &#x27;d&#x27; 字符为开头</span></span><br><span class=\"line\"><span class=\"string\">&#x27;abcdef&#x27;</span>.endsWith(<span class=\"string\">&#x27;d&#x27;</span>, <span class=\"number\">4</span>) <span class=\"comment\">//true 前面的4个字符里，是否以 &#x27;d&#x27; 字符为结尾</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>字符串重复输出：</strong><br>这个方法接受一个整数参数，表示要将字符串复制多少次，然后返回拼接所有副本后的结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;a&#x27;</span>.repeat(<span class=\"number\">5</span>) <span class=\"comment\">//aaaaa 重复输出5遍</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串(``)\"></a>模板字符串(``)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">authorize</span>(<span class=\"params\">user, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!user.hasPrivilege(action)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`用户 <span class=\"subst\">$&#123;user.name&#125;</span> 未被授权执行 <span class=\"subst\">$&#123;action&#125;</span> 操作。`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个示例中，<code>$&#123;user.name&#125;</code>,<code>$&#123;action&#125;</code>被称为模板占位符，javascript 将把 user.name 和 action 的值插入到最终生成的字符串中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;#warning&#x27;</span>).html(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  &lt;h1&gt;小心！&gt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;p&gt;未经授权打冰球可能受罚</span></span><br><span class=\"line\"><span class=\"string\">  将近<span class=\"subst\">$&#123;maxPenalty&#125;</span>分钟。&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span>)</span><br></pre></td></tr></table></figure>\n\n<p>模板字符串中所有的空格、新进、缩进，都会原样输出在生成的字符串中。</p>\n<h3 id=\"原生支持模板语言\"><a href=\"#原生支持模板语言\" class=\"headerlink\" title=\"原生支持模板语言\"></a>原生支持模板语言</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//es5</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#result&#x27;</span>).append(</span><br><span class=\"line\">  <span class=\"string\">&#x27;There are &lt;b&gt;&#x27;</span> +</span><br><span class=\"line\">    basket.count +</span><br><span class=\"line\">    <span class=\"string\">&#x27;&lt;/b&gt; &#x27;</span> +</span><br><span class=\"line\">    <span class=\"string\">&#x27;items in your basket, &#x27;</span> +</span><br><span class=\"line\">    <span class=\"string\">&#x27;&lt;em&gt;&#x27;</span> +</span><br><span class=\"line\">    basket.onSale +</span><br><span class=\"line\">    <span class=\"string\">&#x27;&lt;/em&gt; are on sale!&#x27;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">//es6</span></span><br><span class=\"line\"><span class=\"comment\">//在es6中，内容模板，可以定义在 `` 包起来的字符串中，其中的内容会保持原有格式</span></span><br><span class=\"line\"><span class=\"comment\">//另外可以在字符串中直接使用模板语言进行变量填充，优雅而简洁</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#result&#x27;</span>).append(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  There are &lt;b&gt;<span class=\"subst\">$&#123;basket.count&#125;</span>&lt;/b&gt; items</span></span><br><span class=\"line\"><span class=\"string\">   in your basket, &lt;em&gt;<span class=\"subst\">$&#123;basket.onSale&#125;</span>&lt;/em&gt;</span></span><br><span class=\"line\"><span class=\"string\">  are on sale!</span></span><br><span class=\"line\"><span class=\"string\">`</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串遍历输出\"><a href=\"#字符串遍历输出\" class=\"headerlink\" title=\"字符串遍历输出\"></a>字符串遍历输出</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//for ...of 格式为 es6 中的 Iterator 迭代器的输出方式</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> c <span class=\"keyword\">of</span> <span class=\"string\">&#x27;abc&#x27;</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(c)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//a</span></span><br><span class=\"line\"><span class=\"comment\">//b</span></span><br><span class=\"line\"><span class=\"comment\">//c</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串补全\"><a href=\"#字符串补全\" class=\"headerlink\" title=\"字符串补全\"></a>字符串补全</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//参数1：[number] 目标字符串长度</span></span><br><span class=\"line\"><span class=\"comment\">//参数2：[string] 进行补全的字符串</span></span><br><span class=\"line\"><span class=\"string\">&#x27;12345&#x27;</span>.padStart(<span class=\"number\">7</span>, <span class=\"string\">&#x27;0&#x27;</span>) <span class=\"comment\">//0012345 - 字符串不足7位，在头部补充不足长度的目标字符串</span></span><br><span class=\"line\"><span class=\"string\">&#x27;12345&#x27;</span>.padEnd(<span class=\"number\">7</span>, <span class=\"string\">&#x27;0&#x27;</span>) <span class=\"comment\">//1234500 - 在尾部进行字符串补全</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串迭代与结构\"><a href=\"#字符串迭代与结构\" class=\"headerlink\" title=\"字符串迭代与结构\"></a>字符串迭代与结构</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> message = <span class=\"string\">&#x27;abc&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> stringIterator = message[<span class=\"built_in\">Symbol</span>.iterator]()</span><br><span class=\"line\">stringIterator.next() <span class=\"comment\">//&#123;value:a,done:false&#125;</span></span><br><span class=\"line\">stringIterator.next() <span class=\"comment\">//&#123;value:b,done:false&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>或是用 for of</p>\n<h2 id=\"数组扩展\"><a href=\"#数组扩展\" class=\"headerlink\" title=\"数组扩展\"></a>数组扩展</h2><h3 id=\"Array-from\"><a href=\"#Array-from\" class=\"headerlink\" title=\"Array.from()\"></a>Array.from()</h3><p>从一个类似数组或可迭代对象中创建一个新的数组实例。</p>\n<h3 id=\"合并数组\"><a href=\"#合并数组\" class=\"headerlink\" title=\"合并数组\"></a>合并数组</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = [<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> c = [<span class=\"number\">2</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> d = [...a, ...b, ...c] <span class=\"comment\">//[1, 2, 3, 2, 4] 所有内容合并，但并不会去除重复</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"快速转换为数组\"><a href=\"#快速转换为数组\" class=\"headerlink\" title=\"快速转换为数组\"></a>快速转换为数组</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>) <span class=\"comment\">//[3,4,5]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"内容过滤\"><a href=\"#内容过滤\" class=\"headerlink\" title=\"内容过滤\"></a>内容过滤</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//判断对象是否为数组</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">Array</span>.isArray(obj))&#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].includes(<span class=\"number\">5</span>);<span class=\"comment\">//false，检索数据中是否有5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//找出第一个匹配表达式的结果，注意是只要匹配到一项，函数即会返回</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, -<span class=\"number\">4</span>, <span class=\"number\">10</span>].find(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, arr</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);<span class=\"comment\">//-4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//找出第一个匹配表达式的结果下标</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, -<span class=\"number\">4</span>, <span class=\"number\">10</span>].findIndex(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, arr</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);<span class=\"comment\">//2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//排除负数内容</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, -<span class=\"number\">4</span>, <span class=\"number\">10</span>].filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);<span class=\"comment\">//[1, 3, 10]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对象扩展\"><a href=\"#对象扩展\" class=\"headerlink\" title=\"对象扩展\"></a>对象扩展</h2><h3 id=\"可计算属性\"><a href=\"#可计算属性\" class=\"headerlink\" title=\"可计算属性\"></a>可计算属性</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> nameKey = <span class=\"string\">&#x27;name&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ageKey = <span class=\"string\">&#x27;27&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> jobKey = <span class=\"string\">&#x27;job&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  [nameKey]: <span class=\"string\">&#x27;matt&#x27;</span>,</span><br><span class=\"line\">  [ageKey]: <span class=\"number\">27</span>,</span><br><span class=\"line\">  [jobKey]: <span class=\"string\">&#x27;software engineer&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可变 key 是在申明时进行值赋值，而不是地址赋值，就算使用对象作为 key 值，key 值在之后也不是可变的</p>\n<h3 id=\"属性的简洁表示\"><a href=\"#属性的简洁表示\" class=\"headerlink\" title=\"属性的简洁表示\"></a>属性的简洁表示</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//直接使用变量/常量的名称个为对象属性的名称</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">&#x27;abc&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = &#123; a &#125; <span class=\"comment\">//&#123;a: &#x27;abc&#x27;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; x, y &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//等效于</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">x</span>: x, <span class=\"attr\">y</span>: y &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> o = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">f</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//等效于</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> o = &#123;</span><br><span class=\"line\">  f: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对象内容合并\"><a href=\"#对象内容合并\" class=\"headerlink\" title=\"对象内容合并\"></a>对象内容合并</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">  b = &#123; <span class=\"attr\">b</span>: <span class=\"number\">3</span> &#125;,</span><br><span class=\"line\">  c = &#123; <span class=\"attr\">b</span>: <span class=\"number\">4</span>, <span class=\"attr\">c</span>: <span class=\"number\">5</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> d = <span class=\"built_in\">Object</span>.assign(a, b, c)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d) <span class=\"comment\">//&#123;a:1,b:4,c:5&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//&#123;a:1,b:4&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//上面的合并方式会同时更新 a 对象的内容，a 的属性如果有多次合并会被更新数据，</span></span><br><span class=\"line\"><span class=\"comment\">//但自身没有的属性，其它对象有的属性不会被添加到 a 身上；</span></span><br><span class=\"line\"><span class=\"comment\">//参数列中的对象只会影响第一个，后面的参数对象不会被修改数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//推荐使用这种方式进行对象数据合并</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">  b = &#123; <span class=\"attr\">b</span>: <span class=\"number\">3</span> &#125;,</span><br><span class=\"line\">  c = &#123; <span class=\"attr\">b</span>: <span class=\"number\">4</span>, <span class=\"attr\">c</span>: <span class=\"number\">5</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> d = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, a, b, c) <span class=\"comment\">//第一个参数增加一个空对象，在合并时让它被更新，不影响实际的对象变量内容</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d) <span class=\"comment\">//&#123;a:1,b:4,c:5&#125;//与上面的方式合并结果一致，使用这种方式, a 对象的内容就不会被影响了</span></span><br></pre></td></tr></table></figure>\n\n<p>对象内容合并的方向是从参数顺序的后向前合并</p>\n<h3 id=\"对象内容集合\"><a href=\"#对象内容集合\" class=\"headerlink\" title=\"对象内容集合\"></a>对象内容集合</h3><h4 id=\"Object-keys\"><a href=\"#Object-keys\" class=\"headerlink\" title=\"Object.keys()\"></a>Object.keys()</h4><p>获取对象中所有的键名，以数组的形式返回</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"built_in\">Object</span>.keys(obj) <span class=\"comment\">//[&#x27;a&#x27;,&#x27;b,]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Object-values\"><a href=\"#Object-values\" class=\"headerlink\" title=\"Object.values()\"></a>Object.values()</h4><p>获取对象中所有值内容，以数组的形式返回</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> values = <span class=\"built_in\">Object</span>.values(obj) <span class=\"comment\">//[1,2]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Object-entries\"><a href=\"#Object-entries\" class=\"headerlink\" title=\"Object.entries()\"></a>Object.entries()</h4><p>获得对象中所有成员的数据，以数组的形式返回，成员的内容也是数组形式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> values = <span class=\"built_in\">Object</span>.entries(obj) <span class=\"comment\">//[[&#x27;a&#x27;,1],[&#x27;b&#x27;,2]]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"对象内容测试\"><a href=\"#对象内容测试\" class=\"headerlink\" title=\"对象内容测试\"></a>对象内容测试</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//判断对象是否为数组对象</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.isArray(someobj)) &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//判断目标对象是否为空对象</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (someobj &amp;&amp; <span class=\"built_in\">Object</span>.keys(someobj).length);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h3><p>Map 的用法和普通对象基本一致，但是主要差异是，Map 实例会维护键值对的插入顺序，因此可以根据插入顺序执行迭代操作。</p>\n<p>对象和映射之间存在着显著的内存和性能问题：</p>\n<ul>\n<li>在给定固定大小的内存时，Map 大约可以比 Object 多存储 50% 的键/值对。</li>\n<li>Map 在所有的浏览器中一般会比 Object 的插入速度快</li>\n<li>从大型 Object 和 Map 中查找键/值对，则 Object 有时候速度会更快。在把 Object 当成数组使用的情况下（比如使用连续整数作为属性），浏览器引擎可以进行优化，在内存中使用更高效的布局。对于这两个类型而言，查找书读不会随着键/值对数量增加而现行增加，如果代码设计大量查找操作，那么某些情况下可能选 Object 更好</li>\n<li>Object 的 delete 性能很差，在现在很多浏览器依然如此，Map 的 delete 操作都比插入和查找更快，如果代码涉及大量删除操作，那么毫无以为应该选择 map</li>\n</ul>\n<p>(思考：vue 中的 data 数据使用 Map 是什么样的呢？)</p>\n<p>先看一下它能用非法字符串或者数字作为 key 的特性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"built_in\">Map</span>()</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123; <span class=\"attr\">p</span>: <span class=\"string\">&#x27;hellow&#x27;</span> &#125;</span><br><span class=\"line\">map.set(obj, <span class=\"string\">&#x27;ok&#x27;</span>) <span class=\"comment\">//ok</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj) <span class=\"comment\">//&#123; p: &#x27;hellow&#x27; &#125;</span></span><br><span class=\"line\">map.get(obj) <span class=\"comment\">//ok</span></span><br><span class=\"line\">map.has(obj) <span class=\"comment\">//true</span></span><br><span class=\"line\">map.delete(obj) <span class=\"comment\">//true</span></span><br><span class=\"line\">map.has(obj) <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<p>需要使用 new Map()初始化一个实例。</p>\n<ul>\n<li>size:获取成员数量</li>\n<li>set:设置成员 key 和 value</li>\n<li>get:获取成员属性值</li>\n<li>has:判断成员是否存在</li>\n<li>delete:删除成员</li>\n<li>clear:清空所有</li>\n<li>keys():返回键名的遍历器</li>\n<li>values():返回键值的遍历器</li>\n<li>entries():返回所有成员的遍历器</li>\n<li>forEach():遍历 Map 的所有成员</li>\n</ul>\n<h3 id=\"set-对象-（可用于去重）\"><a href=\"#set-对象-（可用于去重）\" class=\"headerlink\" title=\"set 对象 （可用于去重）\"></a>set 对象 （可用于去重）</h3><p>set 独享允许你存储任何类型唯一值，无论是原始值或是对象。NaN 之间视为相同的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> set1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"literal\">NaN</span>, <span class=\"literal\">NaN</span>, <span class=\"number\">5</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(set1.has(<span class=\"number\">1</span>)) <span class=\"comment\">// expected output: true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(set1.has(<span class=\"number\">5</span>)) <span class=\"comment\">// expected output: true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(set1.has(<span class=\"number\">6</span>)) <span class=\"comment\">// expected output:false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.from(set1)) <span class=\"comment\">// Array [1, 2, 3, 4, NaN, 5]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定型数组\"><a href=\"#定型数组\" class=\"headerlink\" title=\"定型数组\"></a>定型数组</h3><p>所谓定型数组，就是将任何数字转换成一个包含数字比特的数组，随后就可以通过 JS 数组进一步处理</p>\n<p>在 JavaScript 中，数字类型变量都是以 64 位浮点型数据格式存储；比如新建一个只需要 8 比特的整数，也需要为其开辟 64 位存储空间，浪费资源，效率也低。而 CanvasFloatArray 需要的是 Float32Array</p>\n<p>所有与定型数组有关的操作和对象都集中在这 8 个数据类型上，但是在使用他们之前，需要穿件一个数组缓冲区存储这些数据</p>\n<p>数据缓冲区是所有定型数组的根基，它是一段可以包含特定数量字节的内存地址。</p>\n<h2 id=\"isInteger-与安全整数\"><a href=\"#isInteger-与安全整数\" class=\"headerlink\" title=\"isInteger 与安全整数\"></a>isInteger 与安全整数</h2><p>isInteger 用于判断一个数值是否为整数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isInteger(<span class=\"number\">1</span>)) <span class=\"comment\">//  true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isInteger(<span class=\"number\">1.0</span>)) <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Nmber.isInteger(<span class=\"number\">1.01</span>)) <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<p>为了鉴别整数是否在安全范围科研使用 Number.isSafeInteger()方法</p>\n<h2 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">generatorFn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;foo&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;bar&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;baz&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> generatorObject1 = generatorFn()</span><br><span class=\"line\"><span class=\"keyword\">let</span> generatorObject2 = generatorFn()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(generatorObject1.next()) <span class=\"comment\">//&#123;done:false,value:&#x27;foo&#x27;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(generatorObject2.next()) <span class=\"comment\">//&#123;done:false,value:&#x27;foo&#x27;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(generatorObject2.next()) <span class=\"comment\">//&#123;done:false,value:&#x27;bar&#x27;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(generatorObject1.next()) <span class=\"comment\">//&#123;done:false,value:&#x27;bar&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>也可以用 for of 对 generatorObject1 进行迭代，那这个可以结合 promise 使用吗？是可以的，就是用 yield 实现了 await</strong>。async 和 await，比起星号和 yield，语义更清楚了。async 表示函数里有异步操作，await 表示紧跟在后面的表达式需要等待结果。co 函数库约定，yield 命令后面只能是 Thunk 函数或 Promise 对象，而 async 函数的 await 命令后面，可以跟 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作）。</p>\n<h3 id=\"使用-yield-实现递归算法\"><a href=\"#使用-yield-实现递归算法\" class=\"headerlink\" title=\"使用 yield* 实现递归算法\"></a>使用 yield* 实现递归算法</h3><p>yield* 表达式迭代操作数，并产生它返回的每个值</p>\n<p>yield* 表达式本身的值是当迭代器关闭时返回的值（即 done 为 true）时</p>\n<p>yield*最有用的地方是实现递归操作，此时生成器可以产生自身：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">nTimes</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span>* nTimes(n - <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> n - <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> x <span class=\"keyword\">of</span> nTimes(<span class=\"number\">3</span>)) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//0</span></span><br><span class=\"line\"><span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h2><p><strong>箭头函数不能作为构造函数</strong>：</p>\n<p>箭头函数没有自己的this,arguments,super或new.target。箭头函数表达式更实用于那些需要匿名函数的地方，并且它不能用作构造函数，和new一起用会抛出错误，箭头函数没有prototype属性。</p>\n<p>箭头函数是有_proto_属性的，所以箭头函数本身是存在原型链的，他也是有自己的构造函数的，但是因为没有prototype 属性，他的实例_proto_没法指向，所以箭头函数也就无法作为构造函数。</p>\n<p>同时箭头函数由于没有this指针，通过call()和apply方法调用一个函数时，只能传递参数，不能绑定this。</p>"},{"title":"this指向","date":"2018-01-23T03:39:32.000Z","_content":"\n[链接](http://mp.weixin.qq.com/s/2PnWD8bIFgEJxYONoPZs6w)\n\n1. js 函数中 this 指向并不是在函数定义的时候确定的，而是在函数调用的时候确定的，所以函数的调用方式决定 this 的 指向。this 永远指向最后调用它的那个对象。\n2. 普通的函数有 3 种调用方式：直接调用，方法调用和 new 调用。除此之外还有通过 bind() 将函数绑定到对象之后再调用，通过 call()、apply() 进行调用等。es6 引入箭头函数之后，其 this 指向又有所不同。\n3. this 既不是指向函数自身也不指向函数作用域，this 实际上是在函数被调用是发生绑定的，它的指向完全取决于函数在哪里调用。\n\n<!--more-->\n\n```javascript\nvar a = {\n  name: 'A',\n  fn: function() {\n    console.log(this.name);\n  }\n};\n\na.fn(); //this===a;\na.fn.call({ name: 'B' }); //this==={name:'B'}\nvar fn1 = a.fn;\nfn1(); //this===window\n```\n\nthis 执行会有不同，主要是几种在这几个场景中：\n\n- 作为构造函数执行，构造函数中\n- 作为对象属性上执行，上述代码中的 a.fn()\n- 作为普通函数执行，上述代码中的 fn1()\n- 用于 bind,call,apply 上述代码中 a.fn.call({name:'B'})\n\n## 默认绑定\n\n在 JavaScript 中，最常用的函数调用类型就是独立函数调用。如果在调用函数的时候，函数不带任何修饰，也就是光秃秃的调用，那就会应用默认绑定规则，默认绑定的指向的是全局作用域。\n\n```javascript\n<script type=\"text/javascript\" charset=\"utf-8\">\n  var name = \"g\";\n  function a() {\n      console.log(this.name);        //g\n      a.name = 'inside';\n      function b() {\n          console.log(this.name);  //g\n\n\n      }\n      b();\n  }\n  a();\n</script>\n```\n\n`a()` 函数在全局作用域中被调用，因此第 1 句中的 `this` 就绑定在了全局对象上。`b()` 函数在 `a()` 函数里面调用，即使这样第二句中的 `this` 指代的仍然是全局对象，即使 `a()` 函数设置了 `name` 属性。这就是默认绑定规则，它是 `js` 中最常见的一种函数调用模式，`this` 的绑定规则也是最简单的一种，就是绑定在全局作用域上\n\n** 但是如果使用了严格模式，则 `this` 不能绑定到全局对象，在严格模式下，把 `this` 绑定到全局对象上时，实际上绑定的是 `underfined`，因此上面的代码会报错 **\n\n---\n\n```javascript\nvar name = 'g';\nfunction a() {\n  console.log(this.name); //g\n  var c = this;\n  c.name = 'inside';\n  function b() {\n    console.log(this.name); //inside\n  }\n  b();\n}\na();\n```\n\n---\n\n```javascript\nvar name = 'g';\nfunction a() {\n  console.log(this.name); //g\n  name = 'inside';\n  function b() {\n    console.log(this.name); //inside\n  }\n  b();\n}\na();\n```\n\n---\n\n```javascript\nvar name = 'g';\nfunction a() {\n  console.log(this.name); //g\n  var name = 'inside';\n  function b() {\n    console.log(this.name); //g\n  }\n  b();\n}\na();\n```\n\n---\n\n```javascript\nvar name = 'g';\nfunction a() {\n  console.log(this.name); //g\n  var name = 'inside';\n  function b() {\n    console.log(name); //inside\n  }\n  b();\n}\na();\n```\n\n---\n\n```javascript\nvar name = 'g';\nfunction a() {\n  console.log(name); //underfined\n  var name = 'inside';\n  function b() {\n    console.log(name); //inside\n  }\n  b();\n}\na();\n```\n\n---\n\n```javascript\nvar name = 'g';\nfunction a() {\n  console.log(name); //underfined\n  var name = 'inside';\n  function b() {\n    console.log(this.name); //g\n  }\n  b();\n}\na();\n```\n\n所以通过上面的实验可以充分的得出一个结论，this 确实不是指向的当前作用域的，this 和词法作用域是完全不同的。\n\n---\n\n## 隐式绑定\n\n当函数在调用时，如果函数有所谓的 “ 落脚点 ”, 即有上下文对象时，隐式绑定规则会把函数中的 this 绑定到这个上下文对象。如果觉得上面这段话不够直白的话，还是来看代码。\n\n```javascript\nfunction say() {\n  console.log(this.name);\n}\nvar obj1 = {\n  name: 'zxt',\n  say: say\n};\nvar obj2 = {\n  name: 'zxt1',\n  say: say\n};\nobj1.say(); // zxt\nobj2.say(); // zxt1\n```\n\nobj1 ， obj2 就是所谓 say 函数的落脚点，专业一点的说法就是上下文对象，给函数指定了这个上下文对象的时，函数内部的 this 自然指向了这个上下文对象。这是很常见的函数调用模式\n\n** 对象属性引用链中只有最顶层或者说是最后一层会影响调用位置 **\n\n```javascript\nfunction foo() {\n  console.log(this.a);\n}\nvar obj2 = {\n  a: 42,\n  foo: foo\n};\nvar obj1 = {\n  a: 2,\n  obj2: obj2\n};\nobj1.obj2.foo();\n```\n\n### 隐式绑定上下文的时丢失上下文\n\n```javascript\nfunction say() {\n  console.log(this.name);\n}\nvar name = 'global';\nvar obj = {\n  name: 'inside',\n  say: say\n};\nvar alias = obj.say; // 设置一个简写   (1)\nalias(); // 函数调用 输出\"global\"  (2)\n```\n\n由于在 js 中，函数是对象，对象之间是引用传递，而不是值传递，因此第一句代码只是 alias = obj.say= say, 也就是 alias = say，obj.say 只是起了一个桥梁的作用，alias 最终引用的是 say 函数的地址，而与 obj 这个对象无关了，这就是所谓的 “ 丢失上下文 ”。最终执行 alias 函数只不过简单的执行了 say 函数\n\n```javascript\nfunction foo() {\n  console.log(this.a);\n}\nfunction doFoo(fn) {\n  // fn其实引用的是foo\n  fn(); // <-- 调用位置！\n}\nvar obj = {\n  a: 2,\n  foo: foo\n};\nvar a = 'oops, global'; // a是全局对象的属性\ndoFoo(obj.foo);\n```\n\n参数传递其实就是一种隐式赋值，因此我们传入函数时也会被隐式赋值。回调函数丢失 this 是很常见的情况，除此之外回调函数的函数可能会修改 this，实际上你无法控制回调函数的执行方式，因此就没办法控制会影响绑定的调用位置\n\n---\n\n## 显示绑定\n\n显示绑定，显示的将 this 绑定到一个上下文，js 中，提供了三种显示绑定的方法，apply,call ， bind。apply 和 call 的用法基本相似，他们之间的区别是：\n\n- apply(obj,[arg1.arg2,...]); 被调用函数的参数以数组的形式给出\n\n- call(obj,arg1,arg2,arg3,...); 被调用函数的参数依次给出\n\n- bind 函数执行后，返回的是一个新函数。\n\n** 硬性绑定的应用场景：**\n\n```javascript\nfunction foo(something) {\nconsole.log( this.a, something );\nreturn this.a + something;\n} v\nar obj = {\na:2\n};\nvar bar = function() {\nreturn foo.apply( obj, arguments );\n};\nvar b = bar( 3 ); // 2 3\nconsole.log( b ); // 5\n```\n\n另一种使用方法是创建一个\n\n```javascript\nfunction speak() {\n  console.log(this.name);\n}\nvar name = 'global';\nvar obj1 = {\n  name: 'obj1'\n};\nvar obj2 = {\n  name: 'obj2'\n};\nspeak(); // global 等价于speak.call(window)\nspeak.call(window);\nspeak.call(obj1); // obj1\nspeak.call(obj2); // obj2\n```\n\n带参数：\n\n```javascript\n// 带参数\nfunction count(num1, num2) {\n  console.log(this.a * num1 + num2);\n}\nvar obj1 = {\n  a: 2\n};\nvar obj2 = {\n  a: 3\n};\ncount.call(obj1, 1, 2); // 4\ncount.apply(obj1, [1, 2]); // 4\ncount.call(obj2, 1, 2); // 5\ncount.apply(obj2, [1, 2]); // 5\n```\n\n因此可以看出，apply ， call 的作用就是给函数绑定一个执行上下文，且是显示绑定的。因此函数内的 this 自然而然就绑定在了 call 或者 apply 所调用的对象上。而 bind 函数，则返回一个绑定了制定的执行上下文的新函数：\n\n```javascript\n// 带参数\nfunction count(num1, num2) {\n  console.log(this.a * num1 + num2);\n}\nvar obj1 = {\n  a: 2\n};\nvar bound1 = count.bind(obj1); // 未指定参数\nbound1(1, 2); // 4\nvar bound2 = count.bind(obj1, 1); // 指定了一个参数\nbound2(2); // 4\nvar bound3 = count.bind(obj1, 1, 2); // 指定了两个参数\nbound3(); //4\nvar bound4 = count.bind(obj1, 1, 2, 3); // 指定了多余的参数,多余的参数会被忽略\nbound4(); // 4\n```\n\n所以 bind 方法只是返回了一个新的函数，这个函数内的 this 指定了执行上下文，而返回这个新函数可以接受参数。\n\n---\n\nnew 绑定最后要将的一种 this 绑定规则，是指通过 new 操作符调用构造函数时发生的 this 绑定。构造函数也仅仅是普通函数而已，只不过构造函数以答谢字母开头，也只不过它可以通过 new 操作符调用而已。\n\n```javascript\nfunction Person(name, age) {\n  this.name = name;\n  this.age = age;\n  console.log('我也只不过是个普通函数');\n  console.log(this); //window、window、Person\n}\nPerson('zxt', 22); // \"我也只不过是个普通函数\"\nconsole.log(this.name); // \"zxt\"\nconsole.log(age); // 22\nPerson('yh', 122);\nconsole.log(this.name); //yu\nvar zxt = new Person('zxt', 22); // \"我也只不过是个普通函数\"\nconsole.log(zxt.name); // \"zxt\"\nconsole.log(zxt.age); // 22\nconsole.log(this.name); //yu\n```\n\n定义的 Person 函数，既可以普通调用，也可以构造函数的形式上的调用，当普通函数调用时，则按正常的函数执行，输出一个字符串。如果通过一个 new 操作符，则构造了一个新的对象。\n\n两种调用方式的不同之处：\n\n- ** 普通函数调用时，应用启用默认绑定规则 **，this 绑定在全局上，此时全局对象上回分别增加 name 和 age 两个属性。\n- 当通过 new 操作符时，会产生一个新对象，并且会把构造函数内的 this 绑定到这个对象上，事实上，在 js 中，使用 new 来调用函数，会自动执行下面的操作\n  1. 创建一个全新的对象。\n  2. 这个新对象或被执行原型链连接\n  3. 这个新对象会绑定到函数调用的 this\n  4. 如果函数没有返回其他对象，那么 new 表达式中的函数调用会自动返回这个新对象\n\n---\n\n## 四种绑定的优先级\n\n这四种绑定规则基本上涵盖了所有函数调用情况。但是同时应用了这四种规则中的两种甚至更多，又该是怎么样的一个情况，或者说这四种绑定的优先级顺序又是怎么样的。** 默认优先级最低 < 隐式绑定第二 < 显示绑定第三 < new 绑定最高 **\n\n---\n\n## 箭头函数中的 this\n\n箭头函数的 this 是根据外层的 ( 函数或则全局 ) 作用于来决定的，函数体内的 this 对象指的是定义时所在的对象，而不是之前介绍的调用时绑定的对象。箭头函数的 this 始终指向函数定义时的 this，而非执行时。箭头函数中没有 this 绑定，必须通过查找作用域链来决定其值，如果箭头函数被非箭头函数包含，则 this 绑定的是最近一层非箭头函数的 this，否则，this 为 undefined。\n\n```javascript\nvar a = 1;\nvar foo = () => {\n  console.log(this.a); // 定义在全局对象中，因此this绑定在全局作用域\n};\nvar obj = {\n  a: 2\n};\nfoo(); // 1 ,在全局对象中调用\nfoo.call(obj); // 1,显示绑定，由obj对象来调用，但根本不影响结果\n```\n\n箭头函数的 this 强制性的绑定在了箭头函数定义时所在的作用域，而且无法通过显示绑定，如 apply，call 方法来修改\n\n```javascript\nfunction Person(name, age) {\n  this.name = name;\n  this.age = age;\n  this.speak = function() {\n    console.log(this.name);\n    // 普通函数（非箭头函数),this绑定在调用时的作用域\n  };\n  this.bornYear = () => {\n    // 本文写于2016年，因此new Date().getFullYear()得到的是2016\n    // 箭头函数，this绑定在实例内部\n    console.log(new Date().getFullYear() - this.age);\n  };\n}\nvar zxt = new Person('zxt', 22);\nzxt.speak(); // \"zxt\"\nzxt.bornYear(); // 1994\n// 到这里应该大家应该都没什么问题\nvar xiaoMing = {\n  name: 'xiaoming',\n  age: 18 // 小明永远18岁\n};\nzxt.speak.call(xiaoMing);\n// \"xiaoming\" this绑定的是xiaoMing这个对象\nzxt.bornYear.call(xiaoMing);\n```\n\n以上就是 javascript 中所有 this 绑定的情况，在 es6 之前，前面所说的四种绑定规则可以涵盖任何的函数调用情况，es6 标准实施以后，对于函数的扩展新增了箭头函数，与之不同的是，箭头函数的作用于位于箭头函数定义时所在的作用域。\n\n---\n\n```javascript\nvar obj = {\n  id: 'awesome',\n  cool: function coolFn() {\n    var _this = this;\n    console.log(_this.id);\n  }\n};\nvar id = 'not awesome';\nobj.cool(); // 酷,object\nsetTimeout(obj.cool, 100); //window\n```\n\ncool() 函数丢失了同 this 之间的绑定， var self = this 这种方案可以圆满解决了理解和正确使用 this 绑定的问题。\n\n```javascript\nfunction Obj(name) {\n  var _this = this; //_this = object{}\n  _this.id = name;\n  _this.cool = function() {\n    console.log(_this.id);\n  };\n}\nvar id = 'not awesome';\nvar test = new Obj('yaya'); //yaya\ntest.cool(); //yaya\nvar xiaohong = {\n  id: xiaohong,\n  age: 18\n};\ntest.cool.call(xiaohong); //根本不执行\n```\n\n---\n\n```javascript\nfunction identify() {\n  return this.name.toUpperCase();\n}\nfunction speak() {\n  var greeting = \"Hello, I'm \" + identify.call(this);\n  console.log(greeting);\n}\nvar me = {\n  name: 'Kyle'\n};\nvar you = {\n  name: 'Reader'\n};\nidentify.call(me); // KYLE\nidentify.call(you); // READER\nspeak.call(me); // Hello, 我是KYLE\nspeak.call(you); // Hello, 我是READER\n```\n\n---\n\n```javascript\nfunction foo(num) {\n  console.log('foo: ' + num);\n  // 记录foo被调用的次数\n\n  this.count++;\n}\nfoo.count = 0;\nvar i;\nfor (i = 0; i < 10; i++) {\n  if (i > 5) {\n    foo(i);\n  }\n}\n// foo: 6\n// foo: 7\n// foo: 8\n// foo: 9\n// foo被调用了多少次？\nconsole.log(foo.count); // 0 -- WTF?\n```\n\n执行 foo.count = 0 时，的确向函数对象 foo 添加了一个属性 count。但是函数内部代码 this.count 中的 this 并不指向那个函数，所以虽然属性名相同，跟对象却并不相同。这段代码在五一中创建了一个全局变量 count。\n\n** 匿名函数无法指向自身 **，arguments.callee 是唯一一种从匿名函数对象中引用自身的方法，已被弃用。，然而更好的是避免使用匿名函数，至少在需要自引用时使用时使用具名函数\n\n**this 在任何情况下都不指向函数的词法作用域 **，作用域 “ 对象 ” 无法通过 js 代码来访问，它存在于 js 引擎内部 \\*\\*\n\n```javascript\nfunction foo() {\n  var a = 2;\n  this.bar();\n}\nfunction bar() {\n  console.log(this.a);\n}\nfoo();\n```\n\n试图用 this 联通 foo() 和 bar() 的词法作用域，从而让 bar 可以 i 访问 foo() 变量的 a，这是不可能实现的，** 不能使用 this 来引用一个词法作用域内部的东西 **，每当想要把 this 和此法作用域混用的时候，一定要提醒自己，这是无法实现的\n\n---\n\n## 综合题\n\n### 1\n\n```javascript\nvar names = '宋伟老师';\nvar obj = {\n  names: '张健老师',\n  showName: function() {\n    console.log(this.name);\n  },\n  returnName: function() {\n    return this.name;\n  },\n  returnFunctionName: function() {\n    return function() {\n      console.log(this.name);\n    };\n  }\n};\nobj.showName(); //输出什么？   \"张健老师\"\nobj.returnName(); //输出什么？   \"张健老师\"\nobj.returnFunctionName()(); //输出什么？   \"宋伟老师\"\nobj.showName.call(names); //输出什么？   undefined\nobj.returnName.call(names); //输出什么？   undefined\nobj.returnFunctionName().call(names); //输出什么？   undefined\nvar newObj = obj.returnFunctionName().bind(window);\nnewObj.call(obj); //输出什么？   \"宋伟老师\"\n//为什么最后一个输出\"宋伟老师\"？因为bind指向this对象后  再一次调用的话  this指向不会被改变\n```\n\n### 2\n\n```javascript\nvar big = '万达老师';\n\nvar obj = {\n  big: '宋伟老师',\n  showBig: function() {\n    return this.big;\n  }\n};\nobj.showBig.call(big); //ƒ big() { [native code] }  //精通String的操作方法的同学就把为什么回复出来吧\n```\n\n### 3\n\n```javascript\nfunction a(a,b,c){\n    console.log(this.length);                 //4\n    console.log(this.callee.length);          //1\n}\n\nfunction fn(d){\n    arguments[0](10,20,30,40,50);\n}\n\nfn(a,10,20,30);\n\n\n//第一个输出结果:因为this当前指向的是arguments 。 arguments是一个伪数组具备length属性。arguments又是保存函数的实参。\nfn调用的时候传入4个实参。所以arguments长度为4。这个时候arguments[0] 等同于 arguments.a调用这个函数。所以this指向的是arguments这个伪数组也是(对象)(听到这还有疑惑小伙伴留言问我)\n\n//第二个输出结果：callee是arguments的一个属性,主要返回当前arguments直属的函数体。所以this.callees是返回fn 。每一个函数有一个length属性主要用来返回函数的形参的所以就是1。\n```\n","source":"_posts/this指向.md","raw":"---\ntitle: this指向\ndate: 2018-01-23 11:39:32\ncategories: JavaScript\n---\n\n[链接](http://mp.weixin.qq.com/s/2PnWD8bIFgEJxYONoPZs6w)\n\n1. js 函数中 this 指向并不是在函数定义的时候确定的，而是在函数调用的时候确定的，所以函数的调用方式决定 this 的 指向。this 永远指向最后调用它的那个对象。\n2. 普通的函数有 3 种调用方式：直接调用，方法调用和 new 调用。除此之外还有通过 bind() 将函数绑定到对象之后再调用，通过 call()、apply() 进行调用等。es6 引入箭头函数之后，其 this 指向又有所不同。\n3. this 既不是指向函数自身也不指向函数作用域，this 实际上是在函数被调用是发生绑定的，它的指向完全取决于函数在哪里调用。\n\n<!--more-->\n\n```javascript\nvar a = {\n  name: 'A',\n  fn: function() {\n    console.log(this.name);\n  }\n};\n\na.fn(); //this===a;\na.fn.call({ name: 'B' }); //this==={name:'B'}\nvar fn1 = a.fn;\nfn1(); //this===window\n```\n\nthis 执行会有不同，主要是几种在这几个场景中：\n\n- 作为构造函数执行，构造函数中\n- 作为对象属性上执行，上述代码中的 a.fn()\n- 作为普通函数执行，上述代码中的 fn1()\n- 用于 bind,call,apply 上述代码中 a.fn.call({name:'B'})\n\n## 默认绑定\n\n在 JavaScript 中，最常用的函数调用类型就是独立函数调用。如果在调用函数的时候，函数不带任何修饰，也就是光秃秃的调用，那就会应用默认绑定规则，默认绑定的指向的是全局作用域。\n\n```javascript\n<script type=\"text/javascript\" charset=\"utf-8\">\n  var name = \"g\";\n  function a() {\n      console.log(this.name);        //g\n      a.name = 'inside';\n      function b() {\n          console.log(this.name);  //g\n\n\n      }\n      b();\n  }\n  a();\n</script>\n```\n\n`a()` 函数在全局作用域中被调用，因此第 1 句中的 `this` 就绑定在了全局对象上。`b()` 函数在 `a()` 函数里面调用，即使这样第二句中的 `this` 指代的仍然是全局对象，即使 `a()` 函数设置了 `name` 属性。这就是默认绑定规则，它是 `js` 中最常见的一种函数调用模式，`this` 的绑定规则也是最简单的一种，就是绑定在全局作用域上\n\n** 但是如果使用了严格模式，则 `this` 不能绑定到全局对象，在严格模式下，把 `this` 绑定到全局对象上时，实际上绑定的是 `underfined`，因此上面的代码会报错 **\n\n---\n\n```javascript\nvar name = 'g';\nfunction a() {\n  console.log(this.name); //g\n  var c = this;\n  c.name = 'inside';\n  function b() {\n    console.log(this.name); //inside\n  }\n  b();\n}\na();\n```\n\n---\n\n```javascript\nvar name = 'g';\nfunction a() {\n  console.log(this.name); //g\n  name = 'inside';\n  function b() {\n    console.log(this.name); //inside\n  }\n  b();\n}\na();\n```\n\n---\n\n```javascript\nvar name = 'g';\nfunction a() {\n  console.log(this.name); //g\n  var name = 'inside';\n  function b() {\n    console.log(this.name); //g\n  }\n  b();\n}\na();\n```\n\n---\n\n```javascript\nvar name = 'g';\nfunction a() {\n  console.log(this.name); //g\n  var name = 'inside';\n  function b() {\n    console.log(name); //inside\n  }\n  b();\n}\na();\n```\n\n---\n\n```javascript\nvar name = 'g';\nfunction a() {\n  console.log(name); //underfined\n  var name = 'inside';\n  function b() {\n    console.log(name); //inside\n  }\n  b();\n}\na();\n```\n\n---\n\n```javascript\nvar name = 'g';\nfunction a() {\n  console.log(name); //underfined\n  var name = 'inside';\n  function b() {\n    console.log(this.name); //g\n  }\n  b();\n}\na();\n```\n\n所以通过上面的实验可以充分的得出一个结论，this 确实不是指向的当前作用域的，this 和词法作用域是完全不同的。\n\n---\n\n## 隐式绑定\n\n当函数在调用时，如果函数有所谓的 “ 落脚点 ”, 即有上下文对象时，隐式绑定规则会把函数中的 this 绑定到这个上下文对象。如果觉得上面这段话不够直白的话，还是来看代码。\n\n```javascript\nfunction say() {\n  console.log(this.name);\n}\nvar obj1 = {\n  name: 'zxt',\n  say: say\n};\nvar obj2 = {\n  name: 'zxt1',\n  say: say\n};\nobj1.say(); // zxt\nobj2.say(); // zxt1\n```\n\nobj1 ， obj2 就是所谓 say 函数的落脚点，专业一点的说法就是上下文对象，给函数指定了这个上下文对象的时，函数内部的 this 自然指向了这个上下文对象。这是很常见的函数调用模式\n\n** 对象属性引用链中只有最顶层或者说是最后一层会影响调用位置 **\n\n```javascript\nfunction foo() {\n  console.log(this.a);\n}\nvar obj2 = {\n  a: 42,\n  foo: foo\n};\nvar obj1 = {\n  a: 2,\n  obj2: obj2\n};\nobj1.obj2.foo();\n```\n\n### 隐式绑定上下文的时丢失上下文\n\n```javascript\nfunction say() {\n  console.log(this.name);\n}\nvar name = 'global';\nvar obj = {\n  name: 'inside',\n  say: say\n};\nvar alias = obj.say; // 设置一个简写   (1)\nalias(); // 函数调用 输出\"global\"  (2)\n```\n\n由于在 js 中，函数是对象，对象之间是引用传递，而不是值传递，因此第一句代码只是 alias = obj.say= say, 也就是 alias = say，obj.say 只是起了一个桥梁的作用，alias 最终引用的是 say 函数的地址，而与 obj 这个对象无关了，这就是所谓的 “ 丢失上下文 ”。最终执行 alias 函数只不过简单的执行了 say 函数\n\n```javascript\nfunction foo() {\n  console.log(this.a);\n}\nfunction doFoo(fn) {\n  // fn其实引用的是foo\n  fn(); // <-- 调用位置！\n}\nvar obj = {\n  a: 2,\n  foo: foo\n};\nvar a = 'oops, global'; // a是全局对象的属性\ndoFoo(obj.foo);\n```\n\n参数传递其实就是一种隐式赋值，因此我们传入函数时也会被隐式赋值。回调函数丢失 this 是很常见的情况，除此之外回调函数的函数可能会修改 this，实际上你无法控制回调函数的执行方式，因此就没办法控制会影响绑定的调用位置\n\n---\n\n## 显示绑定\n\n显示绑定，显示的将 this 绑定到一个上下文，js 中，提供了三种显示绑定的方法，apply,call ， bind。apply 和 call 的用法基本相似，他们之间的区别是：\n\n- apply(obj,[arg1.arg2,...]); 被调用函数的参数以数组的形式给出\n\n- call(obj,arg1,arg2,arg3,...); 被调用函数的参数依次给出\n\n- bind 函数执行后，返回的是一个新函数。\n\n** 硬性绑定的应用场景：**\n\n```javascript\nfunction foo(something) {\nconsole.log( this.a, something );\nreturn this.a + something;\n} v\nar obj = {\na:2\n};\nvar bar = function() {\nreturn foo.apply( obj, arguments );\n};\nvar b = bar( 3 ); // 2 3\nconsole.log( b ); // 5\n```\n\n另一种使用方法是创建一个\n\n```javascript\nfunction speak() {\n  console.log(this.name);\n}\nvar name = 'global';\nvar obj1 = {\n  name: 'obj1'\n};\nvar obj2 = {\n  name: 'obj2'\n};\nspeak(); // global 等价于speak.call(window)\nspeak.call(window);\nspeak.call(obj1); // obj1\nspeak.call(obj2); // obj2\n```\n\n带参数：\n\n```javascript\n// 带参数\nfunction count(num1, num2) {\n  console.log(this.a * num1 + num2);\n}\nvar obj1 = {\n  a: 2\n};\nvar obj2 = {\n  a: 3\n};\ncount.call(obj1, 1, 2); // 4\ncount.apply(obj1, [1, 2]); // 4\ncount.call(obj2, 1, 2); // 5\ncount.apply(obj2, [1, 2]); // 5\n```\n\n因此可以看出，apply ， call 的作用就是给函数绑定一个执行上下文，且是显示绑定的。因此函数内的 this 自然而然就绑定在了 call 或者 apply 所调用的对象上。而 bind 函数，则返回一个绑定了制定的执行上下文的新函数：\n\n```javascript\n// 带参数\nfunction count(num1, num2) {\n  console.log(this.a * num1 + num2);\n}\nvar obj1 = {\n  a: 2\n};\nvar bound1 = count.bind(obj1); // 未指定参数\nbound1(1, 2); // 4\nvar bound2 = count.bind(obj1, 1); // 指定了一个参数\nbound2(2); // 4\nvar bound3 = count.bind(obj1, 1, 2); // 指定了两个参数\nbound3(); //4\nvar bound4 = count.bind(obj1, 1, 2, 3); // 指定了多余的参数,多余的参数会被忽略\nbound4(); // 4\n```\n\n所以 bind 方法只是返回了一个新的函数，这个函数内的 this 指定了执行上下文，而返回这个新函数可以接受参数。\n\n---\n\nnew 绑定最后要将的一种 this 绑定规则，是指通过 new 操作符调用构造函数时发生的 this 绑定。构造函数也仅仅是普通函数而已，只不过构造函数以答谢字母开头，也只不过它可以通过 new 操作符调用而已。\n\n```javascript\nfunction Person(name, age) {\n  this.name = name;\n  this.age = age;\n  console.log('我也只不过是个普通函数');\n  console.log(this); //window、window、Person\n}\nPerson('zxt', 22); // \"我也只不过是个普通函数\"\nconsole.log(this.name); // \"zxt\"\nconsole.log(age); // 22\nPerson('yh', 122);\nconsole.log(this.name); //yu\nvar zxt = new Person('zxt', 22); // \"我也只不过是个普通函数\"\nconsole.log(zxt.name); // \"zxt\"\nconsole.log(zxt.age); // 22\nconsole.log(this.name); //yu\n```\n\n定义的 Person 函数，既可以普通调用，也可以构造函数的形式上的调用，当普通函数调用时，则按正常的函数执行，输出一个字符串。如果通过一个 new 操作符，则构造了一个新的对象。\n\n两种调用方式的不同之处：\n\n- ** 普通函数调用时，应用启用默认绑定规则 **，this 绑定在全局上，此时全局对象上回分别增加 name 和 age 两个属性。\n- 当通过 new 操作符时，会产生一个新对象，并且会把构造函数内的 this 绑定到这个对象上，事实上，在 js 中，使用 new 来调用函数，会自动执行下面的操作\n  1. 创建一个全新的对象。\n  2. 这个新对象或被执行原型链连接\n  3. 这个新对象会绑定到函数调用的 this\n  4. 如果函数没有返回其他对象，那么 new 表达式中的函数调用会自动返回这个新对象\n\n---\n\n## 四种绑定的优先级\n\n这四种绑定规则基本上涵盖了所有函数调用情况。但是同时应用了这四种规则中的两种甚至更多，又该是怎么样的一个情况，或者说这四种绑定的优先级顺序又是怎么样的。** 默认优先级最低 < 隐式绑定第二 < 显示绑定第三 < new 绑定最高 **\n\n---\n\n## 箭头函数中的 this\n\n箭头函数的 this 是根据外层的 ( 函数或则全局 ) 作用于来决定的，函数体内的 this 对象指的是定义时所在的对象，而不是之前介绍的调用时绑定的对象。箭头函数的 this 始终指向函数定义时的 this，而非执行时。箭头函数中没有 this 绑定，必须通过查找作用域链来决定其值，如果箭头函数被非箭头函数包含，则 this 绑定的是最近一层非箭头函数的 this，否则，this 为 undefined。\n\n```javascript\nvar a = 1;\nvar foo = () => {\n  console.log(this.a); // 定义在全局对象中，因此this绑定在全局作用域\n};\nvar obj = {\n  a: 2\n};\nfoo(); // 1 ,在全局对象中调用\nfoo.call(obj); // 1,显示绑定，由obj对象来调用，但根本不影响结果\n```\n\n箭头函数的 this 强制性的绑定在了箭头函数定义时所在的作用域，而且无法通过显示绑定，如 apply，call 方法来修改\n\n```javascript\nfunction Person(name, age) {\n  this.name = name;\n  this.age = age;\n  this.speak = function() {\n    console.log(this.name);\n    // 普通函数（非箭头函数),this绑定在调用时的作用域\n  };\n  this.bornYear = () => {\n    // 本文写于2016年，因此new Date().getFullYear()得到的是2016\n    // 箭头函数，this绑定在实例内部\n    console.log(new Date().getFullYear() - this.age);\n  };\n}\nvar zxt = new Person('zxt', 22);\nzxt.speak(); // \"zxt\"\nzxt.bornYear(); // 1994\n// 到这里应该大家应该都没什么问题\nvar xiaoMing = {\n  name: 'xiaoming',\n  age: 18 // 小明永远18岁\n};\nzxt.speak.call(xiaoMing);\n// \"xiaoming\" this绑定的是xiaoMing这个对象\nzxt.bornYear.call(xiaoMing);\n```\n\n以上就是 javascript 中所有 this 绑定的情况，在 es6 之前，前面所说的四种绑定规则可以涵盖任何的函数调用情况，es6 标准实施以后，对于函数的扩展新增了箭头函数，与之不同的是，箭头函数的作用于位于箭头函数定义时所在的作用域。\n\n---\n\n```javascript\nvar obj = {\n  id: 'awesome',\n  cool: function coolFn() {\n    var _this = this;\n    console.log(_this.id);\n  }\n};\nvar id = 'not awesome';\nobj.cool(); // 酷,object\nsetTimeout(obj.cool, 100); //window\n```\n\ncool() 函数丢失了同 this 之间的绑定， var self = this 这种方案可以圆满解决了理解和正确使用 this 绑定的问题。\n\n```javascript\nfunction Obj(name) {\n  var _this = this; //_this = object{}\n  _this.id = name;\n  _this.cool = function() {\n    console.log(_this.id);\n  };\n}\nvar id = 'not awesome';\nvar test = new Obj('yaya'); //yaya\ntest.cool(); //yaya\nvar xiaohong = {\n  id: xiaohong,\n  age: 18\n};\ntest.cool.call(xiaohong); //根本不执行\n```\n\n---\n\n```javascript\nfunction identify() {\n  return this.name.toUpperCase();\n}\nfunction speak() {\n  var greeting = \"Hello, I'm \" + identify.call(this);\n  console.log(greeting);\n}\nvar me = {\n  name: 'Kyle'\n};\nvar you = {\n  name: 'Reader'\n};\nidentify.call(me); // KYLE\nidentify.call(you); // READER\nspeak.call(me); // Hello, 我是KYLE\nspeak.call(you); // Hello, 我是READER\n```\n\n---\n\n```javascript\nfunction foo(num) {\n  console.log('foo: ' + num);\n  // 记录foo被调用的次数\n\n  this.count++;\n}\nfoo.count = 0;\nvar i;\nfor (i = 0; i < 10; i++) {\n  if (i > 5) {\n    foo(i);\n  }\n}\n// foo: 6\n// foo: 7\n// foo: 8\n// foo: 9\n// foo被调用了多少次？\nconsole.log(foo.count); // 0 -- WTF?\n```\n\n执行 foo.count = 0 时，的确向函数对象 foo 添加了一个属性 count。但是函数内部代码 this.count 中的 this 并不指向那个函数，所以虽然属性名相同，跟对象却并不相同。这段代码在五一中创建了一个全局变量 count。\n\n** 匿名函数无法指向自身 **，arguments.callee 是唯一一种从匿名函数对象中引用自身的方法，已被弃用。，然而更好的是避免使用匿名函数，至少在需要自引用时使用时使用具名函数\n\n**this 在任何情况下都不指向函数的词法作用域 **，作用域 “ 对象 ” 无法通过 js 代码来访问，它存在于 js 引擎内部 \\*\\*\n\n```javascript\nfunction foo() {\n  var a = 2;\n  this.bar();\n}\nfunction bar() {\n  console.log(this.a);\n}\nfoo();\n```\n\n试图用 this 联通 foo() 和 bar() 的词法作用域，从而让 bar 可以 i 访问 foo() 变量的 a，这是不可能实现的，** 不能使用 this 来引用一个词法作用域内部的东西 **，每当想要把 this 和此法作用域混用的时候，一定要提醒自己，这是无法实现的\n\n---\n\n## 综合题\n\n### 1\n\n```javascript\nvar names = '宋伟老师';\nvar obj = {\n  names: '张健老师',\n  showName: function() {\n    console.log(this.name);\n  },\n  returnName: function() {\n    return this.name;\n  },\n  returnFunctionName: function() {\n    return function() {\n      console.log(this.name);\n    };\n  }\n};\nobj.showName(); //输出什么？   \"张健老师\"\nobj.returnName(); //输出什么？   \"张健老师\"\nobj.returnFunctionName()(); //输出什么？   \"宋伟老师\"\nobj.showName.call(names); //输出什么？   undefined\nobj.returnName.call(names); //输出什么？   undefined\nobj.returnFunctionName().call(names); //输出什么？   undefined\nvar newObj = obj.returnFunctionName().bind(window);\nnewObj.call(obj); //输出什么？   \"宋伟老师\"\n//为什么最后一个输出\"宋伟老师\"？因为bind指向this对象后  再一次调用的话  this指向不会被改变\n```\n\n### 2\n\n```javascript\nvar big = '万达老师';\n\nvar obj = {\n  big: '宋伟老师',\n  showBig: function() {\n    return this.big;\n  }\n};\nobj.showBig.call(big); //ƒ big() { [native code] }  //精通String的操作方法的同学就把为什么回复出来吧\n```\n\n### 3\n\n```javascript\nfunction a(a,b,c){\n    console.log(this.length);                 //4\n    console.log(this.callee.length);          //1\n}\n\nfunction fn(d){\n    arguments[0](10,20,30,40,50);\n}\n\nfn(a,10,20,30);\n\n\n//第一个输出结果:因为this当前指向的是arguments 。 arguments是一个伪数组具备length属性。arguments又是保存函数的实参。\nfn调用的时候传入4个实参。所以arguments长度为4。这个时候arguments[0] 等同于 arguments.a调用这个函数。所以this指向的是arguments这个伪数组也是(对象)(听到这还有疑惑小伙伴留言问我)\n\n//第二个输出结果：callee是arguments的一个属性,主要返回当前arguments直属的函数体。所以this.callees是返回fn 。每一个函数有一个length属性主要用来返回函数的形参的所以就是1。\n```\n","slug":"this指向","published":1,"updated":"2019-07-09T07:02:03.309Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmejaeta0039xcvr072680bb","content":"<p><a href=\"http://mp.weixin.qq.com/s/2PnWD8bIFgEJxYONoPZs6w\">链接</a></p>\n<ol>\n<li>js 函数中 this 指向并不是在函数定义的时候确定的，而是在函数调用的时候确定的，所以函数的调用方式决定 this 的 指向。this 永远指向最后调用它的那个对象。</li>\n<li>普通的函数有 3 种调用方式：直接调用，方法调用和 new 调用。除此之外还有通过 bind() 将函数绑定到对象之后再调用，通过 call()、apply() 进行调用等。es6 引入箭头函数之后，其 this 指向又有所不同。</li>\n<li>this 既不是指向函数自身也不指向函数作用域，this 实际上是在函数被调用是发生绑定的，它的指向完全取决于函数在哪里调用。</li>\n</ol>\n<span id=\"more\"></span>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;A&#x27;</span>,</span><br><span class=\"line\">  fn: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">a.fn(); <span class=\"comment\">//this===a;</span></span><br><span class=\"line\">a.fn.call(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;B&#x27;</span> &#125;); <span class=\"comment\">//this===&#123;name:&#x27;B&#x27;&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn1 = a.fn;</span><br><span class=\"line\">fn1(); <span class=\"comment\">//this===window</span></span><br></pre></td></tr></table></figure>\n\n<p>this 执行会有不同，主要是几种在这几个场景中：</p>\n<ul>\n<li>作为构造函数执行，构造函数中</li>\n<li>作为对象属性上执行，上述代码中的 a.fn()</li>\n<li>作为普通函数执行，上述代码中的 fn1()</li>\n<li>用于 bind,call,apply 上述代码中 a.fn.call({name:’B’})</li>\n</ul>\n<h2 id=\"默认绑定\"><a href=\"#默认绑定\" class=\"headerlink\" title=\"默认绑定\"></a>默认绑定</h2><p>在 JavaScript 中，最常用的函数调用类型就是独立函数调用。如果在调用函数的时候，函数不带任何修饰，也就是光秃秃的调用，那就会应用默认绑定规则，默认绑定的指向的是全局作用域。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span> charset=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">&quot;g&quot;</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);        <span class=\"comment\">//g</span></span><br><span class=\"line\">      a.name = <span class=\"string\">&#x27;inside&#x27;</span>;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);  <span class=\"comment\">//g</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      b();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  a();</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>a()</code> 函数在全局作用域中被调用，因此第 1 句中的 <code>this</code> 就绑定在了全局对象上。<code>b()</code> 函数在 <code>a()</code> 函数里面调用，即使这样第二句中的 <code>this</code> 指代的仍然是全局对象，即使 <code>a()</code> 函数设置了 <code>name</code> 属性。这就是默认绑定规则，它是 <code>js</code> 中最常见的一种函数调用模式，<code>this</code> 的绑定规则也是最简单的一种，就是绑定在全局作用域上</p>\n<p>** 但是如果使用了严格模式，则 <code>this</code> 不能绑定到全局对象，在严格模式下，把 <code>this</code> 绑定到全局对象上时，实际上绑定的是 <code>underfined</code>，因此上面的代码会报错 **</p>\n<hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;g&#x27;</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name); <span class=\"comment\">//g</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> c = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">  c.name = <span class=\"string\">&#x27;inside&#x27;</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name); <span class=\"comment\">//inside</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  b();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a();</span><br></pre></td></tr></table></figure>\n\n<hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;g&#x27;</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name); <span class=\"comment\">//g</span></span><br><span class=\"line\">  name = <span class=\"string\">&#x27;inside&#x27;</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name); <span class=\"comment\">//inside</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  b();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a();</span><br></pre></td></tr></table></figure>\n\n<hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;g&#x27;</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name); <span class=\"comment\">//g</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;inside&#x27;</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name); <span class=\"comment\">//g</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  b();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a();</span><br></pre></td></tr></table></figure>\n\n<hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;g&#x27;</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name); <span class=\"comment\">//g</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;inside&#x27;</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(name); <span class=\"comment\">//inside</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  b();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a();</span><br></pre></td></tr></table></figure>\n\n<hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;g&#x27;</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(name); <span class=\"comment\">//underfined</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;inside&#x27;</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(name); <span class=\"comment\">//inside</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  b();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a();</span><br></pre></td></tr></table></figure>\n\n<hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;g&#x27;</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(name); <span class=\"comment\">//underfined</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;inside&#x27;</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name); <span class=\"comment\">//g</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  b();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a();</span><br></pre></td></tr></table></figure>\n\n<p>所以通过上面的实验可以充分的得出一个结论，this 确实不是指向的当前作用域的，this 和词法作用域是完全不同的。</p>\n<hr>\n<h2 id=\"隐式绑定\"><a href=\"#隐式绑定\" class=\"headerlink\" title=\"隐式绑定\"></a>隐式绑定</h2><p>当函数在调用时，如果函数有所谓的 “ 落脚点 ”, 即有上下文对象时，隐式绑定规则会把函数中的 this 绑定到这个上下文对象。如果觉得上面这段话不够直白的话，还是来看代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;zxt&#x27;</span>,</span><br><span class=\"line\">  say: say</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;zxt1&#x27;</span>,</span><br><span class=\"line\">  say: say</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj1.say(); <span class=\"comment\">// zxt</span></span><br><span class=\"line\">obj2.say(); <span class=\"comment\">// zxt1</span></span><br></pre></td></tr></table></figure>\n\n<p>obj1 ， obj2 就是所谓 say 函数的落脚点，专业一点的说法就是上下文对象，给函数指定了这个上下文对象的时，函数内部的 this 自然指向了这个上下文对象。这是很常见的函数调用模式</p>\n<p>** 对象属性引用链中只有最顶层或者说是最后一层会影响调用位置 **</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</span><br><span class=\"line\">  a: <span class=\"number\">42</span>,</span><br><span class=\"line\">  foo: foo</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">  a: <span class=\"number\">2</span>,</span><br><span class=\"line\">  obj2: obj2</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj1.obj2.foo();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"隐式绑定上下文的时丢失上下文\"><a href=\"#隐式绑定上下文的时丢失上下文\" class=\"headerlink\" title=\"隐式绑定上下文的时丢失上下文\"></a>隐式绑定上下文的时丢失上下文</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;global&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;inside&#x27;</span>,</span><br><span class=\"line\">  say: say</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> alias = obj.say; <span class=\"comment\">// 设置一个简写   (1)</span></span><br><span class=\"line\">alias(); <span class=\"comment\">// 函数调用 输出&quot;global&quot;  (2)</span></span><br></pre></td></tr></table></figure>\n\n<p>由于在 js 中，函数是对象，对象之间是引用传递，而不是值传递，因此第一句代码只是 alias = obj.say= say, 也就是 alias = say，obj.say 只是起了一个桥梁的作用，alias 最终引用的是 say 函数的地址，而与 obj 这个对象无关了，这就是所谓的 “ 丢失上下文 ”。最终执行 alias 函数只不过简单的执行了 say 函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doFoo</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// fn其实引用的是foo</span></span><br><span class=\"line\">  fn(); <span class=\"comment\">// &lt;-- 调用位置！</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  a: <span class=\"number\">2</span>,</span><br><span class=\"line\">  foo: foo</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;oops, global&#x27;</span>; <span class=\"comment\">// a是全局对象的属性</span></span><br><span class=\"line\">doFoo(obj.foo);</span><br></pre></td></tr></table></figure>\n\n<p>参数传递其实就是一种隐式赋值，因此我们传入函数时也会被隐式赋值。回调函数丢失 this 是很常见的情况，除此之外回调函数的函数可能会修改 this，实际上你无法控制回调函数的执行方式，因此就没办法控制会影响绑定的调用位置</p>\n<hr>\n<h2 id=\"显示绑定\"><a href=\"#显示绑定\" class=\"headerlink\" title=\"显示绑定\"></a>显示绑定</h2><p>显示绑定，显示的将 this 绑定到一个上下文，js 中，提供了三种显示绑定的方法，apply,call ， bind。apply 和 call 的用法基本相似，他们之间的区别是：</p>\n<ul>\n<li><p>apply(obj,[arg1.arg2,…]); 被调用函数的参数以数组的形式给出</p>\n</li>\n<li><p>call(obj,arg1,arg2,arg3,…); 被调用函数的参数依次给出</p>\n</li>\n<li><p>bind 函数执行后，返回的是一个新函数。</p>\n</li>\n</ul>\n<p>** 硬性绑定的应用场景：**</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">something</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"built_in\">this</span>.a, something );</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.a + something;</span><br><span class=\"line\">&#125; v</span><br><span class=\"line\">ar obj = &#123;</span><br><span class=\"line\">a:<span class=\"number\">2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> foo.apply( obj, <span class=\"built_in\">arguments</span> );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = bar( <span class=\"number\">3</span> ); <span class=\"comment\">// 2 3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( b ); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<p>另一种使用方法是创建一个</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">speak</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;global&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;obj1&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;obj2&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">speak(); <span class=\"comment\">// global 等价于speak.call(window)</span></span><br><span class=\"line\">speak.call(<span class=\"built_in\">window</span>);</span><br><span class=\"line\">speak.call(obj1); <span class=\"comment\">// obj1</span></span><br><span class=\"line\">speak.call(obj2); <span class=\"comment\">// obj2</span></span><br></pre></td></tr></table></figure>\n\n<p>带参数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 带参数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">count</span>(<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.a * num1 + num2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">  a: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</span><br><span class=\"line\">  a: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">count.call(obj1, <span class=\"number\">1</span>, <span class=\"number\">2</span>); <span class=\"comment\">// 4</span></span><br><span class=\"line\">count.apply(obj1, [<span class=\"number\">1</span>, <span class=\"number\">2</span>]); <span class=\"comment\">// 4</span></span><br><span class=\"line\">count.call(obj2, <span class=\"number\">1</span>, <span class=\"number\">2</span>); <span class=\"comment\">// 5</span></span><br><span class=\"line\">count.apply(obj2, [<span class=\"number\">1</span>, <span class=\"number\">2</span>]); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<p>因此可以看出，apply ， call 的作用就是给函数绑定一个执行上下文，且是显示绑定的。因此函数内的 this 自然而然就绑定在了 call 或者 apply 所调用的对象上。而 bind 函数，则返回一个绑定了制定的执行上下文的新函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 带参数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">count</span>(<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.a * num1 + num2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">  a: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bound1 = count.bind(obj1); <span class=\"comment\">// 未指定参数</span></span><br><span class=\"line\">bound1(<span class=\"number\">1</span>, <span class=\"number\">2</span>); <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bound2 = count.bind(obj1, <span class=\"number\">1</span>); <span class=\"comment\">// 指定了一个参数</span></span><br><span class=\"line\">bound2(<span class=\"number\">2</span>); <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bound3 = count.bind(obj1, <span class=\"number\">1</span>, <span class=\"number\">2</span>); <span class=\"comment\">// 指定了两个参数</span></span><br><span class=\"line\">bound3(); <span class=\"comment\">//4</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bound4 = count.bind(obj1, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>); <span class=\"comment\">// 指定了多余的参数,多余的参数会被忽略</span></span><br><span class=\"line\">bound4(); <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n\n<p>所以 bind 方法只是返回了一个新的函数，这个函数内的 this 指定了执行上下文，而返回这个新函数可以接受参数。</p>\n<hr>\n<p>new 绑定最后要将的一种 this 绑定规则，是指通过 new 操作符调用构造函数时发生的 this 绑定。构造函数也仅仅是普通函数而已，只不过构造函数以答谢字母开头，也只不过它可以通过 new 操作符调用而已。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;我也只不过是个普通函数&#x27;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>); <span class=\"comment\">//window、window、Person</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person(<span class=\"string\">&#x27;zxt&#x27;</span>, <span class=\"number\">22</span>); <span class=\"comment\">// &quot;我也只不过是个普通函数&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name); <span class=\"comment\">// &quot;zxt&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(age); <span class=\"comment\">// 22</span></span><br><span class=\"line\">Person(<span class=\"string\">&#x27;yh&#x27;</span>, <span class=\"number\">122</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name); <span class=\"comment\">//yu</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> zxt = <span class=\"keyword\">new</span> Person(<span class=\"string\">&#x27;zxt&#x27;</span>, <span class=\"number\">22</span>); <span class=\"comment\">// &quot;我也只不过是个普通函数&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(zxt.name); <span class=\"comment\">// &quot;zxt&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(zxt.age); <span class=\"comment\">// 22</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name); <span class=\"comment\">//yu</span></span><br></pre></td></tr></table></figure>\n\n<p>定义的 Person 函数，既可以普通调用，也可以构造函数的形式上的调用，当普通函数调用时，则按正常的函数执行，输出一个字符串。如果通过一个 new 操作符，则构造了一个新的对象。</p>\n<p>两种调用方式的不同之处：</p>\n<ul>\n<li>** 普通函数调用时，应用启用默认绑定规则 **，this 绑定在全局上，此时全局对象上回分别增加 name 和 age 两个属性。</li>\n<li>当通过 new 操作符时，会产生一个新对象，并且会把构造函数内的 this 绑定到这个对象上，事实上，在 js 中，使用 new 来调用函数，会自动执行下面的操作<ol>\n<li>创建一个全新的对象。</li>\n<li>这个新对象或被执行原型链连接</li>\n<li>这个新对象会绑定到函数调用的 this</li>\n<li>如果函数没有返回其他对象，那么 new 表达式中的函数调用会自动返回这个新对象</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h2 id=\"四种绑定的优先级\"><a href=\"#四种绑定的优先级\" class=\"headerlink\" title=\"四种绑定的优先级\"></a>四种绑定的优先级</h2><p>这四种绑定规则基本上涵盖了所有函数调用情况。但是同时应用了这四种规则中的两种甚至更多，又该是怎么样的一个情况，或者说这四种绑定的优先级顺序又是怎么样的。** 默认优先级最低 &lt; 隐式绑定第二 &lt; 显示绑定第三 &lt; new 绑定最高 **</p>\n<hr>\n<h2 id=\"箭头函数中的-this\"><a href=\"#箭头函数中的-this\" class=\"headerlink\" title=\"箭头函数中的 this\"></a>箭头函数中的 this</h2><p>箭头函数的 this 是根据外层的 ( 函数或则全局 ) 作用于来决定的，函数体内的 this 对象指的是定义时所在的对象，而不是之前介绍的调用时绑定的对象。箭头函数的 this 始终指向函数定义时的 this，而非执行时。箭头函数中没有 this 绑定，必须通过查找作用域链来决定其值，如果箭头函数被非箭头函数包含，则 this 绑定的是最近一层非箭头函数的 this，否则，this 为 undefined。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.a); <span class=\"comment\">// 定义在全局对象中，因此this绑定在全局作用域</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  a: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo(); <span class=\"comment\">// 1 ,在全局对象中调用</span></span><br><span class=\"line\">foo.call(obj); <span class=\"comment\">// 1,显示绑定，由obj对象来调用，但根本不影响结果</span></span><br></pre></td></tr></table></figure>\n\n<p>箭头函数的 this 强制性的绑定在了箭头函数定义时所在的作用域，而且无法通过显示绑定，如 apply，call 方法来修改</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.speak = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">    <span class=\"comment\">// 普通函数（非箭头函数),this绑定在调用时的作用域</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.bornYear = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 本文写于2016年，因此new Date().getFullYear()得到的是2016</span></span><br><span class=\"line\">    <span class=\"comment\">// 箭头函数，this绑定在实例内部</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear() - <span class=\"built_in\">this</span>.age);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> zxt = <span class=\"keyword\">new</span> Person(<span class=\"string\">&#x27;zxt&#x27;</span>, <span class=\"number\">22</span>);</span><br><span class=\"line\">zxt.speak(); <span class=\"comment\">// &quot;zxt&quot;</span></span><br><span class=\"line\">zxt.bornYear(); <span class=\"comment\">// 1994</span></span><br><span class=\"line\"><span class=\"comment\">// 到这里应该大家应该都没什么问题</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> xiaoMing = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;xiaoming&#x27;</span>,</span><br><span class=\"line\">  age: <span class=\"number\">18</span> <span class=\"comment\">// 小明永远18岁</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">zxt.speak.call(xiaoMing);</span><br><span class=\"line\"><span class=\"comment\">// &quot;xiaoming&quot; this绑定的是xiaoMing这个对象</span></span><br><span class=\"line\">zxt.bornYear.call(xiaoMing);</span><br></pre></td></tr></table></figure>\n\n<p>以上就是 javascript 中所有 this 绑定的情况，在 es6 之前，前面所说的四种绑定规则可以涵盖任何的函数调用情况，es6 标准实施以后，对于函数的扩展新增了箭头函数，与之不同的是，箭头函数的作用于位于箭头函数定义时所在的作用域。</p>\n<hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  id: <span class=\"string\">&#x27;awesome&#x27;</span>,</span><br><span class=\"line\">  cool: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">coolFn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(_this.id);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> id = <span class=\"string\">&#x27;not awesome&#x27;</span>;</span><br><span class=\"line\">obj.cool(); <span class=\"comment\">// 酷,object</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(obj.cool, <span class=\"number\">100</span>); <span class=\"comment\">//window</span></span><br></pre></td></tr></table></figure>\n\n<p>cool() 函数丢失了同 this 之间的绑定， var self = this 这种方案可以圆满解决了理解和正确使用 this 绑定的问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Obj</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> _this = <span class=\"built_in\">this</span>; <span class=\"comment\">//_this = object&#123;&#125;</span></span><br><span class=\"line\">  _this.id = name;</span><br><span class=\"line\">  _this.cool = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(_this.id);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> id = <span class=\"string\">&#x27;not awesome&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"keyword\">new</span> Obj(<span class=\"string\">&#x27;yaya&#x27;</span>); <span class=\"comment\">//yaya</span></span><br><span class=\"line\">test.cool(); <span class=\"comment\">//yaya</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> xiaohong = &#123;</span><br><span class=\"line\">  id: xiaohong,</span><br><span class=\"line\">  age: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">test.cool.call(xiaohong); <span class=\"comment\">//根本不执行</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">identify</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name.toUpperCase();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">speak</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> greeting = <span class=\"string\">&quot;Hello, I&#x27;m &quot;</span> + identify.call(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(greeting);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> me = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;Kyle&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> you = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;Reader&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">identify.call(me); <span class=\"comment\">// KYLE</span></span><br><span class=\"line\">identify.call(you); <span class=\"comment\">// READER</span></span><br><span class=\"line\">speak.call(me); <span class=\"comment\">// Hello, 我是KYLE</span></span><br><span class=\"line\">speak.call(you); <span class=\"comment\">// Hello, 我是READER</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;foo: &#x27;</span> + num);</span><br><span class=\"line\">  <span class=\"comment\">// 记录foo被调用的次数</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.count++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo.count = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> i;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">    foo(i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// foo: 6</span></span><br><span class=\"line\"><span class=\"comment\">// foo: 7</span></span><br><span class=\"line\"><span class=\"comment\">// foo: 8</span></span><br><span class=\"line\"><span class=\"comment\">// foo: 9</span></span><br><span class=\"line\"><span class=\"comment\">// foo被调用了多少次？</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo.count); <span class=\"comment\">// 0 -- WTF?</span></span><br></pre></td></tr></table></figure>\n\n<p>执行 foo.count = 0 时，的确向函数对象 foo 添加了一个属性 count。但是函数内部代码 this.count 中的 this 并不指向那个函数，所以虽然属性名相同，跟对象却并不相同。这段代码在五一中创建了一个全局变量 count。</p>\n<p>** 匿名函数无法指向自身 **，arguments.callee 是唯一一种从匿名函数对象中引用自身的方法，已被弃用。，然而更好的是避免使用匿名函数，至少在需要自引用时使用时使用具名函数</p>\n<p>*<em>this 在任何情况下都不指向函数的词法作用域 **，作用域 “ 对象 ” 无法通过 js 代码来访问，它存在于 js 引擎内部 \\</em>*</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.bar();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo();</span><br></pre></td></tr></table></figure>\n\n<p>试图用 this 联通 foo() 和 bar() 的词法作用域，从而让 bar 可以 i 访问 foo() 变量的 a，这是不可能实现的，** 不能使用 this 来引用一个词法作用域内部的东西 **，每当想要把 this 和此法作用域混用的时候，一定要提醒自己，这是无法实现的</p>\n<hr>\n<h2 id=\"综合题\"><a href=\"#综合题\" class=\"headerlink\" title=\"综合题\"></a>综合题</h2><h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> names = <span class=\"string\">&#x27;宋伟老师&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  names: <span class=\"string\">&#x27;张健老师&#x27;</span>,</span><br><span class=\"line\">  showName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  returnName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  returnFunctionName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj.showName(); <span class=\"comment\">//输出什么？   &quot;张健老师&quot;</span></span><br><span class=\"line\">obj.returnName(); <span class=\"comment\">//输出什么？   &quot;张健老师&quot;</span></span><br><span class=\"line\">obj.returnFunctionName()(); <span class=\"comment\">//输出什么？   &quot;宋伟老师&quot;</span></span><br><span class=\"line\">obj.showName.call(names); <span class=\"comment\">//输出什么？   undefined</span></span><br><span class=\"line\">obj.returnName.call(names); <span class=\"comment\">//输出什么？   undefined</span></span><br><span class=\"line\">obj.returnFunctionName().call(names); <span class=\"comment\">//输出什么？   undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newObj = obj.returnFunctionName().bind(<span class=\"built_in\">window</span>);</span><br><span class=\"line\">newObj.call(obj); <span class=\"comment\">//输出什么？   &quot;宋伟老师&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//为什么最后一个输出&quot;宋伟老师&quot;？因为bind指向this对象后  再一次调用的话  this指向不会被改变</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> big = <span class=\"string\">&#x27;万达老师&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  big: <span class=\"string\">&#x27;宋伟老师&#x27;</span>,</span><br><span class=\"line\">  showBig: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.big;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj.showBig.call(big); <span class=\"comment\">//ƒ big() &#123; [native code] &#125;  //精通String的操作方法的同学就把为什么回复出来吧</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">a,b,c</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.length);                 <span class=\"comment\">//4</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.callee.length);          <span class=\"comment\">//1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">d</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>](<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>,<span class=\"number\">50</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn(a,<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第一个输出结果:因为this当前指向的是arguments 。 arguments是一个伪数组具备length属性。arguments又是保存函数的实参。</span></span><br><span class=\"line\">fn调用的时候传入<span class=\"number\">4</span>个实参。所以<span class=\"built_in\">arguments</span>长度为<span class=\"number\">4</span>。这个时候<span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>] 等同于 <span class=\"built_in\">arguments</span>.a调用这个函数。所以<span class=\"built_in\">this</span>指向的是<span class=\"built_in\">arguments</span>这个伪数组也是(对象)(听到这还有疑惑小伙伴留言问我)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第二个输出结果：callee是arguments的一个属性,主要返回当前arguments直属的函数体。所以this.callees是返回fn 。每一个函数有一个length属性主要用来返回函数的形参的所以就是1。</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://mp.weixin.qq.com/s/2PnWD8bIFgEJxYONoPZs6w\">链接</a></p>\n<ol>\n<li>js 函数中 this 指向并不是在函数定义的时候确定的，而是在函数调用的时候确定的，所以函数的调用方式决定 this 的 指向。this 永远指向最后调用它的那个对象。</li>\n<li>普通的函数有 3 种调用方式：直接调用，方法调用和 new 调用。除此之外还有通过 bind() 将函数绑定到对象之后再调用，通过 call()、apply() 进行调用等。es6 引入箭头函数之后，其 this 指向又有所不同。</li>\n<li>this 既不是指向函数自身也不指向函数作用域，this 实际上是在函数被调用是发生绑定的，它的指向完全取决于函数在哪里调用。</li>\n</ol>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;A&#x27;</span>,</span><br><span class=\"line\">  fn: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">a.fn(); <span class=\"comment\">//this===a;</span></span><br><span class=\"line\">a.fn.call(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;B&#x27;</span> &#125;); <span class=\"comment\">//this===&#123;name:&#x27;B&#x27;&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn1 = a.fn;</span><br><span class=\"line\">fn1(); <span class=\"comment\">//this===window</span></span><br></pre></td></tr></table></figure>\n\n<p>this 执行会有不同，主要是几种在这几个场景中：</p>\n<ul>\n<li>作为构造函数执行，构造函数中</li>\n<li>作为对象属性上执行，上述代码中的 a.fn()</li>\n<li>作为普通函数执行，上述代码中的 fn1()</li>\n<li>用于 bind,call,apply 上述代码中 a.fn.call({name:’B’})</li>\n</ul>\n<h2 id=\"默认绑定\"><a href=\"#默认绑定\" class=\"headerlink\" title=\"默认绑定\"></a>默认绑定</h2><p>在 JavaScript 中，最常用的函数调用类型就是独立函数调用。如果在调用函数的时候，函数不带任何修饰，也就是光秃秃的调用，那就会应用默认绑定规则，默认绑定的指向的是全局作用域。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span> charset=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">&quot;g&quot;</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);        <span class=\"comment\">//g</span></span><br><span class=\"line\">      a.name = <span class=\"string\">&#x27;inside&#x27;</span>;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);  <span class=\"comment\">//g</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      b();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  a();</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>a()</code> 函数在全局作用域中被调用，因此第 1 句中的 <code>this</code> 就绑定在了全局对象上。<code>b()</code> 函数在 <code>a()</code> 函数里面调用，即使这样第二句中的 <code>this</code> 指代的仍然是全局对象，即使 <code>a()</code> 函数设置了 <code>name</code> 属性。这就是默认绑定规则，它是 <code>js</code> 中最常见的一种函数调用模式，<code>this</code> 的绑定规则也是最简单的一种，就是绑定在全局作用域上</p>\n<p>** 但是如果使用了严格模式，则 <code>this</code> 不能绑定到全局对象，在严格模式下，把 <code>this</code> 绑定到全局对象上时，实际上绑定的是 <code>underfined</code>，因此上面的代码会报错 **</p>\n<hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;g&#x27;</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name); <span class=\"comment\">//g</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> c = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">  c.name = <span class=\"string\">&#x27;inside&#x27;</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name); <span class=\"comment\">//inside</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  b();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a();</span><br></pre></td></tr></table></figure>\n\n<hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;g&#x27;</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name); <span class=\"comment\">//g</span></span><br><span class=\"line\">  name = <span class=\"string\">&#x27;inside&#x27;</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name); <span class=\"comment\">//inside</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  b();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a();</span><br></pre></td></tr></table></figure>\n\n<hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;g&#x27;</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name); <span class=\"comment\">//g</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;inside&#x27;</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name); <span class=\"comment\">//g</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  b();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a();</span><br></pre></td></tr></table></figure>\n\n<hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;g&#x27;</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name); <span class=\"comment\">//g</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;inside&#x27;</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(name); <span class=\"comment\">//inside</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  b();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a();</span><br></pre></td></tr></table></figure>\n\n<hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;g&#x27;</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(name); <span class=\"comment\">//underfined</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;inside&#x27;</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(name); <span class=\"comment\">//inside</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  b();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a();</span><br></pre></td></tr></table></figure>\n\n<hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;g&#x27;</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(name); <span class=\"comment\">//underfined</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;inside&#x27;</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name); <span class=\"comment\">//g</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  b();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a();</span><br></pre></td></tr></table></figure>\n\n<p>所以通过上面的实验可以充分的得出一个结论，this 确实不是指向的当前作用域的，this 和词法作用域是完全不同的。</p>\n<hr>\n<h2 id=\"隐式绑定\"><a href=\"#隐式绑定\" class=\"headerlink\" title=\"隐式绑定\"></a>隐式绑定</h2><p>当函数在调用时，如果函数有所谓的 “ 落脚点 ”, 即有上下文对象时，隐式绑定规则会把函数中的 this 绑定到这个上下文对象。如果觉得上面这段话不够直白的话，还是来看代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;zxt&#x27;</span>,</span><br><span class=\"line\">  say: say</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;zxt1&#x27;</span>,</span><br><span class=\"line\">  say: say</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj1.say(); <span class=\"comment\">// zxt</span></span><br><span class=\"line\">obj2.say(); <span class=\"comment\">// zxt1</span></span><br></pre></td></tr></table></figure>\n\n<p>obj1 ， obj2 就是所谓 say 函数的落脚点，专业一点的说法就是上下文对象，给函数指定了这个上下文对象的时，函数内部的 this 自然指向了这个上下文对象。这是很常见的函数调用模式</p>\n<p>** 对象属性引用链中只有最顶层或者说是最后一层会影响调用位置 **</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</span><br><span class=\"line\">  a: <span class=\"number\">42</span>,</span><br><span class=\"line\">  foo: foo</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">  a: <span class=\"number\">2</span>,</span><br><span class=\"line\">  obj2: obj2</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj1.obj2.foo();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"隐式绑定上下文的时丢失上下文\"><a href=\"#隐式绑定上下文的时丢失上下文\" class=\"headerlink\" title=\"隐式绑定上下文的时丢失上下文\"></a>隐式绑定上下文的时丢失上下文</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;global&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;inside&#x27;</span>,</span><br><span class=\"line\">  say: say</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> alias = obj.say; <span class=\"comment\">// 设置一个简写   (1)</span></span><br><span class=\"line\">alias(); <span class=\"comment\">// 函数调用 输出&quot;global&quot;  (2)</span></span><br></pre></td></tr></table></figure>\n\n<p>由于在 js 中，函数是对象，对象之间是引用传递，而不是值传递，因此第一句代码只是 alias = obj.say= say, 也就是 alias = say，obj.say 只是起了一个桥梁的作用，alias 最终引用的是 say 函数的地址，而与 obj 这个对象无关了，这就是所谓的 “ 丢失上下文 ”。最终执行 alias 函数只不过简单的执行了 say 函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doFoo</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// fn其实引用的是foo</span></span><br><span class=\"line\">  fn(); <span class=\"comment\">// &lt;-- 调用位置！</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  a: <span class=\"number\">2</span>,</span><br><span class=\"line\">  foo: foo</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;oops, global&#x27;</span>; <span class=\"comment\">// a是全局对象的属性</span></span><br><span class=\"line\">doFoo(obj.foo);</span><br></pre></td></tr></table></figure>\n\n<p>参数传递其实就是一种隐式赋值，因此我们传入函数时也会被隐式赋值。回调函数丢失 this 是很常见的情况，除此之外回调函数的函数可能会修改 this，实际上你无法控制回调函数的执行方式，因此就没办法控制会影响绑定的调用位置</p>\n<hr>\n<h2 id=\"显示绑定\"><a href=\"#显示绑定\" class=\"headerlink\" title=\"显示绑定\"></a>显示绑定</h2><p>显示绑定，显示的将 this 绑定到一个上下文，js 中，提供了三种显示绑定的方法，apply,call ， bind。apply 和 call 的用法基本相似，他们之间的区别是：</p>\n<ul>\n<li><p>apply(obj,[arg1.arg2,…]); 被调用函数的参数以数组的形式给出</p>\n</li>\n<li><p>call(obj,arg1,arg2,arg3,…); 被调用函数的参数依次给出</p>\n</li>\n<li><p>bind 函数执行后，返回的是一个新函数。</p>\n</li>\n</ul>\n<p>** 硬性绑定的应用场景：**</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">something</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"built_in\">this</span>.a, something );</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.a + something;</span><br><span class=\"line\">&#125; v</span><br><span class=\"line\">ar obj = &#123;</span><br><span class=\"line\">a:<span class=\"number\">2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> foo.apply( obj, <span class=\"built_in\">arguments</span> );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = bar( <span class=\"number\">3</span> ); <span class=\"comment\">// 2 3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( b ); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<p>另一种使用方法是创建一个</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">speak</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;global&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;obj1&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;obj2&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">speak(); <span class=\"comment\">// global 等价于speak.call(window)</span></span><br><span class=\"line\">speak.call(<span class=\"built_in\">window</span>);</span><br><span class=\"line\">speak.call(obj1); <span class=\"comment\">// obj1</span></span><br><span class=\"line\">speak.call(obj2); <span class=\"comment\">// obj2</span></span><br></pre></td></tr></table></figure>\n\n<p>带参数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 带参数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">count</span>(<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.a * num1 + num2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">  a: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</span><br><span class=\"line\">  a: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">count.call(obj1, <span class=\"number\">1</span>, <span class=\"number\">2</span>); <span class=\"comment\">// 4</span></span><br><span class=\"line\">count.apply(obj1, [<span class=\"number\">1</span>, <span class=\"number\">2</span>]); <span class=\"comment\">// 4</span></span><br><span class=\"line\">count.call(obj2, <span class=\"number\">1</span>, <span class=\"number\">2</span>); <span class=\"comment\">// 5</span></span><br><span class=\"line\">count.apply(obj2, [<span class=\"number\">1</span>, <span class=\"number\">2</span>]); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<p>因此可以看出，apply ， call 的作用就是给函数绑定一个执行上下文，且是显示绑定的。因此函数内的 this 自然而然就绑定在了 call 或者 apply 所调用的对象上。而 bind 函数，则返回一个绑定了制定的执行上下文的新函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 带参数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">count</span>(<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.a * num1 + num2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">  a: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bound1 = count.bind(obj1); <span class=\"comment\">// 未指定参数</span></span><br><span class=\"line\">bound1(<span class=\"number\">1</span>, <span class=\"number\">2</span>); <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bound2 = count.bind(obj1, <span class=\"number\">1</span>); <span class=\"comment\">// 指定了一个参数</span></span><br><span class=\"line\">bound2(<span class=\"number\">2</span>); <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bound3 = count.bind(obj1, <span class=\"number\">1</span>, <span class=\"number\">2</span>); <span class=\"comment\">// 指定了两个参数</span></span><br><span class=\"line\">bound3(); <span class=\"comment\">//4</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bound4 = count.bind(obj1, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>); <span class=\"comment\">// 指定了多余的参数,多余的参数会被忽略</span></span><br><span class=\"line\">bound4(); <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n\n<p>所以 bind 方法只是返回了一个新的函数，这个函数内的 this 指定了执行上下文，而返回这个新函数可以接受参数。</p>\n<hr>\n<p>new 绑定最后要将的一种 this 绑定规则，是指通过 new 操作符调用构造函数时发生的 this 绑定。构造函数也仅仅是普通函数而已，只不过构造函数以答谢字母开头，也只不过它可以通过 new 操作符调用而已。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;我也只不过是个普通函数&#x27;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>); <span class=\"comment\">//window、window、Person</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person(<span class=\"string\">&#x27;zxt&#x27;</span>, <span class=\"number\">22</span>); <span class=\"comment\">// &quot;我也只不过是个普通函数&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name); <span class=\"comment\">// &quot;zxt&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(age); <span class=\"comment\">// 22</span></span><br><span class=\"line\">Person(<span class=\"string\">&#x27;yh&#x27;</span>, <span class=\"number\">122</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name); <span class=\"comment\">//yu</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> zxt = <span class=\"keyword\">new</span> Person(<span class=\"string\">&#x27;zxt&#x27;</span>, <span class=\"number\">22</span>); <span class=\"comment\">// &quot;我也只不过是个普通函数&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(zxt.name); <span class=\"comment\">// &quot;zxt&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(zxt.age); <span class=\"comment\">// 22</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name); <span class=\"comment\">//yu</span></span><br></pre></td></tr></table></figure>\n\n<p>定义的 Person 函数，既可以普通调用，也可以构造函数的形式上的调用，当普通函数调用时，则按正常的函数执行，输出一个字符串。如果通过一个 new 操作符，则构造了一个新的对象。</p>\n<p>两种调用方式的不同之处：</p>\n<ul>\n<li>** 普通函数调用时，应用启用默认绑定规则 **，this 绑定在全局上，此时全局对象上回分别增加 name 和 age 两个属性。</li>\n<li>当通过 new 操作符时，会产生一个新对象，并且会把构造函数内的 this 绑定到这个对象上，事实上，在 js 中，使用 new 来调用函数，会自动执行下面的操作<ol>\n<li>创建一个全新的对象。</li>\n<li>这个新对象或被执行原型链连接</li>\n<li>这个新对象会绑定到函数调用的 this</li>\n<li>如果函数没有返回其他对象，那么 new 表达式中的函数调用会自动返回这个新对象</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h2 id=\"四种绑定的优先级\"><a href=\"#四种绑定的优先级\" class=\"headerlink\" title=\"四种绑定的优先级\"></a>四种绑定的优先级</h2><p>这四种绑定规则基本上涵盖了所有函数调用情况。但是同时应用了这四种规则中的两种甚至更多，又该是怎么样的一个情况，或者说这四种绑定的优先级顺序又是怎么样的。** 默认优先级最低 &lt; 隐式绑定第二 &lt; 显示绑定第三 &lt; new 绑定最高 **</p>\n<hr>\n<h2 id=\"箭头函数中的-this\"><a href=\"#箭头函数中的-this\" class=\"headerlink\" title=\"箭头函数中的 this\"></a>箭头函数中的 this</h2><p>箭头函数的 this 是根据外层的 ( 函数或则全局 ) 作用于来决定的，函数体内的 this 对象指的是定义时所在的对象，而不是之前介绍的调用时绑定的对象。箭头函数的 this 始终指向函数定义时的 this，而非执行时。箭头函数中没有 this 绑定，必须通过查找作用域链来决定其值，如果箭头函数被非箭头函数包含，则 this 绑定的是最近一层非箭头函数的 this，否则，this 为 undefined。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.a); <span class=\"comment\">// 定义在全局对象中，因此this绑定在全局作用域</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  a: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo(); <span class=\"comment\">// 1 ,在全局对象中调用</span></span><br><span class=\"line\">foo.call(obj); <span class=\"comment\">// 1,显示绑定，由obj对象来调用，但根本不影响结果</span></span><br></pre></td></tr></table></figure>\n\n<p>箭头函数的 this 强制性的绑定在了箭头函数定义时所在的作用域，而且无法通过显示绑定，如 apply，call 方法来修改</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.speak = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">    <span class=\"comment\">// 普通函数（非箭头函数),this绑定在调用时的作用域</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.bornYear = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 本文写于2016年，因此new Date().getFullYear()得到的是2016</span></span><br><span class=\"line\">    <span class=\"comment\">// 箭头函数，this绑定在实例内部</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear() - <span class=\"built_in\">this</span>.age);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> zxt = <span class=\"keyword\">new</span> Person(<span class=\"string\">&#x27;zxt&#x27;</span>, <span class=\"number\">22</span>);</span><br><span class=\"line\">zxt.speak(); <span class=\"comment\">// &quot;zxt&quot;</span></span><br><span class=\"line\">zxt.bornYear(); <span class=\"comment\">// 1994</span></span><br><span class=\"line\"><span class=\"comment\">// 到这里应该大家应该都没什么问题</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> xiaoMing = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;xiaoming&#x27;</span>,</span><br><span class=\"line\">  age: <span class=\"number\">18</span> <span class=\"comment\">// 小明永远18岁</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">zxt.speak.call(xiaoMing);</span><br><span class=\"line\"><span class=\"comment\">// &quot;xiaoming&quot; this绑定的是xiaoMing这个对象</span></span><br><span class=\"line\">zxt.bornYear.call(xiaoMing);</span><br></pre></td></tr></table></figure>\n\n<p>以上就是 javascript 中所有 this 绑定的情况，在 es6 之前，前面所说的四种绑定规则可以涵盖任何的函数调用情况，es6 标准实施以后，对于函数的扩展新增了箭头函数，与之不同的是，箭头函数的作用于位于箭头函数定义时所在的作用域。</p>\n<hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  id: <span class=\"string\">&#x27;awesome&#x27;</span>,</span><br><span class=\"line\">  cool: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">coolFn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(_this.id);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> id = <span class=\"string\">&#x27;not awesome&#x27;</span>;</span><br><span class=\"line\">obj.cool(); <span class=\"comment\">// 酷,object</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(obj.cool, <span class=\"number\">100</span>); <span class=\"comment\">//window</span></span><br></pre></td></tr></table></figure>\n\n<p>cool() 函数丢失了同 this 之间的绑定， var self = this 这种方案可以圆满解决了理解和正确使用 this 绑定的问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Obj</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> _this = <span class=\"built_in\">this</span>; <span class=\"comment\">//_this = object&#123;&#125;</span></span><br><span class=\"line\">  _this.id = name;</span><br><span class=\"line\">  _this.cool = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(_this.id);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> id = <span class=\"string\">&#x27;not awesome&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"keyword\">new</span> Obj(<span class=\"string\">&#x27;yaya&#x27;</span>); <span class=\"comment\">//yaya</span></span><br><span class=\"line\">test.cool(); <span class=\"comment\">//yaya</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> xiaohong = &#123;</span><br><span class=\"line\">  id: xiaohong,</span><br><span class=\"line\">  age: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">test.cool.call(xiaohong); <span class=\"comment\">//根本不执行</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">identify</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name.toUpperCase();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">speak</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> greeting = <span class=\"string\">&quot;Hello, I&#x27;m &quot;</span> + identify.call(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(greeting);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> me = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;Kyle&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> you = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;Reader&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">identify.call(me); <span class=\"comment\">// KYLE</span></span><br><span class=\"line\">identify.call(you); <span class=\"comment\">// READER</span></span><br><span class=\"line\">speak.call(me); <span class=\"comment\">// Hello, 我是KYLE</span></span><br><span class=\"line\">speak.call(you); <span class=\"comment\">// Hello, 我是READER</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;foo: &#x27;</span> + num);</span><br><span class=\"line\">  <span class=\"comment\">// 记录foo被调用的次数</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.count++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo.count = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> i;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">    foo(i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// foo: 6</span></span><br><span class=\"line\"><span class=\"comment\">// foo: 7</span></span><br><span class=\"line\"><span class=\"comment\">// foo: 8</span></span><br><span class=\"line\"><span class=\"comment\">// foo: 9</span></span><br><span class=\"line\"><span class=\"comment\">// foo被调用了多少次？</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo.count); <span class=\"comment\">// 0 -- WTF?</span></span><br></pre></td></tr></table></figure>\n\n<p>执行 foo.count = 0 时，的确向函数对象 foo 添加了一个属性 count。但是函数内部代码 this.count 中的 this 并不指向那个函数，所以虽然属性名相同，跟对象却并不相同。这段代码在五一中创建了一个全局变量 count。</p>\n<p>** 匿名函数无法指向自身 **，arguments.callee 是唯一一种从匿名函数对象中引用自身的方法，已被弃用。，然而更好的是避免使用匿名函数，至少在需要自引用时使用时使用具名函数</p>\n<p>*<em>this 在任何情况下都不指向函数的词法作用域 **，作用域 “ 对象 ” 无法通过 js 代码来访问，它存在于 js 引擎内部 \\</em>*</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.bar();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo();</span><br></pre></td></tr></table></figure>\n\n<p>试图用 this 联通 foo() 和 bar() 的词法作用域，从而让 bar 可以 i 访问 foo() 变量的 a，这是不可能实现的，** 不能使用 this 来引用一个词法作用域内部的东西 **，每当想要把 this 和此法作用域混用的时候，一定要提醒自己，这是无法实现的</p>\n<hr>\n<h2 id=\"综合题\"><a href=\"#综合题\" class=\"headerlink\" title=\"综合题\"></a>综合题</h2><h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> names = <span class=\"string\">&#x27;宋伟老师&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  names: <span class=\"string\">&#x27;张健老师&#x27;</span>,</span><br><span class=\"line\">  showName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  returnName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  returnFunctionName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj.showName(); <span class=\"comment\">//输出什么？   &quot;张健老师&quot;</span></span><br><span class=\"line\">obj.returnName(); <span class=\"comment\">//输出什么？   &quot;张健老师&quot;</span></span><br><span class=\"line\">obj.returnFunctionName()(); <span class=\"comment\">//输出什么？   &quot;宋伟老师&quot;</span></span><br><span class=\"line\">obj.showName.call(names); <span class=\"comment\">//输出什么？   undefined</span></span><br><span class=\"line\">obj.returnName.call(names); <span class=\"comment\">//输出什么？   undefined</span></span><br><span class=\"line\">obj.returnFunctionName().call(names); <span class=\"comment\">//输出什么？   undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newObj = obj.returnFunctionName().bind(<span class=\"built_in\">window</span>);</span><br><span class=\"line\">newObj.call(obj); <span class=\"comment\">//输出什么？   &quot;宋伟老师&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//为什么最后一个输出&quot;宋伟老师&quot;？因为bind指向this对象后  再一次调用的话  this指向不会被改变</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> big = <span class=\"string\">&#x27;万达老师&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  big: <span class=\"string\">&#x27;宋伟老师&#x27;</span>,</span><br><span class=\"line\">  showBig: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.big;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj.showBig.call(big); <span class=\"comment\">//ƒ big() &#123; [native code] &#125;  //精通String的操作方法的同学就把为什么回复出来吧</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">a,b,c</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.length);                 <span class=\"comment\">//4</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.callee.length);          <span class=\"comment\">//1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">d</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>](<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>,<span class=\"number\">50</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn(a,<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第一个输出结果:因为this当前指向的是arguments 。 arguments是一个伪数组具备length属性。arguments又是保存函数的实参。</span></span><br><span class=\"line\">fn调用的时候传入<span class=\"number\">4</span>个实参。所以<span class=\"built_in\">arguments</span>长度为<span class=\"number\">4</span>。这个时候<span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>] 等同于 <span class=\"built_in\">arguments</span>.a调用这个函数。所以<span class=\"built_in\">this</span>指向的是<span class=\"built_in\">arguments</span>这个伪数组也是(对象)(听到这还有疑惑小伙伴留言问我)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第二个输出结果：callee是arguments的一个属性,主要返回当前arguments直属的函数体。所以this.callees是返回fn 。每一个函数有一个length属性主要用来返回函数的形参的所以就是1。</span></span><br></pre></td></tr></table></figure>"},{"title":"webpack打包优化","date":"2019-07-22T07:37:14.000Z","_content":"\nwebpack 的使用及优化\n\n我们的目的\n\n- 减小打包后的文件大小\n- 首页按需引入文件\n- 优化 webpack 打包时间\n\n<!--more-->\n\n## 新建项目\n\n新建一个空文件夹，用于创建项目，使用 npm init 命令创建一个 package.json 文件。  \n输入这个命令后，终端会问你一系列诸如项目名称，项目描述，作者等信息，也可以使用 npm init -y 这个命令来一次生成 package.json 文件，这样终端不会询问你问题。\n\n## 安装 webpack\n\n安装 webapck 时把 webpack-cli 也装上是因为在 webpack4.x 版本后 webpack 模块把一些功能分到了 webpack-cli 模块，所以两者都需要安装，安装方法如下：\n\n```javascript\nnpm install webpack webpack-cli --global    //这是安装全局webpack及webpack-cli模块\nnpm install webpack webpack-cli --save-dev  //这是安装本地项目模块\n```\n\n## 新建文件\n\n在根目录件夹中新建两个文件夹，分别为 src 文件夹和 dist 文件夹，接下来再创建三个文件:此时，项目结构如下\n\n- index.html --放在 dist 文件夹中；\n- hello.js --放在 src 文件夹中；\n- index.js --放在 src 文件夹中；\n\n###  index.html 中写下 html 代码，它的作用是为了引入我们打包后的 js 文件：\n\n```html\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Webpack Project</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script src=\"bundle.js\"></script>\n    <!--这是打包之后的js文件，我们暂时命名为bundle.js-->\n  </body>\n</html>\n```\n\n### 在 hello.js 中导出一个模块：\n\n```js\n// hello.js\nmodule.exports = function () {\n  let hello = document.createElement('div')\n  hello.innerHTML = 'welcome to China!'\n  return hello\n}\n```\n\n### 在 index.js 中引入这个模块（hello.js）:\n\n```js\n//index.js\nconst hello = require('./hello.js')\ndocument.querySelector('#root').appendChild(hello())\n```\n\n上述操作就相当于我们把 hello.js 模块合并到了 index.js 模块，之后我们打包时就只需把 index.js 模块打包成 bundle.js 即可。\n\n### 进行最简单的 webpack 打包\n\n```javascript\n// 在终端中使用如下命令进行打包：\nwebpack src/index.js --output dist/bundle.js\n```\n\n上述就相当于把 src 文件夹下的 index.js 文件打包到 dist 文件下的 bundle.js，这时就生成了 bundle.js 供 index.html 文件引用。现在打开 index.html 就可以看到我们的页面了。\n\n## 配置 webpack.config.js\n\n上述打包方式太 low 了，我们可以在当前项目的根目录下新建一个配置文件 webpack.config.js 用来配置打包方式。\nwebpack.config.js 配置如下\n\n```js\nconst path = require('path') // 处理绝对路径\nmodule.exports = {\n  entry: path.join(__dirname, '/src/index.js'), // 入口文件\n  output: {\n    path: path.join(__dirname, '/dist'), //打包后的文件存放的地方\n    filename: 'bundle.js', //打包后输出文件的文件名\n  },\n}\n```\n\n有了这个配置文件，我们只需在终端中运行 webpack 命令就可进行打包，这条命令会自动引用 webpack.config.js 文件中的配置选项。\n\n## 构建本地服务器\n\n现在我们是通过打开本地文件来查看页面的，感觉还是有点 low。例如 vue, react 等脚手架都是在本地服务器运行的。所以我们再做进一步优化。\n\n### webpack-dev-server 配置本地服务器\n\nWebpack 提供了一个可选的本地开发服务器，这个本地服务器基于 node.js 构建，它是一个单独的组件，在 webpack 中进行配置之前需要单独安装它作为项目依赖：npm i webpack-dev-server -D\n\n以下是 devServer 的一些配置选项:\n\n- contentBase ：设置服务器所读取文件的目录，当前我们设置为\"./dist\"\n- port ：设置端口号，如果省略，默认为 8080\n- inline ：设置为 true，当源文件改变时会自动刷新页面\n- historyApiFallback ：设置为 true，所有的跳转将指向 index.html\n\n现在我们把这些配置加到 webpack.config.js 文件上，如下：\n\n```js\n// webpack.config.js\nconst path = require('path')\nmodule.exports = {\n  entry: path.join(__dirname, '/src/index.js'), // 入口文件\n  output: {\n    path: path.join(__dirname, '/dist'), //打包后的文件存放的地方\n    filename: 'bundle.js', //打包后输出文件的文件名\n  },\n  devServer: {\n    contentBase: './dist', // 本地服务器所加载文件的目录\n    port: '8088', // 设置端口号为8088\n    inline: true, // 文件修改后实时刷新\n    historyApiFallback: true, //不跳转\n  },\n}\n```\n\n### package.json 文件中添加启动和打包命令\n\npackage.json 文件修改如下\n\n```javascript\n{\n  \"name\": \"webpack-project\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"build\": \"webpack\",\n    \"dev\": \"webpack-dev-server --open\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"webpack\": \"^4.23.1\",\n    \"webpack-cli\": \"^3.1.2\",\n    \"webpack-dev-server\": \"^3.1.10\"\n  }\n}\n```\n\n这样我们就可以用以下命令进行本地运行或者打包文件了\n\n- npm run dev 启动本地服务器，webpack-dev-server 就是启动服务器的命令，--open 是用于启动完服务器后自动打开浏览器。\n- npm run build 执行打包命令\n\n此时，我们只要输入 npm run dev 就可以在 http://localhost:8088/中查看页面了。\n\n## 配置常用 loader\n\nloader 可以让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。\n\nLoaders 的配置包括以下几方面：\n\n- test：一个用以匹配 loaders 所处理文件的拓展名的正则表达式（必须）\n- loader：loader 的名称（必须）\n- include/exclude：手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；\n- options：为 loaders 提供额外的设置选项（可选）\n\n### 配置 css-loader 和 sass-loader\n\n如果我们要加载一个 css 文件，需要安装配置 style-loader 和 css-loader。  \n如果我们要使用 sass，就要配置 sass-loader 和 node-sass。\n\n- css-loader：加载.css 文件\n- style-loader：使用 style 标签将 css-loader 内部样式注入到我们的 HTML 页面\n\n```javascript\nconst path = require('path')\nmodule.exports = {\n  entry: path.join(__dirname, '/src/index.js'), // 入口文件\n  output: {\n    path: path.join(__dirname, '/dist'), //打包后的文件存放的地方\n    filename: 'bundle.js' //打包后输出文件的文件名\n  },\n  devServer: {\n    contentBase: './dist', // 本地服务器所加载文件的目录\n    port: '8088', // 设置端口号为8088\n    inline: true, // 文件修改后实时刷新\n    historyApiFallback: true //不跳转\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.css$/, // 正则匹配以.css结尾的文件\n        use: ['style-loader', 'css-loader']\n      {\n        test: /\\.(scss|sass)$/, // 正则匹配以.scss和.sass结尾的文件\n        use: ['style-loader', 'css-loader', 'sass-loader']\n      }\n    ]\n  }\n}\n```\n\n#### css压缩\ncss 代码也可以像Javascript 那样被压缩，以达到提升加速度和代码混淆的作用。目前比较成熟可靠的CSS压缩工具是cssnano，基于postcss。\n\ncssnano能理解CSS代码的含义，而不仅仅是删除空格，例如：\n- margin:10px 20px 10px 20px 被压缩成margin：10px 20px\n- color：#ff0000 被压缩成color:red\n\n通常压缩率能达到60%，cssnano介入到webpack 中很简单，因为css-loader 已经内置了，只需要开启css-loader的minimize选项，相关配置如下：\n```javascript\nconst path = require('path');\nconst {WebPlugin} = require('web-webpack-plugin');\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\n\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,// 增加对 CSS 文件的支持\n        // 提取出 Chunk 中的 CSS 代码到单独的文件中\n        use: ExtractTextPlugin.extract({\n          // 通过 minimize 选项压缩 CSS 代码\n          use: ['css-loader?minimize']\n        }),\n      },\n    ]\n  },\n  plugins: [\n    // 用 WebPlugin 生成对应的 HTML 文件\n    new WebPlugin({\n      template: './template.html', // HTML 模版文件所在的文件路径\n      filename: 'index.html' // 输出的 HTML 的文件名称\n    }),\n    new ExtractTextPlugin({\n      filename: `[name]_[contenthash:8].css`,// 给输出的 CSS 文件名称加上 Hash 值\n    }),\n  ],\n};\n```\n### 配置 Babel-loader\n\nBabel 其实是一个编译 JavaScript 的平台，它可以编译代码帮你达到以下目的：\n\n- 让你能使用最新的 JavaScript 代码（ES6，ES7...）；\n- 让你能使用基于 JavaScript 进行了拓展的语言，比如 React 的 JSX；\n\n```javascript\nmodule: {\n  ...\n  rules: [\n    {\n      test: /\\.js$/,\n      loader: 'babel-loader',\n      include: [resolve('src')]\n    }\n  ]\n}\n```\n\n由于 loader 对文件的转换操作很耗时，需要让尽可能少的文件被 loader 处理，可以通过 test、include、exclude 三个配置来命中 loader 要应用规则的文件。为了尽可能少的让文件被 loader 处理，可以通过 include 去命中只有哪些文件被处理\n\n\n### 处理图片\n\n处理图片资源时，我们常用的两种 loader 是 file-loader 或者 url-loader。\n当使用 url-loader 加载图片，图片小于上限值，则将图片转 base64 字符串，否则使用 file-loader 加载图片。\n\n```javascript\nmodule: {\n  ...\n  rules: [\n    {\n      test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n      loader: 'url-loader',\n      options: {\n        limit: 10000,\n        name: utils.assetsPath('img/[name].[hash:7].[ext]')\n      }\n    }\n  ]\n}\n```\n\n### cache-loader\n\n一些性能开销较大的 loader 之前添加 cache-loader，将结果缓存在磁盘中，默认保存在 node_modueles/.cache/cache-loader 目录下。\n首先安装依赖\n\n```javascript\nnpm install cache-loader -D\n```\n\n`cache-loader `的配置要放在其他的 loader 之前，webpack 的配置如下：\n\n```javascript\nmodule.exports = {\n  //...\n\n  module: {\n    //我的项目中,babel-loader耗时比较长，所以我给它配置了`cache-loader`\n    rules: [\n      {\n        test: /\\.jsx?$/,\n        use: ['cache-loader', 'babel-loader'],\n      },\n    ],\n  },\n}\n```\n若是只想给babel-loader配置cache的话，也可以不使用cache-loader，给babel-loader增加选项CacheDirectory。\ncacheDirectory：默认值为 false。当有设置时，指定的目录将用来缓存 loader 的执行结果。之后的 Webpack 构建，将会尝试读取缓存，来避免在每次执行时，可能产生的、高性能消耗的 Babel 重新编译过程。设置空值或者 true 的话，使用默认缓存目录：node_modules/.cache/babel-loader。开启 babel-loader的缓存和配置 cache-loader，我比对了下，构建时间很接近。\n\n## 7、配置常用插件\n\nloader 被用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。插件接口功能极其强大，可以用来处理各种各样的任务。\n\n### 7.1、自动生成 html 文件(HtmlWebpackPlugin)\n\n现在我们都是使用一开始建好的 index.html 文件，然后手动引入 bundle.js，如果以后我们引入不止一个 js 文件，那就得更改 index.html 中的 js 文件名，所以能不能自动生成 index.html 且自动引用打包后的 js 呢？  \nHtmlWebpackPlugin 插件就是用来解决这个问题的：\n\n1. 安装插件 npm i html-webpack-plugin -D\n2. 把 dist 文件夹清空\n3. 在根目录新建 index.html,内容和原来的 html 一致，只是不引入 js 文件。\n4. webpack.config.js 中我们引入了 HtmlWebpackPlugin 插件\n\n```javascript\nplugins: [\n  new HtmlWebpackPlugin({\n    filename: 'index.html',\n    template: 'index.html',\n    inject: true,\n    minify: {\n      removeComments: true,\n      collapseWhitespace: true,\n      removeAttributeQuotes: true,\n    },\n  }),\n]\n```\n\n此时我们使用 npm run build 进行打包，你会发现，dist 文件夹和 html 文件都会自动生成。\n\n### 7.2、清理/dist 文件夹(CleanWebpackPlugin)\n\n在每次构建前清理/dist 文件夹，生产最新的打包文件，这时候就用到 CleanWebpackPlugin 插件了。\n\n1. 安装 npm i clean-webpack-plugin -D\n2. 配置 webpack.config.js\n\n```javascript\nplugins: [\n  new HtmlWebpackPlugin({\n    filename: 'index.html',\n    template: 'index.html',\n    inject: true,\n    minify: {\n      removeComments: true,\n      collapseWhitespace: true,\n      removeAttributeQuotes: true,\n    },\n  }),\n  new CleanWebpackPlugin(['dist']),\n]\n```\n\n### 7.3、热更新(HotModuleReplacementPlugin)\n\n我们要在修改代码后自动更新页面，这就需要 HotModuleReplacementPlugin（HMR）插件\n\n1. devServer 配置项中添加 hot: true 参数。\n2. 因为 HotModuleReplacementPlugin 是 webpack 模块自带的，所以引入 webpack 后，在 plugins 配置项中直接使用即可。\n\n```javascript\nplugins: [\n  new HtmlWebpackPlugin({\n    filename: 'index.html',\n    template: 'index.html',\n    inject: true,\n    minify: {\n      removeComments: true,\n      collapseWhitespace: true,\n      removeAttributeQuotes: true\n    }\n  }),\n  new CleanWebpackPlugin(['dist'])\n  new webpack.HotModuleReplacementPlugin()\n]\n```\n\n### 7.4、增加 css 前缀\n\n平时我们写 css 时，一些属性需要手动加上前缀，比如-webkit-border-radius: 10px;，在 webpack 中我们可以让他自动加上\n\n1. 安装 npm i postcss-loader autoprefixer -D\n2. 在项目根目录下新建 postcss.config.js 文件\n\n```javascript\nmodule.exports = {\n  plugins: [\n    require('autoprefixer'), // 引用autoprefixer模块\n  ],\n}\n```\n\n3. 修改 webpack.config.js 文件中的 css-loader 配置\n\n```javascript\nmodule.exports = {\n   ...\n  module: {\n    rules: [\n      {\n        test: /\\.css$/, // 正则匹配以.css结尾的文件\n        use: [\n          { loader: 'style-loader' }, // 这里采用的是对象配置loader的写法\n          { loader: 'css-loader' },\n          { loader: 'postcss-loader' } // 使用postcss-loader\n        ]\n      }\n       ...\n    ]\n  }\n   ...\n}\n```\n\n### 7.5、css 分离 ExtractTextPlugin\n\n将 css 成生文件，而非内联。该插件的主要是为了抽离 css 样式,防止将样式打包在 js 中引起页面样式加载错乱的现象。\n\n1. 安装 npm i extract-text-webpack-plugin@next -D\n2. 在 webpack.config.js 文件中引入并使用该插件：\n\n```javascript\nconst ExtractTextPlugin = require('extract-text-webpack-plugin') //引入分离插件\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/, // 正则匹配以.css结尾的文件\n        use: ExtractTextPlugin.extract({\n          // 相当于回滚，经postcss-loader和css-loader处理过的css最终再经过style-loader处理\n          fallback: 'style-loader',\n          use: ['css-loader', 'postcss-loader'],\n        }),\n      },\n    ],\n  },\n  plugins: [\n    new ExtractTextPlugin('css/index.css'), // 将css分离到/dist文件夹下的css文件夹中的index.css\n  ],\n}\n```\n\n此时运行 npm run build 后会发现/dist 文件夹内多出了/css 文件夹及 index.css 文件。\n\n### 7.6、消除冗余 css\n\n有时候我们 css 写得多了，可能会不自觉的写重复了一些样式，这就造成了多余的代码，以下方法可以优化\n\n1. 安装 npm i purifycss-webpack purify-css glob -D\n2. 引入 clean-webpack-plugin 及 glob 插件并使用\n\n```javascript\nconst PurifyCssWebpack = require('purifycss-webpack') // 引入PurifyCssWebpack插件\nconst glob = require('glob') // 引入glob模块,用于扫描全部html文件中所引用的css\n\nplugins: [\n  new PurifyCssWebpack({\n    paths: glob.sync(path.join(__dirname, 'src/*.html')), // 同步扫描所有html文件中所引用的css\n  }),\n]\n```\n\n### 至此，一些常用的配置以及弄好了，现在就开始愉快地写代码了。\n\n#### 下面将讲述 webpack 的优化方法。以下的例子是由 vue-cli 脚手架搭建的项目，跟上述例子无关。\n\n————————————————————————————————————————————\n\n## webpack 打包优化\n\n### 为什么要优化打包？\n\n- 项目越做越大，依赖包越来越多，打包文件太大\n- 单页面应用首页白屏时间长，用户体验差\n\n### 我们的目的\n\n- 减小打包后的文件大小\n- 首页按需引入文件\n- 优化 webpack 打包时间\n\n\n### 按需加载\n\n1.1 路由组件按需加载\n\n```javascript\nconst router = [\n  {\n    path: '/index',\n    component: (resolve) =>\n      require.ensure([], () => resolve(require('@/components/index'))),\n  },\n  {\n    path: '/about',\n    component: (resolve) =>\n      require.ensure([], () => resolve(require('@/components/about'))),\n  },\n]\n```\n\n1.2 第三方组件和插件。按需加载需引入第三方组件\n\n```javascript\n// 引入全部组件\nimport ElementUI from 'element-ui'\nimport 'element-ui/lib/theme-chalk/index.css'\nVue.use(ElementUI)\n\n// 按需引入组件\nimport { Button } from 'element-ui'\nVue.component(Button.name, Button)\n```\n\n1.3 对于一些插件，如果只是在个别组件中用的到，也可以不要在 main.js 里面引入，而是在组件中按需引入\n\n```javascript\n// 在main.js引入\nimport Vue from vue\nimport Vuelidate from 'vuelidate'\nVue.use(Vuelidate)\n\n// 按组件按需引入\nimport { Vuelidate } from 'vuelidate'\n```\n\n### 优化 loader 配置\n\n- 优化正则匹配\n- 通过 cacheDirectory 选项开启缓存\n- 通过 include、exclude 来减少被处理的文件。\n\n```javascript\nmodule: {\n  rules: [\n    {\n      test: /\\.js$/,\n      loader: 'babel-loader?cacheDirectory',\n      include: [resolve('src')],\n    },\n  ]\n}\n```\n\n### 优化文件路径——省下搜索文件的时间\n\n- extension 配置之后可以不用在 require 或是 import 的时候加文件扩展名,会依次尝试添加扩展名进行匹配。\n- alias 通过配置别名可以加快 webpack 查找模块的速度。\n\n```javascript\n  resolve: {\n    extensions: ['.js', '.vue', '.json'],\n    alias: {\n      'vue$': 'vue/dist/vue.esm.js',\n      '@': resolve('src'),\n    }\n  },\n```\n\n### 生产环境关闭 sourceMap\n\n- sourceMap 本质上是一种映射关系，打包出来的 js 文件中的代码可以映射到代码文件的具体位置,这种映射关系会帮助我们直接找到在源代码中的错误。\n- 打包速度减慢，生产文件变大，所以开发环境使用 sourceMap，生产环境则关闭。\n\n### 代码压缩\n\n- UglifyJS: vue-cli 默认使用的压缩代码方式，它使用的是单线程压缩代码，打包时间较慢\n- ParallelUglifyPlugin: 开启多个子进程，把对多个文件压缩的工作分别给多个子进程去完成\n\n两种方法使用如下：\n\n```javascript\nplugins: [\n  new UglifyJsPlugin({\n    uglifyOptions: {\n      compress: {\n        warnings: false,\n      },\n    },\n    sourceMap: true,\n    parallel: true,\n  }),\n\n  new ParallelUglifyPlugin({\n    //缓存压缩后的结果，下次遇到一样的输入时直接从缓存中获取压缩后的结果并返回，\n    //cacheDir 用于配置缓存存放的目录路径。\n    cacheDir: '.cache/',\n    sourceMap: true,\n    uglifyJS: {\n      output: {\n        comments: false,\n      },\n      compress: {\n        warnings: false,\n      },\n    },\n  }),\n]\n```\n\n打包速度和打包后的文件大小啊对比\n| 方法 | 文件大小 | 打包速度 |\n|---------------------|:---------|:---------|\n| 不用插件 | 14.6M | 32s |\n| UglifyJsPlugin | 12.9M | 33s |\n| ParallelUglifyPlugi | 7.98M | 17s |\n\n### 提取公共代码\n\n- 相同资源重复被加载，浪费用户流量，增加服务器成本。\n- 每个页面需要加载的资源太大，导致网页首屏加载缓慢，影响用户体验。\n\nwebpack3 使用 CommonsChunkPlugin 的实现：\n\n```javascript\nplugins: [\n  new webpack.optimize.CommonsChunkPlugin({\n    name: 'vendor',\n    minChunks: function (module, count) {\n      console.log(module.resource, `引用次数${count}`)\n      //\"有正在处理文件\" + \"这个文件是 .js 后缀\" + \"这个文件是在 node_modules 中\"\n      return (\n        module.resource &&\n        /\\.js$/.test(module.resource) &&\n        module.resource.indexOf(path.join(__dirname, './node_modules')) === 0\n      )\n    },\n  }),\n  new webpack.optimize.CommonsChunkPlugin({\n    name: 'common',\n    chunks: 'initial',\n    minChunks: 2,\n  }),\n]\n```\n\nwebpack4 使用 splitChunks 的实现：\n\n```javascript\nmodule.exports = {\n  optimization: {\n    splitChunks: {\n      cacheGroups: {\n        vendor: {\n          priority: 1, //添加权重\n          test: /node_modules/, //把这个目录下符合下面几个条件的库抽离出来\n          chunks: 'initial', //刚开始就要抽离\n          minChunks: 2, //重复2次使用的时候需要抽离出来\n        },\n        common: {\n          //公共的模块\n          chunks: 'initial',\n          minChunks: 2,\n        },\n      },\n    },\n  },\n}\n```\n\n### CDN 优化\n\nCDN 又叫内容分发网络，通过把资源部署到世界各地，用户在访问时按照就近原则从离用户最近的服务器获取资源，从而加速资源的获取速度。\n\n- 随着项目越做越大，依赖的第三方 npm 包越来越多，构建之后的文件也会越来越大。\n- 再加上又是单页应用，这就会导致在网速较慢或者服务器带宽有限的情况出现长时间的白屏。\n\n1、将 vue、vue-router、vuex、element-ui 和 axios 这五个库，全部改为通过 CDN 链接获取，在 index.html 里插入 相应链接。\n\n```html\n<head>\n  <link\n    rel=\"stylesheet\"\n    href=\"https://cdn.bootcss.com/element-ui/2.0.7/theme-chalk/index.css\"\n  />\n</head>\n<body>\n  <div id=\"app\"></div>\n  <script src=\"https://cdn.bootcss.com/vue/2.6.10/vue.min.js\"></script>\n  <script src=\"https://cdn.bootcss.com/axios/0.19.0-beta.1/axios.min.js\"></script>\n  <script src=\"https://cdn.bootcss.com/vuex/3.1.0/vuex.min.js\"></script>\n  <script src=\"https://cdn.bootcss.com/vue-router/3.0.2/vue-router.min.js\"></script>\n  <script src=\"https://cdn.bootcss.com/element-ui/2.6.1/index.js\"></script>\n  <!-- built files will be auto injected -->\n</body>\n```\n\n**问题**：开发环境也接入vue.min.js 的cdn 时无法使用chrome 的 Vue.js devtools插件，所以要分环境加载不同的资源。\n\n2、在 webpack.config.js 配置文件\n\n```javascript\nmodule.exports = {\n ···\n    externals: {\n      'vue': 'Vue',\n      'vuex': 'Vuex',\n      'vue-router': 'VueRouter',\n      'element-ui': 'ELEMENT',\n      'Axios':'axios'\n    }\n  },\n```\n\n3、卸载依赖的 npm 包，npm uninstall axios element-ui vue vue-router vuex\n\n4、修改 main.js 文件里之前的引包方式\n\n```javascript\n// import Vue from 'vue'\n// import ElementUI from 'element-ui'\n// import 'element-ui/lib/theme-chalk/index.css'\n// import VueRouter from 'vue-router'\n\nimport App from './App.vue'\nimport routes from './router'\nimport utils from './utils/Utils'\n\nVue.use(ELEMENT)\nVue.use(VueRouter)\n\nconst router = new VueRouter({\n  mode: 'hash', //路由的模式\n  routes,\n})\n\nnew Vue({\n  router,\n  el: '#app',\n  render: (h) => h(App),\n})\n```\n\n### 使用 HappyPack 多进程解析和处理文件\n\n- 由于运行在 Node.js 之上的 Webpack 是单线程模型的，所以 Webpack 需要处理的事情需要一件一件的做，不能多件事一起做。\n- HappyPack 就能让 Webpack 把任务分解给多个子进程去并发的执行，子进程处理完后再把结果发送给主进程。\n- HappyPack 对 file-loader、url-loader 支持的不友好，所以不建议对该 loader 使用。\n\n使用方法如下：\n\n1. HappyPack 插件安装： npm i -D happypack\n2. webpack.base.conf.js 文件对 module.rules 进行配置\n\n```javascript\nmodule: {\n  rules: [\n    {\n      test: /\\.js$/,\n      use: ['happypack/loader?id=babel'],\n      include: [resolve('src'), resolve('test')],\n      exclude: path.resolve(__dirname, 'node_modules'),\n    },\n    {\n      test: /\\.vue$/,\n      use: ['happypack/loader?id=vue'],\n    },\n  ]\n}\n```\n\n3. 在生产环境 webpack.prod.conf.js 文件进行配置\n\n```javascript\nconst HappyPack = require('happypack')\n// 构造出共享进程池，在进程池中包含5个子进程\nconst HappyPackThreadPool = HappyPack.ThreadPool({ size: 5 })\nplugins: [\n  new HappyPack({\n    // 用唯一的标识符id，来代表当前的HappyPack是用来处理一类特定的文件\n    id: 'babel',\n    // 如何处理.js文件，用法和Loader配置中一样\n    loaders: ['babel-loader?cacheDirectory'],\n    threadPool: HappyPackThreadPool,\n  }),\n  new HappyPack({\n    id: 'vue', // 用唯一的标识符id，来代表当前的HappyPack是用来处理一类特定的文件\n    loaders: [\n      {\n        loader: 'vue-loader',\n        options: vueLoaderConfig,\n      },\n    ],\n    threadPool: HappyPackThreadPool,\n  }),\n]\n```\n\n### 使用 DLLPlugin 提高打包编译速度\n\n[DLLPlugin](https://webpack.docschina.org/plugins/dll-plugin/) 代码一般简单区分为业务代码和第三方库。如果不做处理，每次构建时都需要把所有的代码重新构建一次，耗费大量的时间，在大部分情况下，很多第三方库的代码不会变更（除非是版本升级），这时就可以使用到 dll：将复用性较高的第三方模块打包到动态链接库中，再不升级这些库的情况下，动态库不需要重新打包，每次构建只需要重新打包业务代码。\n\nDllPlugin 是 webpack 内置的插件，不需要额外安装，直接配置 webpack.dll.config.js 文件，Webpack 已经内置了对动态链接库的支持，需要通过 2 个内置的插件接入，它们分别是：\n\nDllPlugin 插件：用于打包出一个个单独的动态链接库文件。\nDllReferencePlugin 插件：用于在主要配置文件中去引入 DllPlugin 插件打包好的动态链接库文件。\n\n相关链接：\n\n- [webpack 使用-详解 DllPlugin](https://segmentfault.com/a/1190000016567986)\n- [webpack 编译速度提升之 DllPlugin](https://juejin.cn/post/6844903635072057358)\n- [4-2 使用 DllPlugin](http://webpack.wuhaolin.cn/4%E4%BC%98%E5%8C%96/4-2%E4%BD%BF%E7%94%A8DllPlugin.html)\n\n\n\n\n## 总结\n\n1. 比较实用的方法: 按需加载，优化 loader 配置，关闭生产环境的 sourceMap，CDN 优化。\n2. vue-cli 已做的优化： 代码压缩，提取公共代码，再优化空间不大。\n3. 根据项目实际需要和自身开发水平选择优化方法，必须避免因为优化产生 bug。\n","source":"_posts/webpack打包优化.md","raw":"---\ntitle: webpack打包优化\ndate: 2019-07-22 15:37:14\ncategories: webpack\ntags:\n---\n\nwebpack 的使用及优化\n\n我们的目的\n\n- 减小打包后的文件大小\n- 首页按需引入文件\n- 优化 webpack 打包时间\n\n<!--more-->\n\n## 新建项目\n\n新建一个空文件夹，用于创建项目，使用 npm init 命令创建一个 package.json 文件。  \n输入这个命令后，终端会问你一系列诸如项目名称，项目描述，作者等信息，也可以使用 npm init -y 这个命令来一次生成 package.json 文件，这样终端不会询问你问题。\n\n## 安装 webpack\n\n安装 webapck 时把 webpack-cli 也装上是因为在 webpack4.x 版本后 webpack 模块把一些功能分到了 webpack-cli 模块，所以两者都需要安装，安装方法如下：\n\n```javascript\nnpm install webpack webpack-cli --global    //这是安装全局webpack及webpack-cli模块\nnpm install webpack webpack-cli --save-dev  //这是安装本地项目模块\n```\n\n## 新建文件\n\n在根目录件夹中新建两个文件夹，分别为 src 文件夹和 dist 文件夹，接下来再创建三个文件:此时，项目结构如下\n\n- index.html --放在 dist 文件夹中；\n- hello.js --放在 src 文件夹中；\n- index.js --放在 src 文件夹中；\n\n###  index.html 中写下 html 代码，它的作用是为了引入我们打包后的 js 文件：\n\n```html\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Webpack Project</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script src=\"bundle.js\"></script>\n    <!--这是打包之后的js文件，我们暂时命名为bundle.js-->\n  </body>\n</html>\n```\n\n### 在 hello.js 中导出一个模块：\n\n```js\n// hello.js\nmodule.exports = function () {\n  let hello = document.createElement('div')\n  hello.innerHTML = 'welcome to China!'\n  return hello\n}\n```\n\n### 在 index.js 中引入这个模块（hello.js）:\n\n```js\n//index.js\nconst hello = require('./hello.js')\ndocument.querySelector('#root').appendChild(hello())\n```\n\n上述操作就相当于我们把 hello.js 模块合并到了 index.js 模块，之后我们打包时就只需把 index.js 模块打包成 bundle.js 即可。\n\n### 进行最简单的 webpack 打包\n\n```javascript\n// 在终端中使用如下命令进行打包：\nwebpack src/index.js --output dist/bundle.js\n```\n\n上述就相当于把 src 文件夹下的 index.js 文件打包到 dist 文件下的 bundle.js，这时就生成了 bundle.js 供 index.html 文件引用。现在打开 index.html 就可以看到我们的页面了。\n\n## 配置 webpack.config.js\n\n上述打包方式太 low 了，我们可以在当前项目的根目录下新建一个配置文件 webpack.config.js 用来配置打包方式。\nwebpack.config.js 配置如下\n\n```js\nconst path = require('path') // 处理绝对路径\nmodule.exports = {\n  entry: path.join(__dirname, '/src/index.js'), // 入口文件\n  output: {\n    path: path.join(__dirname, '/dist'), //打包后的文件存放的地方\n    filename: 'bundle.js', //打包后输出文件的文件名\n  },\n}\n```\n\n有了这个配置文件，我们只需在终端中运行 webpack 命令就可进行打包，这条命令会自动引用 webpack.config.js 文件中的配置选项。\n\n## 构建本地服务器\n\n现在我们是通过打开本地文件来查看页面的，感觉还是有点 low。例如 vue, react 等脚手架都是在本地服务器运行的。所以我们再做进一步优化。\n\n### webpack-dev-server 配置本地服务器\n\nWebpack 提供了一个可选的本地开发服务器，这个本地服务器基于 node.js 构建，它是一个单独的组件，在 webpack 中进行配置之前需要单独安装它作为项目依赖：npm i webpack-dev-server -D\n\n以下是 devServer 的一些配置选项:\n\n- contentBase ：设置服务器所读取文件的目录，当前我们设置为\"./dist\"\n- port ：设置端口号，如果省略，默认为 8080\n- inline ：设置为 true，当源文件改变时会自动刷新页面\n- historyApiFallback ：设置为 true，所有的跳转将指向 index.html\n\n现在我们把这些配置加到 webpack.config.js 文件上，如下：\n\n```js\n// webpack.config.js\nconst path = require('path')\nmodule.exports = {\n  entry: path.join(__dirname, '/src/index.js'), // 入口文件\n  output: {\n    path: path.join(__dirname, '/dist'), //打包后的文件存放的地方\n    filename: 'bundle.js', //打包后输出文件的文件名\n  },\n  devServer: {\n    contentBase: './dist', // 本地服务器所加载文件的目录\n    port: '8088', // 设置端口号为8088\n    inline: true, // 文件修改后实时刷新\n    historyApiFallback: true, //不跳转\n  },\n}\n```\n\n### package.json 文件中添加启动和打包命令\n\npackage.json 文件修改如下\n\n```javascript\n{\n  \"name\": \"webpack-project\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"build\": \"webpack\",\n    \"dev\": \"webpack-dev-server --open\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"webpack\": \"^4.23.1\",\n    \"webpack-cli\": \"^3.1.2\",\n    \"webpack-dev-server\": \"^3.1.10\"\n  }\n}\n```\n\n这样我们就可以用以下命令进行本地运行或者打包文件了\n\n- npm run dev 启动本地服务器，webpack-dev-server 就是启动服务器的命令，--open 是用于启动完服务器后自动打开浏览器。\n- npm run build 执行打包命令\n\n此时，我们只要输入 npm run dev 就可以在 http://localhost:8088/中查看页面了。\n\n## 配置常用 loader\n\nloader 可以让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。\n\nLoaders 的配置包括以下几方面：\n\n- test：一个用以匹配 loaders 所处理文件的拓展名的正则表达式（必须）\n- loader：loader 的名称（必须）\n- include/exclude：手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；\n- options：为 loaders 提供额外的设置选项（可选）\n\n### 配置 css-loader 和 sass-loader\n\n如果我们要加载一个 css 文件，需要安装配置 style-loader 和 css-loader。  \n如果我们要使用 sass，就要配置 sass-loader 和 node-sass。\n\n- css-loader：加载.css 文件\n- style-loader：使用 style 标签将 css-loader 内部样式注入到我们的 HTML 页面\n\n```javascript\nconst path = require('path')\nmodule.exports = {\n  entry: path.join(__dirname, '/src/index.js'), // 入口文件\n  output: {\n    path: path.join(__dirname, '/dist'), //打包后的文件存放的地方\n    filename: 'bundle.js' //打包后输出文件的文件名\n  },\n  devServer: {\n    contentBase: './dist', // 本地服务器所加载文件的目录\n    port: '8088', // 设置端口号为8088\n    inline: true, // 文件修改后实时刷新\n    historyApiFallback: true //不跳转\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.css$/, // 正则匹配以.css结尾的文件\n        use: ['style-loader', 'css-loader']\n      {\n        test: /\\.(scss|sass)$/, // 正则匹配以.scss和.sass结尾的文件\n        use: ['style-loader', 'css-loader', 'sass-loader']\n      }\n    ]\n  }\n}\n```\n\n#### css压缩\ncss 代码也可以像Javascript 那样被压缩，以达到提升加速度和代码混淆的作用。目前比较成熟可靠的CSS压缩工具是cssnano，基于postcss。\n\ncssnano能理解CSS代码的含义，而不仅仅是删除空格，例如：\n- margin:10px 20px 10px 20px 被压缩成margin：10px 20px\n- color：#ff0000 被压缩成color:red\n\n通常压缩率能达到60%，cssnano介入到webpack 中很简单，因为css-loader 已经内置了，只需要开启css-loader的minimize选项，相关配置如下：\n```javascript\nconst path = require('path');\nconst {WebPlugin} = require('web-webpack-plugin');\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\n\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,// 增加对 CSS 文件的支持\n        // 提取出 Chunk 中的 CSS 代码到单独的文件中\n        use: ExtractTextPlugin.extract({\n          // 通过 minimize 选项压缩 CSS 代码\n          use: ['css-loader?minimize']\n        }),\n      },\n    ]\n  },\n  plugins: [\n    // 用 WebPlugin 生成对应的 HTML 文件\n    new WebPlugin({\n      template: './template.html', // HTML 模版文件所在的文件路径\n      filename: 'index.html' // 输出的 HTML 的文件名称\n    }),\n    new ExtractTextPlugin({\n      filename: `[name]_[contenthash:8].css`,// 给输出的 CSS 文件名称加上 Hash 值\n    }),\n  ],\n};\n```\n### 配置 Babel-loader\n\nBabel 其实是一个编译 JavaScript 的平台，它可以编译代码帮你达到以下目的：\n\n- 让你能使用最新的 JavaScript 代码（ES6，ES7...）；\n- 让你能使用基于 JavaScript 进行了拓展的语言，比如 React 的 JSX；\n\n```javascript\nmodule: {\n  ...\n  rules: [\n    {\n      test: /\\.js$/,\n      loader: 'babel-loader',\n      include: [resolve('src')]\n    }\n  ]\n}\n```\n\n由于 loader 对文件的转换操作很耗时，需要让尽可能少的文件被 loader 处理，可以通过 test、include、exclude 三个配置来命中 loader 要应用规则的文件。为了尽可能少的让文件被 loader 处理，可以通过 include 去命中只有哪些文件被处理\n\n\n### 处理图片\n\n处理图片资源时，我们常用的两种 loader 是 file-loader 或者 url-loader。\n当使用 url-loader 加载图片，图片小于上限值，则将图片转 base64 字符串，否则使用 file-loader 加载图片。\n\n```javascript\nmodule: {\n  ...\n  rules: [\n    {\n      test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n      loader: 'url-loader',\n      options: {\n        limit: 10000,\n        name: utils.assetsPath('img/[name].[hash:7].[ext]')\n      }\n    }\n  ]\n}\n```\n\n### cache-loader\n\n一些性能开销较大的 loader 之前添加 cache-loader，将结果缓存在磁盘中，默认保存在 node_modueles/.cache/cache-loader 目录下。\n首先安装依赖\n\n```javascript\nnpm install cache-loader -D\n```\n\n`cache-loader `的配置要放在其他的 loader 之前，webpack 的配置如下：\n\n```javascript\nmodule.exports = {\n  //...\n\n  module: {\n    //我的项目中,babel-loader耗时比较长，所以我给它配置了`cache-loader`\n    rules: [\n      {\n        test: /\\.jsx?$/,\n        use: ['cache-loader', 'babel-loader'],\n      },\n    ],\n  },\n}\n```\n若是只想给babel-loader配置cache的话，也可以不使用cache-loader，给babel-loader增加选项CacheDirectory。\ncacheDirectory：默认值为 false。当有设置时，指定的目录将用来缓存 loader 的执行结果。之后的 Webpack 构建，将会尝试读取缓存，来避免在每次执行时，可能产生的、高性能消耗的 Babel 重新编译过程。设置空值或者 true 的话，使用默认缓存目录：node_modules/.cache/babel-loader。开启 babel-loader的缓存和配置 cache-loader，我比对了下，构建时间很接近。\n\n## 7、配置常用插件\n\nloader 被用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。插件接口功能极其强大，可以用来处理各种各样的任务。\n\n### 7.1、自动生成 html 文件(HtmlWebpackPlugin)\n\n现在我们都是使用一开始建好的 index.html 文件，然后手动引入 bundle.js，如果以后我们引入不止一个 js 文件，那就得更改 index.html 中的 js 文件名，所以能不能自动生成 index.html 且自动引用打包后的 js 呢？  \nHtmlWebpackPlugin 插件就是用来解决这个问题的：\n\n1. 安装插件 npm i html-webpack-plugin -D\n2. 把 dist 文件夹清空\n3. 在根目录新建 index.html,内容和原来的 html 一致，只是不引入 js 文件。\n4. webpack.config.js 中我们引入了 HtmlWebpackPlugin 插件\n\n```javascript\nplugins: [\n  new HtmlWebpackPlugin({\n    filename: 'index.html',\n    template: 'index.html',\n    inject: true,\n    minify: {\n      removeComments: true,\n      collapseWhitespace: true,\n      removeAttributeQuotes: true,\n    },\n  }),\n]\n```\n\n此时我们使用 npm run build 进行打包，你会发现，dist 文件夹和 html 文件都会自动生成。\n\n### 7.2、清理/dist 文件夹(CleanWebpackPlugin)\n\n在每次构建前清理/dist 文件夹，生产最新的打包文件，这时候就用到 CleanWebpackPlugin 插件了。\n\n1. 安装 npm i clean-webpack-plugin -D\n2. 配置 webpack.config.js\n\n```javascript\nplugins: [\n  new HtmlWebpackPlugin({\n    filename: 'index.html',\n    template: 'index.html',\n    inject: true,\n    minify: {\n      removeComments: true,\n      collapseWhitespace: true,\n      removeAttributeQuotes: true,\n    },\n  }),\n  new CleanWebpackPlugin(['dist']),\n]\n```\n\n### 7.3、热更新(HotModuleReplacementPlugin)\n\n我们要在修改代码后自动更新页面，这就需要 HotModuleReplacementPlugin（HMR）插件\n\n1. devServer 配置项中添加 hot: true 参数。\n2. 因为 HotModuleReplacementPlugin 是 webpack 模块自带的，所以引入 webpack 后，在 plugins 配置项中直接使用即可。\n\n```javascript\nplugins: [\n  new HtmlWebpackPlugin({\n    filename: 'index.html',\n    template: 'index.html',\n    inject: true,\n    minify: {\n      removeComments: true,\n      collapseWhitespace: true,\n      removeAttributeQuotes: true\n    }\n  }),\n  new CleanWebpackPlugin(['dist'])\n  new webpack.HotModuleReplacementPlugin()\n]\n```\n\n### 7.4、增加 css 前缀\n\n平时我们写 css 时，一些属性需要手动加上前缀，比如-webkit-border-radius: 10px;，在 webpack 中我们可以让他自动加上\n\n1. 安装 npm i postcss-loader autoprefixer -D\n2. 在项目根目录下新建 postcss.config.js 文件\n\n```javascript\nmodule.exports = {\n  plugins: [\n    require('autoprefixer'), // 引用autoprefixer模块\n  ],\n}\n```\n\n3. 修改 webpack.config.js 文件中的 css-loader 配置\n\n```javascript\nmodule.exports = {\n   ...\n  module: {\n    rules: [\n      {\n        test: /\\.css$/, // 正则匹配以.css结尾的文件\n        use: [\n          { loader: 'style-loader' }, // 这里采用的是对象配置loader的写法\n          { loader: 'css-loader' },\n          { loader: 'postcss-loader' } // 使用postcss-loader\n        ]\n      }\n       ...\n    ]\n  }\n   ...\n}\n```\n\n### 7.5、css 分离 ExtractTextPlugin\n\n将 css 成生文件，而非内联。该插件的主要是为了抽离 css 样式,防止将样式打包在 js 中引起页面样式加载错乱的现象。\n\n1. 安装 npm i extract-text-webpack-plugin@next -D\n2. 在 webpack.config.js 文件中引入并使用该插件：\n\n```javascript\nconst ExtractTextPlugin = require('extract-text-webpack-plugin') //引入分离插件\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/, // 正则匹配以.css结尾的文件\n        use: ExtractTextPlugin.extract({\n          // 相当于回滚，经postcss-loader和css-loader处理过的css最终再经过style-loader处理\n          fallback: 'style-loader',\n          use: ['css-loader', 'postcss-loader'],\n        }),\n      },\n    ],\n  },\n  plugins: [\n    new ExtractTextPlugin('css/index.css'), // 将css分离到/dist文件夹下的css文件夹中的index.css\n  ],\n}\n```\n\n此时运行 npm run build 后会发现/dist 文件夹内多出了/css 文件夹及 index.css 文件。\n\n### 7.6、消除冗余 css\n\n有时候我们 css 写得多了，可能会不自觉的写重复了一些样式，这就造成了多余的代码，以下方法可以优化\n\n1. 安装 npm i purifycss-webpack purify-css glob -D\n2. 引入 clean-webpack-plugin 及 glob 插件并使用\n\n```javascript\nconst PurifyCssWebpack = require('purifycss-webpack') // 引入PurifyCssWebpack插件\nconst glob = require('glob') // 引入glob模块,用于扫描全部html文件中所引用的css\n\nplugins: [\n  new PurifyCssWebpack({\n    paths: glob.sync(path.join(__dirname, 'src/*.html')), // 同步扫描所有html文件中所引用的css\n  }),\n]\n```\n\n### 至此，一些常用的配置以及弄好了，现在就开始愉快地写代码了。\n\n#### 下面将讲述 webpack 的优化方法。以下的例子是由 vue-cli 脚手架搭建的项目，跟上述例子无关。\n\n————————————————————————————————————————————\n\n## webpack 打包优化\n\n### 为什么要优化打包？\n\n- 项目越做越大，依赖包越来越多，打包文件太大\n- 单页面应用首页白屏时间长，用户体验差\n\n### 我们的目的\n\n- 减小打包后的文件大小\n- 首页按需引入文件\n- 优化 webpack 打包时间\n\n\n### 按需加载\n\n1.1 路由组件按需加载\n\n```javascript\nconst router = [\n  {\n    path: '/index',\n    component: (resolve) =>\n      require.ensure([], () => resolve(require('@/components/index'))),\n  },\n  {\n    path: '/about',\n    component: (resolve) =>\n      require.ensure([], () => resolve(require('@/components/about'))),\n  },\n]\n```\n\n1.2 第三方组件和插件。按需加载需引入第三方组件\n\n```javascript\n// 引入全部组件\nimport ElementUI from 'element-ui'\nimport 'element-ui/lib/theme-chalk/index.css'\nVue.use(ElementUI)\n\n// 按需引入组件\nimport { Button } from 'element-ui'\nVue.component(Button.name, Button)\n```\n\n1.3 对于一些插件，如果只是在个别组件中用的到，也可以不要在 main.js 里面引入，而是在组件中按需引入\n\n```javascript\n// 在main.js引入\nimport Vue from vue\nimport Vuelidate from 'vuelidate'\nVue.use(Vuelidate)\n\n// 按组件按需引入\nimport { Vuelidate } from 'vuelidate'\n```\n\n### 优化 loader 配置\n\n- 优化正则匹配\n- 通过 cacheDirectory 选项开启缓存\n- 通过 include、exclude 来减少被处理的文件。\n\n```javascript\nmodule: {\n  rules: [\n    {\n      test: /\\.js$/,\n      loader: 'babel-loader?cacheDirectory',\n      include: [resolve('src')],\n    },\n  ]\n}\n```\n\n### 优化文件路径——省下搜索文件的时间\n\n- extension 配置之后可以不用在 require 或是 import 的时候加文件扩展名,会依次尝试添加扩展名进行匹配。\n- alias 通过配置别名可以加快 webpack 查找模块的速度。\n\n```javascript\n  resolve: {\n    extensions: ['.js', '.vue', '.json'],\n    alias: {\n      'vue$': 'vue/dist/vue.esm.js',\n      '@': resolve('src'),\n    }\n  },\n```\n\n### 生产环境关闭 sourceMap\n\n- sourceMap 本质上是一种映射关系，打包出来的 js 文件中的代码可以映射到代码文件的具体位置,这种映射关系会帮助我们直接找到在源代码中的错误。\n- 打包速度减慢，生产文件变大，所以开发环境使用 sourceMap，生产环境则关闭。\n\n### 代码压缩\n\n- UglifyJS: vue-cli 默认使用的压缩代码方式，它使用的是单线程压缩代码，打包时间较慢\n- ParallelUglifyPlugin: 开启多个子进程，把对多个文件压缩的工作分别给多个子进程去完成\n\n两种方法使用如下：\n\n```javascript\nplugins: [\n  new UglifyJsPlugin({\n    uglifyOptions: {\n      compress: {\n        warnings: false,\n      },\n    },\n    sourceMap: true,\n    parallel: true,\n  }),\n\n  new ParallelUglifyPlugin({\n    //缓存压缩后的结果，下次遇到一样的输入时直接从缓存中获取压缩后的结果并返回，\n    //cacheDir 用于配置缓存存放的目录路径。\n    cacheDir: '.cache/',\n    sourceMap: true,\n    uglifyJS: {\n      output: {\n        comments: false,\n      },\n      compress: {\n        warnings: false,\n      },\n    },\n  }),\n]\n```\n\n打包速度和打包后的文件大小啊对比\n| 方法 | 文件大小 | 打包速度 |\n|---------------------|:---------|:---------|\n| 不用插件 | 14.6M | 32s |\n| UglifyJsPlugin | 12.9M | 33s |\n| ParallelUglifyPlugi | 7.98M | 17s |\n\n### 提取公共代码\n\n- 相同资源重复被加载，浪费用户流量，增加服务器成本。\n- 每个页面需要加载的资源太大，导致网页首屏加载缓慢，影响用户体验。\n\nwebpack3 使用 CommonsChunkPlugin 的实现：\n\n```javascript\nplugins: [\n  new webpack.optimize.CommonsChunkPlugin({\n    name: 'vendor',\n    minChunks: function (module, count) {\n      console.log(module.resource, `引用次数${count}`)\n      //\"有正在处理文件\" + \"这个文件是 .js 后缀\" + \"这个文件是在 node_modules 中\"\n      return (\n        module.resource &&\n        /\\.js$/.test(module.resource) &&\n        module.resource.indexOf(path.join(__dirname, './node_modules')) === 0\n      )\n    },\n  }),\n  new webpack.optimize.CommonsChunkPlugin({\n    name: 'common',\n    chunks: 'initial',\n    minChunks: 2,\n  }),\n]\n```\n\nwebpack4 使用 splitChunks 的实现：\n\n```javascript\nmodule.exports = {\n  optimization: {\n    splitChunks: {\n      cacheGroups: {\n        vendor: {\n          priority: 1, //添加权重\n          test: /node_modules/, //把这个目录下符合下面几个条件的库抽离出来\n          chunks: 'initial', //刚开始就要抽离\n          minChunks: 2, //重复2次使用的时候需要抽离出来\n        },\n        common: {\n          //公共的模块\n          chunks: 'initial',\n          minChunks: 2,\n        },\n      },\n    },\n  },\n}\n```\n\n### CDN 优化\n\nCDN 又叫内容分发网络，通过把资源部署到世界各地，用户在访问时按照就近原则从离用户最近的服务器获取资源，从而加速资源的获取速度。\n\n- 随着项目越做越大，依赖的第三方 npm 包越来越多，构建之后的文件也会越来越大。\n- 再加上又是单页应用，这就会导致在网速较慢或者服务器带宽有限的情况出现长时间的白屏。\n\n1、将 vue、vue-router、vuex、element-ui 和 axios 这五个库，全部改为通过 CDN 链接获取，在 index.html 里插入 相应链接。\n\n```html\n<head>\n  <link\n    rel=\"stylesheet\"\n    href=\"https://cdn.bootcss.com/element-ui/2.0.7/theme-chalk/index.css\"\n  />\n</head>\n<body>\n  <div id=\"app\"></div>\n  <script src=\"https://cdn.bootcss.com/vue/2.6.10/vue.min.js\"></script>\n  <script src=\"https://cdn.bootcss.com/axios/0.19.0-beta.1/axios.min.js\"></script>\n  <script src=\"https://cdn.bootcss.com/vuex/3.1.0/vuex.min.js\"></script>\n  <script src=\"https://cdn.bootcss.com/vue-router/3.0.2/vue-router.min.js\"></script>\n  <script src=\"https://cdn.bootcss.com/element-ui/2.6.1/index.js\"></script>\n  <!-- built files will be auto injected -->\n</body>\n```\n\n**问题**：开发环境也接入vue.min.js 的cdn 时无法使用chrome 的 Vue.js devtools插件，所以要分环境加载不同的资源。\n\n2、在 webpack.config.js 配置文件\n\n```javascript\nmodule.exports = {\n ···\n    externals: {\n      'vue': 'Vue',\n      'vuex': 'Vuex',\n      'vue-router': 'VueRouter',\n      'element-ui': 'ELEMENT',\n      'Axios':'axios'\n    }\n  },\n```\n\n3、卸载依赖的 npm 包，npm uninstall axios element-ui vue vue-router vuex\n\n4、修改 main.js 文件里之前的引包方式\n\n```javascript\n// import Vue from 'vue'\n// import ElementUI from 'element-ui'\n// import 'element-ui/lib/theme-chalk/index.css'\n// import VueRouter from 'vue-router'\n\nimport App from './App.vue'\nimport routes from './router'\nimport utils from './utils/Utils'\n\nVue.use(ELEMENT)\nVue.use(VueRouter)\n\nconst router = new VueRouter({\n  mode: 'hash', //路由的模式\n  routes,\n})\n\nnew Vue({\n  router,\n  el: '#app',\n  render: (h) => h(App),\n})\n```\n\n### 使用 HappyPack 多进程解析和处理文件\n\n- 由于运行在 Node.js 之上的 Webpack 是单线程模型的，所以 Webpack 需要处理的事情需要一件一件的做，不能多件事一起做。\n- HappyPack 就能让 Webpack 把任务分解给多个子进程去并发的执行，子进程处理完后再把结果发送给主进程。\n- HappyPack 对 file-loader、url-loader 支持的不友好，所以不建议对该 loader 使用。\n\n使用方法如下：\n\n1. HappyPack 插件安装： npm i -D happypack\n2. webpack.base.conf.js 文件对 module.rules 进行配置\n\n```javascript\nmodule: {\n  rules: [\n    {\n      test: /\\.js$/,\n      use: ['happypack/loader?id=babel'],\n      include: [resolve('src'), resolve('test')],\n      exclude: path.resolve(__dirname, 'node_modules'),\n    },\n    {\n      test: /\\.vue$/,\n      use: ['happypack/loader?id=vue'],\n    },\n  ]\n}\n```\n\n3. 在生产环境 webpack.prod.conf.js 文件进行配置\n\n```javascript\nconst HappyPack = require('happypack')\n// 构造出共享进程池，在进程池中包含5个子进程\nconst HappyPackThreadPool = HappyPack.ThreadPool({ size: 5 })\nplugins: [\n  new HappyPack({\n    // 用唯一的标识符id，来代表当前的HappyPack是用来处理一类特定的文件\n    id: 'babel',\n    // 如何处理.js文件，用法和Loader配置中一样\n    loaders: ['babel-loader?cacheDirectory'],\n    threadPool: HappyPackThreadPool,\n  }),\n  new HappyPack({\n    id: 'vue', // 用唯一的标识符id，来代表当前的HappyPack是用来处理一类特定的文件\n    loaders: [\n      {\n        loader: 'vue-loader',\n        options: vueLoaderConfig,\n      },\n    ],\n    threadPool: HappyPackThreadPool,\n  }),\n]\n```\n\n### 使用 DLLPlugin 提高打包编译速度\n\n[DLLPlugin](https://webpack.docschina.org/plugins/dll-plugin/) 代码一般简单区分为业务代码和第三方库。如果不做处理，每次构建时都需要把所有的代码重新构建一次，耗费大量的时间，在大部分情况下，很多第三方库的代码不会变更（除非是版本升级），这时就可以使用到 dll：将复用性较高的第三方模块打包到动态链接库中，再不升级这些库的情况下，动态库不需要重新打包，每次构建只需要重新打包业务代码。\n\nDllPlugin 是 webpack 内置的插件，不需要额外安装，直接配置 webpack.dll.config.js 文件，Webpack 已经内置了对动态链接库的支持，需要通过 2 个内置的插件接入，它们分别是：\n\nDllPlugin 插件：用于打包出一个个单独的动态链接库文件。\nDllReferencePlugin 插件：用于在主要配置文件中去引入 DllPlugin 插件打包好的动态链接库文件。\n\n相关链接：\n\n- [webpack 使用-详解 DllPlugin](https://segmentfault.com/a/1190000016567986)\n- [webpack 编译速度提升之 DllPlugin](https://juejin.cn/post/6844903635072057358)\n- [4-2 使用 DllPlugin](http://webpack.wuhaolin.cn/4%E4%BC%98%E5%8C%96/4-2%E4%BD%BF%E7%94%A8DllPlugin.html)\n\n\n\n\n## 总结\n\n1. 比较实用的方法: 按需加载，优化 loader 配置，关闭生产环境的 sourceMap，CDN 优化。\n2. vue-cli 已做的优化： 代码压缩，提取公共代码，再优化空间不大。\n3. 根据项目实际需要和自身开发水平选择优化方法，必须避免因为优化产生 bug。\n","slug":"webpack打包优化","published":1,"updated":"2021-03-29T09:09:26.390Z","_id":"ckmejaetb003axcvr1hvi48l0","comments":1,"layout":"post","photos":[],"link":"","content":"<p>webpack 的使用及优化</p>\n<p>我们的目的</p>\n<ul>\n<li>减小打包后的文件大小</li>\n<li>首页按需引入文件</li>\n<li>优化 webpack 打包时间</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h2><p>新建一个空文件夹，用于创建项目，使用 npm init 命令创建一个 package.json 文件。<br>输入这个命令后，终端会问你一系列诸如项目名称，项目描述，作者等信息，也可以使用 npm init -y 这个命令来一次生成 package.json 文件，这样终端不会询问你问题。</p>\n<h2 id=\"安装-webpack\"><a href=\"#安装-webpack\" class=\"headerlink\" title=\"安装 webpack\"></a>安装 webpack</h2><p>安装 webapck 时把 webpack-cli 也装上是因为在 webpack4.x 版本后 webpack 模块把一些功能分到了 webpack-cli 模块，所以两者都需要安装，安装方法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install webpack webpack-cli --<span class=\"built_in\">global</span>    <span class=\"comment\">//这是安装全局webpack及webpack-cli模块</span></span><br><span class=\"line\">npm install webpack webpack-cli --save-dev  <span class=\"comment\">//这是安装本地项目模块</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"新建文件\"><a href=\"#新建文件\" class=\"headerlink\" title=\"新建文件\"></a>新建文件</h2><p>在根目录件夹中新建两个文件夹，分别为 src 文件夹和 dist 文件夹，接下来再创建三个文件:此时，项目结构如下</p>\n<ul>\n<li>index.html –放在 dist 文件夹中；</li>\n<li>hello.js –放在 src 文件夹中；</li>\n<li>index.js –放在 src 文件夹中；</li>\n</ul>\n<h3 id=\"index-html-中写下-html-代码，它的作用是为了引入我们打包后的-js-文件：\"><a href=\"#index-html-中写下-html-代码，它的作用是为了引入我们打包后的-js-文件：\" class=\"headerlink\" title=\"index.html 中写下 html 代码，它的作用是为了引入我们打包后的 js 文件：\"></a>index.html 中写下 html 代码，它的作用是为了引入我们打包后的 js 文件：</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Webpack Project<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;bundle.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--这是打包之后的js文件，我们暂时命名为bundle.js--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在-hello-js-中导出一个模块：\"><a href=\"#在-hello-js-中导出一个模块：\" class=\"headerlink\" title=\"在 hello.js 中导出一个模块：\"></a>在 hello.js 中导出一个模块：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// hello.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> hello = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;div&#x27;</span>)</span><br><span class=\"line\">  hello.innerHTML = <span class=\"string\">&#x27;welcome to China!&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> hello</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在-index-js-中引入这个模块（hello-js）\"><a href=\"#在-index-js-中引入这个模块（hello-js）\" class=\"headerlink\" title=\"在 index.js 中引入这个模块（hello.js）:\"></a>在 index.js 中引入这个模块（hello.js）:</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> hello = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./hello.js&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#root&#x27;</span>).appendChild(hello())</span><br></pre></td></tr></table></figure>\n\n<p>上述操作就相当于我们把 hello.js 模块合并到了 index.js 模块，之后我们打包时就只需把 index.js 模块打包成 bundle.js 即可。</p>\n<h3 id=\"进行最简单的-webpack-打包\"><a href=\"#进行最简单的-webpack-打包\" class=\"headerlink\" title=\"进行最简单的 webpack 打包\"></a>进行最简单的 webpack 打包</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在终端中使用如下命令进行打包：</span></span><br><span class=\"line\">webpack src/index.js --output dist/bundle.js</span><br></pre></td></tr></table></figure>\n\n<p>上述就相当于把 src 文件夹下的 index.js 文件打包到 dist 文件下的 bundle.js，这时就生成了 bundle.js 供 index.html 文件引用。现在打开 index.html 就可以看到我们的页面了。</p>\n<h2 id=\"配置-webpack-config-js\"><a href=\"#配置-webpack-config-js\" class=\"headerlink\" title=\"配置 webpack.config.js\"></a>配置 webpack.config.js</h2><p>上述打包方式太 low 了，我们可以在当前项目的根目录下新建一个配置文件 webpack.config.js 用来配置打包方式。<br>webpack.config.js 配置如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>) <span class=\"comment\">// 处理绝对路径</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: path.join(__dirname, <span class=\"string\">&#x27;/src/index.js&#x27;</span>), <span class=\"comment\">// 入口文件</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.join(__dirname, <span class=\"string\">&#x27;/dist&#x27;</span>), <span class=\"comment\">//打包后的文件存放的地方</span></span><br><span class=\"line\">    filename: <span class=\"string\">&#x27;bundle.js&#x27;</span>, <span class=\"comment\">//打包后输出文件的文件名</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>有了这个配置文件，我们只需在终端中运行 webpack 命令就可进行打包，这条命令会自动引用 webpack.config.js 文件中的配置选项。</p>\n<h2 id=\"构建本地服务器\"><a href=\"#构建本地服务器\" class=\"headerlink\" title=\"构建本地服务器\"></a>构建本地服务器</h2><p>现在我们是通过打开本地文件来查看页面的，感觉还是有点 low。例如 vue, react 等脚手架都是在本地服务器运行的。所以我们再做进一步优化。</p>\n<h3 id=\"webpack-dev-server-配置本地服务器\"><a href=\"#webpack-dev-server-配置本地服务器\" class=\"headerlink\" title=\"webpack-dev-server 配置本地服务器\"></a>webpack-dev-server 配置本地服务器</h3><p>Webpack 提供了一个可选的本地开发服务器，这个本地服务器基于 node.js 构建，它是一个单独的组件，在 webpack 中进行配置之前需要单独安装它作为项目依赖：npm i webpack-dev-server -D</p>\n<p>以下是 devServer 的一些配置选项:</p>\n<ul>\n<li>contentBase ：设置服务器所读取文件的目录，当前我们设置为”./dist”</li>\n<li>port ：设置端口号，如果省略，默认为 8080</li>\n<li>inline ：设置为 true，当源文件改变时会自动刷新页面</li>\n<li>historyApiFallback ：设置为 true，所有的跳转将指向 index.html</li>\n</ul>\n<p>现在我们把这些配置加到 webpack.config.js 文件上，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: path.join(__dirname, <span class=\"string\">&#x27;/src/index.js&#x27;</span>), <span class=\"comment\">// 入口文件</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.join(__dirname, <span class=\"string\">&#x27;/dist&#x27;</span>), <span class=\"comment\">//打包后的文件存放的地方</span></span><br><span class=\"line\">    filename: <span class=\"string\">&#x27;bundle.js&#x27;</span>, <span class=\"comment\">//打包后输出文件的文件名</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    contentBase: <span class=\"string\">&#x27;./dist&#x27;</span>, <span class=\"comment\">// 本地服务器所加载文件的目录</span></span><br><span class=\"line\">    port: <span class=\"string\">&#x27;8088&#x27;</span>, <span class=\"comment\">// 设置端口号为8088</span></span><br><span class=\"line\">    inline: <span class=\"literal\">true</span>, <span class=\"comment\">// 文件修改后实时刷新</span></span><br><span class=\"line\">    historyApiFallback: <span class=\"literal\">true</span>, <span class=\"comment\">//不跳转</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"package-json-文件中添加启动和打包命令\"><a href=\"#package-json-文件中添加启动和打包命令\" class=\"headerlink\" title=\"package.json 文件中添加启动和打包命令\"></a>package.json 文件中添加启动和打包命令</h3><p>package.json 文件修改如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;webpack-project&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;version&quot;</span>: <span class=\"string\">&quot;1.0.0&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;description&quot;</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;main&quot;</span>: <span class=\"string\">&quot;index.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;build&quot;</span>: <span class=\"string\">&quot;webpack&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;dev&quot;</span>: <span class=\"string\">&quot;webpack-dev-server --open&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;keywords&quot;</span>: [],</span><br><span class=\"line\">  <span class=\"string\">&quot;author&quot;</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;license&quot;</span>: <span class=\"string\">&quot;ISC&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;devDependencies&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;webpack&quot;</span>: <span class=\"string\">&quot;^4.23.1&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;webpack-cli&quot;</span>: <span class=\"string\">&quot;^3.1.2&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;webpack-dev-server&quot;</span>: <span class=\"string\">&quot;^3.1.10&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样我们就可以用以下命令进行本地运行或者打包文件了</p>\n<ul>\n<li>npm run dev 启动本地服务器，webpack-dev-server 就是启动服务器的命令，–open 是用于启动完服务器后自动打开浏览器。</li>\n<li>npm run build 执行打包命令</li>\n</ul>\n<p>此时，我们只要输入 npm run dev 就可以在 <a href=\"http://localhost:8088/%E4%B8%AD%E6%9F%A5%E7%9C%8B%E9%A1%B5%E9%9D%A2%E4%BA%86%E3%80%82\">http://localhost:8088/中查看页面了。</a></p>\n<h2 id=\"配置常用-loader\"><a href=\"#配置常用-loader\" class=\"headerlink\" title=\"配置常用 loader\"></a>配置常用 loader</h2><p>loader 可以让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。</p>\n<p>Loaders 的配置包括以下几方面：</p>\n<ul>\n<li>test：一个用以匹配 loaders 所处理文件的拓展名的正则表达式（必须）</li>\n<li>loader：loader 的名称（必须）</li>\n<li>include/exclude：手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；</li>\n<li>options：为 loaders 提供额外的设置选项（可选）</li>\n</ul>\n<h3 id=\"配置-css-loader-和-sass-loader\"><a href=\"#配置-css-loader-和-sass-loader\" class=\"headerlink\" title=\"配置 css-loader 和 sass-loader\"></a>配置 css-loader 和 sass-loader</h3><p>如果我们要加载一个 css 文件，需要安装配置 style-loader 和 css-loader。<br>如果我们要使用 sass，就要配置 sass-loader 和 node-sass。</p>\n<ul>\n<li>css-loader：加载.css 文件</li>\n<li>style-loader：使用 style 标签将 css-loader 内部样式注入到我们的 HTML 页面</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: path.join(__dirname, <span class=\"string\">&#x27;/src/index.js&#x27;</span>), <span class=\"comment\">// 入口文件</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.join(__dirname, <span class=\"string\">&#x27;/dist&#x27;</span>), <span class=\"comment\">//打包后的文件存放的地方</span></span><br><span class=\"line\">    filename: <span class=\"string\">&#x27;bundle.js&#x27;</span> <span class=\"comment\">//打包后输出文件的文件名</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    contentBase: <span class=\"string\">&#x27;./dist&#x27;</span>, <span class=\"comment\">// 本地服务器所加载文件的目录</span></span><br><span class=\"line\">    port: <span class=\"string\">&#x27;8088&#x27;</span>, <span class=\"comment\">// 设置端口号为8088</span></span><br><span class=\"line\">    inline: <span class=\"literal\">true</span>, <span class=\"comment\">// 文件修改后实时刷新</span></span><br><span class=\"line\">    historyApiFallback: <span class=\"literal\">true</span> <span class=\"comment\">//不跳转</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>, <span class=\"comment\">// 正则匹配以.css结尾的文件</span></span><br><span class=\"line\">        use: [<span class=\"string\">&#x27;style-loader&#x27;</span>, <span class=\"string\">&#x27;css-loader&#x27;</span>]</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(scss|sass)$/</span>, <span class=\"comment\">// 正则匹配以.scss和.sass结尾的文件</span></span><br><span class=\"line\">        use: [<span class=\"string\">&#x27;style-loader&#x27;</span>, <span class=\"string\">&#x27;css-loader&#x27;</span>, <span class=\"string\">&#x27;sass-loader&#x27;</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"css压缩\"><a href=\"#css压缩\" class=\"headerlink\" title=\"css压缩\"></a>css压缩</h4><p>css 代码也可以像Javascript 那样被压缩，以达到提升加速度和代码混淆的作用。目前比较成熟可靠的CSS压缩工具是cssnano，基于postcss。</p>\n<p>cssnano能理解CSS代码的含义，而不仅仅是删除空格，例如：</p>\n<ul>\n<li>margin:10px 20px 10px 20px 被压缩成margin：10px 20px</li>\n<li>color：#ff0000 被压缩成color:red</li>\n</ul>\n<p>通常压缩率能达到60%，cssnano介入到webpack 中很简单，因为css-loader 已经内置了，只需要开启css-loader的minimize选项，相关配置如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;WebPlugin&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;web-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;extract-text-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,<span class=\"comment\">// 增加对 CSS 文件的支持</span></span><br><span class=\"line\">        <span class=\"comment\">// 提取出 Chunk 中的 CSS 代码到单独的文件中</span></span><br><span class=\"line\">        use: ExtractTextPlugin.extract(&#123;</span><br><span class=\"line\">          <span class=\"comment\">// 通过 minimize 选项压缩 CSS 代码</span></span><br><span class=\"line\">          use: [<span class=\"string\">&#x27;css-loader?minimize&#x27;</span>]</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"comment\">// 用 WebPlugin 生成对应的 HTML 文件</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> WebPlugin(&#123;</span><br><span class=\"line\">      template: <span class=\"string\">&#x27;./template.html&#x27;</span>, <span class=\"comment\">// HTML 模版文件所在的文件路径</span></span><br><span class=\"line\">      filename: <span class=\"string\">&#x27;index.html&#x27;</span> <span class=\"comment\">// 输出的 HTML 的文件名称</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> ExtractTextPlugin(&#123;</span><br><span class=\"line\">      filename: <span class=\"string\">`[name]_[contenthash:8].css`</span>,<span class=\"comment\">// 给输出的 CSS 文件名称加上 Hash 值</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置-Babel-loader\"><a href=\"#配置-Babel-loader\" class=\"headerlink\" title=\"配置 Babel-loader\"></a>配置 Babel-loader</h3><p>Babel 其实是一个编译 JavaScript 的平台，它可以编译代码帮你达到以下目的：</p>\n<ul>\n<li>让你能使用最新的 JavaScript 代码（ES6，ES7…）；</li>\n<li>让你能使用基于 JavaScript 进行了拓展的语言，比如 React 的 JSX；</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  rules: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">      loader: <span class=\"string\">&#x27;babel-loader&#x27;</span>,</span><br><span class=\"line\">      include: [resolve(<span class=\"string\">&#x27;src&#x27;</span>)]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于 loader 对文件的转换操作很耗时，需要让尽可能少的文件被 loader 处理，可以通过 test、include、exclude 三个配置来命中 loader 要应用规则的文件。为了尽可能少的让文件被 loader 处理，可以通过 include 去命中只有哪些文件被处理</p>\n<h3 id=\"处理图片\"><a href=\"#处理图片\" class=\"headerlink\" title=\"处理图片\"></a>处理图片</h3><p>处理图片资源时，我们常用的两种 loader 是 file-loader 或者 url-loader。<br>当使用 url-loader 加载图片，图片小于上限值，则将图片转 base64 字符串，否则使用 file-loader 加载图片。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  rules: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.(png|jpe?g|gif|svg)(\\?.*)?$/</span>,</span><br><span class=\"line\">      loader: <span class=\"string\">&#x27;url-loader&#x27;</span>,</span><br><span class=\"line\">      options: &#123;</span><br><span class=\"line\">        limit: <span class=\"number\">10000</span>,</span><br><span class=\"line\">        name: utils.assetsPath(<span class=\"string\">&#x27;img/[name].[hash:7].[ext]&#x27;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"cache-loader\"><a href=\"#cache-loader\" class=\"headerlink\" title=\"cache-loader\"></a>cache-loader</h3><p>一些性能开销较大的 loader 之前添加 cache-loader，将结果缓存在磁盘中，默认保存在 node_modueles/.cache/cache-loader 目录下。<br>首先安装依赖</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install cache-loader -D</span><br></pre></td></tr></table></figure>\n\n<p><code>cache-loader </code>的配置要放在其他的 loader 之前，webpack 的配置如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">//我的项目中,babel-loader耗时比较长，所以我给它配置了`cache-loader`</span></span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.jsx?$/</span>,</span><br><span class=\"line\">        use: [<span class=\"string\">&#x27;cache-loader&#x27;</span>, <span class=\"string\">&#x27;babel-loader&#x27;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>若是只想给babel-loader配置cache的话，也可以不使用cache-loader，给babel-loader增加选项CacheDirectory。<br>cacheDirectory：默认值为 false。当有设置时，指定的目录将用来缓存 loader 的执行结果。之后的 Webpack 构建，将会尝试读取缓存，来避免在每次执行时，可能产生的、高性能消耗的 Babel 重新编译过程。设置空值或者 true 的话，使用默认缓存目录：node_modules/.cache/babel-loader。开启 babel-loader的缓存和配置 cache-loader，我比对了下，构建时间很接近。</p>\n<h2 id=\"7、配置常用插件\"><a href=\"#7、配置常用插件\" class=\"headerlink\" title=\"7、配置常用插件\"></a>7、配置常用插件</h2><p>loader 被用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。插件接口功能极其强大，可以用来处理各种各样的任务。</p>\n<h3 id=\"7-1、自动生成-html-文件-HtmlWebpackPlugin\"><a href=\"#7-1、自动生成-html-文件-HtmlWebpackPlugin\" class=\"headerlink\" title=\"7.1、自动生成 html 文件(HtmlWebpackPlugin)\"></a>7.1、自动生成 html 文件(HtmlWebpackPlugin)</h3><p>现在我们都是使用一开始建好的 index.html 文件，然后手动引入 bundle.js，如果以后我们引入不止一个 js 文件，那就得更改 index.html 中的 js 文件名，所以能不能自动生成 index.html 且自动引用打包后的 js 呢？<br>HtmlWebpackPlugin 插件就是用来解决这个问题的：</p>\n<ol>\n<li>安装插件 npm i html-webpack-plugin -D</li>\n<li>把 dist 文件夹清空</li>\n<li>在根目录新建 index.html,内容和原来的 html 一致，只是不引入 js 文件。</li>\n<li>webpack.config.js 中我们引入了 HtmlWebpackPlugin 插件</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">    filename: <span class=\"string\">&#x27;index.html&#x27;</span>,</span><br><span class=\"line\">    template: <span class=\"string\">&#x27;index.html&#x27;</span>,</span><br><span class=\"line\">    inject: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    minify: &#123;</span><br><span class=\"line\">      removeComments: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      collapseWhitespace: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      removeAttributeQuotes: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>此时我们使用 npm run build 进行打包，你会发现，dist 文件夹和 html 文件都会自动生成。</p>\n<h3 id=\"7-2、清理-dist-文件夹-CleanWebpackPlugin\"><a href=\"#7-2、清理-dist-文件夹-CleanWebpackPlugin\" class=\"headerlink\" title=\"7.2、清理/dist 文件夹(CleanWebpackPlugin)\"></a>7.2、清理/dist 文件夹(CleanWebpackPlugin)</h3><p>在每次构建前清理/dist 文件夹，生产最新的打包文件，这时候就用到 CleanWebpackPlugin 插件了。</p>\n<ol>\n<li>安装 npm i clean-webpack-plugin -D</li>\n<li>配置 webpack.config.js</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">    filename: <span class=\"string\">&#x27;index.html&#x27;</span>,</span><br><span class=\"line\">    template: <span class=\"string\">&#x27;index.html&#x27;</span>,</span><br><span class=\"line\">    inject: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    minify: &#123;</span><br><span class=\"line\">      removeComments: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      collapseWhitespace: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      removeAttributeQuotes: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">  <span class=\"keyword\">new</span> CleanWebpackPlugin([<span class=\"string\">&#x27;dist&#x27;</span>]),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-3、热更新-HotModuleReplacementPlugin\"><a href=\"#7-3、热更新-HotModuleReplacementPlugin\" class=\"headerlink\" title=\"7.3、热更新(HotModuleReplacementPlugin)\"></a>7.3、热更新(HotModuleReplacementPlugin)</h3><p>我们要在修改代码后自动更新页面，这就需要 HotModuleReplacementPlugin（HMR）插件</p>\n<ol>\n<li>devServer 配置项中添加 hot: true 参数。</li>\n<li>因为 HotModuleReplacementPlugin 是 webpack 模块自带的，所以引入 webpack 后，在 plugins 配置项中直接使用即可。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">    filename: <span class=\"string\">&#x27;index.html&#x27;</span>,</span><br><span class=\"line\">    template: <span class=\"string\">&#x27;index.html&#x27;</span>,</span><br><span class=\"line\">    inject: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    minify: &#123;</span><br><span class=\"line\">      removeComments: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      collapseWhitespace: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      removeAttributeQuotes: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">  <span class=\"keyword\">new</span> CleanWebpackPlugin([<span class=\"string\">&#x27;dist&#x27;</span>])</span><br><span class=\"line\">  <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-4、增加-css-前缀\"><a href=\"#7-4、增加-css-前缀\" class=\"headerlink\" title=\"7.4、增加 css 前缀\"></a>7.4、增加 css 前缀</h3><p>平时我们写 css 时，一些属性需要手动加上前缀，比如-webkit-border-radius: 10px;，在 webpack 中我们可以让他自动加上</p>\n<ol>\n<li>安装 npm i postcss-loader autoprefixer -D</li>\n<li>在项目根目录下新建 postcss.config.js 文件</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;autoprefixer&#x27;</span>), <span class=\"comment\">// 引用autoprefixer模块</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>修改 webpack.config.js 文件中的 css-loader 配置</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">   ...</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>, <span class=\"comment\">// 正则匹配以.css结尾的文件</span></span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#123; <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;style-loader&#x27;</span> &#125;, <span class=\"comment\">// 这里采用的是对象配置loader的写法</span></span><br><span class=\"line\">          &#123; <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;css-loader&#x27;</span> &#125;,</span><br><span class=\"line\">          &#123; <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;postcss-loader&#x27;</span> &#125; <span class=\"comment\">// 使用postcss-loader</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">       ...</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-5、css-分离-ExtractTextPlugin\"><a href=\"#7-5、css-分离-ExtractTextPlugin\" class=\"headerlink\" title=\"7.5、css 分离 ExtractTextPlugin\"></a>7.5、css 分离 ExtractTextPlugin</h3><p>将 css 成生文件，而非内联。该插件的主要是为了抽离 css 样式,防止将样式打包在 js 中引起页面样式加载错乱的现象。</p>\n<ol>\n<li>安装 npm i extract-text-webpack-plugin@next -D</li>\n<li>在 webpack.config.js 文件中引入并使用该插件：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;extract-text-webpack-plugin&#x27;</span>) <span class=\"comment\">//引入分离插件</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>, <span class=\"comment\">// 正则匹配以.css结尾的文件</span></span><br><span class=\"line\">        use: ExtractTextPlugin.extract(&#123;</span><br><span class=\"line\">          <span class=\"comment\">// 相当于回滚，经postcss-loader和css-loader处理过的css最终再经过style-loader处理</span></span><br><span class=\"line\">          fallback: <span class=\"string\">&#x27;style-loader&#x27;</span>,</span><br><span class=\"line\">          use: [<span class=\"string\">&#x27;css-loader&#x27;</span>, <span class=\"string\">&#x27;postcss-loader&#x27;</span>],</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> ExtractTextPlugin(<span class=\"string\">&#x27;css/index.css&#x27;</span>), <span class=\"comment\">// 将css分离到/dist文件夹下的css文件夹中的index.css</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时运行 npm run build 后会发现/dist 文件夹内多出了/css 文件夹及 index.css 文件。</p>\n<h3 id=\"7-6、消除冗余-css\"><a href=\"#7-6、消除冗余-css\" class=\"headerlink\" title=\"7.6、消除冗余 css\"></a>7.6、消除冗余 css</h3><p>有时候我们 css 写得多了，可能会不自觉的写重复了一些样式，这就造成了多余的代码，以下方法可以优化</p>\n<ol>\n<li>安装 npm i purifycss-webpack purify-css glob -D</li>\n<li>引入 clean-webpack-plugin 及 glob 插件并使用</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> PurifyCssWebpack = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;purifycss-webpack&#x27;</span>) <span class=\"comment\">// 引入PurifyCssWebpack插件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> glob = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;glob&#x27;</span>) <span class=\"comment\">// 引入glob模块,用于扫描全部html文件中所引用的css</span></span><br><span class=\"line\"></span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> PurifyCssWebpack(&#123;</span><br><span class=\"line\">    paths: glob.sync(path.join(__dirname, <span class=\"string\">&#x27;src/*.html&#x27;</span>)), <span class=\"comment\">// 同步扫描所有html文件中所引用的css</span></span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"至此，一些常用的配置以及弄好了，现在就开始愉快地写代码了。\"><a href=\"#至此，一些常用的配置以及弄好了，现在就开始愉快地写代码了。\" class=\"headerlink\" title=\"至此，一些常用的配置以及弄好了，现在就开始愉快地写代码了。\"></a>至此，一些常用的配置以及弄好了，现在就开始愉快地写代码了。</h3><h4 id=\"下面将讲述-webpack-的优化方法。以下的例子是由-vue-cli-脚手架搭建的项目，跟上述例子无关。\"><a href=\"#下面将讲述-webpack-的优化方法。以下的例子是由-vue-cli-脚手架搭建的项目，跟上述例子无关。\" class=\"headerlink\" title=\"下面将讲述 webpack 的优化方法。以下的例子是由 vue-cli 脚手架搭建的项目，跟上述例子无关。\"></a>下面将讲述 webpack 的优化方法。以下的例子是由 vue-cli 脚手架搭建的项目，跟上述例子无关。</h4><p>————————————————————————————————————————————</p>\n<h2 id=\"webpack-打包优化\"><a href=\"#webpack-打包优化\" class=\"headerlink\" title=\"webpack 打包优化\"></a>webpack 打包优化</h2><h3 id=\"为什么要优化打包？\"><a href=\"#为什么要优化打包？\" class=\"headerlink\" title=\"为什么要优化打包？\"></a>为什么要优化打包？</h3><ul>\n<li>项目越做越大，依赖包越来越多，打包文件太大</li>\n<li>单页面应用首页白屏时间长，用户体验差</li>\n</ul>\n<h3 id=\"我们的目的\"><a href=\"#我们的目的\" class=\"headerlink\" title=\"我们的目的\"></a>我们的目的</h3><ul>\n<li>减小打包后的文件大小</li>\n<li>首页按需引入文件</li>\n<li>优化 webpack 打包时间</li>\n</ul>\n<h3 id=\"按需加载\"><a href=\"#按需加载\" class=\"headerlink\" title=\"按需加载\"></a>按需加载</h3><p>1.1 路由组件按需加载</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">&#x27;/index&#x27;</span>,</span><br><span class=\"line\">    component: <span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span></span><br><span class=\"line\">      <span class=\"built_in\">require</span>.ensure([], <span class=\"function\">() =&gt;</span> resolve(<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@/components/index&#x27;</span>))),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">&#x27;/about&#x27;</span>,</span><br><span class=\"line\">    component: <span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span></span><br><span class=\"line\">      <span class=\"built_in\">require</span>.ensure([], <span class=\"function\">() =&gt;</span> resolve(<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@/components/about&#x27;</span>))),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>1.2 第三方组件和插件。按需加载需引入第三方组件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入全部组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> ElementUI <span class=\"keyword\">from</span> <span class=\"string\">&#x27;element-ui&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br><span class=\"line\">Vue.use(ElementUI)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 按需引入组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Button &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;element-ui&#x27;</span></span><br><span class=\"line\">Vue.component(Button.name, Button)</span><br></pre></td></tr></table></figure>\n\n<p>1.3 对于一些插件，如果只是在个别组件中用的到，也可以不要在 main.js 里面引入，而是在组件中按需引入</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在main.js引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> vue</span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuelidate <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuelidate&#x27;</span></span><br><span class=\"line\">Vue.use(Vuelidate)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 按组件按需引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Vuelidate &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuelidate&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"优化-loader-配置\"><a href=\"#优化-loader-配置\" class=\"headerlink\" title=\"优化 loader 配置\"></a>优化 loader 配置</h3><ul>\n<li>优化正则匹配</li>\n<li>通过 cacheDirectory 选项开启缓存</li>\n<li>通过 include、exclude 来减少被处理的文件。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">  rules: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">      loader: <span class=\"string\">&#x27;babel-loader?cacheDirectory&#x27;</span>,</span><br><span class=\"line\">      include: [resolve(<span class=\"string\">&#x27;src&#x27;</span>)],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"优化文件路径——省下搜索文件的时间\"><a href=\"#优化文件路径——省下搜索文件的时间\" class=\"headerlink\" title=\"优化文件路径——省下搜索文件的时间\"></a>优化文件路径——省下搜索文件的时间</h3><ul>\n<li>extension 配置之后可以不用在 require 或是 import 的时候加文件扩展名,会依次尝试添加扩展名进行匹配。</li>\n<li>alias 通过配置别名可以加快 webpack 查找模块的速度。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve: &#123;</span><br><span class=\"line\">  extensions: [<span class=\"string\">&#x27;.js&#x27;</span>, <span class=\"string\">&#x27;.vue&#x27;</span>, <span class=\"string\">&#x27;.json&#x27;</span>],</span><br><span class=\"line\">  alias: &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;vue$&#x27;</span>: <span class=\"string\">&#x27;vue/dist/vue.esm.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;@&#x27;</span>: resolve(<span class=\"string\">&#x27;src&#x27;</span>),</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生产环境关闭-sourceMap\"><a href=\"#生产环境关闭-sourceMap\" class=\"headerlink\" title=\"生产环境关闭 sourceMap\"></a>生产环境关闭 sourceMap</h3><ul>\n<li>sourceMap 本质上是一种映射关系，打包出来的 js 文件中的代码可以映射到代码文件的具体位置,这种映射关系会帮助我们直接找到在源代码中的错误。</li>\n<li>打包速度减慢，生产文件变大，所以开发环境使用 sourceMap，生产环境则关闭。</li>\n</ul>\n<h3 id=\"代码压缩\"><a href=\"#代码压缩\" class=\"headerlink\" title=\"代码压缩\"></a>代码压缩</h3><ul>\n<li>UglifyJS: vue-cli 默认使用的压缩代码方式，它使用的是单线程压缩代码，打包时间较慢</li>\n<li>ParallelUglifyPlugin: 开启多个子进程，把对多个文件压缩的工作分别给多个子进程去完成</li>\n</ul>\n<p>两种方法使用如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> UglifyJsPlugin(&#123;</span><br><span class=\"line\">    uglifyOptions: &#123;</span><br><span class=\"line\">      compress: &#123;</span><br><span class=\"line\">        warnings: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    sourceMap: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    parallel: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">new</span> ParallelUglifyPlugin(&#123;</span><br><span class=\"line\">    <span class=\"comment\">//缓存压缩后的结果，下次遇到一样的输入时直接从缓存中获取压缩后的结果并返回，</span></span><br><span class=\"line\">    <span class=\"comment\">//cacheDir 用于配置缓存存放的目录路径。</span></span><br><span class=\"line\">    cacheDir: <span class=\"string\">&#x27;.cache/&#x27;</span>,</span><br><span class=\"line\">    sourceMap: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    uglifyJS: &#123;</span><br><span class=\"line\">      output: &#123;</span><br><span class=\"line\">        comments: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      compress: &#123;</span><br><span class=\"line\">        warnings: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>打包速度和打包后的文件大小啊对比<br>| 方法 | 文件大小 | 打包速度 |<br>|———————|:———|:———|<br>| 不用插件 | 14.6M | 32s |<br>| UglifyJsPlugin | 12.9M | 33s |<br>| ParallelUglifyPlugi | 7.98M | 17s |</p>\n<h3 id=\"提取公共代码\"><a href=\"#提取公共代码\" class=\"headerlink\" title=\"提取公共代码\"></a>提取公共代码</h3><ul>\n<li>相同资源重复被加载，浪费用户流量，增加服务器成本。</li>\n<li>每个页面需要加载的资源太大，导致网页首屏加载缓慢，影响用户体验。</li>\n</ul>\n<p>webpack3 使用 CommonsChunkPlugin 的实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;vendor&#x27;</span>,</span><br><span class=\"line\">    minChunks: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"><span class=\"built_in\">module</span>, count</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"built_in\">module</span>.resource, <span class=\"string\">`引用次数<span class=\"subst\">$&#123;count&#125;</span>`</span>)</span><br><span class=\"line\">      <span class=\"comment\">//&quot;有正在处理文件&quot; + &quot;这个文件是 .js 后缀&quot; + &quot;这个文件是在 node_modules 中&quot;</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"built_in\">module</span>.resource &amp;&amp;</span><br><span class=\"line\">        /\\.js$/.test(<span class=\"built_in\">module</span>.resource) &amp;&amp;</span><br><span class=\"line\">        <span class=\"built_in\">module</span>.resource.indexOf(path.join(__dirname, <span class=\"string\">&#x27;./node_modules&#x27;</span>)) === <span class=\"number\">0</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">  <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;common&#x27;</span>,</span><br><span class=\"line\">    chunks: <span class=\"string\">&#x27;initial&#x27;</span>,</span><br><span class=\"line\">    minChunks: <span class=\"number\">2</span>,</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>webpack4 使用 splitChunks 的实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    splitChunks: &#123;</span><br><span class=\"line\">      cacheGroups: &#123;</span><br><span class=\"line\">        vendor: &#123;</span><br><span class=\"line\">          priority: <span class=\"number\">1</span>, <span class=\"comment\">//添加权重</span></span><br><span class=\"line\">          test: <span class=\"regexp\">/node_modules/</span>, <span class=\"comment\">//把这个目录下符合下面几个条件的库抽离出来</span></span><br><span class=\"line\">          chunks: <span class=\"string\">&#x27;initial&#x27;</span>, <span class=\"comment\">//刚开始就要抽离</span></span><br><span class=\"line\">          minChunks: <span class=\"number\">2</span>, <span class=\"comment\">//重复2次使用的时候需要抽离出来</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        common: &#123;</span><br><span class=\"line\">          <span class=\"comment\">//公共的模块</span></span><br><span class=\"line\">          chunks: <span class=\"string\">&#x27;initial&#x27;</span>,</span><br><span class=\"line\">          minChunks: <span class=\"number\">2</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CDN-优化\"><a href=\"#CDN-优化\" class=\"headerlink\" title=\"CDN 优化\"></a>CDN 优化</h3><p>CDN 又叫内容分发网络，通过把资源部署到世界各地，用户在访问时按照就近原则从离用户最近的服务器获取资源，从而加速资源的获取速度。</p>\n<ul>\n<li>随着项目越做越大，依赖的第三方 npm 包越来越多，构建之后的文件也会越来越大。</li>\n<li>再加上又是单页应用，这就会导致在网速较慢或者服务器带宽有限的情况出现长时间的白屏。</li>\n</ul>\n<p>1、将 vue、vue-router、vuex、element-ui 和 axios 这五个库，全部改为通过 CDN 链接获取，在 index.html 里插入 相应链接。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  &lt;link</span><br><span class=\"line\">    rel=&quot;stylesheet&quot;</span><br><span class=\"line\">    href=&quot;https://cdn.bootcss.com/element-ui/2.0.7/theme-chalk/index.css&quot;</span><br><span class=\"line\">  /&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcss.com/axios/0.19.0-beta.1/axios.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcss.com/vuex/3.1.0/vuex.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcss.com/vue-router/3.0.2/vue-router.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcss.com/element-ui/2.6.1/index.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>问题</strong>：开发环境也接入vue.min.js 的cdn 时无法使用chrome 的 Vue.js devtools插件，所以要分环境加载不同的资源。</p>\n<p>2、在 webpack.config.js 配置文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\"> ···</span><br><span class=\"line\">    externals: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;vue&#x27;</span>: <span class=\"string\">&#x27;Vue&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;vuex&#x27;</span>: <span class=\"string\">&#x27;Vuex&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;vue-router&#x27;</span>: <span class=\"string\">&#x27;VueRouter&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;element-ui&#x27;</span>: <span class=\"string\">&#x27;ELEMENT&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;Axios&#x27;</span>:<span class=\"string\">&#x27;axios&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<p>3、卸载依赖的 npm 包，npm uninstall axios element-ui vue vue-router vuex</p>\n<p>4、修改 main.js 文件里之前的引包方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// import Vue from &#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// import ElementUI from &#x27;element-ui&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// import &#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// import VueRouter from &#x27;vue-router&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App.vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> routes <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./router&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> utils <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./utils/Utils&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(ELEMENT)</span><br><span class=\"line\">Vue.use(VueRouter)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">  mode: <span class=\"string\">&#x27;hash&#x27;</span>, <span class=\"comment\">//路由的模式</span></span><br><span class=\"line\">  routes,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  router,</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  render: <span class=\"function\">(<span class=\"params\">h</span>) =&gt;</span> h(App),</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-HappyPack-多进程解析和处理文件\"><a href=\"#使用-HappyPack-多进程解析和处理文件\" class=\"headerlink\" title=\"使用 HappyPack 多进程解析和处理文件\"></a>使用 HappyPack 多进程解析和处理文件</h3><ul>\n<li>由于运行在 Node.js 之上的 Webpack 是单线程模型的，所以 Webpack 需要处理的事情需要一件一件的做，不能多件事一起做。</li>\n<li>HappyPack 就能让 Webpack 把任务分解给多个子进程去并发的执行，子进程处理完后再把结果发送给主进程。</li>\n<li>HappyPack 对 file-loader、url-loader 支持的不友好，所以不建议对该 loader 使用。</li>\n</ul>\n<p>使用方法如下：</p>\n<ol>\n<li>HappyPack 插件安装： npm i -D happypack</li>\n<li>webpack.base.conf.js 文件对 module.rules 进行配置</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">  rules: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">      use: [<span class=\"string\">&#x27;happypack/loader?id=babel&#x27;</span>],</span><br><span class=\"line\">      include: [resolve(<span class=\"string\">&#x27;src&#x27;</span>), resolve(<span class=\"string\">&#x27;test&#x27;</span>)],</span><br><span class=\"line\">      exclude: path.resolve(__dirname, <span class=\"string\">&#x27;node_modules&#x27;</span>),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">      use: [<span class=\"string\">&#x27;happypack/loader?id=vue&#x27;</span>],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>在生产环境 webpack.prod.conf.js 文件进行配置</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> HappyPack = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;happypack&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 构造出共享进程池，在进程池中包含5个子进程</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> HappyPackThreadPool = HappyPack.ThreadPool(&#123; <span class=\"attr\">size</span>: <span class=\"number\">5</span> &#125;)</span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> HappyPack(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用唯一的标识符id，来代表当前的HappyPack是用来处理一类特定的文件</span></span><br><span class=\"line\">    id: <span class=\"string\">&#x27;babel&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 如何处理.js文件，用法和Loader配置中一样</span></span><br><span class=\"line\">    loaders: [<span class=\"string\">&#x27;babel-loader?cacheDirectory&#x27;</span>],</span><br><span class=\"line\">    threadPool: HappyPackThreadPool,</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">  <span class=\"keyword\">new</span> HappyPack(&#123;</span><br><span class=\"line\">    id: <span class=\"string\">&#x27;vue&#x27;</span>, <span class=\"comment\">// 用唯一的标识符id，来代表当前的HappyPack是用来处理一类特定的文件</span></span><br><span class=\"line\">    loaders: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        loader: <span class=\"string\">&#x27;vue-loader&#x27;</span>,</span><br><span class=\"line\">        options: vueLoaderConfig,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    threadPool: HappyPackThreadPool,</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-DLLPlugin-提高打包编译速度\"><a href=\"#使用-DLLPlugin-提高打包编译速度\" class=\"headerlink\" title=\"使用 DLLPlugin 提高打包编译速度\"></a>使用 DLLPlugin 提高打包编译速度</h3><p><a href=\"https://webpack.docschina.org/plugins/dll-plugin/\">DLLPlugin</a> 代码一般简单区分为业务代码和第三方库。如果不做处理，每次构建时都需要把所有的代码重新构建一次，耗费大量的时间，在大部分情况下，很多第三方库的代码不会变更（除非是版本升级），这时就可以使用到 dll：将复用性较高的第三方模块打包到动态链接库中，再不升级这些库的情况下，动态库不需要重新打包，每次构建只需要重新打包业务代码。</p>\n<p>DllPlugin 是 webpack 内置的插件，不需要额外安装，直接配置 webpack.dll.config.js 文件，Webpack 已经内置了对动态链接库的支持，需要通过 2 个内置的插件接入，它们分别是：</p>\n<p>DllPlugin 插件：用于打包出一个个单独的动态链接库文件。<br>DllReferencePlugin 插件：用于在主要配置文件中去引入 DllPlugin 插件打包好的动态链接库文件。</p>\n<p>相关链接：</p>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000016567986\">webpack 使用-详解 DllPlugin</a></li>\n<li><a href=\"https://juejin.cn/post/6844903635072057358\">webpack 编译速度提升之 DllPlugin</a></li>\n<li><a href=\"http://webpack.wuhaolin.cn/4%E4%BC%98%E5%8C%96/4-2%E4%BD%BF%E7%94%A8DllPlugin.html\">4-2 使用 DllPlugin</a></li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li>比较实用的方法: 按需加载，优化 loader 配置，关闭生产环境的 sourceMap，CDN 优化。</li>\n<li>vue-cli 已做的优化： 代码压缩，提取公共代码，再优化空间不大。</li>\n<li>根据项目实际需要和自身开发水平选择优化方法，必须避免因为优化产生 bug。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>webpack 的使用及优化</p>\n<p>我们的目的</p>\n<ul>\n<li>减小打包后的文件大小</li>\n<li>首页按需引入文件</li>\n<li>优化 webpack 打包时间</li>\n</ul>","more":"<h2 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h2><p>新建一个空文件夹，用于创建项目，使用 npm init 命令创建一个 package.json 文件。<br>输入这个命令后，终端会问你一系列诸如项目名称，项目描述，作者等信息，也可以使用 npm init -y 这个命令来一次生成 package.json 文件，这样终端不会询问你问题。</p>\n<h2 id=\"安装-webpack\"><a href=\"#安装-webpack\" class=\"headerlink\" title=\"安装 webpack\"></a>安装 webpack</h2><p>安装 webapck 时把 webpack-cli 也装上是因为在 webpack4.x 版本后 webpack 模块把一些功能分到了 webpack-cli 模块，所以两者都需要安装，安装方法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install webpack webpack-cli --<span class=\"built_in\">global</span>    <span class=\"comment\">//这是安装全局webpack及webpack-cli模块</span></span><br><span class=\"line\">npm install webpack webpack-cli --save-dev  <span class=\"comment\">//这是安装本地项目模块</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"新建文件\"><a href=\"#新建文件\" class=\"headerlink\" title=\"新建文件\"></a>新建文件</h2><p>在根目录件夹中新建两个文件夹，分别为 src 文件夹和 dist 文件夹，接下来再创建三个文件:此时，项目结构如下</p>\n<ul>\n<li>index.html –放在 dist 文件夹中；</li>\n<li>hello.js –放在 src 文件夹中；</li>\n<li>index.js –放在 src 文件夹中；</li>\n</ul>\n<h3 id=\"index-html-中写下-html-代码，它的作用是为了引入我们打包后的-js-文件：\"><a href=\"#index-html-中写下-html-代码，它的作用是为了引入我们打包后的-js-文件：\" class=\"headerlink\" title=\"index.html 中写下 html 代码，它的作用是为了引入我们打包后的 js 文件：\"></a>index.html 中写下 html 代码，它的作用是为了引入我们打包后的 js 文件：</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Webpack Project<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;bundle.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--这是打包之后的js文件，我们暂时命名为bundle.js--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在-hello-js-中导出一个模块：\"><a href=\"#在-hello-js-中导出一个模块：\" class=\"headerlink\" title=\"在 hello.js 中导出一个模块：\"></a>在 hello.js 中导出一个模块：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// hello.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> hello = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;div&#x27;</span>)</span><br><span class=\"line\">  hello.innerHTML = <span class=\"string\">&#x27;welcome to China!&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> hello</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在-index-js-中引入这个模块（hello-js）\"><a href=\"#在-index-js-中引入这个模块（hello-js）\" class=\"headerlink\" title=\"在 index.js 中引入这个模块（hello.js）:\"></a>在 index.js 中引入这个模块（hello.js）:</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> hello = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./hello.js&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#root&#x27;</span>).appendChild(hello())</span><br></pre></td></tr></table></figure>\n\n<p>上述操作就相当于我们把 hello.js 模块合并到了 index.js 模块，之后我们打包时就只需把 index.js 模块打包成 bundle.js 即可。</p>\n<h3 id=\"进行最简单的-webpack-打包\"><a href=\"#进行最简单的-webpack-打包\" class=\"headerlink\" title=\"进行最简单的 webpack 打包\"></a>进行最简单的 webpack 打包</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在终端中使用如下命令进行打包：</span></span><br><span class=\"line\">webpack src/index.js --output dist/bundle.js</span><br></pre></td></tr></table></figure>\n\n<p>上述就相当于把 src 文件夹下的 index.js 文件打包到 dist 文件下的 bundle.js，这时就生成了 bundle.js 供 index.html 文件引用。现在打开 index.html 就可以看到我们的页面了。</p>\n<h2 id=\"配置-webpack-config-js\"><a href=\"#配置-webpack-config-js\" class=\"headerlink\" title=\"配置 webpack.config.js\"></a>配置 webpack.config.js</h2><p>上述打包方式太 low 了，我们可以在当前项目的根目录下新建一个配置文件 webpack.config.js 用来配置打包方式。<br>webpack.config.js 配置如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>) <span class=\"comment\">// 处理绝对路径</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: path.join(__dirname, <span class=\"string\">&#x27;/src/index.js&#x27;</span>), <span class=\"comment\">// 入口文件</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.join(__dirname, <span class=\"string\">&#x27;/dist&#x27;</span>), <span class=\"comment\">//打包后的文件存放的地方</span></span><br><span class=\"line\">    filename: <span class=\"string\">&#x27;bundle.js&#x27;</span>, <span class=\"comment\">//打包后输出文件的文件名</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>有了这个配置文件，我们只需在终端中运行 webpack 命令就可进行打包，这条命令会自动引用 webpack.config.js 文件中的配置选项。</p>\n<h2 id=\"构建本地服务器\"><a href=\"#构建本地服务器\" class=\"headerlink\" title=\"构建本地服务器\"></a>构建本地服务器</h2><p>现在我们是通过打开本地文件来查看页面的，感觉还是有点 low。例如 vue, react 等脚手架都是在本地服务器运行的。所以我们再做进一步优化。</p>\n<h3 id=\"webpack-dev-server-配置本地服务器\"><a href=\"#webpack-dev-server-配置本地服务器\" class=\"headerlink\" title=\"webpack-dev-server 配置本地服务器\"></a>webpack-dev-server 配置本地服务器</h3><p>Webpack 提供了一个可选的本地开发服务器，这个本地服务器基于 node.js 构建，它是一个单独的组件，在 webpack 中进行配置之前需要单独安装它作为项目依赖：npm i webpack-dev-server -D</p>\n<p>以下是 devServer 的一些配置选项:</p>\n<ul>\n<li>contentBase ：设置服务器所读取文件的目录，当前我们设置为”./dist”</li>\n<li>port ：设置端口号，如果省略，默认为 8080</li>\n<li>inline ：设置为 true，当源文件改变时会自动刷新页面</li>\n<li>historyApiFallback ：设置为 true，所有的跳转将指向 index.html</li>\n</ul>\n<p>现在我们把这些配置加到 webpack.config.js 文件上，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: path.join(__dirname, <span class=\"string\">&#x27;/src/index.js&#x27;</span>), <span class=\"comment\">// 入口文件</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.join(__dirname, <span class=\"string\">&#x27;/dist&#x27;</span>), <span class=\"comment\">//打包后的文件存放的地方</span></span><br><span class=\"line\">    filename: <span class=\"string\">&#x27;bundle.js&#x27;</span>, <span class=\"comment\">//打包后输出文件的文件名</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    contentBase: <span class=\"string\">&#x27;./dist&#x27;</span>, <span class=\"comment\">// 本地服务器所加载文件的目录</span></span><br><span class=\"line\">    port: <span class=\"string\">&#x27;8088&#x27;</span>, <span class=\"comment\">// 设置端口号为8088</span></span><br><span class=\"line\">    inline: <span class=\"literal\">true</span>, <span class=\"comment\">// 文件修改后实时刷新</span></span><br><span class=\"line\">    historyApiFallback: <span class=\"literal\">true</span>, <span class=\"comment\">//不跳转</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"package-json-文件中添加启动和打包命令\"><a href=\"#package-json-文件中添加启动和打包命令\" class=\"headerlink\" title=\"package.json 文件中添加启动和打包命令\"></a>package.json 文件中添加启动和打包命令</h3><p>package.json 文件修改如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;webpack-project&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;version&quot;</span>: <span class=\"string\">&quot;1.0.0&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;description&quot;</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;main&quot;</span>: <span class=\"string\">&quot;index.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;build&quot;</span>: <span class=\"string\">&quot;webpack&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;dev&quot;</span>: <span class=\"string\">&quot;webpack-dev-server --open&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;keywords&quot;</span>: [],</span><br><span class=\"line\">  <span class=\"string\">&quot;author&quot;</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;license&quot;</span>: <span class=\"string\">&quot;ISC&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;devDependencies&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;webpack&quot;</span>: <span class=\"string\">&quot;^4.23.1&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;webpack-cli&quot;</span>: <span class=\"string\">&quot;^3.1.2&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;webpack-dev-server&quot;</span>: <span class=\"string\">&quot;^3.1.10&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样我们就可以用以下命令进行本地运行或者打包文件了</p>\n<ul>\n<li>npm run dev 启动本地服务器，webpack-dev-server 就是启动服务器的命令，–open 是用于启动完服务器后自动打开浏览器。</li>\n<li>npm run build 执行打包命令</li>\n</ul>\n<p>此时，我们只要输入 npm run dev 就可以在 <a href=\"http://localhost:8088/%E4%B8%AD%E6%9F%A5%E7%9C%8B%E9%A1%B5%E9%9D%A2%E4%BA%86%E3%80%82\">http://localhost:8088/中查看页面了。</a></p>\n<h2 id=\"配置常用-loader\"><a href=\"#配置常用-loader\" class=\"headerlink\" title=\"配置常用 loader\"></a>配置常用 loader</h2><p>loader 可以让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。</p>\n<p>Loaders 的配置包括以下几方面：</p>\n<ul>\n<li>test：一个用以匹配 loaders 所处理文件的拓展名的正则表达式（必须）</li>\n<li>loader：loader 的名称（必须）</li>\n<li>include/exclude：手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；</li>\n<li>options：为 loaders 提供额外的设置选项（可选）</li>\n</ul>\n<h3 id=\"配置-css-loader-和-sass-loader\"><a href=\"#配置-css-loader-和-sass-loader\" class=\"headerlink\" title=\"配置 css-loader 和 sass-loader\"></a>配置 css-loader 和 sass-loader</h3><p>如果我们要加载一个 css 文件，需要安装配置 style-loader 和 css-loader。<br>如果我们要使用 sass，就要配置 sass-loader 和 node-sass。</p>\n<ul>\n<li>css-loader：加载.css 文件</li>\n<li>style-loader：使用 style 标签将 css-loader 内部样式注入到我们的 HTML 页面</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: path.join(__dirname, <span class=\"string\">&#x27;/src/index.js&#x27;</span>), <span class=\"comment\">// 入口文件</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.join(__dirname, <span class=\"string\">&#x27;/dist&#x27;</span>), <span class=\"comment\">//打包后的文件存放的地方</span></span><br><span class=\"line\">    filename: <span class=\"string\">&#x27;bundle.js&#x27;</span> <span class=\"comment\">//打包后输出文件的文件名</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    contentBase: <span class=\"string\">&#x27;./dist&#x27;</span>, <span class=\"comment\">// 本地服务器所加载文件的目录</span></span><br><span class=\"line\">    port: <span class=\"string\">&#x27;8088&#x27;</span>, <span class=\"comment\">// 设置端口号为8088</span></span><br><span class=\"line\">    inline: <span class=\"literal\">true</span>, <span class=\"comment\">// 文件修改后实时刷新</span></span><br><span class=\"line\">    historyApiFallback: <span class=\"literal\">true</span> <span class=\"comment\">//不跳转</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>, <span class=\"comment\">// 正则匹配以.css结尾的文件</span></span><br><span class=\"line\">        use: [<span class=\"string\">&#x27;style-loader&#x27;</span>, <span class=\"string\">&#x27;css-loader&#x27;</span>]</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(scss|sass)$/</span>, <span class=\"comment\">// 正则匹配以.scss和.sass结尾的文件</span></span><br><span class=\"line\">        use: [<span class=\"string\">&#x27;style-loader&#x27;</span>, <span class=\"string\">&#x27;css-loader&#x27;</span>, <span class=\"string\">&#x27;sass-loader&#x27;</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"css压缩\"><a href=\"#css压缩\" class=\"headerlink\" title=\"css压缩\"></a>css压缩</h4><p>css 代码也可以像Javascript 那样被压缩，以达到提升加速度和代码混淆的作用。目前比较成熟可靠的CSS压缩工具是cssnano，基于postcss。</p>\n<p>cssnano能理解CSS代码的含义，而不仅仅是删除空格，例如：</p>\n<ul>\n<li>margin:10px 20px 10px 20px 被压缩成margin：10px 20px</li>\n<li>color：#ff0000 被压缩成color:red</li>\n</ul>\n<p>通常压缩率能达到60%，cssnano介入到webpack 中很简单，因为css-loader 已经内置了，只需要开启css-loader的minimize选项，相关配置如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;WebPlugin&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;web-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;extract-text-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,<span class=\"comment\">// 增加对 CSS 文件的支持</span></span><br><span class=\"line\">        <span class=\"comment\">// 提取出 Chunk 中的 CSS 代码到单独的文件中</span></span><br><span class=\"line\">        use: ExtractTextPlugin.extract(&#123;</span><br><span class=\"line\">          <span class=\"comment\">// 通过 minimize 选项压缩 CSS 代码</span></span><br><span class=\"line\">          use: [<span class=\"string\">&#x27;css-loader?minimize&#x27;</span>]</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"comment\">// 用 WebPlugin 生成对应的 HTML 文件</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> WebPlugin(&#123;</span><br><span class=\"line\">      template: <span class=\"string\">&#x27;./template.html&#x27;</span>, <span class=\"comment\">// HTML 模版文件所在的文件路径</span></span><br><span class=\"line\">      filename: <span class=\"string\">&#x27;index.html&#x27;</span> <span class=\"comment\">// 输出的 HTML 的文件名称</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> ExtractTextPlugin(&#123;</span><br><span class=\"line\">      filename: <span class=\"string\">`[name]_[contenthash:8].css`</span>,<span class=\"comment\">// 给输出的 CSS 文件名称加上 Hash 值</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置-Babel-loader\"><a href=\"#配置-Babel-loader\" class=\"headerlink\" title=\"配置 Babel-loader\"></a>配置 Babel-loader</h3><p>Babel 其实是一个编译 JavaScript 的平台，它可以编译代码帮你达到以下目的：</p>\n<ul>\n<li>让你能使用最新的 JavaScript 代码（ES6，ES7…）；</li>\n<li>让你能使用基于 JavaScript 进行了拓展的语言，比如 React 的 JSX；</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  rules: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">      loader: <span class=\"string\">&#x27;babel-loader&#x27;</span>,</span><br><span class=\"line\">      include: [resolve(<span class=\"string\">&#x27;src&#x27;</span>)]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于 loader 对文件的转换操作很耗时，需要让尽可能少的文件被 loader 处理，可以通过 test、include、exclude 三个配置来命中 loader 要应用规则的文件。为了尽可能少的让文件被 loader 处理，可以通过 include 去命中只有哪些文件被处理</p>\n<h3 id=\"处理图片\"><a href=\"#处理图片\" class=\"headerlink\" title=\"处理图片\"></a>处理图片</h3><p>处理图片资源时，我们常用的两种 loader 是 file-loader 或者 url-loader。<br>当使用 url-loader 加载图片，图片小于上限值，则将图片转 base64 字符串，否则使用 file-loader 加载图片。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  rules: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.(png|jpe?g|gif|svg)(\\?.*)?$/</span>,</span><br><span class=\"line\">      loader: <span class=\"string\">&#x27;url-loader&#x27;</span>,</span><br><span class=\"line\">      options: &#123;</span><br><span class=\"line\">        limit: <span class=\"number\">10000</span>,</span><br><span class=\"line\">        name: utils.assetsPath(<span class=\"string\">&#x27;img/[name].[hash:7].[ext]&#x27;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"cache-loader\"><a href=\"#cache-loader\" class=\"headerlink\" title=\"cache-loader\"></a>cache-loader</h3><p>一些性能开销较大的 loader 之前添加 cache-loader，将结果缓存在磁盘中，默认保存在 node_modueles/.cache/cache-loader 目录下。<br>首先安装依赖</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install cache-loader -D</span><br></pre></td></tr></table></figure>\n\n<p><code>cache-loader </code>的配置要放在其他的 loader 之前，webpack 的配置如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">//我的项目中,babel-loader耗时比较长，所以我给它配置了`cache-loader`</span></span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.jsx?$/</span>,</span><br><span class=\"line\">        use: [<span class=\"string\">&#x27;cache-loader&#x27;</span>, <span class=\"string\">&#x27;babel-loader&#x27;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>若是只想给babel-loader配置cache的话，也可以不使用cache-loader，给babel-loader增加选项CacheDirectory。<br>cacheDirectory：默认值为 false。当有设置时，指定的目录将用来缓存 loader 的执行结果。之后的 Webpack 构建，将会尝试读取缓存，来避免在每次执行时，可能产生的、高性能消耗的 Babel 重新编译过程。设置空值或者 true 的话，使用默认缓存目录：node_modules/.cache/babel-loader。开启 babel-loader的缓存和配置 cache-loader，我比对了下，构建时间很接近。</p>\n<h2 id=\"7、配置常用插件\"><a href=\"#7、配置常用插件\" class=\"headerlink\" title=\"7、配置常用插件\"></a>7、配置常用插件</h2><p>loader 被用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。插件接口功能极其强大，可以用来处理各种各样的任务。</p>\n<h3 id=\"7-1、自动生成-html-文件-HtmlWebpackPlugin\"><a href=\"#7-1、自动生成-html-文件-HtmlWebpackPlugin\" class=\"headerlink\" title=\"7.1、自动生成 html 文件(HtmlWebpackPlugin)\"></a>7.1、自动生成 html 文件(HtmlWebpackPlugin)</h3><p>现在我们都是使用一开始建好的 index.html 文件，然后手动引入 bundle.js，如果以后我们引入不止一个 js 文件，那就得更改 index.html 中的 js 文件名，所以能不能自动生成 index.html 且自动引用打包后的 js 呢？<br>HtmlWebpackPlugin 插件就是用来解决这个问题的：</p>\n<ol>\n<li>安装插件 npm i html-webpack-plugin -D</li>\n<li>把 dist 文件夹清空</li>\n<li>在根目录新建 index.html,内容和原来的 html 一致，只是不引入 js 文件。</li>\n<li>webpack.config.js 中我们引入了 HtmlWebpackPlugin 插件</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">    filename: <span class=\"string\">&#x27;index.html&#x27;</span>,</span><br><span class=\"line\">    template: <span class=\"string\">&#x27;index.html&#x27;</span>,</span><br><span class=\"line\">    inject: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    minify: &#123;</span><br><span class=\"line\">      removeComments: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      collapseWhitespace: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      removeAttributeQuotes: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>此时我们使用 npm run build 进行打包，你会发现，dist 文件夹和 html 文件都会自动生成。</p>\n<h3 id=\"7-2、清理-dist-文件夹-CleanWebpackPlugin\"><a href=\"#7-2、清理-dist-文件夹-CleanWebpackPlugin\" class=\"headerlink\" title=\"7.2、清理/dist 文件夹(CleanWebpackPlugin)\"></a>7.2、清理/dist 文件夹(CleanWebpackPlugin)</h3><p>在每次构建前清理/dist 文件夹，生产最新的打包文件，这时候就用到 CleanWebpackPlugin 插件了。</p>\n<ol>\n<li>安装 npm i clean-webpack-plugin -D</li>\n<li>配置 webpack.config.js</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">    filename: <span class=\"string\">&#x27;index.html&#x27;</span>,</span><br><span class=\"line\">    template: <span class=\"string\">&#x27;index.html&#x27;</span>,</span><br><span class=\"line\">    inject: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    minify: &#123;</span><br><span class=\"line\">      removeComments: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      collapseWhitespace: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      removeAttributeQuotes: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">  <span class=\"keyword\">new</span> CleanWebpackPlugin([<span class=\"string\">&#x27;dist&#x27;</span>]),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-3、热更新-HotModuleReplacementPlugin\"><a href=\"#7-3、热更新-HotModuleReplacementPlugin\" class=\"headerlink\" title=\"7.3、热更新(HotModuleReplacementPlugin)\"></a>7.3、热更新(HotModuleReplacementPlugin)</h3><p>我们要在修改代码后自动更新页面，这就需要 HotModuleReplacementPlugin（HMR）插件</p>\n<ol>\n<li>devServer 配置项中添加 hot: true 参数。</li>\n<li>因为 HotModuleReplacementPlugin 是 webpack 模块自带的，所以引入 webpack 后，在 plugins 配置项中直接使用即可。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">    filename: <span class=\"string\">&#x27;index.html&#x27;</span>,</span><br><span class=\"line\">    template: <span class=\"string\">&#x27;index.html&#x27;</span>,</span><br><span class=\"line\">    inject: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    minify: &#123;</span><br><span class=\"line\">      removeComments: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      collapseWhitespace: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      removeAttributeQuotes: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">  <span class=\"keyword\">new</span> CleanWebpackPlugin([<span class=\"string\">&#x27;dist&#x27;</span>])</span><br><span class=\"line\">  <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-4、增加-css-前缀\"><a href=\"#7-4、增加-css-前缀\" class=\"headerlink\" title=\"7.4、增加 css 前缀\"></a>7.4、增加 css 前缀</h3><p>平时我们写 css 时，一些属性需要手动加上前缀，比如-webkit-border-radius: 10px;，在 webpack 中我们可以让他自动加上</p>\n<ol>\n<li>安装 npm i postcss-loader autoprefixer -D</li>\n<li>在项目根目录下新建 postcss.config.js 文件</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;autoprefixer&#x27;</span>), <span class=\"comment\">// 引用autoprefixer模块</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>修改 webpack.config.js 文件中的 css-loader 配置</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">   ...</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>, <span class=\"comment\">// 正则匹配以.css结尾的文件</span></span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#123; <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;style-loader&#x27;</span> &#125;, <span class=\"comment\">// 这里采用的是对象配置loader的写法</span></span><br><span class=\"line\">          &#123; <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;css-loader&#x27;</span> &#125;,</span><br><span class=\"line\">          &#123; <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;postcss-loader&#x27;</span> &#125; <span class=\"comment\">// 使用postcss-loader</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">       ...</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-5、css-分离-ExtractTextPlugin\"><a href=\"#7-5、css-分离-ExtractTextPlugin\" class=\"headerlink\" title=\"7.5、css 分离 ExtractTextPlugin\"></a>7.5、css 分离 ExtractTextPlugin</h3><p>将 css 成生文件，而非内联。该插件的主要是为了抽离 css 样式,防止将样式打包在 js 中引起页面样式加载错乱的现象。</p>\n<ol>\n<li>安装 npm i extract-text-webpack-plugin@next -D</li>\n<li>在 webpack.config.js 文件中引入并使用该插件：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;extract-text-webpack-plugin&#x27;</span>) <span class=\"comment\">//引入分离插件</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>, <span class=\"comment\">// 正则匹配以.css结尾的文件</span></span><br><span class=\"line\">        use: ExtractTextPlugin.extract(&#123;</span><br><span class=\"line\">          <span class=\"comment\">// 相当于回滚，经postcss-loader和css-loader处理过的css最终再经过style-loader处理</span></span><br><span class=\"line\">          fallback: <span class=\"string\">&#x27;style-loader&#x27;</span>,</span><br><span class=\"line\">          use: [<span class=\"string\">&#x27;css-loader&#x27;</span>, <span class=\"string\">&#x27;postcss-loader&#x27;</span>],</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> ExtractTextPlugin(<span class=\"string\">&#x27;css/index.css&#x27;</span>), <span class=\"comment\">// 将css分离到/dist文件夹下的css文件夹中的index.css</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时运行 npm run build 后会发现/dist 文件夹内多出了/css 文件夹及 index.css 文件。</p>\n<h3 id=\"7-6、消除冗余-css\"><a href=\"#7-6、消除冗余-css\" class=\"headerlink\" title=\"7.6、消除冗余 css\"></a>7.6、消除冗余 css</h3><p>有时候我们 css 写得多了，可能会不自觉的写重复了一些样式，这就造成了多余的代码，以下方法可以优化</p>\n<ol>\n<li>安装 npm i purifycss-webpack purify-css glob -D</li>\n<li>引入 clean-webpack-plugin 及 glob 插件并使用</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> PurifyCssWebpack = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;purifycss-webpack&#x27;</span>) <span class=\"comment\">// 引入PurifyCssWebpack插件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> glob = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;glob&#x27;</span>) <span class=\"comment\">// 引入glob模块,用于扫描全部html文件中所引用的css</span></span><br><span class=\"line\"></span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> PurifyCssWebpack(&#123;</span><br><span class=\"line\">    paths: glob.sync(path.join(__dirname, <span class=\"string\">&#x27;src/*.html&#x27;</span>)), <span class=\"comment\">// 同步扫描所有html文件中所引用的css</span></span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"至此，一些常用的配置以及弄好了，现在就开始愉快地写代码了。\"><a href=\"#至此，一些常用的配置以及弄好了，现在就开始愉快地写代码了。\" class=\"headerlink\" title=\"至此，一些常用的配置以及弄好了，现在就开始愉快地写代码了。\"></a>至此，一些常用的配置以及弄好了，现在就开始愉快地写代码了。</h3><h4 id=\"下面将讲述-webpack-的优化方法。以下的例子是由-vue-cli-脚手架搭建的项目，跟上述例子无关。\"><a href=\"#下面将讲述-webpack-的优化方法。以下的例子是由-vue-cli-脚手架搭建的项目，跟上述例子无关。\" class=\"headerlink\" title=\"下面将讲述 webpack 的优化方法。以下的例子是由 vue-cli 脚手架搭建的项目，跟上述例子无关。\"></a>下面将讲述 webpack 的优化方法。以下的例子是由 vue-cli 脚手架搭建的项目，跟上述例子无关。</h4><p>————————————————————————————————————————————</p>\n<h2 id=\"webpack-打包优化\"><a href=\"#webpack-打包优化\" class=\"headerlink\" title=\"webpack 打包优化\"></a>webpack 打包优化</h2><h3 id=\"为什么要优化打包？\"><a href=\"#为什么要优化打包？\" class=\"headerlink\" title=\"为什么要优化打包？\"></a>为什么要优化打包？</h3><ul>\n<li>项目越做越大，依赖包越来越多，打包文件太大</li>\n<li>单页面应用首页白屏时间长，用户体验差</li>\n</ul>\n<h3 id=\"我们的目的\"><a href=\"#我们的目的\" class=\"headerlink\" title=\"我们的目的\"></a>我们的目的</h3><ul>\n<li>减小打包后的文件大小</li>\n<li>首页按需引入文件</li>\n<li>优化 webpack 打包时间</li>\n</ul>\n<h3 id=\"按需加载\"><a href=\"#按需加载\" class=\"headerlink\" title=\"按需加载\"></a>按需加载</h3><p>1.1 路由组件按需加载</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">&#x27;/index&#x27;</span>,</span><br><span class=\"line\">    component: <span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span></span><br><span class=\"line\">      <span class=\"built_in\">require</span>.ensure([], <span class=\"function\">() =&gt;</span> resolve(<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@/components/index&#x27;</span>))),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">&#x27;/about&#x27;</span>,</span><br><span class=\"line\">    component: <span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span></span><br><span class=\"line\">      <span class=\"built_in\">require</span>.ensure([], <span class=\"function\">() =&gt;</span> resolve(<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@/components/about&#x27;</span>))),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>1.2 第三方组件和插件。按需加载需引入第三方组件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入全部组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> ElementUI <span class=\"keyword\">from</span> <span class=\"string\">&#x27;element-ui&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br><span class=\"line\">Vue.use(ElementUI)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 按需引入组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Button &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;element-ui&#x27;</span></span><br><span class=\"line\">Vue.component(Button.name, Button)</span><br></pre></td></tr></table></figure>\n\n<p>1.3 对于一些插件，如果只是在个别组件中用的到，也可以不要在 main.js 里面引入，而是在组件中按需引入</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在main.js引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> vue</span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuelidate <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuelidate&#x27;</span></span><br><span class=\"line\">Vue.use(Vuelidate)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 按组件按需引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Vuelidate &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuelidate&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"优化-loader-配置\"><a href=\"#优化-loader-配置\" class=\"headerlink\" title=\"优化 loader 配置\"></a>优化 loader 配置</h3><ul>\n<li>优化正则匹配</li>\n<li>通过 cacheDirectory 选项开启缓存</li>\n<li>通过 include、exclude 来减少被处理的文件。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">  rules: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">      loader: <span class=\"string\">&#x27;babel-loader?cacheDirectory&#x27;</span>,</span><br><span class=\"line\">      include: [resolve(<span class=\"string\">&#x27;src&#x27;</span>)],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"优化文件路径——省下搜索文件的时间\"><a href=\"#优化文件路径——省下搜索文件的时间\" class=\"headerlink\" title=\"优化文件路径——省下搜索文件的时间\"></a>优化文件路径——省下搜索文件的时间</h3><ul>\n<li>extension 配置之后可以不用在 require 或是 import 的时候加文件扩展名,会依次尝试添加扩展名进行匹配。</li>\n<li>alias 通过配置别名可以加快 webpack 查找模块的速度。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve: &#123;</span><br><span class=\"line\">  extensions: [<span class=\"string\">&#x27;.js&#x27;</span>, <span class=\"string\">&#x27;.vue&#x27;</span>, <span class=\"string\">&#x27;.json&#x27;</span>],</span><br><span class=\"line\">  alias: &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;vue$&#x27;</span>: <span class=\"string\">&#x27;vue/dist/vue.esm.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;@&#x27;</span>: resolve(<span class=\"string\">&#x27;src&#x27;</span>),</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生产环境关闭-sourceMap\"><a href=\"#生产环境关闭-sourceMap\" class=\"headerlink\" title=\"生产环境关闭 sourceMap\"></a>生产环境关闭 sourceMap</h3><ul>\n<li>sourceMap 本质上是一种映射关系，打包出来的 js 文件中的代码可以映射到代码文件的具体位置,这种映射关系会帮助我们直接找到在源代码中的错误。</li>\n<li>打包速度减慢，生产文件变大，所以开发环境使用 sourceMap，生产环境则关闭。</li>\n</ul>\n<h3 id=\"代码压缩\"><a href=\"#代码压缩\" class=\"headerlink\" title=\"代码压缩\"></a>代码压缩</h3><ul>\n<li>UglifyJS: vue-cli 默认使用的压缩代码方式，它使用的是单线程压缩代码，打包时间较慢</li>\n<li>ParallelUglifyPlugin: 开启多个子进程，把对多个文件压缩的工作分别给多个子进程去完成</li>\n</ul>\n<p>两种方法使用如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> UglifyJsPlugin(&#123;</span><br><span class=\"line\">    uglifyOptions: &#123;</span><br><span class=\"line\">      compress: &#123;</span><br><span class=\"line\">        warnings: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    sourceMap: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    parallel: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">new</span> ParallelUglifyPlugin(&#123;</span><br><span class=\"line\">    <span class=\"comment\">//缓存压缩后的结果，下次遇到一样的输入时直接从缓存中获取压缩后的结果并返回，</span></span><br><span class=\"line\">    <span class=\"comment\">//cacheDir 用于配置缓存存放的目录路径。</span></span><br><span class=\"line\">    cacheDir: <span class=\"string\">&#x27;.cache/&#x27;</span>,</span><br><span class=\"line\">    sourceMap: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    uglifyJS: &#123;</span><br><span class=\"line\">      output: &#123;</span><br><span class=\"line\">        comments: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      compress: &#123;</span><br><span class=\"line\">        warnings: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>打包速度和打包后的文件大小啊对比<br>| 方法 | 文件大小 | 打包速度 |<br>|———————|:———|:———|<br>| 不用插件 | 14.6M | 32s |<br>| UglifyJsPlugin | 12.9M | 33s |<br>| ParallelUglifyPlugi | 7.98M | 17s |</p>\n<h3 id=\"提取公共代码\"><a href=\"#提取公共代码\" class=\"headerlink\" title=\"提取公共代码\"></a>提取公共代码</h3><ul>\n<li>相同资源重复被加载，浪费用户流量，增加服务器成本。</li>\n<li>每个页面需要加载的资源太大，导致网页首屏加载缓慢，影响用户体验。</li>\n</ul>\n<p>webpack3 使用 CommonsChunkPlugin 的实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;vendor&#x27;</span>,</span><br><span class=\"line\">    minChunks: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"><span class=\"built_in\">module</span>, count</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"built_in\">module</span>.resource, <span class=\"string\">`引用次数<span class=\"subst\">$&#123;count&#125;</span>`</span>)</span><br><span class=\"line\">      <span class=\"comment\">//&quot;有正在处理文件&quot; + &quot;这个文件是 .js 后缀&quot; + &quot;这个文件是在 node_modules 中&quot;</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"built_in\">module</span>.resource &amp;&amp;</span><br><span class=\"line\">        /\\.js$/.test(<span class=\"built_in\">module</span>.resource) &amp;&amp;</span><br><span class=\"line\">        <span class=\"built_in\">module</span>.resource.indexOf(path.join(__dirname, <span class=\"string\">&#x27;./node_modules&#x27;</span>)) === <span class=\"number\">0</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">  <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;common&#x27;</span>,</span><br><span class=\"line\">    chunks: <span class=\"string\">&#x27;initial&#x27;</span>,</span><br><span class=\"line\">    minChunks: <span class=\"number\">2</span>,</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>webpack4 使用 splitChunks 的实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    splitChunks: &#123;</span><br><span class=\"line\">      cacheGroups: &#123;</span><br><span class=\"line\">        vendor: &#123;</span><br><span class=\"line\">          priority: <span class=\"number\">1</span>, <span class=\"comment\">//添加权重</span></span><br><span class=\"line\">          test: <span class=\"regexp\">/node_modules/</span>, <span class=\"comment\">//把这个目录下符合下面几个条件的库抽离出来</span></span><br><span class=\"line\">          chunks: <span class=\"string\">&#x27;initial&#x27;</span>, <span class=\"comment\">//刚开始就要抽离</span></span><br><span class=\"line\">          minChunks: <span class=\"number\">2</span>, <span class=\"comment\">//重复2次使用的时候需要抽离出来</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        common: &#123;</span><br><span class=\"line\">          <span class=\"comment\">//公共的模块</span></span><br><span class=\"line\">          chunks: <span class=\"string\">&#x27;initial&#x27;</span>,</span><br><span class=\"line\">          minChunks: <span class=\"number\">2</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CDN-优化\"><a href=\"#CDN-优化\" class=\"headerlink\" title=\"CDN 优化\"></a>CDN 优化</h3><p>CDN 又叫内容分发网络，通过把资源部署到世界各地，用户在访问时按照就近原则从离用户最近的服务器获取资源，从而加速资源的获取速度。</p>\n<ul>\n<li>随着项目越做越大，依赖的第三方 npm 包越来越多，构建之后的文件也会越来越大。</li>\n<li>再加上又是单页应用，这就会导致在网速较慢或者服务器带宽有限的情况出现长时间的白屏。</li>\n</ul>\n<p>1、将 vue、vue-router、vuex、element-ui 和 axios 这五个库，全部改为通过 CDN 链接获取，在 index.html 里插入 相应链接。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  &lt;link</span><br><span class=\"line\">    rel=&quot;stylesheet&quot;</span><br><span class=\"line\">    href=&quot;https://cdn.bootcss.com/element-ui/2.0.7/theme-chalk/index.css&quot;</span><br><span class=\"line\">  /&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcss.com/axios/0.19.0-beta.1/axios.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcss.com/vuex/3.1.0/vuex.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcss.com/vue-router/3.0.2/vue-router.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcss.com/element-ui/2.6.1/index.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>问题</strong>：开发环境也接入vue.min.js 的cdn 时无法使用chrome 的 Vue.js devtools插件，所以要分环境加载不同的资源。</p>\n<p>2、在 webpack.config.js 配置文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\"> ···</span><br><span class=\"line\">    externals: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;vue&#x27;</span>: <span class=\"string\">&#x27;Vue&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;vuex&#x27;</span>: <span class=\"string\">&#x27;Vuex&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;vue-router&#x27;</span>: <span class=\"string\">&#x27;VueRouter&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;element-ui&#x27;</span>: <span class=\"string\">&#x27;ELEMENT&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;Axios&#x27;</span>:<span class=\"string\">&#x27;axios&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<p>3、卸载依赖的 npm 包，npm uninstall axios element-ui vue vue-router vuex</p>\n<p>4、修改 main.js 文件里之前的引包方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// import Vue from &#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// import ElementUI from &#x27;element-ui&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// import &#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// import VueRouter from &#x27;vue-router&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App.vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> routes <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./router&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> utils <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./utils/Utils&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(ELEMENT)</span><br><span class=\"line\">Vue.use(VueRouter)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">  mode: <span class=\"string\">&#x27;hash&#x27;</span>, <span class=\"comment\">//路由的模式</span></span><br><span class=\"line\">  routes,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  router,</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  render: <span class=\"function\">(<span class=\"params\">h</span>) =&gt;</span> h(App),</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-HappyPack-多进程解析和处理文件\"><a href=\"#使用-HappyPack-多进程解析和处理文件\" class=\"headerlink\" title=\"使用 HappyPack 多进程解析和处理文件\"></a>使用 HappyPack 多进程解析和处理文件</h3><ul>\n<li>由于运行在 Node.js 之上的 Webpack 是单线程模型的，所以 Webpack 需要处理的事情需要一件一件的做，不能多件事一起做。</li>\n<li>HappyPack 就能让 Webpack 把任务分解给多个子进程去并发的执行，子进程处理完后再把结果发送给主进程。</li>\n<li>HappyPack 对 file-loader、url-loader 支持的不友好，所以不建议对该 loader 使用。</li>\n</ul>\n<p>使用方法如下：</p>\n<ol>\n<li>HappyPack 插件安装： npm i -D happypack</li>\n<li>webpack.base.conf.js 文件对 module.rules 进行配置</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">  rules: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">      use: [<span class=\"string\">&#x27;happypack/loader?id=babel&#x27;</span>],</span><br><span class=\"line\">      include: [resolve(<span class=\"string\">&#x27;src&#x27;</span>), resolve(<span class=\"string\">&#x27;test&#x27;</span>)],</span><br><span class=\"line\">      exclude: path.resolve(__dirname, <span class=\"string\">&#x27;node_modules&#x27;</span>),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">      use: [<span class=\"string\">&#x27;happypack/loader?id=vue&#x27;</span>],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>在生产环境 webpack.prod.conf.js 文件进行配置</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> HappyPack = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;happypack&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 构造出共享进程池，在进程池中包含5个子进程</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> HappyPackThreadPool = HappyPack.ThreadPool(&#123; <span class=\"attr\">size</span>: <span class=\"number\">5</span> &#125;)</span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> HappyPack(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用唯一的标识符id，来代表当前的HappyPack是用来处理一类特定的文件</span></span><br><span class=\"line\">    id: <span class=\"string\">&#x27;babel&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 如何处理.js文件，用法和Loader配置中一样</span></span><br><span class=\"line\">    loaders: [<span class=\"string\">&#x27;babel-loader?cacheDirectory&#x27;</span>],</span><br><span class=\"line\">    threadPool: HappyPackThreadPool,</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">  <span class=\"keyword\">new</span> HappyPack(&#123;</span><br><span class=\"line\">    id: <span class=\"string\">&#x27;vue&#x27;</span>, <span class=\"comment\">// 用唯一的标识符id，来代表当前的HappyPack是用来处理一类特定的文件</span></span><br><span class=\"line\">    loaders: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        loader: <span class=\"string\">&#x27;vue-loader&#x27;</span>,</span><br><span class=\"line\">        options: vueLoaderConfig,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    threadPool: HappyPackThreadPool,</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-DLLPlugin-提高打包编译速度\"><a href=\"#使用-DLLPlugin-提高打包编译速度\" class=\"headerlink\" title=\"使用 DLLPlugin 提高打包编译速度\"></a>使用 DLLPlugin 提高打包编译速度</h3><p><a href=\"https://webpack.docschina.org/plugins/dll-plugin/\">DLLPlugin</a> 代码一般简单区分为业务代码和第三方库。如果不做处理，每次构建时都需要把所有的代码重新构建一次，耗费大量的时间，在大部分情况下，很多第三方库的代码不会变更（除非是版本升级），这时就可以使用到 dll：将复用性较高的第三方模块打包到动态链接库中，再不升级这些库的情况下，动态库不需要重新打包，每次构建只需要重新打包业务代码。</p>\n<p>DllPlugin 是 webpack 内置的插件，不需要额外安装，直接配置 webpack.dll.config.js 文件，Webpack 已经内置了对动态链接库的支持，需要通过 2 个内置的插件接入，它们分别是：</p>\n<p>DllPlugin 插件：用于打包出一个个单独的动态链接库文件。<br>DllReferencePlugin 插件：用于在主要配置文件中去引入 DllPlugin 插件打包好的动态链接库文件。</p>\n<p>相关链接：</p>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000016567986\">webpack 使用-详解 DllPlugin</a></li>\n<li><a href=\"https://juejin.cn/post/6844903635072057358\">webpack 编译速度提升之 DllPlugin</a></li>\n<li><a href=\"http://webpack.wuhaolin.cn/4%E4%BC%98%E5%8C%96/4-2%E4%BD%BF%E7%94%A8DllPlugin.html\">4-2 使用 DllPlugin</a></li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li>比较实用的方法: 按需加载，优化 loader 配置，关闭生产环境的 sourceMap，CDN 优化。</li>\n<li>vue-cli 已做的优化： 代码压缩，提取公共代码，再优化空间不大。</li>\n<li>根据项目实际需要和自身开发水平选择优化方法，必须避免因为优化产生 bug。</li>\n</ol>"},{"title":"脚手架集成","date":"2019-08-08T06:33:47.000Z","_content":"\n# 为什么需要脚手架？\n\n1、减少重复性的工作，不再需要复制其他项目再删除无关代码，或者从零创建一个项目和文件 。\n2、根据交互动态生成项目结构和配置文件,具备更高的灵活性和人性化定制的能力 。\n3、多人协作更为方便，避免了人工传递文件的繁琐。\n4、集成互联网上的模板，方便自己与他人使用。\n\n<!--more-->\n# 思路\n\n开发脚手架可以借鉴 vue-cli 的基本思路。vue-cli 是将项目模板放在 git 上，运行的时候再根据用户交互下载不同的模板，经过模板引擎渲染出来，生成项目。这样讲脚手架和模板分离，就可以各自维护，即使模板有所变动，只需要上传最新的模板即可，而不需要用户去更新脚手架就可以生成最新的项目。\n\n# 脚手架工作流\n\n![network](https://image-static.segmentfault.com/409/200/409200816-5ab3668b4996f_articlex)\n\n# 脚手架问答流\n\n    PS D:\\test> vue create demo1\n\n```\n? Please pick a preset: Manually select features\n? Check the features needed for your project: Babel, Router, Vuex, CSS Pre-processors, Linter\n? Use history mode for router? (Requires proper server setup for index fallback in production) Yes\n? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): Less\n? Pick a linter / formatter config: Basic\n? Pick additional lint features: (Press <space> to select, <a> to toggle all, <i> to invert selection)Lint on save\n? Where do you prefer placing config for Babel, PostCSS, ESLint, etc.? In package.json\n? Save this as a preset for future projects? Yes\n? Save preset as: preset1\n\n📄  Generating README.md...\n\n\n🎉  Successfully created project demo1.\n👉  Get started with the following commands:\n```\n\n# 如何搭建一个脚手架？\n\n![network](/images/cli/脚手架构建流程.png)\n\n# 第三方库的支持\n\n![network](/images/cli/第三方库支持.png)\n\n会使用到的第三方库\n- commander.js:可以自动解析命令和参数，用于处理用户输入的命令\n- download-git-repo:下载并提取git仓库，用于下载项目模板\n- inquirer.js:通过命令行用户界面集合，用于和用户进行交互\n- handlebars.js:模板引擎，将用户提交的信息动态填充到文件中\n- ora:下载过程久的话，可以用于显示下载中的动画效果\n- chalk:可以给终端的字体加上颜色\n- log-symbols:可以在终端上显示√或×等图标\n\n\n# 搭建步骤：\n\n### 1、初始化项目\n\n首先创建一个空项目，命名为 mbs-cli，然后新建一个 bin/mbs 文件，再执行 npm init 生成一个 package.json 文件。最后安装上面需要用到的依赖。\n\n```\nnpm install commander download-git-repo inquirer handlebars ora chalk log-symbols cli-table -S\n\n```\n\n### 2、处理命令行\n\nnode.js 内置了对命令行操作的支持，在 package.json 中的 bin 字段可以定义命令名和关联的执行文件。\n\n在 package.json 中加上 bin 的内容：\n\n```javascript\n{\n\t\"name\": “mbs-cli\",\n\t\"version\": \"1.0.0\",\n    \"description\": \"中后台系统脚手架\",\n\t\"bin\": {\n\t\t\"mbs\": \"bin/mbs\"\n     }\n }\n```\n\n首先在 mbs 文件 中引入相关依赖模块：\n\n```javascript\n#!/usr/bin/env node\n\nconst { existsSync } = require('fs');//系统内置模块 主要用来操作文件\nconst program = require('commander');//自动的解析命令和参数，用于处理用户输入的命令。\nconst chalk = require('chalk');//给终端的字体加上颜色。\nconst symbols = require('log-symbols');//在终端上显示出 √ 或 × 等的图标。\n\nconst res = command => resolve(__dirname, '../commands/', command)\n```\n\n#### 配置 !/usr/bin/env node 的作用\n\n指定用 node 执行脚本文件 ,usr/bin/env 解决了不同的用户 node 路径不同的问题，可以让系统动态的去查找 node 来执行你的脚本文件。\n\n# nodejs 依赖模块介绍与用法\n\n## commander（指挥官）\n\n自动地解析命令和参数，用于处理用户输入的命令。\n\n-   usage(): 设置 usage 值\n\n-   command(): 定义一个命令名字\n\n-   description(): 设置 description 值\n\n-   option(): 定义参数，需要设置“关键字”和“描述”，关键字包括“简写”和“全写”两部分，以”,”,”|”,”空格”做分隔。\n\n-   parse(): 解析命令行参数 argv\n\n-   action(): 注册一个 callback 函数\n\n-   version() : 终端输出版本号\n\n```javascript\nPS D:\\yameiproject\\mbs-cli> mbs --help\nUsage: mbs <command>\n\nOptions:\n  -V, --version  output the version number\n  -h, --help     output usage information\n\nCommands:\n  add|a          Add a new template\n  init|i         Generate a new project\n  init|ins       Generate a simple project\n  create|c       Generate a new project\n  list|l         List all the templates\n```\n\n定义常规命令：\n\n```javascript\nconst program = require('commander');//自动的解析命令和参数，用于处理用户输入的命令。\n\nprogram\n  .usage('<command>')\n\nprogram\n  .version(require('../package').version )\n```\n\ninit 命令逻辑：\n\n```javascript\nprogram\n  .command('init <name>')\n  .description('Generate a new project')\n  .alias('i')\n  .action((name) => {\n    if(!existsSync(name)){\n        require(res('init'))\n    }else{\n      // 错误提示项目已存在，避免覆盖原有项目\n      console.log(symbols.error, chalk.red('Project already exists'));\n    }\n  })\n```\n\n处理用户输入命令：\n\n```javascript\nprogram\n  .command('init <name>')\n  .description('Generate a new project')\n  .alias('i')\n  .action((name) => {\n    if(!existsSync(name)){\n        require(res('init'))\n    }else{\n      // 错误提示项目已存在，避免覆盖原有项目\n      console.log(symbols.error, chalk.red('Project already exists'));\n    }\n  })\n```\n\n最后处理解析命令行参数 ：\n\n```javascript\nprogram.parse(process.argv);\n\n//process:一个全局对象,控制有关信息，控制node.js的进程\n//program.parse:解析命令之中的参数，根据上面定义好的规则执行相关命令\n//process.argv:该属性返回一个数组,这个数组包含了启动node.js进程时的命令行参数\n\nif(!program.args.length){\n  program.help();\n}\n```\n\n## inquirer（询问者）\n\n通用的命令行用户界面集合，用于和用户进行交互。由于交互的问题种类不同，inquirer 为每个问题提供很多参数：\n\n```\ntype：表示提问的类型，包括：input, confirm, list, rawlist, expand, checkbox, password, editor；\nname: 存储当前问题回答的变量；\nmessage：问题的描述；\ndefault：默认值；\nchoices：列表选项，在某些type下可用，并且包含一个分隔符(separator)；\nvalidate：对用户的回答进行校验；\nfilter：对用户的回答进行过滤处理，返回处理后的值；\nwhen：根据前面问题的回答，判断当前问题是否需要被回答；\nprefix：修改message默认前缀；\nsuffix：修改message默认后缀。\n```\n\n语法结构\n\n```javascript\nconst inquirer = require('inquirer');\n\nconst promptList = [\n    // 具体交互内容\n];\n\ninquirer.prompt(promptList).then(answers => {\n    console.log(answers); // 返回的结果\n})\n```\n\ninput 类型\n\n```javascript\nconst inquirer = require('inquirer');\ninquirer.prompt([\n    {\n        type: 'input',\n        name: 'author',\n        message: '请输入作者名称'\n    }\n]).then((answers) => {\n    console.log(answers.author);\n})\n\n效果：\n\n```\n\n效果：\n\nconfirm 类型\n\n```javascript\nconst promptList = [{\n    type: \"confirm\",\n    message: \"是否使用监听？\",\n    name: \"watch\",\n    prefix: \"前缀\"\n},{\n    type: \"confirm\",\n    message: \"是否进行文件过滤？\",\n    name: \"filter\",\n    suffix: \"后缀\",\n    when: function(answers) { // 当watch为true的时候才会提问当前问题\n        return answers.watch\n    }\n}];\n\n\n```\n\n效果：\n\n\nlist 类型\n\n```javascript\nconst promptList = [{\n    type: 'list',\n    message: '请选择一种水果:',\n    name: 'fruit',\n    choices: [\n        \"Apple\",\n        \"Pear\",\n        \"Banana\"\n    ],\n    filter: function (val) { // 使用filter将回答变为小写\n        return val.toLowerCase();\n    }\n}];\n```\n\n效果：\n\n\n## download-git-repo\n\ndownload-git-repo 支持从 Github、Gitlab 和 Bitbucket 下载仓库，\n\n```\ndownload(repository, destination, options, callback)\n```\n\nrepository\n\n```\n- GitHub - github:owner/name or simply owner/name\n- GitLab - gitlab:owner/name\n- Bitbucket - bitbucket:owner/name\n- Direct - direct:url:branch\n```\n\ndestination\n\n```\n The file path to download the repository to. xxxxxxxxxx \n```\n\noptions\n\n```\n boolean default false - If true use git clone instead of an http download. While this can be a bit slower, it does allow private repositories to be used if the appropriate SSH keys are setup.\n```\n\ncallback\n\n```\n The callback function as function (err).\n```\n\nexample:\n\n```\ndownload('direct:https://gitlab.com/flipxfx/download-git-repo-fixture/repository/archive.zip', 'test/tmp', function (err) {\n  console.log(err ? 'Error' : 'Success')\n})\n```\n\n#####\n\n## ora （loading 动效）\n\n用于显示下载中的动画效果\n\n```javascript\nconst ora = require('ora');\n// 开始下载\nconst spinner = ora('正在下载模板...');\nspinner.start();\n// 下载失败调用\nspinner.fail();\n// 下载成功调用\nspinner.succeed();\n```\n\n```\n\\ Downloading template...\n```\n\n## chalk（字体颜色）\n\n通过 chalk 来为打印信息加上样式，比如成功信息为绿色，失败信息为红色，这样子会让用户更加容易分辨，同时也让终端的显示更加的好看：\n\n```javascript\nconst chalk = require('chalk');\nconsole.log(chalk.green('项目创建成功'));\nconsole.log(chalk.red('项目创建失败'));const ora = require('ora');\n// 开始下载\nconst spinner = ora('正在下载模板...');\nspinner.start();\n// 下载失败调用\nspinner.fail();\n// 下载成功调用\nspinner.succeed();\n```\n\n## log-symbols（日志符号）\n\n使用 log-symbols 在信息前面加上 √ 或 × 等的图标，优化视觉体验：\n\n```javascript\nconsole.log(symbols.success, chalk.green('New project has been initialize successfully!'));\n```\n\n## handlebars\n\nhandlebars 可以对仓库的模板中的 package.json 文件做一些动态修改 :\n\n```javascript\n{\n  \"name\": \"{{name}}\",\n  \"version\": \"1.0.0\",\n  \"description\": \"{{description}}\",\n  \"scripts\": {\n    \"dev\": \"webpack-dev-server  --config build/webpack.dev.conf.js\",\n    \"start\": \"npm run dev\",\n    \"build\": \"node build/build.js\"\n  },\n  \"author\": \"{{author}}\",\n  \"license\": \"ISC\",\n  ...\n```\n\n并在下载模板完成之后将用户输入的答案渲染到 package.json 中\n\n```javascript\n\nconst fileName = \"./package.json;\"\nconst meta = {\n\t name,\n     description: answers.description,\n     author: answers.author\n }\n const content = readFileSync(fileName).toString();\nconst result = handlebars.compile(content)(meta);\nwriteFileSync(fileName, result);\n```\n\n## cli-table\n\n表格\n\n```javascript\nconst table = new Table({\n  head: ['Template Name', 'Branch', 'Url'],\n  style: {\n    head: ['green']\n  }\n})\n```\n\n\n### 3、配置**下载模板**\n\n```javascript\ndownload('http://git.ym/g-web/mbs-cli.git#master', jay/${name}, {clone: true}, (err) => {\n          if(err){\n            spinner.fail();\n            console.log(symbols.error, chalk.red(err));\n          }else{\n            spinner.succeed();\n            const fileName = `${name}/package.json`;\n            const meta = {\n              name,\n              description: answers.description,\n              author: answers.author\n            }\n            if(fs.existsSync(fileName)){\n              const content = fs.readFileSync(fileName).toString();\n              const result = handlebars.compile(content)(meta);\n              fs.writeFileSync(fileName, result);\n            }\n            console.log(symbols.success, chalk.green('Project initialization completed'));\n          }\n})\n```\n\n### 4、命令行交互\n\n命令行交互功能可以在用户执行 init 命令后，向用户提出问题，接收用户的输入并作出相应的处理。使用 inquirer.js 实现。\n\n```javascript\nlet tplList = require(`${__dirname}/../templates`)\n\nconst questions = [\n    {\n        type: 'input',\n        name: 'project',\n        message: 'Project name:',\n        validate (val) {\n          if (val !== '') {\n            return true\n          }\n          return 'Project name is required!'\n        }\n    },\n    {\n      type: 'input',\n      name: 'author',\n      message: 'Please enter the author name:'\n    },\n    {\n      type: 'input',\n      name: 'description',\n      message: 'Please enter a description of the project:',\n      default: 'a project do for you',\n    },\n    {\n      type: 'input',\n      name: 'place',\n      message: 'Where to init the project:',\n      default: './'\n    }\n  ]\n\nmodule.exports = prompt(questions).then(answers => {\n    const spinner = ora('Downloading template...');\n    spinner.start()\n    download(`direct:${tplList['template1']['url']}#${tplList['template1']['branch']}`, `${answers.place}/${answers.project}`, {clone: false}, (err) => {\n        if(err){\n            spinner.fail();\n            console.log(symbols.error, chalk.red(err));\n        }else{\n            spinner.succeed();\n            const fileName = `${answers.project}/package.json`;\n            const meta = {\n              name:answers.project,\n              description: answers.description,\n              author: answers.author\n            }\n            console.log(meta);\n            if(existsSync(fileName)){\n              const content = readFileSync(fileName).toString();\n              const result = handlebars.compile(content)(meta);\n              writeFileSync(fileName, result);\n            }\n            console.log(symbols.success, chalk.green('New project has been initialize successfully!'));\n        }\n    })\n})\n```\n\n### 5、渲染模板\n\n用 handlebars 的语法对 模板中的 package.json 文件做一些修改 ：\n\n```javascript\n{\n  \"name\": \"{{name}}\",\n  \"version\": \"1.0.0\",\n  \"description\": \"{{description}}\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"{{author}}\",\n  \"license\": \"ISC\"\n}\n```\n\n并在下载模板完成之后将用户输入的答案渲染到 package.json 中\n\n```javascript\nprogram.version('1.0.0', '-v, --version')\n.command('init <name>')\n.action((name) => {\n    inquirer.prompt([\n    {\n        name: 'description',\n        message: '请输入项目描述'\n    },\n    {\n        name: 'author',\n        message: '请输入作者名称'\n    }\n    ]).then((answers) => {\n        download('xxxxx#master',name,{clone: true},(err) => {\n            const meta = {\n                name,\n                description: answers.description,\n                author: answers.author\n            }\n            const fileName = `${name}/package.json`;\n            const content = fs.readFileSync(fileName).toString();\n            const result = handlebars.compile(content)(meta);\n            fs.writeFileSync(fileName, result);\n        })\n    })\n});\n```\n\n这里使用了 node.js 的文件模块 fs，将 handlebars 渲染完后的模板重新写入到文件中。\n\n### 6、视觉美化\n\n在用户输入答案之后，开始下载模板，这时候使用 ora 来提示用户正在下载中：\n\n```\nconst ora = require('ora');\n// 开始下载\nconst spinner = ora('正在下载模板...');\nspinner.start();\n// 下载失败调用\nspinner.fail();\n// 下载成功调用\nspinner.succeed();\n```\n\n# 简单版脚手架完整示例\n\n```javascript\n#!/usr/bin/env node\nconst fs = require('fs');//系统内置模块 主要用来操作文件\nconst program = require('commander');//自动的解析命令和参数，用于处理用户输入的命令。\nconst download = require('download-git-repo');//下载并提取 git 仓库，用于下载项目模板。\nconst handlebars = require('handlebars');//模板引擎，将用户提交的信息动态填充到文件中。\nconst inquirer = require('inquirer');//通用的命令行用户界面集合，用于和用户进行交互。\nconst ora = require('ora');//下载过程久的话，可以用于显示下载中的动画效果。\nconst chalk = require('chalk');//给终端的字体加上颜色。\nconst symbols = require('log-symbols');//在终端上显示出 √ 或 × 等的图标。\n\nprogram.version('1.0.4', '-v, --version')\n  .command('init <name>')\n  .action((name) => {\n    if(!fs.existsSync(name)){\n      inquirer.prompt([//prompt 提示\n        {\n          name: 'description',\n          message: 'Please enter a description of the project:'\n        },\n        {\n          name: 'author',\n          message: 'Please enter the author name:'\n        }\n      ]).then((answers) => {\n        const spinner = ora('Downloading template...');\n        spinner.start();\n        /**\n         * 一级目录  name\n         * 二级目录 jay/${name}\n         */\n        download('http://git.ym/g-web/mbs-cli.git#master', jay/${name}, {clone: true}, (err) => {\n          if(err){\n            spinner.fail();\n            console.log(symbols.error, chalk.red(err));\n          }else{\n            spinner.succeed();\n            const fileName = `${name}/package.json`;\n            const meta = {\n              name,\n              description: answers.description,\n              author: answers.author\n            }\n            if(fs.existsSync(fileName)){\n              const content = fs.readFileSync(fileName).toString();\n              const result = handlebars.compile(content)(meta);\n              fs.writeFileSync(fileName, result);\n            }\n            console.log(symbols.success, chalk.green('Project initialization completed'));\n          }\n        })\n      })\n    }else{\n      // 错误提示项目已存在，避免覆盖原有项目\n      console.log(symbols.error, chalk.red('Project already exists'));\n    }\n  })\nprogram.parse(process.argv);\n```\n\n# mbs-cli 核心命令\n\n```javascript\n  Commands:\n\n    add|a             Add a new template\n    list|l            List all the templates\n    init|i            Generate a new project\n    create|c          Generate a new project by choose a template\n    init simple|ins   Generate a simple project\n\n  Options:\n\n    -h, --help     output usage information\n    -V, --version  output the version number\n```\n\n#### 入口文件 mbs\n\n```javascript\n#!/usr/bin/env node\n\nprocess.env.NODE_PATH = __dirname + '/../node_modules/'\n\nconst { resolve } = require('path')\nconst chalk = require('chalk')\nconst { existsSync } = require('fs')\nconst symbols = require('log-symbols')\nconst program = require('commander')\n\nconst res = command => resolve(__dirname, '../commands/', command)\n\nprogram\n  .usage('<command>')\n\nprogram\n  .version(require('../package').version )\n\nprogram\n  .command('add')\n  .description('Add a new template')\n  .alias('a')\n  .action(() => {\n    require(res('add'))\n  })\n\n\n\nprogram\n  .command('init')\n  .description('Generate a new project')\n  .alias('i')\n  .action(() => {\n    require(res('init'))\n  })\n\nprogram\n  .command('create')\n  .description('Generate a new project')\n  .alias('c')\n  .action(() => {\n    require(res('create'))\n  })\n\n\nprogram\n  .command('list')\n  .description('List all the templates')\n  .alias('l')\n  .action(() => {\n    require(res('list'))\n  })\n\nprogram.parse(process.argv);\n\nif(!program.args.length){\n  program.help();//如果没有输入参数，终端显示帮助\n}\n```\n\n#### init 命令\n\n```javascript\nlet tplList = require(`${__dirname}/../templates`)\n\nconst questions = [\n    {\n        type: 'input',\n        name: 'project',\n        message: 'Project name:',\n        validate (val) {\n          if (val !== '') {\n            return true\n          }\n          return 'Project name is required!'\n        }\n    },\n    {\n      type: 'input',\n      name: 'author',\n      message: 'author name:'\n    },\n    {\n      type: 'input',\n      name: 'description',\n      message: 'description of the project:',\n      default: 'a simple spa project',\n    },\n    {\n      type: 'input',\n      name: 'place',\n      message: 'Where to init the project:',\n      default: './'\n    }\n  ]\n\nmodule.exports = prompt(questions).then(answers => {\n    const spinner = ora('Downloading template...');\n    spinner.start()\n    download(`direct:${tplList['template1']['url']}#${tplList['template1']['branch']}`, `${answers.place}/${answers.project}`, {clone: true}, (err) => {\n        if(err){\n            spinner.fail();\n            console.log(symbols.error, chalk.red(err));\n        }else{\n            spinner.succeed();\n            const fileName = `${answers.project}/package.json`;\n            const meta = {\n              name:answers.project,\n              description: answers.description,\n              author: answers.author\n            }\n            console.log(meta);\n            if(existsSync(fileName)){\n              console.log(\"come in...\")\n              const content = readFileSync(fileName).toString();\n              const result = handlebars.compile(content)(meta);\n              writeFileSync(fileName, result);\n            }\n            console.log(symbols.success, chalk.green('New project has been initialize successfully!'));\n        }\n    })\n})\n```\n\n#### init simple 命令\n\n```javascript\nlet tplList = require(`${__dirname}/../templates`)\n\nconst question = [\n    {\n        name: 'description',\n        message: 'Please enter a description of the project:'\n    },\n    {\n        name: 'author',\n        message: 'Please enter the author name:'\n    }\n]\n\nmodule.exports = prompt(question).then((answers) => {\n    const spinner = ora('Downloading template...');\n    spinner.start()\n    download(`direct:${tplList['template2']['url']}#${tplList['template2']['branch']}`, `./${name}`, {clone: true}, (err) => {\n        if(err){\n            spinner.fail();\n            console.log(symbols.error, chalk.red(err));\n        }else{\n            spinner.succeed();\n            const fileName = `${name}/package.json`;\n            const meta = {\n              name,\n              description: answers.description,\n              author: answers.author\n            }\n            if(existsSync(fileName)){\n              const content = readFileSync(fileName).toString();\n              const result = handlebars.compile(content)(meta);\n              writeFileSync(fileName, result);\n            }\n            console.log(symbols.success, chalk.green('Project initialization completed'));\n        }\n    })\n})\n```\n\n#### create 命令\n\n```javascript\nlet templateList = require(`${__dirname}/../templates`)\nlet rmTempList = require(`${__dirname}/../config/remote-templates`)\n\nconst choices = rmTempList.map(template=>{\n  return {\n    name:`${template.name} - ${template.description}`,\n    value:template.name\n  }\n})\n\nconst questions = [\n    {\n        type: 'input',\n        name: 'project',\n        message: 'Project name:',\n        validate (val) {\n          if (val !== '') {\n            return true\n          }\n          return 'Project name is required!'\n        }\n    },\n    {\n        type: 'list',\n        name: 'template',\n        choices,\n        message: 'Choose template you want:',\n        validate (val) {\n          if (val !== '') {\n            return true\n          }\n          return 'template name is required!'\n        }\n    },\n    {\n      type: 'input',\n      name: 'author',\n      message: 'author name:'\n    },\n    {\n      type: 'input',\n      name: 'description',\n      message: 'description of the project:',\n      default: '',\n    },\n    {\n      type: 'input',\n      name: 'place',\n      message: 'Where to init the project:',\n      default: './'\n    }\n  ]\n\nmodule.exports = prompt(questions).then(answers => {\n    const spinner = ora('Downloading template...');\n    spinner.start()\n    const template = rmTempList.filter(item =>{\n      return answers.template.includes(item.name) && item;\n    })[0];\n    download(`direct:${template.url}#${template.branch}`, `${answers.place}/${answers.project}`, {clone: true}, (err) => {\n        if(err){\n            spinner.fail();\n            console.log(symbols.error, chalk.red(err));\n        }else{\n            spinner.succeed();\n            const fileName = `${answers.project}/package.json`;\n            const meta = {\n              name:answers.project,\n              description: answers.description,\n              author: answers.author\n            }\n            console.log(meta);\n            if(existsSync(fileName)){\n              const content = readFileSync(fileName).toString();\n              const result = handlebars.compile(content)(meta);\n              writeFileSync(fileName, result);\n            }\n            console.log(symbols.success, chalk.green('New project has been initialize successfully!'));\n        }\n    })\n})\n```\n\n效果\n\n```\n$ mbs create\n\n? Project name: demo\n? Choose template you want: (Use arrow keys)\n> vue-webpack-pc - 基于webpack构建的vue项目模板\n  react-webpack-pc - 基于webpack构建的react项目模板\n  angular-webpack-pc - 基于webpack构建的angular项目模板\n  discover your template - 更多海量模板等你发掘与收藏.\n? Choose template you want: vue-webpack-pc - 基于webpack构建的vue项目模板\n? Please enter the author name: jay\n? Please enter a description of the project: a simple spa project\n? Where to init the project: ./\n√ Downloading template...\n√ New project has been initialize successfully!\n```\n\n#### add 命令\n\n```javascript\nconst { prompt } = require('inquirer')\nconst { writeFile } = require('fs')\nconst { showTable } = require(`${__dirname}/../utils`)\n\nlet tempList = require(`${__dirname}/../templates`)\n\nconst question = [\n  {\n    type: 'input',\n    name: 'name',\n    message: 'Set the custom name of the template:',\n    validate (val) {\n      if (tempList[val]) {\n        return 'Template is existed!'\n      } else if (val === '') {\n        return 'Name is required!'\n      } else {\n        return true\n      }\n    }\n  },\n  {\n    type: 'input',\n    name: 'branch',\n    message: 'branch of the template:',\n    validate (val) {\n      if (val !== '') {\n        return true\n      }\n      return 'branch is required!'\n    }\n  },\n  {\n    type: 'input',\n    name: 'url',\n    message: 'Url of the template:',\n    validate (val) {\n      if (val !== '') {\n        return true\n      }\n      return 'Url is required!'\n    }\n  }\n]\n\nmodule.exports = prompt(question).then(({ name, branch, url }) => {\n  tempList[name] = {}\n  tempList[name]['branch'] = branch\n  tempList[name]['url'] = url\n\n  writeFile(`${__dirname}/../templates.json`, JSON.stringify(tempList), 'utf-8', (err) => {\n    if (err) {\n      console.log(err)\n    }\n    showTable(tempList, 'New template has been added successfully!')\n  })\n})\n\n```\n\n效果\n\n```\n$ mbs add\n\n? Set the custom name of the template: template1\n? branch of the template: master\n? Url of the template: http://git.ym/Chenmh/bs-init-template.git\n┌───────────────┬────────┬───────────────────────────────────────────┐\n│ Template Name │ Branch │ Url                                       │\n├───────────────┼────────┼───────────────────────────────────────────┤\n│ template1     │ master │ http://git.ym/Chenmh/bs-init-template.git │\n└───────────────┴────────┴───────────────────────────────────────────┘\n✔ New template has been added successfully!\n```\n\n`mbs` use [download-git-repo](https://github.com/flipxfx/download-git-repo) to down load git repos. After answering 3 questions, you'll add a new template to `mbs`.\n\n#### list 命令\n\n```javascript\nconst { showTable } = require(`${__dirname}/../utils`)\n\nlet tempList = require(`${__dirname}/../templates`)\n\nmodule.exports = showTable(tempList)\n```\n\n```javascript\nfunction showTable (tempList) {\n  const list = Object.keys(tempList)\n  if (list.length) {\n    list.forEach((key) => {\n      table.push([key, tempList[key]['branch'], tempList[key]['url']])\n      if (table.length === list.length) {\n        process.exit()\n      }\n    })\n  } else {\n    console.log(table.toString())\n    process.exit()\n  }\n}\n```\n\n效果\n\n```\n$ mbs list\n\n┌───────────────┬──────────┬───────────────────────────────────────────┐\n│ Template Name │ Branch   │ Url                                       │\n├───────────────┼──────────┼───────────────────────────────────────────┤\n│ template1     │ standard │ http://git.ym/Chenmh/bs-init-template.git │\n├───────────────┼──────────┼───────────────────────────────────────────┤\n│ template2     │ simple   │ http://git.ym/Chenmh/bs-init-template.git │\n└───────────────┴──────────┴───────────────────────────────────────────┘\n```\n\nutils.js\n\n```javascript\nconst Table = require('cli-table')\nconst chalk = require('chalk')\n\nconst table = new Table({\n  head: ['Template Name', 'Branch', 'Url'],\n  style: {\n    head: ['green']\n  }\n})\n\nfunction showTable (tempList, Exp) {\n  const list = Object.keys(tempList)\n  if (list.length) {\n    list.forEach((key) => {\n      table.push([key, tempList[key]['branch'], tempList[key]['url']])\n      if (table.length === list.length) {\n        console.log(table.toString())\n        if (Exp) {\n          console.log(chalk.green(`\\u2714 ${Exp}`))\n        }\n        process.exit()\n      }\n    })\n  } else {\n    console.log(table.toString())\n    if (Exp) {\n      console.log(chalk.green(`\\u2714 ${Exp}`))\n    }\n    process.exit()\n  }\n}\n\nexports.showTable = showTable\n\n```\n\n#脚手架发布\n\n### npm 登录\n\n```\nPS D:\\yameiproject\\mbs-cli> npm login\nUsername: chenyumen\nPassword:\nEmail: (this IS public) 13172050157@126.com\nLogged in as chenyumen on https://registry.npmjs.org/.\n```\n\n### npm 发布\n\n```\nPS D:\\yameiproject\\mbs-cli> npm publish\nnpm notice\nnpm notice package: mbs-cli@1.0.4\nnpm notice === Tarball Contents ===\nnpm notice 573B  package.json\nnpm notice 2.5kB index.js\nnpm notice 193B  脚手架.md\nnpm notice === Tarball Details ===\nnpm notice name:          mbs-cli\nnpm notice version:       1.0.4\nnpm notice package size:  1.8 kB\nnpm notice total files:   3\nnpm notice\n+ mbs-cli@1.0.4\n```\n\n# 本地 npm 模块调试\n\n### 开启调试模式\n\n`npm link`命令可以将一个任意位置的`npm包`链接到全局执行环境，从而在任意位置使用命令行都可以直接运行该 npm 包。\n\n```\nC:\\Users\\yamei\\AppData\\Roaming\\npm\\mbs -> C:\\Users\\yamei\\AppData\\Roaming\\npm\\node_modules\\mbs-cli\\bin\\mbs\nC:\\Users\\yamei\\AppData\\Roaming\\npm\\node_modules\\mbs-cli -> D:\\yameiproject\\mbs-cli\n```\n\n### 关闭调试模式\n\n如果你的项目不再需要该模块，可以在项目目录内使用 npm unlink 命令，删除符号链接\n\n# 延申\n\n1、丰富命令行交互，以适应更多变的需求。\n\n2、webpack 配置文件隐藏优化。\n\n\n# 模板集成常用功能\n\n-   登录、注销\n-   DashBord\n-   表格\n-   Tab 选项卡\n-   图表\n-   富文本编辑器\n-   三级菜单\n-   国际化\n-   图片拖拽、裁剪上传\n-   列表拖拽排序\n-   权限管理\n-   404/403/500\n\n# 模板项目结构\n\n├── build 构建服务和 webpack 配置\n|—— build.js webpack 打包服务\n|—— webpack.base.conf.js webpack 基本通用配置\n|—— webpack.dev.conf.js webpack 开发环境配置\n|—— webpack.prod.conf.js webpack 生产环境配置\n├── config 构建项目不同环境的配置\n├── public 项目打包文件存放目录\n├── index.html 项目入口文件\n├── package.json 项目配置文件\n├── .babelrc babel 配置文件\n├── .gitignore git 忽略文件\n├── postcss.config.js postcss 配置文件\n├── src 项目目录\n├── assets 静态资源  \n ├── components 集成组件目录  \n |—— json json 目录\n|—— lang 中英文目录\n|—— router vue 路由配置\n|—— service ajax 请求配置\n|—— store vuex 配置\n|—— styles 公共样式\n|—— utils 工具类\n|—— views 页面组件目录\n|—— App.vue vue 实例入口\n|—— main.js 项目构建入口\n","source":"_posts/脚手架集成.md","raw":"---\ntitle: 脚手架集成\ndate: 2019-08-08 14:33:47\ncategories: 工具\n---\n\n# 为什么需要脚手架？\n\n1、减少重复性的工作，不再需要复制其他项目再删除无关代码，或者从零创建一个项目和文件 。\n2、根据交互动态生成项目结构和配置文件,具备更高的灵活性和人性化定制的能力 。\n3、多人协作更为方便，避免了人工传递文件的繁琐。\n4、集成互联网上的模板，方便自己与他人使用。\n\n<!--more-->\n# 思路\n\n开发脚手架可以借鉴 vue-cli 的基本思路。vue-cli 是将项目模板放在 git 上，运行的时候再根据用户交互下载不同的模板，经过模板引擎渲染出来，生成项目。这样讲脚手架和模板分离，就可以各自维护，即使模板有所变动，只需要上传最新的模板即可，而不需要用户去更新脚手架就可以生成最新的项目。\n\n# 脚手架工作流\n\n![network](https://image-static.segmentfault.com/409/200/409200816-5ab3668b4996f_articlex)\n\n# 脚手架问答流\n\n    PS D:\\test> vue create demo1\n\n```\n? Please pick a preset: Manually select features\n? Check the features needed for your project: Babel, Router, Vuex, CSS Pre-processors, Linter\n? Use history mode for router? (Requires proper server setup for index fallback in production) Yes\n? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): Less\n? Pick a linter / formatter config: Basic\n? Pick additional lint features: (Press <space> to select, <a> to toggle all, <i> to invert selection)Lint on save\n? Where do you prefer placing config for Babel, PostCSS, ESLint, etc.? In package.json\n? Save this as a preset for future projects? Yes\n? Save preset as: preset1\n\n📄  Generating README.md...\n\n\n🎉  Successfully created project demo1.\n👉  Get started with the following commands:\n```\n\n# 如何搭建一个脚手架？\n\n![network](/images/cli/脚手架构建流程.png)\n\n# 第三方库的支持\n\n![network](/images/cli/第三方库支持.png)\n\n会使用到的第三方库\n- commander.js:可以自动解析命令和参数，用于处理用户输入的命令\n- download-git-repo:下载并提取git仓库，用于下载项目模板\n- inquirer.js:通过命令行用户界面集合，用于和用户进行交互\n- handlebars.js:模板引擎，将用户提交的信息动态填充到文件中\n- ora:下载过程久的话，可以用于显示下载中的动画效果\n- chalk:可以给终端的字体加上颜色\n- log-symbols:可以在终端上显示√或×等图标\n\n\n# 搭建步骤：\n\n### 1、初始化项目\n\n首先创建一个空项目，命名为 mbs-cli，然后新建一个 bin/mbs 文件，再执行 npm init 生成一个 package.json 文件。最后安装上面需要用到的依赖。\n\n```\nnpm install commander download-git-repo inquirer handlebars ora chalk log-symbols cli-table -S\n\n```\n\n### 2、处理命令行\n\nnode.js 内置了对命令行操作的支持，在 package.json 中的 bin 字段可以定义命令名和关联的执行文件。\n\n在 package.json 中加上 bin 的内容：\n\n```javascript\n{\n\t\"name\": “mbs-cli\",\n\t\"version\": \"1.0.0\",\n    \"description\": \"中后台系统脚手架\",\n\t\"bin\": {\n\t\t\"mbs\": \"bin/mbs\"\n     }\n }\n```\n\n首先在 mbs 文件 中引入相关依赖模块：\n\n```javascript\n#!/usr/bin/env node\n\nconst { existsSync } = require('fs');//系统内置模块 主要用来操作文件\nconst program = require('commander');//自动的解析命令和参数，用于处理用户输入的命令。\nconst chalk = require('chalk');//给终端的字体加上颜色。\nconst symbols = require('log-symbols');//在终端上显示出 √ 或 × 等的图标。\n\nconst res = command => resolve(__dirname, '../commands/', command)\n```\n\n#### 配置 !/usr/bin/env node 的作用\n\n指定用 node 执行脚本文件 ,usr/bin/env 解决了不同的用户 node 路径不同的问题，可以让系统动态的去查找 node 来执行你的脚本文件。\n\n# nodejs 依赖模块介绍与用法\n\n## commander（指挥官）\n\n自动地解析命令和参数，用于处理用户输入的命令。\n\n-   usage(): 设置 usage 值\n\n-   command(): 定义一个命令名字\n\n-   description(): 设置 description 值\n\n-   option(): 定义参数，需要设置“关键字”和“描述”，关键字包括“简写”和“全写”两部分，以”,”,”|”,”空格”做分隔。\n\n-   parse(): 解析命令行参数 argv\n\n-   action(): 注册一个 callback 函数\n\n-   version() : 终端输出版本号\n\n```javascript\nPS D:\\yameiproject\\mbs-cli> mbs --help\nUsage: mbs <command>\n\nOptions:\n  -V, --version  output the version number\n  -h, --help     output usage information\n\nCommands:\n  add|a          Add a new template\n  init|i         Generate a new project\n  init|ins       Generate a simple project\n  create|c       Generate a new project\n  list|l         List all the templates\n```\n\n定义常规命令：\n\n```javascript\nconst program = require('commander');//自动的解析命令和参数，用于处理用户输入的命令。\n\nprogram\n  .usage('<command>')\n\nprogram\n  .version(require('../package').version )\n```\n\ninit 命令逻辑：\n\n```javascript\nprogram\n  .command('init <name>')\n  .description('Generate a new project')\n  .alias('i')\n  .action((name) => {\n    if(!existsSync(name)){\n        require(res('init'))\n    }else{\n      // 错误提示项目已存在，避免覆盖原有项目\n      console.log(symbols.error, chalk.red('Project already exists'));\n    }\n  })\n```\n\n处理用户输入命令：\n\n```javascript\nprogram\n  .command('init <name>')\n  .description('Generate a new project')\n  .alias('i')\n  .action((name) => {\n    if(!existsSync(name)){\n        require(res('init'))\n    }else{\n      // 错误提示项目已存在，避免覆盖原有项目\n      console.log(symbols.error, chalk.red('Project already exists'));\n    }\n  })\n```\n\n最后处理解析命令行参数 ：\n\n```javascript\nprogram.parse(process.argv);\n\n//process:一个全局对象,控制有关信息，控制node.js的进程\n//program.parse:解析命令之中的参数，根据上面定义好的规则执行相关命令\n//process.argv:该属性返回一个数组,这个数组包含了启动node.js进程时的命令行参数\n\nif(!program.args.length){\n  program.help();\n}\n```\n\n## inquirer（询问者）\n\n通用的命令行用户界面集合，用于和用户进行交互。由于交互的问题种类不同，inquirer 为每个问题提供很多参数：\n\n```\ntype：表示提问的类型，包括：input, confirm, list, rawlist, expand, checkbox, password, editor；\nname: 存储当前问题回答的变量；\nmessage：问题的描述；\ndefault：默认值；\nchoices：列表选项，在某些type下可用，并且包含一个分隔符(separator)；\nvalidate：对用户的回答进行校验；\nfilter：对用户的回答进行过滤处理，返回处理后的值；\nwhen：根据前面问题的回答，判断当前问题是否需要被回答；\nprefix：修改message默认前缀；\nsuffix：修改message默认后缀。\n```\n\n语法结构\n\n```javascript\nconst inquirer = require('inquirer');\n\nconst promptList = [\n    // 具体交互内容\n];\n\ninquirer.prompt(promptList).then(answers => {\n    console.log(answers); // 返回的结果\n})\n```\n\ninput 类型\n\n```javascript\nconst inquirer = require('inquirer');\ninquirer.prompt([\n    {\n        type: 'input',\n        name: 'author',\n        message: '请输入作者名称'\n    }\n]).then((answers) => {\n    console.log(answers.author);\n})\n\n效果：\n\n```\n\n效果：\n\nconfirm 类型\n\n```javascript\nconst promptList = [{\n    type: \"confirm\",\n    message: \"是否使用监听？\",\n    name: \"watch\",\n    prefix: \"前缀\"\n},{\n    type: \"confirm\",\n    message: \"是否进行文件过滤？\",\n    name: \"filter\",\n    suffix: \"后缀\",\n    when: function(answers) { // 当watch为true的时候才会提问当前问题\n        return answers.watch\n    }\n}];\n\n\n```\n\n效果：\n\n\nlist 类型\n\n```javascript\nconst promptList = [{\n    type: 'list',\n    message: '请选择一种水果:',\n    name: 'fruit',\n    choices: [\n        \"Apple\",\n        \"Pear\",\n        \"Banana\"\n    ],\n    filter: function (val) { // 使用filter将回答变为小写\n        return val.toLowerCase();\n    }\n}];\n```\n\n效果：\n\n\n## download-git-repo\n\ndownload-git-repo 支持从 Github、Gitlab 和 Bitbucket 下载仓库，\n\n```\ndownload(repository, destination, options, callback)\n```\n\nrepository\n\n```\n- GitHub - github:owner/name or simply owner/name\n- GitLab - gitlab:owner/name\n- Bitbucket - bitbucket:owner/name\n- Direct - direct:url:branch\n```\n\ndestination\n\n```\n The file path to download the repository to. xxxxxxxxxx \n```\n\noptions\n\n```\n boolean default false - If true use git clone instead of an http download. While this can be a bit slower, it does allow private repositories to be used if the appropriate SSH keys are setup.\n```\n\ncallback\n\n```\n The callback function as function (err).\n```\n\nexample:\n\n```\ndownload('direct:https://gitlab.com/flipxfx/download-git-repo-fixture/repository/archive.zip', 'test/tmp', function (err) {\n  console.log(err ? 'Error' : 'Success')\n})\n```\n\n#####\n\n## ora （loading 动效）\n\n用于显示下载中的动画效果\n\n```javascript\nconst ora = require('ora');\n// 开始下载\nconst spinner = ora('正在下载模板...');\nspinner.start();\n// 下载失败调用\nspinner.fail();\n// 下载成功调用\nspinner.succeed();\n```\n\n```\n\\ Downloading template...\n```\n\n## chalk（字体颜色）\n\n通过 chalk 来为打印信息加上样式，比如成功信息为绿色，失败信息为红色，这样子会让用户更加容易分辨，同时也让终端的显示更加的好看：\n\n```javascript\nconst chalk = require('chalk');\nconsole.log(chalk.green('项目创建成功'));\nconsole.log(chalk.red('项目创建失败'));const ora = require('ora');\n// 开始下载\nconst spinner = ora('正在下载模板...');\nspinner.start();\n// 下载失败调用\nspinner.fail();\n// 下载成功调用\nspinner.succeed();\n```\n\n## log-symbols（日志符号）\n\n使用 log-symbols 在信息前面加上 √ 或 × 等的图标，优化视觉体验：\n\n```javascript\nconsole.log(symbols.success, chalk.green('New project has been initialize successfully!'));\n```\n\n## handlebars\n\nhandlebars 可以对仓库的模板中的 package.json 文件做一些动态修改 :\n\n```javascript\n{\n  \"name\": \"{{name}}\",\n  \"version\": \"1.0.0\",\n  \"description\": \"{{description}}\",\n  \"scripts\": {\n    \"dev\": \"webpack-dev-server  --config build/webpack.dev.conf.js\",\n    \"start\": \"npm run dev\",\n    \"build\": \"node build/build.js\"\n  },\n  \"author\": \"{{author}}\",\n  \"license\": \"ISC\",\n  ...\n```\n\n并在下载模板完成之后将用户输入的答案渲染到 package.json 中\n\n```javascript\n\nconst fileName = \"./package.json;\"\nconst meta = {\n\t name,\n     description: answers.description,\n     author: answers.author\n }\n const content = readFileSync(fileName).toString();\nconst result = handlebars.compile(content)(meta);\nwriteFileSync(fileName, result);\n```\n\n## cli-table\n\n表格\n\n```javascript\nconst table = new Table({\n  head: ['Template Name', 'Branch', 'Url'],\n  style: {\n    head: ['green']\n  }\n})\n```\n\n\n### 3、配置**下载模板**\n\n```javascript\ndownload('http://git.ym/g-web/mbs-cli.git#master', jay/${name}, {clone: true}, (err) => {\n          if(err){\n            spinner.fail();\n            console.log(symbols.error, chalk.red(err));\n          }else{\n            spinner.succeed();\n            const fileName = `${name}/package.json`;\n            const meta = {\n              name,\n              description: answers.description,\n              author: answers.author\n            }\n            if(fs.existsSync(fileName)){\n              const content = fs.readFileSync(fileName).toString();\n              const result = handlebars.compile(content)(meta);\n              fs.writeFileSync(fileName, result);\n            }\n            console.log(symbols.success, chalk.green('Project initialization completed'));\n          }\n})\n```\n\n### 4、命令行交互\n\n命令行交互功能可以在用户执行 init 命令后，向用户提出问题，接收用户的输入并作出相应的处理。使用 inquirer.js 实现。\n\n```javascript\nlet tplList = require(`${__dirname}/../templates`)\n\nconst questions = [\n    {\n        type: 'input',\n        name: 'project',\n        message: 'Project name:',\n        validate (val) {\n          if (val !== '') {\n            return true\n          }\n          return 'Project name is required!'\n        }\n    },\n    {\n      type: 'input',\n      name: 'author',\n      message: 'Please enter the author name:'\n    },\n    {\n      type: 'input',\n      name: 'description',\n      message: 'Please enter a description of the project:',\n      default: 'a project do for you',\n    },\n    {\n      type: 'input',\n      name: 'place',\n      message: 'Where to init the project:',\n      default: './'\n    }\n  ]\n\nmodule.exports = prompt(questions).then(answers => {\n    const spinner = ora('Downloading template...');\n    spinner.start()\n    download(`direct:${tplList['template1']['url']}#${tplList['template1']['branch']}`, `${answers.place}/${answers.project}`, {clone: false}, (err) => {\n        if(err){\n            spinner.fail();\n            console.log(symbols.error, chalk.red(err));\n        }else{\n            spinner.succeed();\n            const fileName = `${answers.project}/package.json`;\n            const meta = {\n              name:answers.project,\n              description: answers.description,\n              author: answers.author\n            }\n            console.log(meta);\n            if(existsSync(fileName)){\n              const content = readFileSync(fileName).toString();\n              const result = handlebars.compile(content)(meta);\n              writeFileSync(fileName, result);\n            }\n            console.log(symbols.success, chalk.green('New project has been initialize successfully!'));\n        }\n    })\n})\n```\n\n### 5、渲染模板\n\n用 handlebars 的语法对 模板中的 package.json 文件做一些修改 ：\n\n```javascript\n{\n  \"name\": \"{{name}}\",\n  \"version\": \"1.0.0\",\n  \"description\": \"{{description}}\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"{{author}}\",\n  \"license\": \"ISC\"\n}\n```\n\n并在下载模板完成之后将用户输入的答案渲染到 package.json 中\n\n```javascript\nprogram.version('1.0.0', '-v, --version')\n.command('init <name>')\n.action((name) => {\n    inquirer.prompt([\n    {\n        name: 'description',\n        message: '请输入项目描述'\n    },\n    {\n        name: 'author',\n        message: '请输入作者名称'\n    }\n    ]).then((answers) => {\n        download('xxxxx#master',name,{clone: true},(err) => {\n            const meta = {\n                name,\n                description: answers.description,\n                author: answers.author\n            }\n            const fileName = `${name}/package.json`;\n            const content = fs.readFileSync(fileName).toString();\n            const result = handlebars.compile(content)(meta);\n            fs.writeFileSync(fileName, result);\n        })\n    })\n});\n```\n\n这里使用了 node.js 的文件模块 fs，将 handlebars 渲染完后的模板重新写入到文件中。\n\n### 6、视觉美化\n\n在用户输入答案之后，开始下载模板，这时候使用 ora 来提示用户正在下载中：\n\n```\nconst ora = require('ora');\n// 开始下载\nconst spinner = ora('正在下载模板...');\nspinner.start();\n// 下载失败调用\nspinner.fail();\n// 下载成功调用\nspinner.succeed();\n```\n\n# 简单版脚手架完整示例\n\n```javascript\n#!/usr/bin/env node\nconst fs = require('fs');//系统内置模块 主要用来操作文件\nconst program = require('commander');//自动的解析命令和参数，用于处理用户输入的命令。\nconst download = require('download-git-repo');//下载并提取 git 仓库，用于下载项目模板。\nconst handlebars = require('handlebars');//模板引擎，将用户提交的信息动态填充到文件中。\nconst inquirer = require('inquirer');//通用的命令行用户界面集合，用于和用户进行交互。\nconst ora = require('ora');//下载过程久的话，可以用于显示下载中的动画效果。\nconst chalk = require('chalk');//给终端的字体加上颜色。\nconst symbols = require('log-symbols');//在终端上显示出 √ 或 × 等的图标。\n\nprogram.version('1.0.4', '-v, --version')\n  .command('init <name>')\n  .action((name) => {\n    if(!fs.existsSync(name)){\n      inquirer.prompt([//prompt 提示\n        {\n          name: 'description',\n          message: 'Please enter a description of the project:'\n        },\n        {\n          name: 'author',\n          message: 'Please enter the author name:'\n        }\n      ]).then((answers) => {\n        const spinner = ora('Downloading template...');\n        spinner.start();\n        /**\n         * 一级目录  name\n         * 二级目录 jay/${name}\n         */\n        download('http://git.ym/g-web/mbs-cli.git#master', jay/${name}, {clone: true}, (err) => {\n          if(err){\n            spinner.fail();\n            console.log(symbols.error, chalk.red(err));\n          }else{\n            spinner.succeed();\n            const fileName = `${name}/package.json`;\n            const meta = {\n              name,\n              description: answers.description,\n              author: answers.author\n            }\n            if(fs.existsSync(fileName)){\n              const content = fs.readFileSync(fileName).toString();\n              const result = handlebars.compile(content)(meta);\n              fs.writeFileSync(fileName, result);\n            }\n            console.log(symbols.success, chalk.green('Project initialization completed'));\n          }\n        })\n      })\n    }else{\n      // 错误提示项目已存在，避免覆盖原有项目\n      console.log(symbols.error, chalk.red('Project already exists'));\n    }\n  })\nprogram.parse(process.argv);\n```\n\n# mbs-cli 核心命令\n\n```javascript\n  Commands:\n\n    add|a             Add a new template\n    list|l            List all the templates\n    init|i            Generate a new project\n    create|c          Generate a new project by choose a template\n    init simple|ins   Generate a simple project\n\n  Options:\n\n    -h, --help     output usage information\n    -V, --version  output the version number\n```\n\n#### 入口文件 mbs\n\n```javascript\n#!/usr/bin/env node\n\nprocess.env.NODE_PATH = __dirname + '/../node_modules/'\n\nconst { resolve } = require('path')\nconst chalk = require('chalk')\nconst { existsSync } = require('fs')\nconst symbols = require('log-symbols')\nconst program = require('commander')\n\nconst res = command => resolve(__dirname, '../commands/', command)\n\nprogram\n  .usage('<command>')\n\nprogram\n  .version(require('../package').version )\n\nprogram\n  .command('add')\n  .description('Add a new template')\n  .alias('a')\n  .action(() => {\n    require(res('add'))\n  })\n\n\n\nprogram\n  .command('init')\n  .description('Generate a new project')\n  .alias('i')\n  .action(() => {\n    require(res('init'))\n  })\n\nprogram\n  .command('create')\n  .description('Generate a new project')\n  .alias('c')\n  .action(() => {\n    require(res('create'))\n  })\n\n\nprogram\n  .command('list')\n  .description('List all the templates')\n  .alias('l')\n  .action(() => {\n    require(res('list'))\n  })\n\nprogram.parse(process.argv);\n\nif(!program.args.length){\n  program.help();//如果没有输入参数，终端显示帮助\n}\n```\n\n#### init 命令\n\n```javascript\nlet tplList = require(`${__dirname}/../templates`)\n\nconst questions = [\n    {\n        type: 'input',\n        name: 'project',\n        message: 'Project name:',\n        validate (val) {\n          if (val !== '') {\n            return true\n          }\n          return 'Project name is required!'\n        }\n    },\n    {\n      type: 'input',\n      name: 'author',\n      message: 'author name:'\n    },\n    {\n      type: 'input',\n      name: 'description',\n      message: 'description of the project:',\n      default: 'a simple spa project',\n    },\n    {\n      type: 'input',\n      name: 'place',\n      message: 'Where to init the project:',\n      default: './'\n    }\n  ]\n\nmodule.exports = prompt(questions).then(answers => {\n    const spinner = ora('Downloading template...');\n    spinner.start()\n    download(`direct:${tplList['template1']['url']}#${tplList['template1']['branch']}`, `${answers.place}/${answers.project}`, {clone: true}, (err) => {\n        if(err){\n            spinner.fail();\n            console.log(symbols.error, chalk.red(err));\n        }else{\n            spinner.succeed();\n            const fileName = `${answers.project}/package.json`;\n            const meta = {\n              name:answers.project,\n              description: answers.description,\n              author: answers.author\n            }\n            console.log(meta);\n            if(existsSync(fileName)){\n              console.log(\"come in...\")\n              const content = readFileSync(fileName).toString();\n              const result = handlebars.compile(content)(meta);\n              writeFileSync(fileName, result);\n            }\n            console.log(symbols.success, chalk.green('New project has been initialize successfully!'));\n        }\n    })\n})\n```\n\n#### init simple 命令\n\n```javascript\nlet tplList = require(`${__dirname}/../templates`)\n\nconst question = [\n    {\n        name: 'description',\n        message: 'Please enter a description of the project:'\n    },\n    {\n        name: 'author',\n        message: 'Please enter the author name:'\n    }\n]\n\nmodule.exports = prompt(question).then((answers) => {\n    const spinner = ora('Downloading template...');\n    spinner.start()\n    download(`direct:${tplList['template2']['url']}#${tplList['template2']['branch']}`, `./${name}`, {clone: true}, (err) => {\n        if(err){\n            spinner.fail();\n            console.log(symbols.error, chalk.red(err));\n        }else{\n            spinner.succeed();\n            const fileName = `${name}/package.json`;\n            const meta = {\n              name,\n              description: answers.description,\n              author: answers.author\n            }\n            if(existsSync(fileName)){\n              const content = readFileSync(fileName).toString();\n              const result = handlebars.compile(content)(meta);\n              writeFileSync(fileName, result);\n            }\n            console.log(symbols.success, chalk.green('Project initialization completed'));\n        }\n    })\n})\n```\n\n#### create 命令\n\n```javascript\nlet templateList = require(`${__dirname}/../templates`)\nlet rmTempList = require(`${__dirname}/../config/remote-templates`)\n\nconst choices = rmTempList.map(template=>{\n  return {\n    name:`${template.name} - ${template.description}`,\n    value:template.name\n  }\n})\n\nconst questions = [\n    {\n        type: 'input',\n        name: 'project',\n        message: 'Project name:',\n        validate (val) {\n          if (val !== '') {\n            return true\n          }\n          return 'Project name is required!'\n        }\n    },\n    {\n        type: 'list',\n        name: 'template',\n        choices,\n        message: 'Choose template you want:',\n        validate (val) {\n          if (val !== '') {\n            return true\n          }\n          return 'template name is required!'\n        }\n    },\n    {\n      type: 'input',\n      name: 'author',\n      message: 'author name:'\n    },\n    {\n      type: 'input',\n      name: 'description',\n      message: 'description of the project:',\n      default: '',\n    },\n    {\n      type: 'input',\n      name: 'place',\n      message: 'Where to init the project:',\n      default: './'\n    }\n  ]\n\nmodule.exports = prompt(questions).then(answers => {\n    const spinner = ora('Downloading template...');\n    spinner.start()\n    const template = rmTempList.filter(item =>{\n      return answers.template.includes(item.name) && item;\n    })[0];\n    download(`direct:${template.url}#${template.branch}`, `${answers.place}/${answers.project}`, {clone: true}, (err) => {\n        if(err){\n            spinner.fail();\n            console.log(symbols.error, chalk.red(err));\n        }else{\n            spinner.succeed();\n            const fileName = `${answers.project}/package.json`;\n            const meta = {\n              name:answers.project,\n              description: answers.description,\n              author: answers.author\n            }\n            console.log(meta);\n            if(existsSync(fileName)){\n              const content = readFileSync(fileName).toString();\n              const result = handlebars.compile(content)(meta);\n              writeFileSync(fileName, result);\n            }\n            console.log(symbols.success, chalk.green('New project has been initialize successfully!'));\n        }\n    })\n})\n```\n\n效果\n\n```\n$ mbs create\n\n? Project name: demo\n? Choose template you want: (Use arrow keys)\n> vue-webpack-pc - 基于webpack构建的vue项目模板\n  react-webpack-pc - 基于webpack构建的react项目模板\n  angular-webpack-pc - 基于webpack构建的angular项目模板\n  discover your template - 更多海量模板等你发掘与收藏.\n? Choose template you want: vue-webpack-pc - 基于webpack构建的vue项目模板\n? Please enter the author name: jay\n? Please enter a description of the project: a simple spa project\n? Where to init the project: ./\n√ Downloading template...\n√ New project has been initialize successfully!\n```\n\n#### add 命令\n\n```javascript\nconst { prompt } = require('inquirer')\nconst { writeFile } = require('fs')\nconst { showTable } = require(`${__dirname}/../utils`)\n\nlet tempList = require(`${__dirname}/../templates`)\n\nconst question = [\n  {\n    type: 'input',\n    name: 'name',\n    message: 'Set the custom name of the template:',\n    validate (val) {\n      if (tempList[val]) {\n        return 'Template is existed!'\n      } else if (val === '') {\n        return 'Name is required!'\n      } else {\n        return true\n      }\n    }\n  },\n  {\n    type: 'input',\n    name: 'branch',\n    message: 'branch of the template:',\n    validate (val) {\n      if (val !== '') {\n        return true\n      }\n      return 'branch is required!'\n    }\n  },\n  {\n    type: 'input',\n    name: 'url',\n    message: 'Url of the template:',\n    validate (val) {\n      if (val !== '') {\n        return true\n      }\n      return 'Url is required!'\n    }\n  }\n]\n\nmodule.exports = prompt(question).then(({ name, branch, url }) => {\n  tempList[name] = {}\n  tempList[name]['branch'] = branch\n  tempList[name]['url'] = url\n\n  writeFile(`${__dirname}/../templates.json`, JSON.stringify(tempList), 'utf-8', (err) => {\n    if (err) {\n      console.log(err)\n    }\n    showTable(tempList, 'New template has been added successfully!')\n  })\n})\n\n```\n\n效果\n\n```\n$ mbs add\n\n? Set the custom name of the template: template1\n? branch of the template: master\n? Url of the template: http://git.ym/Chenmh/bs-init-template.git\n┌───────────────┬────────┬───────────────────────────────────────────┐\n│ Template Name │ Branch │ Url                                       │\n├───────────────┼────────┼───────────────────────────────────────────┤\n│ template1     │ master │ http://git.ym/Chenmh/bs-init-template.git │\n└───────────────┴────────┴───────────────────────────────────────────┘\n✔ New template has been added successfully!\n```\n\n`mbs` use [download-git-repo](https://github.com/flipxfx/download-git-repo) to down load git repos. After answering 3 questions, you'll add a new template to `mbs`.\n\n#### list 命令\n\n```javascript\nconst { showTable } = require(`${__dirname}/../utils`)\n\nlet tempList = require(`${__dirname}/../templates`)\n\nmodule.exports = showTable(tempList)\n```\n\n```javascript\nfunction showTable (tempList) {\n  const list = Object.keys(tempList)\n  if (list.length) {\n    list.forEach((key) => {\n      table.push([key, tempList[key]['branch'], tempList[key]['url']])\n      if (table.length === list.length) {\n        process.exit()\n      }\n    })\n  } else {\n    console.log(table.toString())\n    process.exit()\n  }\n}\n```\n\n效果\n\n```\n$ mbs list\n\n┌───────────────┬──────────┬───────────────────────────────────────────┐\n│ Template Name │ Branch   │ Url                                       │\n├───────────────┼──────────┼───────────────────────────────────────────┤\n│ template1     │ standard │ http://git.ym/Chenmh/bs-init-template.git │\n├───────────────┼──────────┼───────────────────────────────────────────┤\n│ template2     │ simple   │ http://git.ym/Chenmh/bs-init-template.git │\n└───────────────┴──────────┴───────────────────────────────────────────┘\n```\n\nutils.js\n\n```javascript\nconst Table = require('cli-table')\nconst chalk = require('chalk')\n\nconst table = new Table({\n  head: ['Template Name', 'Branch', 'Url'],\n  style: {\n    head: ['green']\n  }\n})\n\nfunction showTable (tempList, Exp) {\n  const list = Object.keys(tempList)\n  if (list.length) {\n    list.forEach((key) => {\n      table.push([key, tempList[key]['branch'], tempList[key]['url']])\n      if (table.length === list.length) {\n        console.log(table.toString())\n        if (Exp) {\n          console.log(chalk.green(`\\u2714 ${Exp}`))\n        }\n        process.exit()\n      }\n    })\n  } else {\n    console.log(table.toString())\n    if (Exp) {\n      console.log(chalk.green(`\\u2714 ${Exp}`))\n    }\n    process.exit()\n  }\n}\n\nexports.showTable = showTable\n\n```\n\n#脚手架发布\n\n### npm 登录\n\n```\nPS D:\\yameiproject\\mbs-cli> npm login\nUsername: chenyumen\nPassword:\nEmail: (this IS public) 13172050157@126.com\nLogged in as chenyumen on https://registry.npmjs.org/.\n```\n\n### npm 发布\n\n```\nPS D:\\yameiproject\\mbs-cli> npm publish\nnpm notice\nnpm notice package: mbs-cli@1.0.4\nnpm notice === Tarball Contents ===\nnpm notice 573B  package.json\nnpm notice 2.5kB index.js\nnpm notice 193B  脚手架.md\nnpm notice === Tarball Details ===\nnpm notice name:          mbs-cli\nnpm notice version:       1.0.4\nnpm notice package size:  1.8 kB\nnpm notice total files:   3\nnpm notice\n+ mbs-cli@1.0.4\n```\n\n# 本地 npm 模块调试\n\n### 开启调试模式\n\n`npm link`命令可以将一个任意位置的`npm包`链接到全局执行环境，从而在任意位置使用命令行都可以直接运行该 npm 包。\n\n```\nC:\\Users\\yamei\\AppData\\Roaming\\npm\\mbs -> C:\\Users\\yamei\\AppData\\Roaming\\npm\\node_modules\\mbs-cli\\bin\\mbs\nC:\\Users\\yamei\\AppData\\Roaming\\npm\\node_modules\\mbs-cli -> D:\\yameiproject\\mbs-cli\n```\n\n### 关闭调试模式\n\n如果你的项目不再需要该模块，可以在项目目录内使用 npm unlink 命令，删除符号链接\n\n# 延申\n\n1、丰富命令行交互，以适应更多变的需求。\n\n2、webpack 配置文件隐藏优化。\n\n\n# 模板集成常用功能\n\n-   登录、注销\n-   DashBord\n-   表格\n-   Tab 选项卡\n-   图表\n-   富文本编辑器\n-   三级菜单\n-   国际化\n-   图片拖拽、裁剪上传\n-   列表拖拽排序\n-   权限管理\n-   404/403/500\n\n# 模板项目结构\n\n├── build 构建服务和 webpack 配置\n|—— build.js webpack 打包服务\n|—— webpack.base.conf.js webpack 基本通用配置\n|—— webpack.dev.conf.js webpack 开发环境配置\n|—— webpack.prod.conf.js webpack 生产环境配置\n├── config 构建项目不同环境的配置\n├── public 项目打包文件存放目录\n├── index.html 项目入口文件\n├── package.json 项目配置文件\n├── .babelrc babel 配置文件\n├── .gitignore git 忽略文件\n├── postcss.config.js postcss 配置文件\n├── src 项目目录\n├── assets 静态资源  \n ├── components 集成组件目录  \n |—— json json 目录\n|—— lang 中英文目录\n|—— router vue 路由配置\n|—— service ajax 请求配置\n|—— store vuex 配置\n|—— styles 公共样式\n|—— utils 工具类\n|—— views 页面组件目录\n|—— App.vue vue 实例入口\n|—— main.js 项目构建入口\n","slug":"脚手架集成","published":1,"updated":"2021-03-01T03:47:26.033Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmejaetv003excvr53l95ix1","content":"<h1 id=\"为什么需要脚手架？\"><a href=\"#为什么需要脚手架？\" class=\"headerlink\" title=\"为什么需要脚手架？\"></a>为什么需要脚手架？</h1><p>1、减少重复性的工作，不再需要复制其他项目再删除无关代码，或者从零创建一个项目和文件 。<br>2、根据交互动态生成项目结构和配置文件,具备更高的灵活性和人性化定制的能力 。<br>3、多人协作更为方便，避免了人工传递文件的繁琐。<br>4、集成互联网上的模板，方便自己与他人使用。</p>\n<span id=\"more\"></span>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>开发脚手架可以借鉴 vue-cli 的基本思路。vue-cli 是将项目模板放在 git 上，运行的时候再根据用户交互下载不同的模板，经过模板引擎渲染出来，生成项目。这样讲脚手架和模板分离，就可以各自维护，即使模板有所变动，只需要上传最新的模板即可，而不需要用户去更新脚手架就可以生成最新的项目。</p>\n<h1 id=\"脚手架工作流\"><a href=\"#脚手架工作流\" class=\"headerlink\" title=\"脚手架工作流\"></a>脚手架工作流</h1><p><img src=\"https://image-static.segmentfault.com/409/200/409200816-5ab3668b4996f_articlex\" alt=\"network\"></p>\n<h1 id=\"脚手架问答流\"><a href=\"#脚手架问答流\" class=\"headerlink\" title=\"脚手架问答流\"></a>脚手架问答流</h1><pre><code>PS D:\\test&gt; vue create demo1\n</code></pre>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">? Please pick a preset: Manually select features</span><br><span class=\"line\">? Check the features needed for your project: Babel, Router, Vuex, CSS Pre-processors, Linter</span><br><span class=\"line\">? Use history mode for router? (Requires proper server setup for index fallback in production) Yes</span><br><span class=\"line\">? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): Less</span><br><span class=\"line\">? Pick a linter &#x2F; formatter config: Basic</span><br><span class=\"line\">? Pick additional lint features: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)Lint on save</span><br><span class=\"line\">? Where do you prefer placing config for Babel, PostCSS, ESLint, etc.? In package.json</span><br><span class=\"line\">? Save this as a preset for future projects? Yes</span><br><span class=\"line\">? Save preset as: preset1</span><br><span class=\"line\"></span><br><span class=\"line\">📄  Generating README.md...</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">🎉  Successfully created project demo1.</span><br><span class=\"line\">👉  Get started with the following commands:</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"如何搭建一个脚手架？\"><a href=\"#如何搭建一个脚手架？\" class=\"headerlink\" title=\"如何搭建一个脚手架？\"></a>如何搭建一个脚手架？</h1><p><img src=\"/images/cli/%E8%84%9A%E6%89%8B%E6%9E%B6%E6%9E%84%E5%BB%BA%E6%B5%81%E7%A8%8B.png\" alt=\"network\"></p>\n<h1 id=\"第三方库的支持\"><a href=\"#第三方库的支持\" class=\"headerlink\" title=\"第三方库的支持\"></a>第三方库的支持</h1><p><img src=\"/images/cli/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E6%94%AF%E6%8C%81.png\" alt=\"network\"></p>\n<p>会使用到的第三方库</p>\n<ul>\n<li>commander.js:可以自动解析命令和参数，用于处理用户输入的命令</li>\n<li>download-git-repo:下载并提取git仓库，用于下载项目模板</li>\n<li>inquirer.js:通过命令行用户界面集合，用于和用户进行交互</li>\n<li>handlebars.js:模板引擎，将用户提交的信息动态填充到文件中</li>\n<li>ora:下载过程久的话，可以用于显示下载中的动画效果</li>\n<li>chalk:可以给终端的字体加上颜色</li>\n<li>log-symbols:可以在终端上显示√或×等图标</li>\n</ul>\n<h1 id=\"搭建步骤：\"><a href=\"#搭建步骤：\" class=\"headerlink\" title=\"搭建步骤：\"></a>搭建步骤：</h1><h3 id=\"1、初始化项目\"><a href=\"#1、初始化项目\" class=\"headerlink\" title=\"1、初始化项目\"></a>1、初始化项目</h3><p>首先创建一个空项目，命名为 mbs-cli，然后新建一个 bin/mbs 文件，再执行 npm init 生成一个 package.json 文件。最后安装上面需要用到的依赖。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install commander download-git-repo inquirer handlebars ora chalk log-symbols cli-table -S</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、处理命令行\"><a href=\"#2、处理命令行\" class=\"headerlink\" title=\"2、处理命令行\"></a>2、处理命令行</h3><p>node.js 内置了对命令行操作的支持，在 package.json 中的 bin 字段可以定义命令名和关联的执行文件。</p>\n<p>在 package.json 中加上 bin 的内容：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"string\">&quot;name&quot;</span>: “mbs-cli<span class=\"string\">&quot;,</span></span><br><span class=\"line\"><span class=\"string\">\t&quot;</span>version<span class=\"string\">&quot;: &quot;</span><span class=\"number\">1.0</span><span class=\"number\">.0</span><span class=\"string\">&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;</span>description<span class=\"string\">&quot;: &quot;</span>中后台系统脚手架<span class=\"string\">&quot;,</span></span><br><span class=\"line\"><span class=\"string\">\t&quot;</span>bin<span class=\"string\">&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\t&quot;</span>mbs<span class=\"string\">&quot;: &quot;</span>bin/mbs<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">     &#125;</span></span><br><span class=\"line\"><span class=\"string\"> &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>首先在 mbs 文件 中引入相关依赖模块：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; existsSync &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>);<span class=\"comment\">//系统内置模块 主要用来操作文件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> program = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;commander&#x27;</span>);<span class=\"comment\">//自动的解析命令和参数，用于处理用户输入的命令。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> chalk = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;chalk&#x27;</span>);<span class=\"comment\">//给终端的字体加上颜色。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> symbols = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;log-symbols&#x27;</span>);<span class=\"comment\">//在终端上显示出 √ 或 × 等的图标。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> res = <span class=\"function\"><span class=\"params\">command</span> =&gt;</span> resolve(__dirname, <span class=\"string\">&#x27;../commands/&#x27;</span>, command)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置-usr-bin-env-node-的作用\"><a href=\"#配置-usr-bin-env-node-的作用\" class=\"headerlink\" title=\"配置 !/usr/bin/env node 的作用\"></a>配置 !/usr/bin/env node 的作用</h4><p>指定用 node 执行脚本文件 ,usr/bin/env 解决了不同的用户 node 路径不同的问题，可以让系统动态的去查找 node 来执行你的脚本文件。</p>\n<h1 id=\"nodejs-依赖模块介绍与用法\"><a href=\"#nodejs-依赖模块介绍与用法\" class=\"headerlink\" title=\"nodejs 依赖模块介绍与用法\"></a>nodejs 依赖模块介绍与用法</h1><h2 id=\"commander（指挥官）\"><a href=\"#commander（指挥官）\" class=\"headerlink\" title=\"commander（指挥官）\"></a>commander（指挥官）</h2><p>自动地解析命令和参数，用于处理用户输入的命令。</p>\n<ul>\n<li><p>  usage(): 设置 usage 值</p>\n</li>\n<li><p>  command(): 定义一个命令名字</p>\n</li>\n<li><p>  description(): 设置 description 值</p>\n</li>\n<li><p>  option(): 定义参数，需要设置“关键字”和“描述”，关键字包括“简写”和“全写”两部分，以”,”,”|”,”空格”做分隔。</p>\n</li>\n<li><p>  parse(): 解析命令行参数 argv</p>\n</li>\n<li><p>  action(): 注册一个 callback 函数</p>\n</li>\n<li><p>  version() : 终端输出版本号</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS D:\\yameiproject\\mbs-cli&gt; mbs --help</span><br><span class=\"line\">Usage: mbs &lt;command&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -V, --version  output the version number</span><br><span class=\"line\">  -h, --help     output usage information</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\">  add|a          Add a <span class=\"keyword\">new</span> template</span><br><span class=\"line\">  init|i         Generate a <span class=\"keyword\">new</span> project</span><br><span class=\"line\">  init|ins       Generate a simple project</span><br><span class=\"line\">  create|c       Generate a <span class=\"keyword\">new</span> project</span><br><span class=\"line\">  list|l         List all the templates</span><br></pre></td></tr></table></figure>\n\n<p>定义常规命令：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> program = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;commander&#x27;</span>);<span class=\"comment\">//自动的解析命令和参数，用于处理用户输入的命令。</span></span><br><span class=\"line\"></span><br><span class=\"line\">program</span><br><span class=\"line\">  .usage(<span class=\"string\">&#x27;&lt;command&gt;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">program</span><br><span class=\"line\">  .version(<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../package&#x27;</span>).version )</span><br></pre></td></tr></table></figure>\n\n<p>init 命令逻辑：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">program</span><br><span class=\"line\">  .command(<span class=\"string\">&#x27;init &lt;name&gt;&#x27;</span>)</span><br><span class=\"line\">  .description(<span class=\"string\">&#x27;Generate a new project&#x27;</span>)</span><br><span class=\"line\">  .alias(<span class=\"string\">&#x27;i&#x27;</span>)</span><br><span class=\"line\">  .action(<span class=\"function\">(<span class=\"params\">name</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!existsSync(name))&#123;</span><br><span class=\"line\">        <span class=\"built_in\">require</span>(res(<span class=\"string\">&#x27;init&#x27;</span>))</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 错误提示项目已存在，避免覆盖原有项目</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(symbols.error, chalk.red(<span class=\"string\">&#x27;Project already exists&#x27;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>处理用户输入命令：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">program</span><br><span class=\"line\">  .command(<span class=\"string\">&#x27;init &lt;name&gt;&#x27;</span>)</span><br><span class=\"line\">  .description(<span class=\"string\">&#x27;Generate a new project&#x27;</span>)</span><br><span class=\"line\">  .alias(<span class=\"string\">&#x27;i&#x27;</span>)</span><br><span class=\"line\">  .action(<span class=\"function\">(<span class=\"params\">name</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!existsSync(name))&#123;</span><br><span class=\"line\">        <span class=\"built_in\">require</span>(res(<span class=\"string\">&#x27;init&#x27;</span>))</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 错误提示项目已存在，避免覆盖原有项目</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(symbols.error, chalk.red(<span class=\"string\">&#x27;Project already exists&#x27;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>最后处理解析命令行参数 ：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">program.parse(process.argv);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//process:一个全局对象,控制有关信息，控制node.js的进程</span></span><br><span class=\"line\"><span class=\"comment\">//program.parse:解析命令之中的参数，根据上面定义好的规则执行相关命令</span></span><br><span class=\"line\"><span class=\"comment\">//process.argv:该属性返回一个数组,这个数组包含了启动node.js进程时的命令行参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!program.args.length)&#123;</span><br><span class=\"line\">  program.help();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"inquirer（询问者）\"><a href=\"#inquirer（询问者）\" class=\"headerlink\" title=\"inquirer（询问者）\"></a>inquirer（询问者）</h2><p>通用的命令行用户界面集合，用于和用户进行交互。由于交互的问题种类不同，inquirer 为每个问题提供很多参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type：表示提问的类型，包括：input, confirm, list, rawlist, expand, checkbox, password, editor；</span><br><span class=\"line\">name: 存储当前问题回答的变量；</span><br><span class=\"line\">message：问题的描述；</span><br><span class=\"line\">default：默认值；</span><br><span class=\"line\">choices：列表选项，在某些type下可用，并且包含一个分隔符(separator)；</span><br><span class=\"line\">validate：对用户的回答进行校验；</span><br><span class=\"line\">filter：对用户的回答进行过滤处理，返回处理后的值；</span><br><span class=\"line\">when：根据前面问题的回答，判断当前问题是否需要被回答；</span><br><span class=\"line\">prefix：修改message默认前缀；</span><br><span class=\"line\">suffix：修改message默认后缀。</span><br></pre></td></tr></table></figure>\n\n<p>语法结构</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> inquirer = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;inquirer&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> promptList = [</span><br><span class=\"line\">    <span class=\"comment\">// 具体交互内容</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">inquirer.prompt(promptList).then(<span class=\"function\"><span class=\"params\">answers</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(answers); <span class=\"comment\">// 返回的结果</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>input 类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> inquirer = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;inquirer&#x27;</span>);</span><br><span class=\"line\">inquirer.prompt([</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        type: <span class=\"string\">&#x27;input&#x27;</span>,</span><br><span class=\"line\">        name: <span class=\"string\">&#x27;author&#x27;</span>,</span><br><span class=\"line\">        message: <span class=\"string\">&#x27;请输入作者名称&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]).then(<span class=\"function\">(<span class=\"params\">answers</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(answers.author);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">效果：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<p>confirm 类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promptList = [&#123;</span><br><span class=\"line\">    type: <span class=\"string\">&quot;confirm&quot;</span>,</span><br><span class=\"line\">    message: <span class=\"string\">&quot;是否使用监听？&quot;</span>,</span><br><span class=\"line\">    name: <span class=\"string\">&quot;watch&quot;</span>,</span><br><span class=\"line\">    prefix: <span class=\"string\">&quot;前缀&quot;</span></span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">    type: <span class=\"string\">&quot;confirm&quot;</span>,</span><br><span class=\"line\">    message: <span class=\"string\">&quot;是否进行文件过滤？&quot;</span>,</span><br><span class=\"line\">    name: <span class=\"string\">&quot;filter&quot;</span>,</span><br><span class=\"line\">    suffix: <span class=\"string\">&quot;后缀&quot;</span>,</span><br><span class=\"line\">    when: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">answers</span>) </span>&#123; <span class=\"comment\">// 当watch为true的时候才会提问当前问题</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> answers.watch</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<p>list 类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promptList = [&#123;</span><br><span class=\"line\">    type: <span class=\"string\">&#x27;list&#x27;</span>,</span><br><span class=\"line\">    message: <span class=\"string\">&#x27;请选择一种水果:&#x27;</span>,</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;fruit&#x27;</span>,</span><br><span class=\"line\">    choices: [</span><br><span class=\"line\">        <span class=\"string\">&quot;Apple&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Pear&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Banana&quot;</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    filter: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123; <span class=\"comment\">// 使用filter将回答变为小写</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> val.toLowerCase();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<h2 id=\"download-git-repo\"><a href=\"#download-git-repo\" class=\"headerlink\" title=\"download-git-repo\"></a>download-git-repo</h2><p>download-git-repo 支持从 Github、Gitlab 和 Bitbucket 下载仓库，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">download(repository, destination, options, callback)</span><br></pre></td></tr></table></figure>\n\n<p>repository</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- GitHub - github:owner&#x2F;name or simply owner&#x2F;name</span><br><span class=\"line\">- GitLab - gitlab:owner&#x2F;name</span><br><span class=\"line\">- Bitbucket - bitbucket:owner&#x2F;name</span><br><span class=\"line\">- Direct - direct:url:branch</span><br></pre></td></tr></table></figure>\n\n<p>destination</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The file path to download the repository to. xxxxxxxxxx </span><br></pre></td></tr></table></figure>\n\n<p>options</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean default false - If true use git clone instead of an http download. While this can be a bit slower, it does allow private repositories to be used if the appropriate SSH keys are setup.</span><br></pre></td></tr></table></figure>\n\n<p>callback</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The callback function as function (err).</span><br></pre></td></tr></table></figure>\n\n<p>example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">download(&#39;direct:https:&#x2F;&#x2F;gitlab.com&#x2F;flipxfx&#x2F;download-git-repo-fixture&#x2F;repository&#x2F;archive.zip&#39;, &#39;test&#x2F;tmp&#39;, function (err) &#123;</span><br><span class=\"line\">  console.log(err ? &#39;Error&#39; : &#39;Success&#39;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h5><h2 id=\"ora-（loading-动效）\"><a href=\"#ora-（loading-动效）\" class=\"headerlink\" title=\"ora （loading 动效）\"></a>ora （loading 动效）</h2><p>用于显示下载中的动画效果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ora = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;ora&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 开始下载</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> spinner = ora(<span class=\"string\">&#x27;正在下载模板...&#x27;</span>);</span><br><span class=\"line\">spinner.start();</span><br><span class=\"line\"><span class=\"comment\">// 下载失败调用</span></span><br><span class=\"line\">spinner.fail();</span><br><span class=\"line\"><span class=\"comment\">// 下载成功调用</span></span><br><span class=\"line\">spinner.succeed();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\ Downloading template...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"chalk（字体颜色）\"><a href=\"#chalk（字体颜色）\" class=\"headerlink\" title=\"chalk（字体颜色）\"></a>chalk（字体颜色）</h2><p>通过 chalk 来为打印信息加上样式，比如成功信息为绿色，失败信息为红色，这样子会让用户更加容易分辨，同时也让终端的显示更加的好看：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> chalk = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;chalk&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(chalk.green(<span class=\"string\">&#x27;项目创建成功&#x27;</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(chalk.red(<span class=\"string\">&#x27;项目创建失败&#x27;</span>));<span class=\"keyword\">const</span> ora = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;ora&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 开始下载</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> spinner = ora(<span class=\"string\">&#x27;正在下载模板...&#x27;</span>);</span><br><span class=\"line\">spinner.start();</span><br><span class=\"line\"><span class=\"comment\">// 下载失败调用</span></span><br><span class=\"line\">spinner.fail();</span><br><span class=\"line\"><span class=\"comment\">// 下载成功调用</span></span><br><span class=\"line\">spinner.succeed();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"log-symbols（日志符号）\"><a href=\"#log-symbols（日志符号）\" class=\"headerlink\" title=\"log-symbols（日志符号）\"></a>log-symbols（日志符号）</h2><p>使用 log-symbols 在信息前面加上 √ 或 × 等的图标，优化视觉体验：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(symbols.success, chalk.green(<span class=\"string\">&#x27;New project has been initialize successfully!&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"handlebars\"><a href=\"#handlebars\" class=\"headerlink\" title=\"handlebars\"></a>handlebars</h2><p>handlebars 可以对仓库的模板中的 package.json 文件做一些动态修改 :</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;&#123;&#123;name&#125;&#125;&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;version&quot;</span>: <span class=\"string\">&quot;1.0.0&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;description&quot;</span>: <span class=\"string\">&quot;&#123;&#123;description&#125;&#125;&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;dev&quot;</span>: <span class=\"string\">&quot;webpack-dev-server  --config build/webpack.dev.conf.js&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;start&quot;</span>: <span class=\"string\">&quot;npm run dev&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;build&quot;</span>: <span class=\"string\">&quot;node build/build.js&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;author&quot;</span>: <span class=\"string\">&quot;&#123;&#123;author&#125;&#125;&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;license&quot;</span>: <span class=\"string\">&quot;ISC&quot;</span>,</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n\n<p>并在下载模板完成之后将用户输入的答案渲染到 package.json 中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fileName = <span class=\"string\">&quot;./package.json;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> meta = &#123;</span><br><span class=\"line\">\t name,</span><br><span class=\"line\">     description: answers.description,</span><br><span class=\"line\">     author: answers.author</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">const</span> content = readFileSync(fileName).toString();</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = handlebars.compile(content)(meta);</span><br><span class=\"line\">writeFileSync(fileName, result);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"cli-table\"><a href=\"#cli-table\" class=\"headerlink\" title=\"cli-table\"></a>cli-table</h2><p>表格</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> table = <span class=\"keyword\">new</span> Table(&#123;</span><br><span class=\"line\">  head: [<span class=\"string\">&#x27;Template Name&#x27;</span>, <span class=\"string\">&#x27;Branch&#x27;</span>, <span class=\"string\">&#x27;Url&#x27;</span>],</span><br><span class=\"line\">  style: &#123;</span><br><span class=\"line\">    head: [<span class=\"string\">&#x27;green&#x27;</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"3、配置下载模板\"><a href=\"#3、配置下载模板\" class=\"headerlink\" title=\"3、配置下载模板\"></a>3、配置<strong>下载模板</strong></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">download(<span class=\"string\">&#x27;http://git.ym/g-web/mbs-cli.git#master&#x27;</span>, jay/$&#123;name&#125;, &#123;<span class=\"attr\">clone</span>: <span class=\"literal\">true</span>&#125;, <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">            spinner.fail();</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(symbols.error, chalk.red(err));</span><br><span class=\"line\">          &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            spinner.succeed();</span><br><span class=\"line\">            <span class=\"keyword\">const</span> fileName = <span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span>/package.json`</span>;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> meta = &#123;</span><br><span class=\"line\">              name,</span><br><span class=\"line\">              description: answers.description,</span><br><span class=\"line\">              author: answers.author</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(fs.existsSync(fileName))&#123;</span><br><span class=\"line\">              <span class=\"keyword\">const</span> content = fs.readFileSync(fileName).toString();</span><br><span class=\"line\">              <span class=\"keyword\">const</span> result = handlebars.compile(content)(meta);</span><br><span class=\"line\">              fs.writeFileSync(fileName, result);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(symbols.success, chalk.green(<span class=\"string\">&#x27;Project initialization completed&#x27;</span>));</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、命令行交互\"><a href=\"#4、命令行交互\" class=\"headerlink\" title=\"4、命令行交互\"></a>4、命令行交互</h3><p>命令行交互功能可以在用户执行 init 命令后，向用户提出问题，接收用户的输入并作出相应的处理。使用 inquirer.js 实现。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> tplList = <span class=\"built_in\">require</span>(<span class=\"string\">`<span class=\"subst\">$&#123;__dirname&#125;</span>/../templates`</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> questions = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        type: <span class=\"string\">&#x27;input&#x27;</span>,</span><br><span class=\"line\">        name: <span class=\"string\">&#x27;project&#x27;</span>,</span><br><span class=\"line\">        message: <span class=\"string\">&#x27;Project name:&#x27;</span>,</span><br><span class=\"line\">        validate (val) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (val !== <span class=\"string\">&#x27;&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Project name is required!&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      type: <span class=\"string\">&#x27;input&#x27;</span>,</span><br><span class=\"line\">      name: <span class=\"string\">&#x27;author&#x27;</span>,</span><br><span class=\"line\">      message: <span class=\"string\">&#x27;Please enter the author name:&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      type: <span class=\"string\">&#x27;input&#x27;</span>,</span><br><span class=\"line\">      name: <span class=\"string\">&#x27;description&#x27;</span>,</span><br><span class=\"line\">      message: <span class=\"string\">&#x27;Please enter a description of the project:&#x27;</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"string\">&#x27;a project do for you&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      type: <span class=\"string\">&#x27;input&#x27;</span>,</span><br><span class=\"line\">      name: <span class=\"string\">&#x27;place&#x27;</span>,</span><br><span class=\"line\">      message: <span class=\"string\">&#x27;Where to init the project:&#x27;</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"string\">&#x27;./&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = prompt(questions).then(<span class=\"function\"><span class=\"params\">answers</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> spinner = ora(<span class=\"string\">&#x27;Downloading template...&#x27;</span>);</span><br><span class=\"line\">    spinner.start()</span><br><span class=\"line\">    download(<span class=\"string\">`direct:<span class=\"subst\">$&#123;tplList[<span class=\"string\">&#x27;template1&#x27;</span>][<span class=\"string\">&#x27;url&#x27;</span>]&#125;</span>#<span class=\"subst\">$&#123;tplList[<span class=\"string\">&#x27;template1&#x27;</span>][<span class=\"string\">&#x27;branch&#x27;</span>]&#125;</span>`</span>, <span class=\"string\">`<span class=\"subst\">$&#123;answers.place&#125;</span>/<span class=\"subst\">$&#123;answers.project&#125;</span>`</span>, &#123;<span class=\"attr\">clone</span>: <span class=\"literal\">false</span>&#125;, <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">            spinner.fail();</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(symbols.error, chalk.red(err));</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            spinner.succeed();</span><br><span class=\"line\">            <span class=\"keyword\">const</span> fileName = <span class=\"string\">`<span class=\"subst\">$&#123;answers.project&#125;</span>/package.json`</span>;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> meta = &#123;</span><br><span class=\"line\">              name:answers.project,</span><br><span class=\"line\">              description: answers.description,</span><br><span class=\"line\">              author: answers.author</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(meta);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(existsSync(fileName))&#123;</span><br><span class=\"line\">              <span class=\"keyword\">const</span> content = readFileSync(fileName).toString();</span><br><span class=\"line\">              <span class=\"keyword\">const</span> result = handlebars.compile(content)(meta);</span><br><span class=\"line\">              writeFileSync(fileName, result);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(symbols.success, chalk.green(<span class=\"string\">&#x27;New project has been initialize successfully!&#x27;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、渲染模板\"><a href=\"#5、渲染模板\" class=\"headerlink\" title=\"5、渲染模板\"></a>5、渲染模板</h3><p>用 handlebars 的语法对 模板中的 package.json 文件做一些修改 ：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;&#123;&#123;name&#125;&#125;&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;version&quot;</span>: <span class=\"string\">&quot;1.0.0&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;description&quot;</span>: <span class=\"string\">&quot;&#123;&#123;description&#125;&#125;&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;author&quot;</span>: <span class=\"string\">&quot;&#123;&#123;author&#125;&#125;&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;license&quot;</span>: <span class=\"string\">&quot;ISC&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>并在下载模板完成之后将用户输入的答案渲染到 package.json 中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">program.version(<span class=\"string\">&#x27;1.0.0&#x27;</span>, <span class=\"string\">&#x27;-v, --version&#x27;</span>)</span><br><span class=\"line\">.command(<span class=\"string\">&#x27;init &lt;name&gt;&#x27;</span>)</span><br><span class=\"line\">.action(<span class=\"function\">(<span class=\"params\">name</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    inquirer.prompt([</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        name: <span class=\"string\">&#x27;description&#x27;</span>,</span><br><span class=\"line\">        message: <span class=\"string\">&#x27;请输入项目描述&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        name: <span class=\"string\">&#x27;author&#x27;</span>,</span><br><span class=\"line\">        message: <span class=\"string\">&#x27;请输入作者名称&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ]).then(<span class=\"function\">(<span class=\"params\">answers</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        download(<span class=\"string\">&#x27;xxxxx#master&#x27;</span>,name,&#123;<span class=\"attr\">clone</span>: <span class=\"literal\">true</span>&#125;,<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> meta = &#123;</span><br><span class=\"line\">                name,</span><br><span class=\"line\">                description: answers.description,</span><br><span class=\"line\">                author: answers.author</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> fileName = <span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span>/package.json`</span>;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> content = fs.readFileSync(fileName).toString();</span><br><span class=\"line\">            <span class=\"keyword\">const</span> result = handlebars.compile(content)(meta);</span><br><span class=\"line\">            fs.writeFileSync(fileName, result);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这里使用了 node.js 的文件模块 fs，将 handlebars 渲染完后的模板重新写入到文件中。</p>\n<h3 id=\"6、视觉美化\"><a href=\"#6、视觉美化\" class=\"headerlink\" title=\"6、视觉美化\"></a>6、视觉美化</h3><p>在用户输入答案之后，开始下载模板，这时候使用 ora 来提示用户正在下载中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const ora &#x3D; require(&#39;ora&#39;);</span><br><span class=\"line\">&#x2F;&#x2F; 开始下载</span><br><span class=\"line\">const spinner &#x3D; ora(&#39;正在下载模板...&#39;);</span><br><span class=\"line\">spinner.start();</span><br><span class=\"line\">&#x2F;&#x2F; 下载失败调用</span><br><span class=\"line\">spinner.fail();</span><br><span class=\"line\">&#x2F;&#x2F; 下载成功调用</span><br><span class=\"line\">spinner.succeed();</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"简单版脚手架完整示例\"><a href=\"#简单版脚手架完整示例\" class=\"headerlink\" title=\"简单版脚手架完整示例\"></a>简单版脚手架完整示例</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>);<span class=\"comment\">//系统内置模块 主要用来操作文件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> program = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;commander&#x27;</span>);<span class=\"comment\">//自动的解析命令和参数，用于处理用户输入的命令。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> download = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;download-git-repo&#x27;</span>);<span class=\"comment\">//下载并提取 git 仓库，用于下载项目模板。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> handlebars = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;handlebars&#x27;</span>);<span class=\"comment\">//模板引擎，将用户提交的信息动态填充到文件中。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> inquirer = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;inquirer&#x27;</span>);<span class=\"comment\">//通用的命令行用户界面集合，用于和用户进行交互。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ora = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;ora&#x27;</span>);<span class=\"comment\">//下载过程久的话，可以用于显示下载中的动画效果。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> chalk = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;chalk&#x27;</span>);<span class=\"comment\">//给终端的字体加上颜色。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> symbols = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;log-symbols&#x27;</span>);<span class=\"comment\">//在终端上显示出 √ 或 × 等的图标。</span></span><br><span class=\"line\"></span><br><span class=\"line\">program.version(<span class=\"string\">&#x27;1.0.4&#x27;</span>, <span class=\"string\">&#x27;-v, --version&#x27;</span>)</span><br><span class=\"line\">  .command(<span class=\"string\">&#x27;init &lt;name&gt;&#x27;</span>)</span><br><span class=\"line\">  .action(<span class=\"function\">(<span class=\"params\">name</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!fs.existsSync(name))&#123;</span><br><span class=\"line\">      inquirer.prompt([<span class=\"comment\">//prompt 提示</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          name: <span class=\"string\">&#x27;description&#x27;</span>,</span><br><span class=\"line\">          message: <span class=\"string\">&#x27;Please enter a description of the project:&#x27;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          name: <span class=\"string\">&#x27;author&#x27;</span>,</span><br><span class=\"line\">          message: <span class=\"string\">&#x27;Please enter the author name:&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]).then(<span class=\"function\">(<span class=\"params\">answers</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> spinner = ora(<span class=\"string\">&#x27;Downloading template...&#x27;</span>);</span><br><span class=\"line\">        spinner.start();</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 一级目录  name</span></span><br><span class=\"line\"><span class=\"comment\">         * 二级目录 jay/$&#123;name&#125;</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        download(<span class=\"string\">&#x27;http://git.ym/g-web/mbs-cli.git#master&#x27;</span>, jay/$&#123;name&#125;, &#123;<span class=\"attr\">clone</span>: <span class=\"literal\">true</span>&#125;, <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">            spinner.fail();</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(symbols.error, chalk.red(err));</span><br><span class=\"line\">          &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            spinner.succeed();</span><br><span class=\"line\">            <span class=\"keyword\">const</span> fileName = <span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span>/package.json`</span>;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> meta = &#123;</span><br><span class=\"line\">              name,</span><br><span class=\"line\">              description: answers.description,</span><br><span class=\"line\">              author: answers.author</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(fs.existsSync(fileName))&#123;</span><br><span class=\"line\">              <span class=\"keyword\">const</span> content = fs.readFileSync(fileName).toString();</span><br><span class=\"line\">              <span class=\"keyword\">const</span> result = handlebars.compile(content)(meta);</span><br><span class=\"line\">              fs.writeFileSync(fileName, result);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(symbols.success, chalk.green(<span class=\"string\">&#x27;Project initialization completed&#x27;</span>));</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 错误提示项目已存在，避免覆盖原有项目</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(symbols.error, chalk.red(<span class=\"string\">&#x27;Project already exists&#x27;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">program.parse(process.argv);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"mbs-cli-核心命令\"><a href=\"#mbs-cli-核心命令\" class=\"headerlink\" title=\"mbs-cli 核心命令\"></a>mbs-cli 核心命令</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Commands:</span><br><span class=\"line\"></span><br><span class=\"line\">  add|a             Add a <span class=\"keyword\">new</span> template</span><br><span class=\"line\">  list|l            List all the templates</span><br><span class=\"line\">  init|i            Generate a <span class=\"keyword\">new</span> project</span><br><span class=\"line\">  create|c          Generate a <span class=\"keyword\">new</span> project by choose a template</span><br><span class=\"line\">  init simple|ins   Generate a simple project</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\"></span><br><span class=\"line\">  -h, --help     output usage information</span><br><span class=\"line\">  -V, --version  output the version number</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"入口文件-mbs\"><a href=\"#入口文件-mbs\" class=\"headerlink\" title=\"入口文件 mbs\"></a>入口文件 mbs</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></span><br><span class=\"line\"></span><br><span class=\"line\">process.env.NODE_PATH = __dirname + <span class=\"string\">&#x27;/../node_modules/&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; resolve &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> chalk = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;chalk&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; existsSync &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> symbols = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;log-symbols&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> program = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;commander&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> res = <span class=\"function\"><span class=\"params\">command</span> =&gt;</span> resolve(__dirname, <span class=\"string\">&#x27;../commands/&#x27;</span>, command)</span><br><span class=\"line\"></span><br><span class=\"line\">program</span><br><span class=\"line\">  .usage(<span class=\"string\">&#x27;&lt;command&gt;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">program</span><br><span class=\"line\">  .version(<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../package&#x27;</span>).version )</span><br><span class=\"line\"></span><br><span class=\"line\">program</span><br><span class=\"line\">  .command(<span class=\"string\">&#x27;add&#x27;</span>)</span><br><span class=\"line\">  .description(<span class=\"string\">&#x27;Add a new template&#x27;</span>)</span><br><span class=\"line\">  .alias(<span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\">  .action(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(res(<span class=\"string\">&#x27;add&#x27;</span>))</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">program</span><br><span class=\"line\">  .command(<span class=\"string\">&#x27;init&#x27;</span>)</span><br><span class=\"line\">  .description(<span class=\"string\">&#x27;Generate a new project&#x27;</span>)</span><br><span class=\"line\">  .alias(<span class=\"string\">&#x27;i&#x27;</span>)</span><br><span class=\"line\">  .action(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(res(<span class=\"string\">&#x27;init&#x27;</span>))</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">program</span><br><span class=\"line\">  .command(<span class=\"string\">&#x27;create&#x27;</span>)</span><br><span class=\"line\">  .description(<span class=\"string\">&#x27;Generate a new project&#x27;</span>)</span><br><span class=\"line\">  .alias(<span class=\"string\">&#x27;c&#x27;</span>)</span><br><span class=\"line\">  .action(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(res(<span class=\"string\">&#x27;create&#x27;</span>))</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">program</span><br><span class=\"line\">  .command(<span class=\"string\">&#x27;list&#x27;</span>)</span><br><span class=\"line\">  .description(<span class=\"string\">&#x27;List all the templates&#x27;</span>)</span><br><span class=\"line\">  .alias(<span class=\"string\">&#x27;l&#x27;</span>)</span><br><span class=\"line\">  .action(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(res(<span class=\"string\">&#x27;list&#x27;</span>))</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">program.parse(process.argv);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!program.args.length)&#123;</span><br><span class=\"line\">  program.help();<span class=\"comment\">//如果没有输入参数，终端显示帮助</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"init-命令\"><a href=\"#init-命令\" class=\"headerlink\" title=\"init 命令\"></a>init 命令</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> tplList = <span class=\"built_in\">require</span>(<span class=\"string\">`<span class=\"subst\">$&#123;__dirname&#125;</span>/../templates`</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> questions = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        type: <span class=\"string\">&#x27;input&#x27;</span>,</span><br><span class=\"line\">        name: <span class=\"string\">&#x27;project&#x27;</span>,</span><br><span class=\"line\">        message: <span class=\"string\">&#x27;Project name:&#x27;</span>,</span><br><span class=\"line\">        validate (val) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (val !== <span class=\"string\">&#x27;&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Project name is required!&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      type: <span class=\"string\">&#x27;input&#x27;</span>,</span><br><span class=\"line\">      name: <span class=\"string\">&#x27;author&#x27;</span>,</span><br><span class=\"line\">      message: <span class=\"string\">&#x27;author name:&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      type: <span class=\"string\">&#x27;input&#x27;</span>,</span><br><span class=\"line\">      name: <span class=\"string\">&#x27;description&#x27;</span>,</span><br><span class=\"line\">      message: <span class=\"string\">&#x27;description of the project:&#x27;</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"string\">&#x27;a simple spa project&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      type: <span class=\"string\">&#x27;input&#x27;</span>,</span><br><span class=\"line\">      name: <span class=\"string\">&#x27;place&#x27;</span>,</span><br><span class=\"line\">      message: <span class=\"string\">&#x27;Where to init the project:&#x27;</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"string\">&#x27;./&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = prompt(questions).then(<span class=\"function\"><span class=\"params\">answers</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> spinner = ora(<span class=\"string\">&#x27;Downloading template...&#x27;</span>);</span><br><span class=\"line\">    spinner.start()</span><br><span class=\"line\">    download(<span class=\"string\">`direct:<span class=\"subst\">$&#123;tplList[<span class=\"string\">&#x27;template1&#x27;</span>][<span class=\"string\">&#x27;url&#x27;</span>]&#125;</span>#<span class=\"subst\">$&#123;tplList[<span class=\"string\">&#x27;template1&#x27;</span>][<span class=\"string\">&#x27;branch&#x27;</span>]&#125;</span>`</span>, <span class=\"string\">`<span class=\"subst\">$&#123;answers.place&#125;</span>/<span class=\"subst\">$&#123;answers.project&#125;</span>`</span>, &#123;<span class=\"attr\">clone</span>: <span class=\"literal\">true</span>&#125;, <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">            spinner.fail();</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(symbols.error, chalk.red(err));</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            spinner.succeed();</span><br><span class=\"line\">            <span class=\"keyword\">const</span> fileName = <span class=\"string\">`<span class=\"subst\">$&#123;answers.project&#125;</span>/package.json`</span>;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> meta = &#123;</span><br><span class=\"line\">              name:answers.project,</span><br><span class=\"line\">              description: answers.description,</span><br><span class=\"line\">              author: answers.author</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(meta);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(existsSync(fileName))&#123;</span><br><span class=\"line\">              <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;come in...&quot;</span>)</span><br><span class=\"line\">              <span class=\"keyword\">const</span> content = readFileSync(fileName).toString();</span><br><span class=\"line\">              <span class=\"keyword\">const</span> result = handlebars.compile(content)(meta);</span><br><span class=\"line\">              writeFileSync(fileName, result);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(symbols.success, chalk.green(<span class=\"string\">&#x27;New project has been initialize successfully!&#x27;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"init-simple-命令\"><a href=\"#init-simple-命令\" class=\"headerlink\" title=\"init simple 命令\"></a>init simple 命令</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> tplList = <span class=\"built_in\">require</span>(<span class=\"string\">`<span class=\"subst\">$&#123;__dirname&#125;</span>/../templates`</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> question = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        name: <span class=\"string\">&#x27;description&#x27;</span>,</span><br><span class=\"line\">        message: <span class=\"string\">&#x27;Please enter a description of the project:&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        name: <span class=\"string\">&#x27;author&#x27;</span>,</span><br><span class=\"line\">        message: <span class=\"string\">&#x27;Please enter the author name:&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = prompt(question).then(<span class=\"function\">(<span class=\"params\">answers</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> spinner = ora(<span class=\"string\">&#x27;Downloading template...&#x27;</span>);</span><br><span class=\"line\">    spinner.start()</span><br><span class=\"line\">    download(<span class=\"string\">`direct:<span class=\"subst\">$&#123;tplList[<span class=\"string\">&#x27;template2&#x27;</span>][<span class=\"string\">&#x27;url&#x27;</span>]&#125;</span>#<span class=\"subst\">$&#123;tplList[<span class=\"string\">&#x27;template2&#x27;</span>][<span class=\"string\">&#x27;branch&#x27;</span>]&#125;</span>`</span>, <span class=\"string\">`./<span class=\"subst\">$&#123;name&#125;</span>`</span>, &#123;<span class=\"attr\">clone</span>: <span class=\"literal\">true</span>&#125;, <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">            spinner.fail();</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(symbols.error, chalk.red(err));</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            spinner.succeed();</span><br><span class=\"line\">            <span class=\"keyword\">const</span> fileName = <span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span>/package.json`</span>;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> meta = &#123;</span><br><span class=\"line\">              name,</span><br><span class=\"line\">              description: answers.description,</span><br><span class=\"line\">              author: answers.author</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(existsSync(fileName))&#123;</span><br><span class=\"line\">              <span class=\"keyword\">const</span> content = readFileSync(fileName).toString();</span><br><span class=\"line\">              <span class=\"keyword\">const</span> result = handlebars.compile(content)(meta);</span><br><span class=\"line\">              writeFileSync(fileName, result);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(symbols.success, chalk.green(<span class=\"string\">&#x27;Project initialization completed&#x27;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"create-命令\"><a href=\"#create-命令\" class=\"headerlink\" title=\"create 命令\"></a>create 命令</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> templateList = <span class=\"built_in\">require</span>(<span class=\"string\">`<span class=\"subst\">$&#123;__dirname&#125;</span>/../templates`</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> rmTempList = <span class=\"built_in\">require</span>(<span class=\"string\">`<span class=\"subst\">$&#123;__dirname&#125;</span>/../config/remote-templates`</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> choices = rmTempList.map(<span class=\"function\"><span class=\"params\">template</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    name:<span class=\"string\">`<span class=\"subst\">$&#123;template.name&#125;</span> - <span class=\"subst\">$&#123;template.description&#125;</span>`</span>,</span><br><span class=\"line\">    value:template.name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> questions = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        type: <span class=\"string\">&#x27;input&#x27;</span>,</span><br><span class=\"line\">        name: <span class=\"string\">&#x27;project&#x27;</span>,</span><br><span class=\"line\">        message: <span class=\"string\">&#x27;Project name:&#x27;</span>,</span><br><span class=\"line\">        validate (val) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (val !== <span class=\"string\">&#x27;&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Project name is required!&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        type: <span class=\"string\">&#x27;list&#x27;</span>,</span><br><span class=\"line\">        name: <span class=\"string\">&#x27;template&#x27;</span>,</span><br><span class=\"line\">        choices,</span><br><span class=\"line\">        message: <span class=\"string\">&#x27;Choose template you want:&#x27;</span>,</span><br><span class=\"line\">        validate (val) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (val !== <span class=\"string\">&#x27;&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"string\">&#x27;template name is required!&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      type: <span class=\"string\">&#x27;input&#x27;</span>,</span><br><span class=\"line\">      name: <span class=\"string\">&#x27;author&#x27;</span>,</span><br><span class=\"line\">      message: <span class=\"string\">&#x27;author name:&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      type: <span class=\"string\">&#x27;input&#x27;</span>,</span><br><span class=\"line\">      name: <span class=\"string\">&#x27;description&#x27;</span>,</span><br><span class=\"line\">      message: <span class=\"string\">&#x27;description of the project:&#x27;</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      type: <span class=\"string\">&#x27;input&#x27;</span>,</span><br><span class=\"line\">      name: <span class=\"string\">&#x27;place&#x27;</span>,</span><br><span class=\"line\">      message: <span class=\"string\">&#x27;Where to init the project:&#x27;</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"string\">&#x27;./&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = prompt(questions).then(<span class=\"function\"><span class=\"params\">answers</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> spinner = ora(<span class=\"string\">&#x27;Downloading template...&#x27;</span>);</span><br><span class=\"line\">    spinner.start()</span><br><span class=\"line\">    <span class=\"keyword\">const</span> template = rmTempList.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> answers.template.includes(item.name) &amp;&amp; item;</span><br><span class=\"line\">    &#125;)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    download(<span class=\"string\">`direct:<span class=\"subst\">$&#123;template.url&#125;</span>#<span class=\"subst\">$&#123;template.branch&#125;</span>`</span>, <span class=\"string\">`<span class=\"subst\">$&#123;answers.place&#125;</span>/<span class=\"subst\">$&#123;answers.project&#125;</span>`</span>, &#123;<span class=\"attr\">clone</span>: <span class=\"literal\">true</span>&#125;, <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">            spinner.fail();</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(symbols.error, chalk.red(err));</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            spinner.succeed();</span><br><span class=\"line\">            <span class=\"keyword\">const</span> fileName = <span class=\"string\">`<span class=\"subst\">$&#123;answers.project&#125;</span>/package.json`</span>;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> meta = &#123;</span><br><span class=\"line\">              name:answers.project,</span><br><span class=\"line\">              description: answers.description,</span><br><span class=\"line\">              author: answers.author</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(meta);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(existsSync(fileName))&#123;</span><br><span class=\"line\">              <span class=\"keyword\">const</span> content = readFileSync(fileName).toString();</span><br><span class=\"line\">              <span class=\"keyword\">const</span> result = handlebars.compile(content)(meta);</span><br><span class=\"line\">              writeFileSync(fileName, result);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(symbols.success, chalk.green(<span class=\"string\">&#x27;New project has been initialize successfully!&#x27;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>效果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mbs create</span><br><span class=\"line\"></span><br><span class=\"line\">? Project name: demo</span><br><span class=\"line\">? Choose template you want: (Use arrow keys)</span><br><span class=\"line\">&gt; vue-webpack-pc - 基于webpack构建的vue项目模板</span><br><span class=\"line\">  react-webpack-pc - 基于webpack构建的react项目模板</span><br><span class=\"line\">  angular-webpack-pc - 基于webpack构建的angular项目模板</span><br><span class=\"line\">  discover your template - 更多海量模板等你发掘与收藏.</span><br><span class=\"line\">? Choose template you want: vue-webpack-pc - 基于webpack构建的vue项目模板</span><br><span class=\"line\">? Please enter the author name: jay</span><br><span class=\"line\">? Please enter a description of the project: a simple spa project</span><br><span class=\"line\">? Where to init the project: .&#x2F;</span><br><span class=\"line\">√ Downloading template...</span><br><span class=\"line\">√ New project has been initialize successfully!</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"add-命令\"><a href=\"#add-命令\" class=\"headerlink\" title=\"add 命令\"></a>add 命令</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; prompt &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;inquirer&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; writeFile &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; showTable &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">`<span class=\"subst\">$&#123;__dirname&#125;</span>/../utils`</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> tempList = <span class=\"built_in\">require</span>(<span class=\"string\">`<span class=\"subst\">$&#123;__dirname&#125;</span>/../templates`</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> question = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    type: <span class=\"string\">&#x27;input&#x27;</span>,</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;name&#x27;</span>,</span><br><span class=\"line\">    message: <span class=\"string\">&#x27;Set the custom name of the template:&#x27;</span>,</span><br><span class=\"line\">    validate (val) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (tempList[val]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Template is existed!&#x27;</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (val === <span class=\"string\">&#x27;&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Name is required!&#x27;</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    type: <span class=\"string\">&#x27;input&#x27;</span>,</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;branch&#x27;</span>,</span><br><span class=\"line\">    message: <span class=\"string\">&#x27;branch of the template:&#x27;</span>,</span><br><span class=\"line\">    validate (val) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (val !== <span class=\"string\">&#x27;&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;branch is required!&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    type: <span class=\"string\">&#x27;input&#x27;</span>,</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;url&#x27;</span>,</span><br><span class=\"line\">    message: <span class=\"string\">&#x27;Url of the template:&#x27;</span>,</span><br><span class=\"line\">    validate (val) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (val !== <span class=\"string\">&#x27;&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Url is required!&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = prompt(question).then(<span class=\"function\">(<span class=\"params\">&#123; name, branch, url &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  tempList[name] = &#123;&#125;</span><br><span class=\"line\">  tempList[name][<span class=\"string\">&#x27;branch&#x27;</span>] = branch</span><br><span class=\"line\">  tempList[name][<span class=\"string\">&#x27;url&#x27;</span>] = url</span><br><span class=\"line\"></span><br><span class=\"line\">  writeFile(<span class=\"string\">`<span class=\"subst\">$&#123;__dirname&#125;</span>/../templates.json`</span>, <span class=\"built_in\">JSON</span>.stringify(tempList), <span class=\"string\">&#x27;utf-8&#x27;</span>, <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    showTable(tempList, <span class=\"string\">&#x27;New template has been added successfully!&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>效果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mbs add</span><br><span class=\"line\"></span><br><span class=\"line\">? Set the custom name of the template: template1</span><br><span class=\"line\">? branch of the template: master</span><br><span class=\"line\">? Url of the template: http:&#x2F;&#x2F;git.ym&#x2F;Chenmh&#x2F;bs-init-template.git</span><br><span class=\"line\">┌───────────────┬────────┬───────────────────────────────────────────┐</span><br><span class=\"line\">│ Template Name │ Branch │ Url                                       │</span><br><span class=\"line\">├───────────────┼────────┼───────────────────────────────────────────┤</span><br><span class=\"line\">│ template1     │ master │ http:&#x2F;&#x2F;git.ym&#x2F;Chenmh&#x2F;bs-init-template.git │</span><br><span class=\"line\">└───────────────┴────────┴───────────────────────────────────────────┘</span><br><span class=\"line\">✔ New template has been added successfully!</span><br></pre></td></tr></table></figure>\n\n<p><code>mbs</code> use <a href=\"https://github.com/flipxfx/download-git-repo\">download-git-repo</a> to down load git repos. After answering 3 questions, you’ll add a new template to <code>mbs</code>.</p>\n<h4 id=\"list-命令\"><a href=\"#list-命令\" class=\"headerlink\" title=\"list 命令\"></a>list 命令</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; showTable &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">`<span class=\"subst\">$&#123;__dirname&#125;</span>/../utils`</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> tempList = <span class=\"built_in\">require</span>(<span class=\"string\">`<span class=\"subst\">$&#123;__dirname&#125;</span>/../templates`</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = showTable(tempList)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showTable</span> (<span class=\"params\">tempList</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> list = <span class=\"built_in\">Object</span>.keys(tempList)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (list.length) &#123;</span><br><span class=\"line\">    list.forEach(<span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      table.push([key, tempList[key][<span class=\"string\">&#x27;branch&#x27;</span>], tempList[key][<span class=\"string\">&#x27;url&#x27;</span>]])</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (table.length === list.length) &#123;</span><br><span class=\"line\">        process.exit()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(table.toString())</span><br><span class=\"line\">    process.exit()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mbs list</span><br><span class=\"line\"></span><br><span class=\"line\">┌───────────────┬──────────┬───────────────────────────────────────────┐</span><br><span class=\"line\">│ Template Name │ Branch   │ Url                                       │</span><br><span class=\"line\">├───────────────┼──────────┼───────────────────────────────────────────┤</span><br><span class=\"line\">│ template1     │ standard │ http:&#x2F;&#x2F;git.ym&#x2F;Chenmh&#x2F;bs-init-template.git │</span><br><span class=\"line\">├───────────────┼──────────┼───────────────────────────────────────────┤</span><br><span class=\"line\">│ template2     │ simple   │ http:&#x2F;&#x2F;git.ym&#x2F;Chenmh&#x2F;bs-init-template.git │</span><br><span class=\"line\">└───────────────┴──────────┴───────────────────────────────────────────┘</span><br></pre></td></tr></table></figure>\n\n<p>utils.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Table = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;cli-table&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> chalk = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;chalk&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> table = <span class=\"keyword\">new</span> Table(&#123;</span><br><span class=\"line\">  head: [<span class=\"string\">&#x27;Template Name&#x27;</span>, <span class=\"string\">&#x27;Branch&#x27;</span>, <span class=\"string\">&#x27;Url&#x27;</span>],</span><br><span class=\"line\">  style: &#123;</span><br><span class=\"line\">    head: [<span class=\"string\">&#x27;green&#x27;</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showTable</span> (<span class=\"params\">tempList, Exp</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> list = <span class=\"built_in\">Object</span>.keys(tempList)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (list.length) &#123;</span><br><span class=\"line\">    list.forEach(<span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      table.push([key, tempList[key][<span class=\"string\">&#x27;branch&#x27;</span>], tempList[key][<span class=\"string\">&#x27;url&#x27;</span>]])</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (table.length === list.length) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(table.toString())</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Exp) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(chalk.green(<span class=\"string\">`\\u2714 <span class=\"subst\">$&#123;Exp&#125;</span>`</span>))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        process.exit()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(table.toString())</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Exp) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(chalk.green(<span class=\"string\">`\\u2714 <span class=\"subst\">$&#123;Exp&#125;</span>`</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    process.exit()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">exports</span>.showTable = showTable</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>#脚手架发布</p>\n<h3 id=\"npm-登录\"><a href=\"#npm-登录\" class=\"headerlink\" title=\"npm 登录\"></a>npm 登录</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS D:\\yameiproject\\mbs-cli&gt; npm login</span><br><span class=\"line\">Username: chenyumen</span><br><span class=\"line\">Password:</span><br><span class=\"line\">Email: (this IS public) 13172050157@126.com</span><br><span class=\"line\">Logged in as chenyumen on https:&#x2F;&#x2F;registry.npmjs.org&#x2F;.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"npm-发布\"><a href=\"#npm-发布\" class=\"headerlink\" title=\"npm 发布\"></a>npm 发布</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS D:\\yameiproject\\mbs-cli&gt; npm publish</span><br><span class=\"line\">npm notice</span><br><span class=\"line\">npm notice package: mbs-cli@1.0.4</span><br><span class=\"line\">npm notice &#x3D;&#x3D;&#x3D; Tarball Contents &#x3D;&#x3D;&#x3D;</span><br><span class=\"line\">npm notice 573B  package.json</span><br><span class=\"line\">npm notice 2.5kB index.js</span><br><span class=\"line\">npm notice 193B  脚手架.md</span><br><span class=\"line\">npm notice &#x3D;&#x3D;&#x3D; Tarball Details &#x3D;&#x3D;&#x3D;</span><br><span class=\"line\">npm notice name:          mbs-cli</span><br><span class=\"line\">npm notice version:       1.0.4</span><br><span class=\"line\">npm notice package size:  1.8 kB</span><br><span class=\"line\">npm notice total files:   3</span><br><span class=\"line\">npm notice</span><br><span class=\"line\">+ mbs-cli@1.0.4</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"本地-npm-模块调试\"><a href=\"#本地-npm-模块调试\" class=\"headerlink\" title=\"本地 npm 模块调试\"></a>本地 npm 模块调试</h1><h3 id=\"开启调试模式\"><a href=\"#开启调试模式\" class=\"headerlink\" title=\"开启调试模式\"></a>开启调试模式</h3><p><code>npm link</code>命令可以将一个任意位置的<code>npm包</code>链接到全局执行环境，从而在任意位置使用命令行都可以直接运行该 npm 包。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\yamei\\AppData\\Roaming\\npm\\mbs -&gt; C:\\Users\\yamei\\AppData\\Roaming\\npm\\node_modules\\mbs-cli\\bin\\mbs</span><br><span class=\"line\">C:\\Users\\yamei\\AppData\\Roaming\\npm\\node_modules\\mbs-cli -&gt; D:\\yameiproject\\mbs-cli</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关闭调试模式\"><a href=\"#关闭调试模式\" class=\"headerlink\" title=\"关闭调试模式\"></a>关闭调试模式</h3><p>如果你的项目不再需要该模块，可以在项目目录内使用 npm unlink 命令，删除符号链接</p>\n<h1 id=\"延申\"><a href=\"#延申\" class=\"headerlink\" title=\"延申\"></a>延申</h1><p>1、丰富命令行交互，以适应更多变的需求。</p>\n<p>2、webpack 配置文件隐藏优化。</p>\n<h1 id=\"模板集成常用功能\"><a href=\"#模板集成常用功能\" class=\"headerlink\" title=\"模板集成常用功能\"></a>模板集成常用功能</h1><ul>\n<li>  登录、注销</li>\n<li>  DashBord</li>\n<li>  表格</li>\n<li>  Tab 选项卡</li>\n<li>  图表</li>\n<li>  富文本编辑器</li>\n<li>  三级菜单</li>\n<li>  国际化</li>\n<li>  图片拖拽、裁剪上传</li>\n<li>  列表拖拽排序</li>\n<li>  权限管理</li>\n<li>  404/403/500</li>\n</ul>\n<h1 id=\"模板项目结构\"><a href=\"#模板项目结构\" class=\"headerlink\" title=\"模板项目结构\"></a>模板项目结构</h1><p>├── build 构建服务和 webpack 配置<br>|—— build.js webpack 打包服务<br>|—— webpack.base.conf.js webpack 基本通用配置<br>|—— webpack.dev.conf.js webpack 开发环境配置<br>|—— webpack.prod.conf.js webpack 生产环境配置<br>├── config 构建项目不同环境的配置<br>├── public 项目打包文件存放目录<br>├── index.html 项目入口文件<br>├── package.json 项目配置文件<br>├── .babelrc babel 配置文件<br>├── .gitignore git 忽略文件<br>├── postcss.config.js postcss 配置文件<br>├── src 项目目录<br>├── assets 静态资源<br> ├── components 集成组件目录<br> |—— json json 目录<br>|—— lang 中英文目录<br>|—— router vue 路由配置<br>|—— service ajax 请求配置<br>|—— store vuex 配置<br>|—— styles 公共样式<br>|—— utils 工具类<br>|—— views 页面组件目录<br>|—— App.vue vue 实例入口<br>|—— main.js 项目构建入口</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"为什么需要脚手架？\"><a href=\"#为什么需要脚手架？\" class=\"headerlink\" title=\"为什么需要脚手架？\"></a>为什么需要脚手架？</h1><p>1、减少重复性的工作，不再需要复制其他项目再删除无关代码，或者从零创建一个项目和文件 。<br>2、根据交互动态生成项目结构和配置文件,具备更高的灵活性和人性化定制的能力 。<br>3、多人协作更为方便，避免了人工传递文件的繁琐。<br>4、集成互联网上的模板，方便自己与他人使用。</p>","more":"<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>开发脚手架可以借鉴 vue-cli 的基本思路。vue-cli 是将项目模板放在 git 上，运行的时候再根据用户交互下载不同的模板，经过模板引擎渲染出来，生成项目。这样讲脚手架和模板分离，就可以各自维护，即使模板有所变动，只需要上传最新的模板即可，而不需要用户去更新脚手架就可以生成最新的项目。</p>\n<h1 id=\"脚手架工作流\"><a href=\"#脚手架工作流\" class=\"headerlink\" title=\"脚手架工作流\"></a>脚手架工作流</h1><p><img src=\"https://image-static.segmentfault.com/409/200/409200816-5ab3668b4996f_articlex\" alt=\"network\"></p>\n<h1 id=\"脚手架问答流\"><a href=\"#脚手架问答流\" class=\"headerlink\" title=\"脚手架问答流\"></a>脚手架问答流</h1><pre><code>PS D:\\test&gt; vue create demo1\n</code></pre>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">? Please pick a preset: Manually select features</span><br><span class=\"line\">? Check the features needed for your project: Babel, Router, Vuex, CSS Pre-processors, Linter</span><br><span class=\"line\">? Use history mode for router? (Requires proper server setup for index fallback in production) Yes</span><br><span class=\"line\">? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): Less</span><br><span class=\"line\">? Pick a linter &#x2F; formatter config: Basic</span><br><span class=\"line\">? Pick additional lint features: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)Lint on save</span><br><span class=\"line\">? Where do you prefer placing config for Babel, PostCSS, ESLint, etc.? In package.json</span><br><span class=\"line\">? Save this as a preset for future projects? Yes</span><br><span class=\"line\">? Save preset as: preset1</span><br><span class=\"line\"></span><br><span class=\"line\">📄  Generating README.md...</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">🎉  Successfully created project demo1.</span><br><span class=\"line\">👉  Get started with the following commands:</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"如何搭建一个脚手架？\"><a href=\"#如何搭建一个脚手架？\" class=\"headerlink\" title=\"如何搭建一个脚手架？\"></a>如何搭建一个脚手架？</h1><p><img src=\"/images/cli/%E8%84%9A%E6%89%8B%E6%9E%B6%E6%9E%84%E5%BB%BA%E6%B5%81%E7%A8%8B.png\" alt=\"network\"></p>\n<h1 id=\"第三方库的支持\"><a href=\"#第三方库的支持\" class=\"headerlink\" title=\"第三方库的支持\"></a>第三方库的支持</h1><p><img src=\"/images/cli/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E6%94%AF%E6%8C%81.png\" alt=\"network\"></p>\n<p>会使用到的第三方库</p>\n<ul>\n<li>commander.js:可以自动解析命令和参数，用于处理用户输入的命令</li>\n<li>download-git-repo:下载并提取git仓库，用于下载项目模板</li>\n<li>inquirer.js:通过命令行用户界面集合，用于和用户进行交互</li>\n<li>handlebars.js:模板引擎，将用户提交的信息动态填充到文件中</li>\n<li>ora:下载过程久的话，可以用于显示下载中的动画效果</li>\n<li>chalk:可以给终端的字体加上颜色</li>\n<li>log-symbols:可以在终端上显示√或×等图标</li>\n</ul>\n<h1 id=\"搭建步骤：\"><a href=\"#搭建步骤：\" class=\"headerlink\" title=\"搭建步骤：\"></a>搭建步骤：</h1><h3 id=\"1、初始化项目\"><a href=\"#1、初始化项目\" class=\"headerlink\" title=\"1、初始化项目\"></a>1、初始化项目</h3><p>首先创建一个空项目，命名为 mbs-cli，然后新建一个 bin/mbs 文件，再执行 npm init 生成一个 package.json 文件。最后安装上面需要用到的依赖。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install commander download-git-repo inquirer handlebars ora chalk log-symbols cli-table -S</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、处理命令行\"><a href=\"#2、处理命令行\" class=\"headerlink\" title=\"2、处理命令行\"></a>2、处理命令行</h3><p>node.js 内置了对命令行操作的支持，在 package.json 中的 bin 字段可以定义命令名和关联的执行文件。</p>\n<p>在 package.json 中加上 bin 的内容：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"string\">&quot;name&quot;</span>: “mbs-cli<span class=\"string\">&quot;,</span></span><br><span class=\"line\"><span class=\"string\">\t&quot;</span>version<span class=\"string\">&quot;: &quot;</span><span class=\"number\">1.0</span><span class=\"number\">.0</span><span class=\"string\">&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;</span>description<span class=\"string\">&quot;: &quot;</span>中后台系统脚手架<span class=\"string\">&quot;,</span></span><br><span class=\"line\"><span class=\"string\">\t&quot;</span>bin<span class=\"string\">&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\t&quot;</span>mbs<span class=\"string\">&quot;: &quot;</span>bin/mbs<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">     &#125;</span></span><br><span class=\"line\"><span class=\"string\"> &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>首先在 mbs 文件 中引入相关依赖模块：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; existsSync &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>);<span class=\"comment\">//系统内置模块 主要用来操作文件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> program = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;commander&#x27;</span>);<span class=\"comment\">//自动的解析命令和参数，用于处理用户输入的命令。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> chalk = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;chalk&#x27;</span>);<span class=\"comment\">//给终端的字体加上颜色。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> symbols = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;log-symbols&#x27;</span>);<span class=\"comment\">//在终端上显示出 √ 或 × 等的图标。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> res = <span class=\"function\"><span class=\"params\">command</span> =&gt;</span> resolve(__dirname, <span class=\"string\">&#x27;../commands/&#x27;</span>, command)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置-usr-bin-env-node-的作用\"><a href=\"#配置-usr-bin-env-node-的作用\" class=\"headerlink\" title=\"配置 !/usr/bin/env node 的作用\"></a>配置 !/usr/bin/env node 的作用</h4><p>指定用 node 执行脚本文件 ,usr/bin/env 解决了不同的用户 node 路径不同的问题，可以让系统动态的去查找 node 来执行你的脚本文件。</p>\n<h1 id=\"nodejs-依赖模块介绍与用法\"><a href=\"#nodejs-依赖模块介绍与用法\" class=\"headerlink\" title=\"nodejs 依赖模块介绍与用法\"></a>nodejs 依赖模块介绍与用法</h1><h2 id=\"commander（指挥官）\"><a href=\"#commander（指挥官）\" class=\"headerlink\" title=\"commander（指挥官）\"></a>commander（指挥官）</h2><p>自动地解析命令和参数，用于处理用户输入的命令。</p>\n<ul>\n<li><p>  usage(): 设置 usage 值</p>\n</li>\n<li><p>  command(): 定义一个命令名字</p>\n</li>\n<li><p>  description(): 设置 description 值</p>\n</li>\n<li><p>  option(): 定义参数，需要设置“关键字”和“描述”，关键字包括“简写”和“全写”两部分，以”,”,”|”,”空格”做分隔。</p>\n</li>\n<li><p>  parse(): 解析命令行参数 argv</p>\n</li>\n<li><p>  action(): 注册一个 callback 函数</p>\n</li>\n<li><p>  version() : 终端输出版本号</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS D:\\yameiproject\\mbs-cli&gt; mbs --help</span><br><span class=\"line\">Usage: mbs &lt;command&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -V, --version  output the version number</span><br><span class=\"line\">  -h, --help     output usage information</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\">  add|a          Add a <span class=\"keyword\">new</span> template</span><br><span class=\"line\">  init|i         Generate a <span class=\"keyword\">new</span> project</span><br><span class=\"line\">  init|ins       Generate a simple project</span><br><span class=\"line\">  create|c       Generate a <span class=\"keyword\">new</span> project</span><br><span class=\"line\">  list|l         List all the templates</span><br></pre></td></tr></table></figure>\n\n<p>定义常规命令：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> program = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;commander&#x27;</span>);<span class=\"comment\">//自动的解析命令和参数，用于处理用户输入的命令。</span></span><br><span class=\"line\"></span><br><span class=\"line\">program</span><br><span class=\"line\">  .usage(<span class=\"string\">&#x27;&lt;command&gt;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">program</span><br><span class=\"line\">  .version(<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../package&#x27;</span>).version )</span><br></pre></td></tr></table></figure>\n\n<p>init 命令逻辑：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">program</span><br><span class=\"line\">  .command(<span class=\"string\">&#x27;init &lt;name&gt;&#x27;</span>)</span><br><span class=\"line\">  .description(<span class=\"string\">&#x27;Generate a new project&#x27;</span>)</span><br><span class=\"line\">  .alias(<span class=\"string\">&#x27;i&#x27;</span>)</span><br><span class=\"line\">  .action(<span class=\"function\">(<span class=\"params\">name</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!existsSync(name))&#123;</span><br><span class=\"line\">        <span class=\"built_in\">require</span>(res(<span class=\"string\">&#x27;init&#x27;</span>))</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 错误提示项目已存在，避免覆盖原有项目</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(symbols.error, chalk.red(<span class=\"string\">&#x27;Project already exists&#x27;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>处理用户输入命令：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">program</span><br><span class=\"line\">  .command(<span class=\"string\">&#x27;init &lt;name&gt;&#x27;</span>)</span><br><span class=\"line\">  .description(<span class=\"string\">&#x27;Generate a new project&#x27;</span>)</span><br><span class=\"line\">  .alias(<span class=\"string\">&#x27;i&#x27;</span>)</span><br><span class=\"line\">  .action(<span class=\"function\">(<span class=\"params\">name</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!existsSync(name))&#123;</span><br><span class=\"line\">        <span class=\"built_in\">require</span>(res(<span class=\"string\">&#x27;init&#x27;</span>))</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 错误提示项目已存在，避免覆盖原有项目</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(symbols.error, chalk.red(<span class=\"string\">&#x27;Project already exists&#x27;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>最后处理解析命令行参数 ：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">program.parse(process.argv);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//process:一个全局对象,控制有关信息，控制node.js的进程</span></span><br><span class=\"line\"><span class=\"comment\">//program.parse:解析命令之中的参数，根据上面定义好的规则执行相关命令</span></span><br><span class=\"line\"><span class=\"comment\">//process.argv:该属性返回一个数组,这个数组包含了启动node.js进程时的命令行参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!program.args.length)&#123;</span><br><span class=\"line\">  program.help();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"inquirer（询问者）\"><a href=\"#inquirer（询问者）\" class=\"headerlink\" title=\"inquirer（询问者）\"></a>inquirer（询问者）</h2><p>通用的命令行用户界面集合，用于和用户进行交互。由于交互的问题种类不同，inquirer 为每个问题提供很多参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type：表示提问的类型，包括：input, confirm, list, rawlist, expand, checkbox, password, editor；</span><br><span class=\"line\">name: 存储当前问题回答的变量；</span><br><span class=\"line\">message：问题的描述；</span><br><span class=\"line\">default：默认值；</span><br><span class=\"line\">choices：列表选项，在某些type下可用，并且包含一个分隔符(separator)；</span><br><span class=\"line\">validate：对用户的回答进行校验；</span><br><span class=\"line\">filter：对用户的回答进行过滤处理，返回处理后的值；</span><br><span class=\"line\">when：根据前面问题的回答，判断当前问题是否需要被回答；</span><br><span class=\"line\">prefix：修改message默认前缀；</span><br><span class=\"line\">suffix：修改message默认后缀。</span><br></pre></td></tr></table></figure>\n\n<p>语法结构</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> inquirer = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;inquirer&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> promptList = [</span><br><span class=\"line\">    <span class=\"comment\">// 具体交互内容</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">inquirer.prompt(promptList).then(<span class=\"function\"><span class=\"params\">answers</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(answers); <span class=\"comment\">// 返回的结果</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>input 类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> inquirer = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;inquirer&#x27;</span>);</span><br><span class=\"line\">inquirer.prompt([</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        type: <span class=\"string\">&#x27;input&#x27;</span>,</span><br><span class=\"line\">        name: <span class=\"string\">&#x27;author&#x27;</span>,</span><br><span class=\"line\">        message: <span class=\"string\">&#x27;请输入作者名称&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]).then(<span class=\"function\">(<span class=\"params\">answers</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(answers.author);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">效果：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<p>confirm 类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promptList = [&#123;</span><br><span class=\"line\">    type: <span class=\"string\">&quot;confirm&quot;</span>,</span><br><span class=\"line\">    message: <span class=\"string\">&quot;是否使用监听？&quot;</span>,</span><br><span class=\"line\">    name: <span class=\"string\">&quot;watch&quot;</span>,</span><br><span class=\"line\">    prefix: <span class=\"string\">&quot;前缀&quot;</span></span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">    type: <span class=\"string\">&quot;confirm&quot;</span>,</span><br><span class=\"line\">    message: <span class=\"string\">&quot;是否进行文件过滤？&quot;</span>,</span><br><span class=\"line\">    name: <span class=\"string\">&quot;filter&quot;</span>,</span><br><span class=\"line\">    suffix: <span class=\"string\">&quot;后缀&quot;</span>,</span><br><span class=\"line\">    when: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">answers</span>) </span>&#123; <span class=\"comment\">// 当watch为true的时候才会提问当前问题</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> answers.watch</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<p>list 类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promptList = [&#123;</span><br><span class=\"line\">    type: <span class=\"string\">&#x27;list&#x27;</span>,</span><br><span class=\"line\">    message: <span class=\"string\">&#x27;请选择一种水果:&#x27;</span>,</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;fruit&#x27;</span>,</span><br><span class=\"line\">    choices: [</span><br><span class=\"line\">        <span class=\"string\">&quot;Apple&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Pear&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Banana&quot;</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    filter: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123; <span class=\"comment\">// 使用filter将回答变为小写</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> val.toLowerCase();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<h2 id=\"download-git-repo\"><a href=\"#download-git-repo\" class=\"headerlink\" title=\"download-git-repo\"></a>download-git-repo</h2><p>download-git-repo 支持从 Github、Gitlab 和 Bitbucket 下载仓库，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">download(repository, destination, options, callback)</span><br></pre></td></tr></table></figure>\n\n<p>repository</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- GitHub - github:owner&#x2F;name or simply owner&#x2F;name</span><br><span class=\"line\">- GitLab - gitlab:owner&#x2F;name</span><br><span class=\"line\">- Bitbucket - bitbucket:owner&#x2F;name</span><br><span class=\"line\">- Direct - direct:url:branch</span><br></pre></td></tr></table></figure>\n\n<p>destination</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The file path to download the repository to. xxxxxxxxxx </span><br></pre></td></tr></table></figure>\n\n<p>options</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean default false - If true use git clone instead of an http download. While this can be a bit slower, it does allow private repositories to be used if the appropriate SSH keys are setup.</span><br></pre></td></tr></table></figure>\n\n<p>callback</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The callback function as function (err).</span><br></pre></td></tr></table></figure>\n\n<p>example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">download(&#39;direct:https:&#x2F;&#x2F;gitlab.com&#x2F;flipxfx&#x2F;download-git-repo-fixture&#x2F;repository&#x2F;archive.zip&#39;, &#39;test&#x2F;tmp&#39;, function (err) &#123;</span><br><span class=\"line\">  console.log(err ? &#39;Error&#39; : &#39;Success&#39;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h5><h2 id=\"ora-（loading-动效）\"><a href=\"#ora-（loading-动效）\" class=\"headerlink\" title=\"ora （loading 动效）\"></a>ora （loading 动效）</h2><p>用于显示下载中的动画效果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ora = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;ora&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 开始下载</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> spinner = ora(<span class=\"string\">&#x27;正在下载模板...&#x27;</span>);</span><br><span class=\"line\">spinner.start();</span><br><span class=\"line\"><span class=\"comment\">// 下载失败调用</span></span><br><span class=\"line\">spinner.fail();</span><br><span class=\"line\"><span class=\"comment\">// 下载成功调用</span></span><br><span class=\"line\">spinner.succeed();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\ Downloading template...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"chalk（字体颜色）\"><a href=\"#chalk（字体颜色）\" class=\"headerlink\" title=\"chalk（字体颜色）\"></a>chalk（字体颜色）</h2><p>通过 chalk 来为打印信息加上样式，比如成功信息为绿色，失败信息为红色，这样子会让用户更加容易分辨，同时也让终端的显示更加的好看：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> chalk = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;chalk&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(chalk.green(<span class=\"string\">&#x27;项目创建成功&#x27;</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(chalk.red(<span class=\"string\">&#x27;项目创建失败&#x27;</span>));<span class=\"keyword\">const</span> ora = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;ora&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 开始下载</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> spinner = ora(<span class=\"string\">&#x27;正在下载模板...&#x27;</span>);</span><br><span class=\"line\">spinner.start();</span><br><span class=\"line\"><span class=\"comment\">// 下载失败调用</span></span><br><span class=\"line\">spinner.fail();</span><br><span class=\"line\"><span class=\"comment\">// 下载成功调用</span></span><br><span class=\"line\">spinner.succeed();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"log-symbols（日志符号）\"><a href=\"#log-symbols（日志符号）\" class=\"headerlink\" title=\"log-symbols（日志符号）\"></a>log-symbols（日志符号）</h2><p>使用 log-symbols 在信息前面加上 √ 或 × 等的图标，优化视觉体验：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(symbols.success, chalk.green(<span class=\"string\">&#x27;New project has been initialize successfully!&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"handlebars\"><a href=\"#handlebars\" class=\"headerlink\" title=\"handlebars\"></a>handlebars</h2><p>handlebars 可以对仓库的模板中的 package.json 文件做一些动态修改 :</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;&#123;&#123;name&#125;&#125;&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;version&quot;</span>: <span class=\"string\">&quot;1.0.0&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;description&quot;</span>: <span class=\"string\">&quot;&#123;&#123;description&#125;&#125;&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;dev&quot;</span>: <span class=\"string\">&quot;webpack-dev-server  --config build/webpack.dev.conf.js&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;start&quot;</span>: <span class=\"string\">&quot;npm run dev&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;build&quot;</span>: <span class=\"string\">&quot;node build/build.js&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;author&quot;</span>: <span class=\"string\">&quot;&#123;&#123;author&#125;&#125;&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;license&quot;</span>: <span class=\"string\">&quot;ISC&quot;</span>,</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n\n<p>并在下载模板完成之后将用户输入的答案渲染到 package.json 中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fileName = <span class=\"string\">&quot;./package.json;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> meta = &#123;</span><br><span class=\"line\">\t name,</span><br><span class=\"line\">     description: answers.description,</span><br><span class=\"line\">     author: answers.author</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">const</span> content = readFileSync(fileName).toString();</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = handlebars.compile(content)(meta);</span><br><span class=\"line\">writeFileSync(fileName, result);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"cli-table\"><a href=\"#cli-table\" class=\"headerlink\" title=\"cli-table\"></a>cli-table</h2><p>表格</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> table = <span class=\"keyword\">new</span> Table(&#123;</span><br><span class=\"line\">  head: [<span class=\"string\">&#x27;Template Name&#x27;</span>, <span class=\"string\">&#x27;Branch&#x27;</span>, <span class=\"string\">&#x27;Url&#x27;</span>],</span><br><span class=\"line\">  style: &#123;</span><br><span class=\"line\">    head: [<span class=\"string\">&#x27;green&#x27;</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"3、配置下载模板\"><a href=\"#3、配置下载模板\" class=\"headerlink\" title=\"3、配置下载模板\"></a>3、配置<strong>下载模板</strong></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">download(<span class=\"string\">&#x27;http://git.ym/g-web/mbs-cli.git#master&#x27;</span>, jay/$&#123;name&#125;, &#123;<span class=\"attr\">clone</span>: <span class=\"literal\">true</span>&#125;, <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">            spinner.fail();</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(symbols.error, chalk.red(err));</span><br><span class=\"line\">          &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            spinner.succeed();</span><br><span class=\"line\">            <span class=\"keyword\">const</span> fileName = <span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span>/package.json`</span>;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> meta = &#123;</span><br><span class=\"line\">              name,</span><br><span class=\"line\">              description: answers.description,</span><br><span class=\"line\">              author: answers.author</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(fs.existsSync(fileName))&#123;</span><br><span class=\"line\">              <span class=\"keyword\">const</span> content = fs.readFileSync(fileName).toString();</span><br><span class=\"line\">              <span class=\"keyword\">const</span> result = handlebars.compile(content)(meta);</span><br><span class=\"line\">              fs.writeFileSync(fileName, result);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(symbols.success, chalk.green(<span class=\"string\">&#x27;Project initialization completed&#x27;</span>));</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、命令行交互\"><a href=\"#4、命令行交互\" class=\"headerlink\" title=\"4、命令行交互\"></a>4、命令行交互</h3><p>命令行交互功能可以在用户执行 init 命令后，向用户提出问题，接收用户的输入并作出相应的处理。使用 inquirer.js 实现。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> tplList = <span class=\"built_in\">require</span>(<span class=\"string\">`<span class=\"subst\">$&#123;__dirname&#125;</span>/../templates`</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> questions = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        type: <span class=\"string\">&#x27;input&#x27;</span>,</span><br><span class=\"line\">        name: <span class=\"string\">&#x27;project&#x27;</span>,</span><br><span class=\"line\">        message: <span class=\"string\">&#x27;Project name:&#x27;</span>,</span><br><span class=\"line\">        validate (val) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (val !== <span class=\"string\">&#x27;&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Project name is required!&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      type: <span class=\"string\">&#x27;input&#x27;</span>,</span><br><span class=\"line\">      name: <span class=\"string\">&#x27;author&#x27;</span>,</span><br><span class=\"line\">      message: <span class=\"string\">&#x27;Please enter the author name:&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      type: <span class=\"string\">&#x27;input&#x27;</span>,</span><br><span class=\"line\">      name: <span class=\"string\">&#x27;description&#x27;</span>,</span><br><span class=\"line\">      message: <span class=\"string\">&#x27;Please enter a description of the project:&#x27;</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"string\">&#x27;a project do for you&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      type: <span class=\"string\">&#x27;input&#x27;</span>,</span><br><span class=\"line\">      name: <span class=\"string\">&#x27;place&#x27;</span>,</span><br><span class=\"line\">      message: <span class=\"string\">&#x27;Where to init the project:&#x27;</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"string\">&#x27;./&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = prompt(questions).then(<span class=\"function\"><span class=\"params\">answers</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> spinner = ora(<span class=\"string\">&#x27;Downloading template...&#x27;</span>);</span><br><span class=\"line\">    spinner.start()</span><br><span class=\"line\">    download(<span class=\"string\">`direct:<span class=\"subst\">$&#123;tplList[<span class=\"string\">&#x27;template1&#x27;</span>][<span class=\"string\">&#x27;url&#x27;</span>]&#125;</span>#<span class=\"subst\">$&#123;tplList[<span class=\"string\">&#x27;template1&#x27;</span>][<span class=\"string\">&#x27;branch&#x27;</span>]&#125;</span>`</span>, <span class=\"string\">`<span class=\"subst\">$&#123;answers.place&#125;</span>/<span class=\"subst\">$&#123;answers.project&#125;</span>`</span>, &#123;<span class=\"attr\">clone</span>: <span class=\"literal\">false</span>&#125;, <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">            spinner.fail();</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(symbols.error, chalk.red(err));</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            spinner.succeed();</span><br><span class=\"line\">            <span class=\"keyword\">const</span> fileName = <span class=\"string\">`<span class=\"subst\">$&#123;answers.project&#125;</span>/package.json`</span>;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> meta = &#123;</span><br><span class=\"line\">              name:answers.project,</span><br><span class=\"line\">              description: answers.description,</span><br><span class=\"line\">              author: answers.author</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(meta);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(existsSync(fileName))&#123;</span><br><span class=\"line\">              <span class=\"keyword\">const</span> content = readFileSync(fileName).toString();</span><br><span class=\"line\">              <span class=\"keyword\">const</span> result = handlebars.compile(content)(meta);</span><br><span class=\"line\">              writeFileSync(fileName, result);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(symbols.success, chalk.green(<span class=\"string\">&#x27;New project has been initialize successfully!&#x27;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、渲染模板\"><a href=\"#5、渲染模板\" class=\"headerlink\" title=\"5、渲染模板\"></a>5、渲染模板</h3><p>用 handlebars 的语法对 模板中的 package.json 文件做一些修改 ：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;&#123;&#123;name&#125;&#125;&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;version&quot;</span>: <span class=\"string\">&quot;1.0.0&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;description&quot;</span>: <span class=\"string\">&quot;&#123;&#123;description&#125;&#125;&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;author&quot;</span>: <span class=\"string\">&quot;&#123;&#123;author&#125;&#125;&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;license&quot;</span>: <span class=\"string\">&quot;ISC&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>并在下载模板完成之后将用户输入的答案渲染到 package.json 中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">program.version(<span class=\"string\">&#x27;1.0.0&#x27;</span>, <span class=\"string\">&#x27;-v, --version&#x27;</span>)</span><br><span class=\"line\">.command(<span class=\"string\">&#x27;init &lt;name&gt;&#x27;</span>)</span><br><span class=\"line\">.action(<span class=\"function\">(<span class=\"params\">name</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    inquirer.prompt([</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        name: <span class=\"string\">&#x27;description&#x27;</span>,</span><br><span class=\"line\">        message: <span class=\"string\">&#x27;请输入项目描述&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        name: <span class=\"string\">&#x27;author&#x27;</span>,</span><br><span class=\"line\">        message: <span class=\"string\">&#x27;请输入作者名称&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ]).then(<span class=\"function\">(<span class=\"params\">answers</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        download(<span class=\"string\">&#x27;xxxxx#master&#x27;</span>,name,&#123;<span class=\"attr\">clone</span>: <span class=\"literal\">true</span>&#125;,<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> meta = &#123;</span><br><span class=\"line\">                name,</span><br><span class=\"line\">                description: answers.description,</span><br><span class=\"line\">                author: answers.author</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> fileName = <span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span>/package.json`</span>;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> content = fs.readFileSync(fileName).toString();</span><br><span class=\"line\">            <span class=\"keyword\">const</span> result = handlebars.compile(content)(meta);</span><br><span class=\"line\">            fs.writeFileSync(fileName, result);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这里使用了 node.js 的文件模块 fs，将 handlebars 渲染完后的模板重新写入到文件中。</p>\n<h3 id=\"6、视觉美化\"><a href=\"#6、视觉美化\" class=\"headerlink\" title=\"6、视觉美化\"></a>6、视觉美化</h3><p>在用户输入答案之后，开始下载模板，这时候使用 ora 来提示用户正在下载中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const ora &#x3D; require(&#39;ora&#39;);</span><br><span class=\"line\">&#x2F;&#x2F; 开始下载</span><br><span class=\"line\">const spinner &#x3D; ora(&#39;正在下载模板...&#39;);</span><br><span class=\"line\">spinner.start();</span><br><span class=\"line\">&#x2F;&#x2F; 下载失败调用</span><br><span class=\"line\">spinner.fail();</span><br><span class=\"line\">&#x2F;&#x2F; 下载成功调用</span><br><span class=\"line\">spinner.succeed();</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"简单版脚手架完整示例\"><a href=\"#简单版脚手架完整示例\" class=\"headerlink\" title=\"简单版脚手架完整示例\"></a>简单版脚手架完整示例</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>);<span class=\"comment\">//系统内置模块 主要用来操作文件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> program = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;commander&#x27;</span>);<span class=\"comment\">//自动的解析命令和参数，用于处理用户输入的命令。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> download = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;download-git-repo&#x27;</span>);<span class=\"comment\">//下载并提取 git 仓库，用于下载项目模板。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> handlebars = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;handlebars&#x27;</span>);<span class=\"comment\">//模板引擎，将用户提交的信息动态填充到文件中。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> inquirer = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;inquirer&#x27;</span>);<span class=\"comment\">//通用的命令行用户界面集合，用于和用户进行交互。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ora = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;ora&#x27;</span>);<span class=\"comment\">//下载过程久的话，可以用于显示下载中的动画效果。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> chalk = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;chalk&#x27;</span>);<span class=\"comment\">//给终端的字体加上颜色。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> symbols = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;log-symbols&#x27;</span>);<span class=\"comment\">//在终端上显示出 √ 或 × 等的图标。</span></span><br><span class=\"line\"></span><br><span class=\"line\">program.version(<span class=\"string\">&#x27;1.0.4&#x27;</span>, <span class=\"string\">&#x27;-v, --version&#x27;</span>)</span><br><span class=\"line\">  .command(<span class=\"string\">&#x27;init &lt;name&gt;&#x27;</span>)</span><br><span class=\"line\">  .action(<span class=\"function\">(<span class=\"params\">name</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!fs.existsSync(name))&#123;</span><br><span class=\"line\">      inquirer.prompt([<span class=\"comment\">//prompt 提示</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          name: <span class=\"string\">&#x27;description&#x27;</span>,</span><br><span class=\"line\">          message: <span class=\"string\">&#x27;Please enter a description of the project:&#x27;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          name: <span class=\"string\">&#x27;author&#x27;</span>,</span><br><span class=\"line\">          message: <span class=\"string\">&#x27;Please enter the author name:&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]).then(<span class=\"function\">(<span class=\"params\">answers</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> spinner = ora(<span class=\"string\">&#x27;Downloading template...&#x27;</span>);</span><br><span class=\"line\">        spinner.start();</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 一级目录  name</span></span><br><span class=\"line\"><span class=\"comment\">         * 二级目录 jay/$&#123;name&#125;</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        download(<span class=\"string\">&#x27;http://git.ym/g-web/mbs-cli.git#master&#x27;</span>, jay/$&#123;name&#125;, &#123;<span class=\"attr\">clone</span>: <span class=\"literal\">true</span>&#125;, <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">            spinner.fail();</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(symbols.error, chalk.red(err));</span><br><span class=\"line\">          &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            spinner.succeed();</span><br><span class=\"line\">            <span class=\"keyword\">const</span> fileName = <span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span>/package.json`</span>;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> meta = &#123;</span><br><span class=\"line\">              name,</span><br><span class=\"line\">              description: answers.description,</span><br><span class=\"line\">              author: answers.author</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(fs.existsSync(fileName))&#123;</span><br><span class=\"line\">              <span class=\"keyword\">const</span> content = fs.readFileSync(fileName).toString();</span><br><span class=\"line\">              <span class=\"keyword\">const</span> result = handlebars.compile(content)(meta);</span><br><span class=\"line\">              fs.writeFileSync(fileName, result);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(symbols.success, chalk.green(<span class=\"string\">&#x27;Project initialization completed&#x27;</span>));</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 错误提示项目已存在，避免覆盖原有项目</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(symbols.error, chalk.red(<span class=\"string\">&#x27;Project already exists&#x27;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">program.parse(process.argv);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"mbs-cli-核心命令\"><a href=\"#mbs-cli-核心命令\" class=\"headerlink\" title=\"mbs-cli 核心命令\"></a>mbs-cli 核心命令</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Commands:</span><br><span class=\"line\"></span><br><span class=\"line\">  add|a             Add a <span class=\"keyword\">new</span> template</span><br><span class=\"line\">  list|l            List all the templates</span><br><span class=\"line\">  init|i            Generate a <span class=\"keyword\">new</span> project</span><br><span class=\"line\">  create|c          Generate a <span class=\"keyword\">new</span> project by choose a template</span><br><span class=\"line\">  init simple|ins   Generate a simple project</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\"></span><br><span class=\"line\">  -h, --help     output usage information</span><br><span class=\"line\">  -V, --version  output the version number</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"入口文件-mbs\"><a href=\"#入口文件-mbs\" class=\"headerlink\" title=\"入口文件 mbs\"></a>入口文件 mbs</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></span><br><span class=\"line\"></span><br><span class=\"line\">process.env.NODE_PATH = __dirname + <span class=\"string\">&#x27;/../node_modules/&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; resolve &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> chalk = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;chalk&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; existsSync &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> symbols = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;log-symbols&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> program = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;commander&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> res = <span class=\"function\"><span class=\"params\">command</span> =&gt;</span> resolve(__dirname, <span class=\"string\">&#x27;../commands/&#x27;</span>, command)</span><br><span class=\"line\"></span><br><span class=\"line\">program</span><br><span class=\"line\">  .usage(<span class=\"string\">&#x27;&lt;command&gt;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">program</span><br><span class=\"line\">  .version(<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../package&#x27;</span>).version )</span><br><span class=\"line\"></span><br><span class=\"line\">program</span><br><span class=\"line\">  .command(<span class=\"string\">&#x27;add&#x27;</span>)</span><br><span class=\"line\">  .description(<span class=\"string\">&#x27;Add a new template&#x27;</span>)</span><br><span class=\"line\">  .alias(<span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\">  .action(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(res(<span class=\"string\">&#x27;add&#x27;</span>))</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">program</span><br><span class=\"line\">  .command(<span class=\"string\">&#x27;init&#x27;</span>)</span><br><span class=\"line\">  .description(<span class=\"string\">&#x27;Generate a new project&#x27;</span>)</span><br><span class=\"line\">  .alias(<span class=\"string\">&#x27;i&#x27;</span>)</span><br><span class=\"line\">  .action(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(res(<span class=\"string\">&#x27;init&#x27;</span>))</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">program</span><br><span class=\"line\">  .command(<span class=\"string\">&#x27;create&#x27;</span>)</span><br><span class=\"line\">  .description(<span class=\"string\">&#x27;Generate a new project&#x27;</span>)</span><br><span class=\"line\">  .alias(<span class=\"string\">&#x27;c&#x27;</span>)</span><br><span class=\"line\">  .action(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(res(<span class=\"string\">&#x27;create&#x27;</span>))</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">program</span><br><span class=\"line\">  .command(<span class=\"string\">&#x27;list&#x27;</span>)</span><br><span class=\"line\">  .description(<span class=\"string\">&#x27;List all the templates&#x27;</span>)</span><br><span class=\"line\">  .alias(<span class=\"string\">&#x27;l&#x27;</span>)</span><br><span class=\"line\">  .action(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(res(<span class=\"string\">&#x27;list&#x27;</span>))</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">program.parse(process.argv);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!program.args.length)&#123;</span><br><span class=\"line\">  program.help();<span class=\"comment\">//如果没有输入参数，终端显示帮助</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"init-命令\"><a href=\"#init-命令\" class=\"headerlink\" title=\"init 命令\"></a>init 命令</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> tplList = <span class=\"built_in\">require</span>(<span class=\"string\">`<span class=\"subst\">$&#123;__dirname&#125;</span>/../templates`</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> questions = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        type: <span class=\"string\">&#x27;input&#x27;</span>,</span><br><span class=\"line\">        name: <span class=\"string\">&#x27;project&#x27;</span>,</span><br><span class=\"line\">        message: <span class=\"string\">&#x27;Project name:&#x27;</span>,</span><br><span class=\"line\">        validate (val) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (val !== <span class=\"string\">&#x27;&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Project name is required!&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      type: <span class=\"string\">&#x27;input&#x27;</span>,</span><br><span class=\"line\">      name: <span class=\"string\">&#x27;author&#x27;</span>,</span><br><span class=\"line\">      message: <span class=\"string\">&#x27;author name:&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      type: <span class=\"string\">&#x27;input&#x27;</span>,</span><br><span class=\"line\">      name: <span class=\"string\">&#x27;description&#x27;</span>,</span><br><span class=\"line\">      message: <span class=\"string\">&#x27;description of the project:&#x27;</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"string\">&#x27;a simple spa project&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      type: <span class=\"string\">&#x27;input&#x27;</span>,</span><br><span class=\"line\">      name: <span class=\"string\">&#x27;place&#x27;</span>,</span><br><span class=\"line\">      message: <span class=\"string\">&#x27;Where to init the project:&#x27;</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"string\">&#x27;./&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = prompt(questions).then(<span class=\"function\"><span class=\"params\">answers</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> spinner = ora(<span class=\"string\">&#x27;Downloading template...&#x27;</span>);</span><br><span class=\"line\">    spinner.start()</span><br><span class=\"line\">    download(<span class=\"string\">`direct:<span class=\"subst\">$&#123;tplList[<span class=\"string\">&#x27;template1&#x27;</span>][<span class=\"string\">&#x27;url&#x27;</span>]&#125;</span>#<span class=\"subst\">$&#123;tplList[<span class=\"string\">&#x27;template1&#x27;</span>][<span class=\"string\">&#x27;branch&#x27;</span>]&#125;</span>`</span>, <span class=\"string\">`<span class=\"subst\">$&#123;answers.place&#125;</span>/<span class=\"subst\">$&#123;answers.project&#125;</span>`</span>, &#123;<span class=\"attr\">clone</span>: <span class=\"literal\">true</span>&#125;, <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">            spinner.fail();</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(symbols.error, chalk.red(err));</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            spinner.succeed();</span><br><span class=\"line\">            <span class=\"keyword\">const</span> fileName = <span class=\"string\">`<span class=\"subst\">$&#123;answers.project&#125;</span>/package.json`</span>;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> meta = &#123;</span><br><span class=\"line\">              name:answers.project,</span><br><span class=\"line\">              description: answers.description,</span><br><span class=\"line\">              author: answers.author</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(meta);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(existsSync(fileName))&#123;</span><br><span class=\"line\">              <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;come in...&quot;</span>)</span><br><span class=\"line\">              <span class=\"keyword\">const</span> content = readFileSync(fileName).toString();</span><br><span class=\"line\">              <span class=\"keyword\">const</span> result = handlebars.compile(content)(meta);</span><br><span class=\"line\">              writeFileSync(fileName, result);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(symbols.success, chalk.green(<span class=\"string\">&#x27;New project has been initialize successfully!&#x27;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"init-simple-命令\"><a href=\"#init-simple-命令\" class=\"headerlink\" title=\"init simple 命令\"></a>init simple 命令</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> tplList = <span class=\"built_in\">require</span>(<span class=\"string\">`<span class=\"subst\">$&#123;__dirname&#125;</span>/../templates`</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> question = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        name: <span class=\"string\">&#x27;description&#x27;</span>,</span><br><span class=\"line\">        message: <span class=\"string\">&#x27;Please enter a description of the project:&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        name: <span class=\"string\">&#x27;author&#x27;</span>,</span><br><span class=\"line\">        message: <span class=\"string\">&#x27;Please enter the author name:&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = prompt(question).then(<span class=\"function\">(<span class=\"params\">answers</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> spinner = ora(<span class=\"string\">&#x27;Downloading template...&#x27;</span>);</span><br><span class=\"line\">    spinner.start()</span><br><span class=\"line\">    download(<span class=\"string\">`direct:<span class=\"subst\">$&#123;tplList[<span class=\"string\">&#x27;template2&#x27;</span>][<span class=\"string\">&#x27;url&#x27;</span>]&#125;</span>#<span class=\"subst\">$&#123;tplList[<span class=\"string\">&#x27;template2&#x27;</span>][<span class=\"string\">&#x27;branch&#x27;</span>]&#125;</span>`</span>, <span class=\"string\">`./<span class=\"subst\">$&#123;name&#125;</span>`</span>, &#123;<span class=\"attr\">clone</span>: <span class=\"literal\">true</span>&#125;, <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">            spinner.fail();</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(symbols.error, chalk.red(err));</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            spinner.succeed();</span><br><span class=\"line\">            <span class=\"keyword\">const</span> fileName = <span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span>/package.json`</span>;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> meta = &#123;</span><br><span class=\"line\">              name,</span><br><span class=\"line\">              description: answers.description,</span><br><span class=\"line\">              author: answers.author</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(existsSync(fileName))&#123;</span><br><span class=\"line\">              <span class=\"keyword\">const</span> content = readFileSync(fileName).toString();</span><br><span class=\"line\">              <span class=\"keyword\">const</span> result = handlebars.compile(content)(meta);</span><br><span class=\"line\">              writeFileSync(fileName, result);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(symbols.success, chalk.green(<span class=\"string\">&#x27;Project initialization completed&#x27;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"create-命令\"><a href=\"#create-命令\" class=\"headerlink\" title=\"create 命令\"></a>create 命令</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> templateList = <span class=\"built_in\">require</span>(<span class=\"string\">`<span class=\"subst\">$&#123;__dirname&#125;</span>/../templates`</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> rmTempList = <span class=\"built_in\">require</span>(<span class=\"string\">`<span class=\"subst\">$&#123;__dirname&#125;</span>/../config/remote-templates`</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> choices = rmTempList.map(<span class=\"function\"><span class=\"params\">template</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    name:<span class=\"string\">`<span class=\"subst\">$&#123;template.name&#125;</span> - <span class=\"subst\">$&#123;template.description&#125;</span>`</span>,</span><br><span class=\"line\">    value:template.name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> questions = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        type: <span class=\"string\">&#x27;input&#x27;</span>,</span><br><span class=\"line\">        name: <span class=\"string\">&#x27;project&#x27;</span>,</span><br><span class=\"line\">        message: <span class=\"string\">&#x27;Project name:&#x27;</span>,</span><br><span class=\"line\">        validate (val) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (val !== <span class=\"string\">&#x27;&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Project name is required!&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        type: <span class=\"string\">&#x27;list&#x27;</span>,</span><br><span class=\"line\">        name: <span class=\"string\">&#x27;template&#x27;</span>,</span><br><span class=\"line\">        choices,</span><br><span class=\"line\">        message: <span class=\"string\">&#x27;Choose template you want:&#x27;</span>,</span><br><span class=\"line\">        validate (val) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (val !== <span class=\"string\">&#x27;&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"string\">&#x27;template name is required!&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      type: <span class=\"string\">&#x27;input&#x27;</span>,</span><br><span class=\"line\">      name: <span class=\"string\">&#x27;author&#x27;</span>,</span><br><span class=\"line\">      message: <span class=\"string\">&#x27;author name:&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      type: <span class=\"string\">&#x27;input&#x27;</span>,</span><br><span class=\"line\">      name: <span class=\"string\">&#x27;description&#x27;</span>,</span><br><span class=\"line\">      message: <span class=\"string\">&#x27;description of the project:&#x27;</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      type: <span class=\"string\">&#x27;input&#x27;</span>,</span><br><span class=\"line\">      name: <span class=\"string\">&#x27;place&#x27;</span>,</span><br><span class=\"line\">      message: <span class=\"string\">&#x27;Where to init the project:&#x27;</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"string\">&#x27;./&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = prompt(questions).then(<span class=\"function\"><span class=\"params\">answers</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> spinner = ora(<span class=\"string\">&#x27;Downloading template...&#x27;</span>);</span><br><span class=\"line\">    spinner.start()</span><br><span class=\"line\">    <span class=\"keyword\">const</span> template = rmTempList.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> answers.template.includes(item.name) &amp;&amp; item;</span><br><span class=\"line\">    &#125;)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    download(<span class=\"string\">`direct:<span class=\"subst\">$&#123;template.url&#125;</span>#<span class=\"subst\">$&#123;template.branch&#125;</span>`</span>, <span class=\"string\">`<span class=\"subst\">$&#123;answers.place&#125;</span>/<span class=\"subst\">$&#123;answers.project&#125;</span>`</span>, &#123;<span class=\"attr\">clone</span>: <span class=\"literal\">true</span>&#125;, <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">            spinner.fail();</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(symbols.error, chalk.red(err));</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            spinner.succeed();</span><br><span class=\"line\">            <span class=\"keyword\">const</span> fileName = <span class=\"string\">`<span class=\"subst\">$&#123;answers.project&#125;</span>/package.json`</span>;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> meta = &#123;</span><br><span class=\"line\">              name:answers.project,</span><br><span class=\"line\">              description: answers.description,</span><br><span class=\"line\">              author: answers.author</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(meta);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(existsSync(fileName))&#123;</span><br><span class=\"line\">              <span class=\"keyword\">const</span> content = readFileSync(fileName).toString();</span><br><span class=\"line\">              <span class=\"keyword\">const</span> result = handlebars.compile(content)(meta);</span><br><span class=\"line\">              writeFileSync(fileName, result);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(symbols.success, chalk.green(<span class=\"string\">&#x27;New project has been initialize successfully!&#x27;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>效果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mbs create</span><br><span class=\"line\"></span><br><span class=\"line\">? Project name: demo</span><br><span class=\"line\">? Choose template you want: (Use arrow keys)</span><br><span class=\"line\">&gt; vue-webpack-pc - 基于webpack构建的vue项目模板</span><br><span class=\"line\">  react-webpack-pc - 基于webpack构建的react项目模板</span><br><span class=\"line\">  angular-webpack-pc - 基于webpack构建的angular项目模板</span><br><span class=\"line\">  discover your template - 更多海量模板等你发掘与收藏.</span><br><span class=\"line\">? Choose template you want: vue-webpack-pc - 基于webpack构建的vue项目模板</span><br><span class=\"line\">? Please enter the author name: jay</span><br><span class=\"line\">? Please enter a description of the project: a simple spa project</span><br><span class=\"line\">? Where to init the project: .&#x2F;</span><br><span class=\"line\">√ Downloading template...</span><br><span class=\"line\">√ New project has been initialize successfully!</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"add-命令\"><a href=\"#add-命令\" class=\"headerlink\" title=\"add 命令\"></a>add 命令</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; prompt &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;inquirer&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; writeFile &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; showTable &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">`<span class=\"subst\">$&#123;__dirname&#125;</span>/../utils`</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> tempList = <span class=\"built_in\">require</span>(<span class=\"string\">`<span class=\"subst\">$&#123;__dirname&#125;</span>/../templates`</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> question = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    type: <span class=\"string\">&#x27;input&#x27;</span>,</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;name&#x27;</span>,</span><br><span class=\"line\">    message: <span class=\"string\">&#x27;Set the custom name of the template:&#x27;</span>,</span><br><span class=\"line\">    validate (val) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (tempList[val]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Template is existed!&#x27;</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (val === <span class=\"string\">&#x27;&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Name is required!&#x27;</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    type: <span class=\"string\">&#x27;input&#x27;</span>,</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;branch&#x27;</span>,</span><br><span class=\"line\">    message: <span class=\"string\">&#x27;branch of the template:&#x27;</span>,</span><br><span class=\"line\">    validate (val) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (val !== <span class=\"string\">&#x27;&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;branch is required!&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    type: <span class=\"string\">&#x27;input&#x27;</span>,</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;url&#x27;</span>,</span><br><span class=\"line\">    message: <span class=\"string\">&#x27;Url of the template:&#x27;</span>,</span><br><span class=\"line\">    validate (val) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (val !== <span class=\"string\">&#x27;&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Url is required!&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = prompt(question).then(<span class=\"function\">(<span class=\"params\">&#123; name, branch, url &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  tempList[name] = &#123;&#125;</span><br><span class=\"line\">  tempList[name][<span class=\"string\">&#x27;branch&#x27;</span>] = branch</span><br><span class=\"line\">  tempList[name][<span class=\"string\">&#x27;url&#x27;</span>] = url</span><br><span class=\"line\"></span><br><span class=\"line\">  writeFile(<span class=\"string\">`<span class=\"subst\">$&#123;__dirname&#125;</span>/../templates.json`</span>, <span class=\"built_in\">JSON</span>.stringify(tempList), <span class=\"string\">&#x27;utf-8&#x27;</span>, <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    showTable(tempList, <span class=\"string\">&#x27;New template has been added successfully!&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>效果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mbs add</span><br><span class=\"line\"></span><br><span class=\"line\">? Set the custom name of the template: template1</span><br><span class=\"line\">? branch of the template: master</span><br><span class=\"line\">? Url of the template: http:&#x2F;&#x2F;git.ym&#x2F;Chenmh&#x2F;bs-init-template.git</span><br><span class=\"line\">┌───────────────┬────────┬───────────────────────────────────────────┐</span><br><span class=\"line\">│ Template Name │ Branch │ Url                                       │</span><br><span class=\"line\">├───────────────┼────────┼───────────────────────────────────────────┤</span><br><span class=\"line\">│ template1     │ master │ http:&#x2F;&#x2F;git.ym&#x2F;Chenmh&#x2F;bs-init-template.git │</span><br><span class=\"line\">└───────────────┴────────┴───────────────────────────────────────────┘</span><br><span class=\"line\">✔ New template has been added successfully!</span><br></pre></td></tr></table></figure>\n\n<p><code>mbs</code> use <a href=\"https://github.com/flipxfx/download-git-repo\">download-git-repo</a> to down load git repos. After answering 3 questions, you’ll add a new template to <code>mbs</code>.</p>\n<h4 id=\"list-命令\"><a href=\"#list-命令\" class=\"headerlink\" title=\"list 命令\"></a>list 命令</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; showTable &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">`<span class=\"subst\">$&#123;__dirname&#125;</span>/../utils`</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> tempList = <span class=\"built_in\">require</span>(<span class=\"string\">`<span class=\"subst\">$&#123;__dirname&#125;</span>/../templates`</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = showTable(tempList)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showTable</span> (<span class=\"params\">tempList</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> list = <span class=\"built_in\">Object</span>.keys(tempList)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (list.length) &#123;</span><br><span class=\"line\">    list.forEach(<span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      table.push([key, tempList[key][<span class=\"string\">&#x27;branch&#x27;</span>], tempList[key][<span class=\"string\">&#x27;url&#x27;</span>]])</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (table.length === list.length) &#123;</span><br><span class=\"line\">        process.exit()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(table.toString())</span><br><span class=\"line\">    process.exit()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mbs list</span><br><span class=\"line\"></span><br><span class=\"line\">┌───────────────┬──────────┬───────────────────────────────────────────┐</span><br><span class=\"line\">│ Template Name │ Branch   │ Url                                       │</span><br><span class=\"line\">├───────────────┼──────────┼───────────────────────────────────────────┤</span><br><span class=\"line\">│ template1     │ standard │ http:&#x2F;&#x2F;git.ym&#x2F;Chenmh&#x2F;bs-init-template.git │</span><br><span class=\"line\">├───────────────┼──────────┼───────────────────────────────────────────┤</span><br><span class=\"line\">│ template2     │ simple   │ http:&#x2F;&#x2F;git.ym&#x2F;Chenmh&#x2F;bs-init-template.git │</span><br><span class=\"line\">└───────────────┴──────────┴───────────────────────────────────────────┘</span><br></pre></td></tr></table></figure>\n\n<p>utils.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Table = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;cli-table&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> chalk = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;chalk&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> table = <span class=\"keyword\">new</span> Table(&#123;</span><br><span class=\"line\">  head: [<span class=\"string\">&#x27;Template Name&#x27;</span>, <span class=\"string\">&#x27;Branch&#x27;</span>, <span class=\"string\">&#x27;Url&#x27;</span>],</span><br><span class=\"line\">  style: &#123;</span><br><span class=\"line\">    head: [<span class=\"string\">&#x27;green&#x27;</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showTable</span> (<span class=\"params\">tempList, Exp</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> list = <span class=\"built_in\">Object</span>.keys(tempList)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (list.length) &#123;</span><br><span class=\"line\">    list.forEach(<span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      table.push([key, tempList[key][<span class=\"string\">&#x27;branch&#x27;</span>], tempList[key][<span class=\"string\">&#x27;url&#x27;</span>]])</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (table.length === list.length) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(table.toString())</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Exp) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(chalk.green(<span class=\"string\">`\\u2714 <span class=\"subst\">$&#123;Exp&#125;</span>`</span>))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        process.exit()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(table.toString())</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Exp) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(chalk.green(<span class=\"string\">`\\u2714 <span class=\"subst\">$&#123;Exp&#125;</span>`</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    process.exit()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">exports</span>.showTable = showTable</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>#脚手架发布</p>\n<h3 id=\"npm-登录\"><a href=\"#npm-登录\" class=\"headerlink\" title=\"npm 登录\"></a>npm 登录</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS D:\\yameiproject\\mbs-cli&gt; npm login</span><br><span class=\"line\">Username: chenyumen</span><br><span class=\"line\">Password:</span><br><span class=\"line\">Email: (this IS public) 13172050157@126.com</span><br><span class=\"line\">Logged in as chenyumen on https:&#x2F;&#x2F;registry.npmjs.org&#x2F;.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"npm-发布\"><a href=\"#npm-发布\" class=\"headerlink\" title=\"npm 发布\"></a>npm 发布</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS D:\\yameiproject\\mbs-cli&gt; npm publish</span><br><span class=\"line\">npm notice</span><br><span class=\"line\">npm notice package: mbs-cli@1.0.4</span><br><span class=\"line\">npm notice &#x3D;&#x3D;&#x3D; Tarball Contents &#x3D;&#x3D;&#x3D;</span><br><span class=\"line\">npm notice 573B  package.json</span><br><span class=\"line\">npm notice 2.5kB index.js</span><br><span class=\"line\">npm notice 193B  脚手架.md</span><br><span class=\"line\">npm notice &#x3D;&#x3D;&#x3D; Tarball Details &#x3D;&#x3D;&#x3D;</span><br><span class=\"line\">npm notice name:          mbs-cli</span><br><span class=\"line\">npm notice version:       1.0.4</span><br><span class=\"line\">npm notice package size:  1.8 kB</span><br><span class=\"line\">npm notice total files:   3</span><br><span class=\"line\">npm notice</span><br><span class=\"line\">+ mbs-cli@1.0.4</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"本地-npm-模块调试\"><a href=\"#本地-npm-模块调试\" class=\"headerlink\" title=\"本地 npm 模块调试\"></a>本地 npm 模块调试</h1><h3 id=\"开启调试模式\"><a href=\"#开启调试模式\" class=\"headerlink\" title=\"开启调试模式\"></a>开启调试模式</h3><p><code>npm link</code>命令可以将一个任意位置的<code>npm包</code>链接到全局执行环境，从而在任意位置使用命令行都可以直接运行该 npm 包。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\yamei\\AppData\\Roaming\\npm\\mbs -&gt; C:\\Users\\yamei\\AppData\\Roaming\\npm\\node_modules\\mbs-cli\\bin\\mbs</span><br><span class=\"line\">C:\\Users\\yamei\\AppData\\Roaming\\npm\\node_modules\\mbs-cli -&gt; D:\\yameiproject\\mbs-cli</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关闭调试模式\"><a href=\"#关闭调试模式\" class=\"headerlink\" title=\"关闭调试模式\"></a>关闭调试模式</h3><p>如果你的项目不再需要该模块，可以在项目目录内使用 npm unlink 命令，删除符号链接</p>\n<h1 id=\"延申\"><a href=\"#延申\" class=\"headerlink\" title=\"延申\"></a>延申</h1><p>1、丰富命令行交互，以适应更多变的需求。</p>\n<p>2、webpack 配置文件隐藏优化。</p>\n<h1 id=\"模板集成常用功能\"><a href=\"#模板集成常用功能\" class=\"headerlink\" title=\"模板集成常用功能\"></a>模板集成常用功能</h1><ul>\n<li>  登录、注销</li>\n<li>  DashBord</li>\n<li>  表格</li>\n<li>  Tab 选项卡</li>\n<li>  图表</li>\n<li>  富文本编辑器</li>\n<li>  三级菜单</li>\n<li>  国际化</li>\n<li>  图片拖拽、裁剪上传</li>\n<li>  列表拖拽排序</li>\n<li>  权限管理</li>\n<li>  404/403/500</li>\n</ul>\n<h1 id=\"模板项目结构\"><a href=\"#模板项目结构\" class=\"headerlink\" title=\"模板项目结构\"></a>模板项目结构</h1><p>├── build 构建服务和 webpack 配置<br>|—— build.js webpack 打包服务<br>|—— webpack.base.conf.js webpack 基本通用配置<br>|—— webpack.dev.conf.js webpack 开发环境配置<br>|—— webpack.prod.conf.js webpack 生产环境配置<br>├── config 构建项目不同环境的配置<br>├── public 项目打包文件存放目录<br>├── index.html 项目入口文件<br>├── package.json 项目配置文件<br>├── .babelrc babel 配置文件<br>├── .gitignore git 忽略文件<br>├── postcss.config.js postcss 配置文件<br>├── src 项目目录<br>├── assets 静态资源<br> ├── components 集成组件目录<br> |—— json json 目录<br>|—— lang 中英文目录<br>|—— router vue 路由配置<br>|—— service ajax 请求配置<br>|—— store vuex 配置<br>|—— styles 公共样式<br>|—— utils 工具类<br>|—— views 页面组件目录<br>|—— App.vue vue 实例入口<br>|—— main.js 项目构建入口</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckmejaerj0008xcvr8adzf51y","category_id":"ckmejaerg0004xcvrayv8hq44","_id":"ckmejaero000gxcvrdng5dp4v"},{"post_id":"ckmejaerb0001xcvr8w491h75","category_id":"ckmejaerg0004xcvrayv8hq44","_id":"ckmejaers000kxcvr2ktg12ww"},{"post_id":"ckmejaerk000axcvr3bfb1w8y","category_id":"ckmejaerg0004xcvrayv8hq44","_id":"ckmejaert000mxcvr7c0u8iig"},{"post_id":"ckmejaerm000dxcvrbo6517ht","category_id":"ckmejaerg0004xcvrayv8hq44","_id":"ckmejaeru000pxcvr4zka1dmo"},{"post_id":"ckmejaere0003xcvre17lduv4","category_id":"ckmejaerl000bxcvr1ggw65pa","_id":"ckmejaerv000rxcvrei8a19co"},{"post_id":"ckmejaero000fxcvr4tjn7b1a","category_id":"ckmejaerg0004xcvrayv8hq44","_id":"ckmejaerw000uxcvrekqq2622"},{"post_id":"ckmejaerh0006xcvr3h017xro","category_id":"ckmejaerl000bxcvr1ggw65pa","_id":"ckmejaerz000wxcvr3pglgymj"},{"post_id":"ckmejaert000oxcvr2bzj8c60","category_id":"ckmejaerg0004xcvrayv8hq44","_id":"ckmejaes0000yxcvr4oio92t6"},{"post_id":"ckmejaeru000qxcvrgydfffjd","category_id":"ckmejaerl000bxcvr1ggw65pa","_id":"ckmejaes20011xcvr80c90gw8"},{"post_id":"ckmejaerv000sxcvrabc570vr","category_id":"ckmejaerl000bxcvr1ggw65pa","_id":"ckmejaes40016xcvrdkm87hha"},{"post_id":"ckmejaers000lxcvrh8x9bjyy","category_id":"ckmejaerv000txcvrf76o0l3u","_id":"ckmejaes6001axcvr1cm7d72t"},{"post_id":"ckmejaerz000xxcvrgpiz8xr5","category_id":"ckmejaes20012xcvr83pb99h6","_id":"ckmejaes7001dxcvr10fmaq80"},{"post_id":"ckmejaes50018xcvr5xo87qhr","category_id":"ckmejaerg0004xcvrayv8hq44","_id":"ckmejaes8001gxcvr6l86hvy8"},{"post_id":"ckmejaes10010xcvrbc4464r8","category_id":"ckmejaes60019xcvr76sucrht","_id":"ckmejaes9001ixcvr0m4ugttn"},{"post_id":"ckmejaes8001fxcvr5xg8d9aw","category_id":"ckmejaes60019xcvr76sucrht","_id":"ckmejaesc001mxcvr77lk7pxf"},{"post_id":"ckmejaes20013xcvr21xhdpg1","category_id":"ckmejaes7001excvrd5v8a1de","_id":"ckmejaesd001pxcvrcnt862k4"},{"post_id":"ckmejaes9001hxcvrhq0u8lgw","category_id":"ckmejaerg0004xcvrayv8hq44","_id":"ckmejaese001rxcvr5y0989cr"},{"post_id":"ckmejaes30015xcvrfyd9d0am","category_id":"ckmejaesa001jxcvrebajgga5","_id":"ckmejaesf001txcvrd06oe9mj"},{"post_id":"ckmejaesd001qxcvrgs9s041b","category_id":"ckmejaerl000bxcvr1ggw65pa","_id":"ckmejaesh001xxcvr36a672v2"},{"post_id":"ckmejaes6001bxcvr8nombje8","category_id":"ckmejaesc001nxcvr4rlp1jyn","_id":"ckmejaesi0020xcvr8ojcg9wr"},{"post_id":"ckmejaese001sxcvr4w2m6pgq","category_id":"ckmejaerg0004xcvrayv8hq44","_id":"ckmejaesj0023xcvr2vceg9kx"},{"post_id":"ckmejaes7001cxcvrciv4ea7c","category_id":"ckmejaesc001nxcvr4rlp1jyn","_id":"ckmejaesl0028xcvrdw8fdpps"},{"post_id":"ckmejaesh001zxcvr4kzmcx61","category_id":"ckmejaerg0004xcvrayv8hq44","_id":"ckmejaesm002cxcvr5yl6fxjf"},{"post_id":"ckmejaesa001kxcvrcu027t3q","category_id":"ckmejaesh001yxcvrhs845wky","_id":"ckmejaesn002excvr634rhet4"},{"post_id":"ckmejaesi0022xcvr3ad01dtz","category_id":"ckmejaerg0004xcvrayv8hq44","_id":"ckmejaeso002hxcvrd8ms20ln"},{"post_id":"ckmejaesj0025xcvrcleybi9a","category_id":"ckmejaes60019xcvr76sucrht","_id":"ckmejaeso002jxcvracifaw6p"},{"post_id":"ckmejaesb001lxcvr1s6z6dtb","category_id":"ckmejaesj0024xcvr3wow40ql","_id":"ckmejaesp002lxcvr7f8mbc4x"},{"post_id":"ckmejaesm002bxcvr9ce13hjb","category_id":"ckmejaerg0004xcvrayv8hq44","_id":"ckmejaesq002oxcvrea8w4wua"},{"post_id":"ckmejaesd001oxcvrdyql4hfb","category_id":"ckmejaesl0029xcvrcdiafs67","_id":"ckmejaesq002qxcvrar5mgpoy"},{"post_id":"ckmejaesm002dxcvr7e56578b","category_id":"ckmejaerl000bxcvr1ggw65pa","_id":"ckmejaesr002sxcvr1u49esiv"},{"post_id":"ckmejaeso002ixcvr4lmoasez","category_id":"ckmejaerg0004xcvrayv8hq44","_id":"ckmejaess002uxcvr45izcs9u"},{"post_id":"ckmejaesp002kxcvrcjko6otn","category_id":"ckmejaerg0004xcvrayv8hq44","_id":"ckmejaest002yxcvrdq0mgils"},{"post_id":"ckmejaesp002nxcvrhif0cul9","category_id":"ckmejaerg0004xcvrayv8hq44","_id":"ckmejaesu0030xcvr52o2815k"},{"post_id":"ckmejaesq002pxcvrhycs0cem","category_id":"ckmejaerl000bxcvr1ggw65pa","_id":"ckmejaesu0032xcvr6lu26hjl"},{"post_id":"ckmejaesr002rxcvrbdv4629b","category_id":"ckmejaerl000bxcvr1ggw65pa","_id":"ckmejaesu0033xcvr3b880m4n"},{"post_id":"ckmejaesr002txcvr1cq39gtm","category_id":"ckmejaerg0004xcvrayv8hq44","_id":"ckmejaesu0034xcvr1dvn3bpw"},{"post_id":"ckmejaess002vxcvr5uj2dbur","category_id":"ckmejaerl000bxcvr1ggw65pa","_id":"ckmejaesu0035xcvrcavpgqwg"},{"post_id":"ckmejaest002xxcvr8rsrdqtt","category_id":"ckmejaerg0004xcvrayv8hq44","_id":"ckmejaesu0036xcvrg1ra0n30"},{"post_id":"ckmejaest002zxcvray0jb4a4","category_id":"ckmejaerg0004xcvrayv8hq44","_id":"ckmejaesu0037xcvrghhy09n6"},{"post_id":"ckmejaeta0038xcvr9uzi6w34","category_id":"ckmejaerg0004xcvrayv8hq44","_id":"ckmejaetc003bxcvrf5689cc9"},{"post_id":"ckmejaeta0039xcvr072680bb","category_id":"ckmejaerg0004xcvrayv8hq44","_id":"ckmejaetc003cxcvrd7hq3tr8"},{"post_id":"ckmejaetb003axcvr1hvi48l0","category_id":"ckmejaesl0029xcvrcdiafs67","_id":"ckmejaetc003dxcvr7cdz2cao"},{"post_id":"ckmejaetv003excvr53l95ix1","category_id":"ckmejaety003fxcvr4m0t7mis","_id":"ckmejaeu0003gxcvr72wccumc"},{"post_id":"ckmejaerr000jxcvrbybw3lcj","category_id":"ckmejaety003fxcvr4m0t7mis","_id":"ckmvduc88000018vrfwla2ogl"}],"PostTag":[{"post_id":"ckmejaerw000vxcvrawsx89cy","tag_id":"ckmejaes0000zxcvr4nwg5i97","_id":"ckmejaes50017xcvr46qhd1xh"}],"Tag":[{"name":"Vue","_id":"ckmejaes0000zxcvr4nwg5i97"},{"name":"设计","_id":"ckmejaesi0021xcvr7ocxafy6"}]}}