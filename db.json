{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"source/img/icon/favicon-128.png","path":"img/icon/favicon-128.png","modified":1,"renderable":0},{"_id":"source/img/icon/favicon-144.png","path":"img/icon/favicon-144.png","modified":1,"renderable":0},{"_id":"source/img/icon/favicon-152.png","path":"img/icon/favicon-152.png","modified":1,"renderable":0},{"_id":"source/img/icon/favicon-192.png","path":"img/icon/favicon-192.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"source/img/icon/favicon-256.png","path":"img/icon/favicon-256.png","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"source/uploads/avatar.png","path":"uploads/avatar.png","modified":1,"renderable":0},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"source/img/angular/1.png","path":"img/angular/1.png","modified":1,"renderable":0},{"_id":"source/img/icon/favicon.png","path":"img/icon/favicon.png","modified":1,"renderable":0},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/manifest.json","hash":"b933070e960f0a99cd50b9ecfc3efc59abf51430","modified":1500456769424},{"_id":"source/robots.txt","hash":"d3a30ca77efc0776504ce5c1e74800f25d700155","modified":1499681460919},{"_id":"source/sw.js","hash":"8e28b1469ed9e825fdead4b8f740f94f56877b35","modified":1500974307721},{"_id":"source/sw2.js","hash":"d8d3ce080c9655753debaf1a7446212593f474d9","modified":1501046663829},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1509441062435},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1509441062436},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1509441062438},{"_id":"themes/next/.gitignore","hash":"b935cc0e5b099ebd343ca1766e02f65138c13dd0","modified":1509441062466},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1509441062468},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1509441062470},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1509441062471},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1509441062473},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1509441062477},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1509441062474},{"_id":"themes/next/README.cn.md","hash":"59e323ce21535d561507c9ecc984b7c4dcb61514","modified":1509441062479},{"_id":"themes/next/_config.yml","hash":"5d1ab9548d80260e4c0bf81fb23bef329b5a8c54","modified":1509441849729},{"_id":"themes/next/bower.json","hash":"47471a8f13528dc4052b746db5b4be2375682173","modified":1509441062485},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1509441062487},{"_id":"themes/next/README.md","hash":"631d68e9cbced2f11cd976bf883b7d8b08b9b365","modified":1509441062481},{"_id":"themes/next/package.json","hash":"39370e2aadf1f9a7c105edff064c6e47682b3932","modified":1509441062665},{"_id":"source/_posts/HTTPS.md","hash":"afd7f68385743d6152037c8d9c6d57c2cc67441a","modified":1501037807347},{"_id":"source/_posts/Observable.md","hash":"f22e389dce7eed1fc22584ce4d92b72e64e5f7a2","modified":1506394264687},{"_id":"source/_posts/PWA-offline.md","hash":"1b88f0388c69a82a745929cfb412ad426c518b3c","modified":1506394264697},{"_id":"source/_posts/angular-form.md","hash":"142b7fa4f91c970dccf6a5457013d36adc95d480","modified":1509417882564},{"_id":"source/_posts/PWA-pushMessage.md","hash":"46e8acd131e3134a74a42e524bfc53dcf37888ce","modified":1509442441385},{"_id":"source/_posts/angular-数据绑定.md","hash":"483f29e34d5936f6d768bc5804d9f425e0973236","modified":1509417897376},{"_id":"source/_posts/angular基础.md","hash":"02b47badf5494af483deeeac21feca70ae81645d","modified":1509415790139},{"_id":"source/_posts/css-小技巧.md","hash":"5cdc1d9d5965eea38da72ad23f27c472ae2ecb85","modified":1509437918630},{"_id":"source/_posts/localstorage.md","hash":"c1048b5ce4431512730ec6c3e9466919506a42e5","modified":1509415900188},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1509441062312},{"_id":"themes/next/.git/config","hash":"8e94cc015a498d35202e9fd57e44b3c51e1e5634","modified":1509441062347},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1509440648791},{"_id":"themes/next/.git/index","hash":"1960047dedf66acf62e24158fd9a3296dadf197f","modified":1509441063096},{"_id":"themes/next/.git/packed-refs","hash":"3d90ea66b3b07a3cc335729080c305916def9d29","modified":1509441062279},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1509441062439},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"b1ec000babd42bb7ffd26f5ad8aac9b5bec79ae5","modified":1509441062442},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1509441062445},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1509441062464},{"_id":"themes/next/layout/_layout.swig","hash":"7d91c9ca571067a3548d0f3c132b480cd3beb823","modified":1509441062523},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1509441062649},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1509441062651},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1509441062653},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1509441062655},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1509441062660},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1509441062656},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1509441062664},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1509441062490},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1509441062492},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1509441062495},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1509441062497},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1509441062499},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1509441062500},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1509441062503},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1509441062505},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1509441062506},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1509441062507},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1509441062510},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1509441062513},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1509441062514},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1509441062516},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1509441062518},{"_id":"themes/next/scripts/merge-configs.js","hash":"5758f8f3f12d17bc80da65bb808a20b3a8aae186","modified":1509441062667},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1509441062669},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1509441063091},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1509441063093},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1509441063094},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509441062844},{"_id":"source/img/icon/favicon-128.png","hash":"4fa5922103bd25d247ed0396bd300a9e2f4df281","modified":1499769151893},{"_id":"source/img/icon/favicon-144.png","hash":"1b7e0e5413858a3d78d96525eb355272723a7307","modified":1499769176232},{"_id":"source/img/icon/favicon-152.png","hash":"812012863f0b2cd299bd5744653220de15e1fca8","modified":1499769197938},{"_id":"source/img/icon/favicon-192.png","hash":"c4e5d1a37dab992bad489ce2a4febf90ae911b28","modified":1499769222160},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1509440648791},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1509440648791},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1509440648791},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1509440648791},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1509440648807},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1509440648807},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1509440648807},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1509440648807},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1509440648807},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1509440648807},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1509440648807},{"_id":"themes/next/.git/logs/HEAD","hash":"100a3882174141b0fa85368cd1fdb4a1e8a52230","modified":1509441062323},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1509441062521},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1509441062522},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1509441062526},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1509441062529},{"_id":"themes/next/layout/_macro/post.swig","hash":"18365c242e07bd4fd622f9cf8abc8f74c24072b6","modified":1509441062531},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1509441062532},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1509441062536},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b9f9959225876fb56fb3fba96306d19396e704d4","modified":1509441062534},{"_id":"themes/next/layout/_partials/comments.swig","hash":"de45e77e7d52cf317129b7d21415a3002b95b94e","modified":1509441062538},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1509441062539},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1509441062557},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1509441062541},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1509441062560},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1509441062562},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1509441062564},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1509441062579},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1509441062580},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1509441062588},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1509441062623},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1509441062624},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1509441062626},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1509441062628},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1509441062630},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1509441062632},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1509441062633},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1509441062671},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1509441062672},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1509441062674},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1509441062677},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1509441062678},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1509441062681},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1509441062680},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1509441062683},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1509441062684},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1509441062842},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1509441062846},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1509441062848},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1509441062849},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1509441062852},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1509441062851},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1509441062853},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1509441062855},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1509441062856},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1509441062857},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1509441062861},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1509441062860},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1509441062863},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1509441062865},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1509441062866},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1509441062867},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1509441062868},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1509441062871},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1509441062869},{"_id":"source/img/icon/favicon-256.png","hash":"288f800a40b783bb7d9b95614ea571c1c93bde13","modified":1499769254393},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509441062585},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509441062586},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509441062794},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509441062794},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509441062798},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509441062835},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509441062840},{"_id":"themes/next/.git/refs/heads/master","hash":"eb8c8217b5b54bca0d0d095cea23fa5b0dde457a","modified":1509441062320},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1509441062545},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1509441062547},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1509441062567},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1509441062569},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1509441062568},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1509441062571},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1509441062573},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1509441062572},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1509441062576},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1509441062582},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1509441062584},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1509441062587},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1509441062591},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1509441062595},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1509441062593},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1509441062597},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1509441062598},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1509441062600},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1509441062601},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1509441062603},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1509441062604},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1509441062605},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1509441062608},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1509441062606},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1509441062611},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1509441062612},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1509441062614},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1509441062615},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1509441062617},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1509441062618},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1509441062619},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"1b492d528a7d48216d4548011000fced2f4a538d","modified":1509441062621},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1509441062622},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1509441062640},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1509441062638},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1509441062647},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1509441062641},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1509441062791},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1509441062793},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1509441062796},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1509441062797},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1509441062832},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1509441062834},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1509441062838},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1509441062839},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1509441062873},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1509441062879},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1509441062875},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1509441062877},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1509441062881},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1509441062882},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1509441062884},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1509441062885},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1509441062888},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1509441062889},{"_id":"themes/next/source/js/src/utils.js","hash":"b7ddc240208d57596a67c78a04a11b0f0bdecc97","modified":1509441062890},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1509441062920},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1509441062930},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1509441062928},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1509441062933},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1509441062931},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1509441062962},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1509441062961},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1509441062965},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1509441062964},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1509441062970},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1509441062972},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1509441062973},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1509441062975},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1509441062977},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1509441063031},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1509441063034},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1509441063037},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1509441063036},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1509441063038},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1509441063040},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1509441063042},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1509441063045},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1509441063046},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1509441063049},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1509441063050},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1509441063048},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1509441063051},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1509441063053},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1509441063054},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1509441063057},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1509441063055},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1509441063058},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1509441063060},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1509441063062},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1509441063061},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1509441063063},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1509441063064},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1509441063066},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1509441063068},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1509441063069},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1509441063070},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1509441063082},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1509441063081},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1509441063087},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1509441063088},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1509441063089},{"_id":"source/uploads/avatar.png","hash":"4028c66fa0025bfb4c5590926fd88b56cb60606e","modified":1509416745624},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1509441063033},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"100a3882174141b0fa85368cd1fdb4a1e8a52230","modified":1509441062332},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1509441062305},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1509441062637},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1509441062636},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1509441062687},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1509441062688},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1509441062690},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1509441062689},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1509441062693},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1509441062716},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1509441062750},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1509441062781},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1509441062783},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1509441062784},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1509441062785},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1509441062786},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1509441062788},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1509441062789},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1509441062800},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1509441062802},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1509441062803},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1509441062804},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1509441062806},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1509441062807},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1509441062809},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1509441062810},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1509441062815},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1509441062816},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"a98ad885ee4f48d85b2578a0b9c2bbf166e96733","modified":1509441062818},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1509441062819},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1509441062820},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1509441062823},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1509441062824},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1509441062826},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1509441062827},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"30561ed60fc64f3e4ce85143bdb55faa814743a6","modified":1509441062828},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1509441062830},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1509441062887},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1509441062902},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1509441062905},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1509441062919},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1509441062936},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1509441062937},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1509441062938},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1509441062939},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1509441062942},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1509441062955},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1509441062957},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1509441062959},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1509441062969},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1509441062967},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1509441062981},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1509441062934},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1509441062982},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1509441063078},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1509441063079},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1509441062979},{"_id":"source/img/angular/1.png","hash":"30eb57d807f7ab998f64852b9982d0ee1bcf9c3c","modified":1506394255573},{"_id":"source/img/icon/favicon.png","hash":"4028c66fa0025bfb4c5590926fd88b56cb60606e","modified":1499767790914},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1509441062903},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1509441063026},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1509441063028},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1509441063085},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"100a3882174141b0fa85368cd1fdb4a1e8a52230","modified":1509441062304},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1509441062695},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1509441062697},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1509441062698},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1509441062699},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1509441062701},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1509441062702},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1509441062704},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1509441062705},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1509441062707},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1509441062710},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1509441062711},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1509441062714},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1509441062713},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1509441062715},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1509441062737},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1509441062739},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1509441062741},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1509441062740},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1509441062743},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1509441062744},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"28a8737c090fbffd188d73a00b42e90b9ee57df2","modified":1509441062746},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1509441062747},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1509441062749},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1509441062748},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1509441062718},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1509441062719},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1509441062720},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1509441062722},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1509441062725},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1509441062726},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1509441062723},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1509441062727},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1509441062728},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1509441062730},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1509441062732},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1509441062731},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1509441062733},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1509441062734},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1509441062735},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1509441062753},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1509441062755},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1509441062754},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1509441062757},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1509441062758},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1509441062760},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1509441062761},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1509441062764},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1509441062762},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1509441062767},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1509441062768},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1509441062771},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1509441062769},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1509441062772},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1509441062773},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1509441062775},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1509441062776},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1509441062778},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1509441062779},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1509441062812},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1509441062814},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1509441062821},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1509441062894},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1509441062896},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1509441062897},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1509441062899},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1509441062900},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1509441062944},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1509441062946},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1509441062949},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1509441062947},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1509441062952},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1509441062954},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1509441062990},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1509441062987},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1509441062998},{"_id":"themes/next/.git/objects/pack/pack-887f512cbfca03943166cc81b8036ba873e3f75f.idx","hash":"4d5441f8aa2cacecd9f34f7c147642f24ac515f7","modified":1509441061841},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1509441062925},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1509441063076},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1509441062995},{"_id":"themes/next/.git/objects/pack/pack-887f512cbfca03943166cc81b8036ba873e3f75f.pack","hash":"a501420dc1801da7b3661634e390975b9a4cc4c8","modified":1509441061958}],"Category":[{"name":"PWA","_id":"cj9ffr3q400096cvr30aiyt7l"}],"Data":[],"Page":[{"_content":"{\n  \"name\": \"colorfulPwa\",\n  \"short_name\": \"colorfulPwa\",\n  \"icons\": [{\n    \"src\": \"./favicon.png\",\n      \"sizes\": \"128x128\",\n      \"type\": \"image/png\"\n    }, {\n      \"src\": \"./favicon.png\",\n      \"sizes\": \"144x144\",\n      \"type\": \"image/png\"\n    }, {\n      \"src\": \"./favicon.png\",\n      \"sizes\": \"152x152\",\n      \"type\": \"image/png\"\n    }, {\n      \"src\": \"./favicon.png\",\n      \"sizes\": \"192x192\",\n      \"type\": \"image/png\"\n    }, {\n      \"src\": \"./favicon.png\",\n      \"sizes\": \"256x256\",\n      \"type\": \"image/png\"\n    }],\n  \"start_url\": \"./index.html\",\n  \"display\": \"standalone\",\n  \"background_color\": \"#fff\",\n  \"theme_color\": \"#fff\"\n}\n","source":"manifest.json","raw":"{\n  \"name\": \"colorfulPwa\",\n  \"short_name\": \"colorfulPwa\",\n  \"icons\": [{\n    \"src\": \"./favicon.png\",\n      \"sizes\": \"128x128\",\n      \"type\": \"image/png\"\n    }, {\n      \"src\": \"./favicon.png\",\n      \"sizes\": \"144x144\",\n      \"type\": \"image/png\"\n    }, {\n      \"src\": \"./favicon.png\",\n      \"sizes\": \"152x152\",\n      \"type\": \"image/png\"\n    }, {\n      \"src\": \"./favicon.png\",\n      \"sizes\": \"192x192\",\n      \"type\": \"image/png\"\n    }, {\n      \"src\": \"./favicon.png\",\n      \"sizes\": \"256x256\",\n      \"type\": \"image/png\"\n    }],\n  \"start_url\": \"./index.html\",\n  \"display\": \"standalone\",\n  \"background_color\": \"#fff\",\n  \"theme_color\": \"#fff\"\n}\n","date":"2017-07-19T09:32:49.424Z","updated":"2017-07-19T09:32:49.424Z","path":"manifest.json","layout":"false","title":"","comments":1,"_id":"cj9ffr3oj00006cvrsmg5cqig","content":"{\"name\":\"colorfulPwa\",\"short_name\":\"colorfulPwa\",\"icons\":[{\"src\":\"./favicon.png\",\"sizes\":\"128x128\",\"type\":\"image/png\"},{\"src\":\"./favicon.png\",\"sizes\":\"144x144\",\"type\":\"image/png\"},{\"src\":\"./favicon.png\",\"sizes\":\"152x152\",\"type\":\"image/png\"},{\"src\":\"./favicon.png\",\"sizes\":\"192x192\",\"type\":\"image/png\"},{\"src\":\"./favicon.png\",\"sizes\":\"256x256\",\"type\":\"image/png\"}],\"start_url\":\"./index.html\",\"display\":\"standalone\",\"background_color\":\"#fff\",\"theme_color\":\"#fff\"}","site":{"data":{}},"excerpt":"","more":"{\"name\":\"colorfulPwa\",\"short_name\":\"colorfulPwa\",\"icons\":[{\"src\":\"./favicon.png\",\"sizes\":\"128x128\",\"type\":\"image/png\"},{\"src\":\"./favicon.png\",\"sizes\":\"144x144\",\"type\":\"image/png\"},{\"src\":\"./favicon.png\",\"sizes\":\"152x152\",\"type\":\"image/png\"},{\"src\":\"./favicon.png\",\"sizes\":\"192x192\",\"type\":\"image/png\"},{\"src\":\"./favicon.png\",\"sizes\":\"256x256\",\"type\":\"image/png\"}],\"start_url\":\"./index.html\",\"display\":\"standalone\",\"background_color\":\"#fff\",\"theme_color\":\"#fff\"}"},{"_content":"\nvar cache_name = 'development';\nvar filesToCache = [\n    '/',\n    '/archives/index.html',\n    '/css/apollo.css',\n    '/favicon.png',\n    '/img/icon/favicon-128.png'\n];\n\nself.addEventListener('install', function (e) {\n    console.log('[ServiceWorker] Install');\n    /*ExtendableEvent.waitUntil():\n     延长了时间的生命周期。在服务工作中，延长事件的生命周期阻止浏览器在事件中的一部操作完成之前终止service worker。\n     当在与安装事件相关联的EventHandler中调用时，它会延时将已安装的工作程序视为安装，\n     直到传递的promise成功解析为止。这主要用于确保service worker在其依赖的所有核心高速缓存填充之前不会被考虑安装*/\n    e.waitUntil(\n        caches.open(cache_name).then(function (cache) {\n            console.log('[ServiceWorker] Caching app shell');\n            console.log(cache);\n            return cache.addAll(filesToCache);\n        })\n    );\n    if(cache_name ==='development'){\n        self.skipWaiting(); //重新加载后立即激活\n    }\n\n});\n/*这里我们新增了install 事件监听器，接着在事件上接了一个ExtendableEvent.waitUntil()方法\n 这会确保service worker不会在waitUntil()里面的代码执行完毕之前安装完成*/\n/*我们使用caches.open()方法创建了一个githubPage-1的新缓存，将会是我们站点资源的缓存的第一个版本。它返回了一个创建缓存的promise,\n 当它resolved 的时候，我们接着会调用在创建的缓存上的一个方法addALL()，这个方法的参数是一个由一组相对于origin的URL组成的数组，\n 这个数组就是你想缓存的资源的列表*/\n\nself.addEventListener('activate', function (e) {\n    console.log('[serviceWorker] Cacheing app shell');\n    e.waitUntil(\n        caches.keys().then(function (keyList) {\n            return Promise.all(keyList.map(function (key) {\n                if (key !== cache_name) {\n                    console.log('[serviceWorker] removing old cache', key);\n                    return caches.delete(key);\n                }\n            }));\n        })\n    );\n    return self.clients.claim();\n});\n\nself.addEventListener('fetch', function (e) {\n    console.log('[service worker] fetch', e.request.url);\n    /*respondWith()方法旨在包裹代码，这些代码为来自受控页面的request生成的自定义的response。用来劫持我们的http响应*/\n    e.respondWith(\n        caches.match(e.request).then(function (response) {\n            //如果sw有自己的返回，就直接返回，减少一次http请求。\n            if (response) {\n                console.log('[SW]:', '读取缓存',  e.request.method,  e.request.url);\n                return response;\n            }\n\n            //如果没有返回，就直接请求真实远程服务\n            var request = e.request.clone(); //拷贝原始请求\n            //clone()允许多次请求body()对象。\n            return fetch(request).then(function (httpRes) {\n                //http请求的返回已经抓到，可以进行设置\n\n                //请求失败，直接返回失败的结果\n                if (!httpRes || httpRes.status !== 200) {\n                    console.log(\"失败:\");\n                    console.log(httpRes);\n                    return httpRes;\n                }\n                   else{\n                    var responseClone = httpRes.clone();\n                    caches.open(cache_name).then(function (cache) {\n                        console.log(\"请求缓存\");\n                        cache.put(e.request, responseClone);\n                    });\n                    return httpRes;\n                }\n            });\n\n        })\n    );\n\n});\n/*每次任何被service worker 控制的资源被请求到时，都会触发fetch事件，这些资源包括了指定的scope内的\n html 文档，和这些html文档内引用的其他任何资源（比如index.html发起了一个跨域的请求来嵌入一张图片，这个也会通过service worker*/\n/*我们可以在install 的时候进行静态资源缓存。也可以通过fetch事件回调来代理页面请求从而实现动态资源缓存*/\n","source":"sw.js","raw":"\nvar cache_name = 'development';\nvar filesToCache = [\n    '/',\n    '/archives/index.html',\n    '/css/apollo.css',\n    '/favicon.png',\n    '/img/icon/favicon-128.png'\n];\n\nself.addEventListener('install', function (e) {\n    console.log('[ServiceWorker] Install');\n    /*ExtendableEvent.waitUntil():\n     延长了时间的生命周期。在服务工作中，延长事件的生命周期阻止浏览器在事件中的一部操作完成之前终止service worker。\n     当在与安装事件相关联的EventHandler中调用时，它会延时将已安装的工作程序视为安装，\n     直到传递的promise成功解析为止。这主要用于确保service worker在其依赖的所有核心高速缓存填充之前不会被考虑安装*/\n    e.waitUntil(\n        caches.open(cache_name).then(function (cache) {\n            console.log('[ServiceWorker] Caching app shell');\n            console.log(cache);\n            return cache.addAll(filesToCache);\n        })\n    );\n    if(cache_name ==='development'){\n        self.skipWaiting(); //重新加载后立即激活\n    }\n\n});\n/*这里我们新增了install 事件监听器，接着在事件上接了一个ExtendableEvent.waitUntil()方法\n 这会确保service worker不会在waitUntil()里面的代码执行完毕之前安装完成*/\n/*我们使用caches.open()方法创建了一个githubPage-1的新缓存，将会是我们站点资源的缓存的第一个版本。它返回了一个创建缓存的promise,\n 当它resolved 的时候，我们接着会调用在创建的缓存上的一个方法addALL()，这个方法的参数是一个由一组相对于origin的URL组成的数组，\n 这个数组就是你想缓存的资源的列表*/\n\nself.addEventListener('activate', function (e) {\n    console.log('[serviceWorker] Cacheing app shell');\n    e.waitUntil(\n        caches.keys().then(function (keyList) {\n            return Promise.all(keyList.map(function (key) {\n                if (key !== cache_name) {\n                    console.log('[serviceWorker] removing old cache', key);\n                    return caches.delete(key);\n                }\n            }));\n        })\n    );\n    return self.clients.claim();\n});\n\nself.addEventListener('fetch', function (e) {\n    console.log('[service worker] fetch', e.request.url);\n    /*respondWith()方法旨在包裹代码，这些代码为来自受控页面的request生成的自定义的response。用来劫持我们的http响应*/\n    e.respondWith(\n        caches.match(e.request).then(function (response) {\n            //如果sw有自己的返回，就直接返回，减少一次http请求。\n            if (response) {\n                console.log('[SW]:', '读取缓存',  e.request.method,  e.request.url);\n                return response;\n            }\n\n            //如果没有返回，就直接请求真实远程服务\n            var request = e.request.clone(); //拷贝原始请求\n            //clone()允许多次请求body()对象。\n            return fetch(request).then(function (httpRes) {\n                //http请求的返回已经抓到，可以进行设置\n\n                //请求失败，直接返回失败的结果\n                if (!httpRes || httpRes.status !== 200) {\n                    console.log(\"失败:\");\n                    console.log(httpRes);\n                    return httpRes;\n                }\n                   else{\n                    var responseClone = httpRes.clone();\n                    caches.open(cache_name).then(function (cache) {\n                        console.log(\"请求缓存\");\n                        cache.put(e.request, responseClone);\n                    });\n                    return httpRes;\n                }\n            });\n\n        })\n    );\n\n});\n/*每次任何被service worker 控制的资源被请求到时，都会触发fetch事件，这些资源包括了指定的scope内的\n html 文档，和这些html文档内引用的其他任何资源（比如index.html发起了一个跨域的请求来嵌入一张图片，这个也会通过service worker*/\n/*我们可以在install 的时候进行静态资源缓存。也可以通过fetch事件回调来代理页面请求从而实现动态资源缓存*/\n","date":"2017-07-25T09:18:27.721Z","updated":"2017-07-25T09:18:27.721Z","path":"sw.js","layout":"false","title":"","comments":1,"_id":"cj9ffr3ol00016cvrug8cl84g","content":"\nvar cache_name = 'development';\nvar filesToCache = [\n    '/',\n    '/archives/index.html',\n    '/css/apollo.css',\n    '/favicon.png',\n    '/img/icon/favicon-128.png'\n];\n\nself.addEventListener('install', function (e) {\n    console.log('[ServiceWorker] Install');\n    /*ExtendableEvent.waitUntil():\n     延长了时间的生命周期。在服务工作中，延长事件的生命周期阻止浏览器在事件中的一部操作完成之前终止service worker。\n     当在与安装事件相关联的EventHandler中调用时，它会延时将已安装的工作程序视为安装，\n     直到传递的promise成功解析为止。这主要用于确保service worker在其依赖的所有核心高速缓存填充之前不会被考虑安装*/\n    e.waitUntil(\n        caches.open(cache_name).then(function (cache) {\n            console.log('[ServiceWorker] Caching app shell');\n            console.log(cache);\n            return cache.addAll(filesToCache);\n        })\n    );\n    if(cache_name ==='development'){\n        self.skipWaiting(); //重新加载后立即激活\n    }\n\n});\n/*这里我们新增了install 事件监听器，接着在事件上接了一个ExtendableEvent.waitUntil()方法\n 这会确保service worker不会在waitUntil()里面的代码执行完毕之前安装完成*/\n/*我们使用caches.open()方法创建了一个githubPage-1的新缓存，将会是我们站点资源的缓存的第一个版本。它返回了一个创建缓存的promise,\n 当它resolved 的时候，我们接着会调用在创建的缓存上的一个方法addALL()，这个方法的参数是一个由一组相对于origin的URL组成的数组，\n 这个数组就是你想缓存的资源的列表*/\n\nself.addEventListener('activate', function (e) {\n    console.log('[serviceWorker] Cacheing app shell');\n    e.waitUntil(\n        caches.keys().then(function (keyList) {\n            return Promise.all(keyList.map(function (key) {\n                if (key !== cache_name) {\n                    console.log('[serviceWorker] removing old cache', key);\n                    return caches.delete(key);\n                }\n            }));\n        })\n    );\n    return self.clients.claim();\n});\n\nself.addEventListener('fetch', function (e) {\n    console.log('[service worker] fetch', e.request.url);\n    /*respondWith()方法旨在包裹代码，这些代码为来自受控页面的request生成的自定义的response。用来劫持我们的http响应*/\n    e.respondWith(\n        caches.match(e.request).then(function (response) {\n            //如果sw有自己的返回，就直接返回，减少一次http请求。\n            if (response) {\n                console.log('[SW]:', '读取缓存',  e.request.method,  e.request.url);\n                return response;\n            }\n\n            //如果没有返回，就直接请求真实远程服务\n            var request = e.request.clone(); //拷贝原始请求\n            //clone()允许多次请求body()对象。\n            return fetch(request).then(function (httpRes) {\n                //http请求的返回已经抓到，可以进行设置\n\n                //请求失败，直接返回失败的结果\n                if (!httpRes || httpRes.status !== 200) {\n                    console.log(\"失败:\");\n                    console.log(httpRes);\n                    return httpRes;\n                }\n                   else{\n                    var responseClone = httpRes.clone();\n                    caches.open(cache_name).then(function (cache) {\n                        console.log(\"请求缓存\");\n                        cache.put(e.request, responseClone);\n                    });\n                    return httpRes;\n                }\n            });\n\n        })\n    );\n\n});\n/*每次任何被service worker 控制的资源被请求到时，都会触发fetch事件，这些资源包括了指定的scope内的\n html 文档，和这些html文档内引用的其他任何资源（比如index.html发起了一个跨域的请求来嵌入一张图片，这个也会通过service worker*/\n/*我们可以在install 的时候进行静态资源缓存。也可以通过fetch事件回调来代理页面请求从而实现动态资源缓存*/\n","site":{"data":{}},"excerpt":"","more":"\nvar cache_name = 'development';\nvar filesToCache = [\n    '/',\n    '/archives/index.html',\n    '/css/apollo.css',\n    '/favicon.png',\n    '/img/icon/favicon-128.png'\n];\n\nself.addEventListener('install', function (e) {\n    console.log('[ServiceWorker] Install');\n    /*ExtendableEvent.waitUntil():\n     延长了时间的生命周期。在服务工作中，延长事件的生命周期阻止浏览器在事件中的一部操作完成之前终止service worker。\n     当在与安装事件相关联的EventHandler中调用时，它会延时将已安装的工作程序视为安装，\n     直到传递的promise成功解析为止。这主要用于确保service worker在其依赖的所有核心高速缓存填充之前不会被考虑安装*/\n    e.waitUntil(\n        caches.open(cache_name).then(function (cache) {\n            console.log('[ServiceWorker] Caching app shell');\n            console.log(cache);\n            return cache.addAll(filesToCache);\n        })\n    );\n    if(cache_name ==='development'){\n        self.skipWaiting(); //重新加载后立即激活\n    }\n\n});\n/*这里我们新增了install 事件监听器，接着在事件上接了一个ExtendableEvent.waitUntil()方法\n 这会确保service worker不会在waitUntil()里面的代码执行完毕之前安装完成*/\n/*我们使用caches.open()方法创建了一个githubPage-1的新缓存，将会是我们站点资源的缓存的第一个版本。它返回了一个创建缓存的promise,\n 当它resolved 的时候，我们接着会调用在创建的缓存上的一个方法addALL()，这个方法的参数是一个由一组相对于origin的URL组成的数组，\n 这个数组就是你想缓存的资源的列表*/\n\nself.addEventListener('activate', function (e) {\n    console.log('[serviceWorker] Cacheing app shell');\n    e.waitUntil(\n        caches.keys().then(function (keyList) {\n            return Promise.all(keyList.map(function (key) {\n                if (key !== cache_name) {\n                    console.log('[serviceWorker] removing old cache', key);\n                    return caches.delete(key);\n                }\n            }));\n        })\n    );\n    return self.clients.claim();\n});\n\nself.addEventListener('fetch', function (e) {\n    console.log('[service worker] fetch', e.request.url);\n    /*respondWith()方法旨在包裹代码，这些代码为来自受控页面的request生成的自定义的response。用来劫持我们的http响应*/\n    e.respondWith(\n        caches.match(e.request).then(function (response) {\n            //如果sw有自己的返回，就直接返回，减少一次http请求。\n            if (response) {\n                console.log('[SW]:', '读取缓存',  e.request.method,  e.request.url);\n                return response;\n            }\n\n            //如果没有返回，就直接请求真实远程服务\n            var request = e.request.clone(); //拷贝原始请求\n            //clone()允许多次请求body()对象。\n            return fetch(request).then(function (httpRes) {\n                //http请求的返回已经抓到，可以进行设置\n\n                //请求失败，直接返回失败的结果\n                if (!httpRes || httpRes.status !== 200) {\n                    console.log(\"失败:\");\n                    console.log(httpRes);\n                    return httpRes;\n                }\n                   else{\n                    var responseClone = httpRes.clone();\n                    caches.open(cache_name).then(function (cache) {\n                        console.log(\"请求缓存\");\n                        cache.put(e.request, responseClone);\n                    });\n                    return httpRes;\n                }\n            });\n\n        })\n    );\n\n});\n/*每次任何被service worker 控制的资源被请求到时，都会触发fetch事件，这些资源包括了指定的scope内的\n html 文档，和这些html文档内引用的其他任何资源（比如index.html发起了一个跨域的请求来嵌入一张图片，这个也会通过service worker*/\n/*我们可以在install 的时候进行静态资源缓存。也可以通过fetch事件回调来代理页面请求从而实现动态资源缓存*/\n"},{"_content":"/**\n * Created by yu on 2017/7/21.\n */\n\nvar webPush = {\n    init: function () {\n\n\n    },\n    aksPermission: function () {\n        return new Promise(function (resolve, reject) {\n            var permissionResult = Notification.requestPermission(function (result) {\n                //旧版本\n                //Notification 界面的requestPermission()方法请求用户当前来源的权限已显示通知。\n                resolve(result);\n            });\n            if (permissionResult) {\n                //新版本\n                permissionResult.then(resolve, reject);\n            }\n        })\n            .then(function (permissionResult) {\n                if (permissionResult !== 'granted') {\n                    //用户未授权\n                }\n            });\n    },\n    urlBase64ToUint8Array: function (base64String) {//将base64的applicationServerKey转换成UInt8Array\n        var padding = '='.repeat((4 - base64String.length % 4) % 4);\n        var base64 = (base64String + padding)\n            .replace(/\\-/g, '+')\n            .replace(/_/g, '/');\n        var rawData = window.atob(base64);\n        var outputArray = new Uint8Array(rawData.length);\n        for (let i = 0, max = rawData.length; i < max; ++i) {\n            outputArray[i] = rawData.charCodeAt(i);\n        }\n        return outputArray;\n    },\n    subscribe: function (serviceWorkerReg) {\n        serviceWorkerReg.pushManager.subscribe({ //2.订阅\n            userVisibleOnly: true,\n            applicationServerKey: urlBase64ToUint8Array('<applicationServerKey>')\n        })\n            .then(function (subscription) {\n                //3.发送推送订阅对象到服务器，具体实现中发送请求到后端api\n                sendEndpointInSubscription(subscription);\n            })\n            .catch(function () {\n                if (Notification.permission === 'denied') {\n                    //用户拒绝订阅请求\n                    console.log(\"用户拒绝请求\");\n                }\n            });\n    }\n};\n\n//取消订阅。在默写情况下，例如服务器请求推送服务，返回了推送服务时效错误，此时需要取消订阅。\nnavigator.serviceWorker.ready.then(function (reg) {\n    reg.pushManager.getSubscription()\n        .then(function (subscription) {\n            subscription.unsubscribe()\n                .then(function (successful) {\n                    console.log(\"成功退订\");\n                })\n                .catch(function () {\n                    console.log(\"退订失败\");\n                });\n        });\n});\n\nfunction webPush() { //使用web-push 发送消息\n    var webpush = require('web-push');\n    var vapidKeys = webpush.generateVAPIDKeys();//1.生成公钥\n    webpush.setVapidDetails(//2.设置公私钥\n        'mailto:sender@example.com',\n        vapidKeys.publicKey,\n        vapidKeys.privateKey\n    );\n    //3.从数据库中拿出之前保存的pushSubscription,具体实现省略\n    //4.向推送服务发起调用请求\n\n    webpush.sendNotification(pushSubscription, '推送消息内容')\n        .catch(function (err) {\n            if (err.statusCode === 410) {\n                console.log(\"从数据库中删除推送订阅对象\");\n            }\n        });\n\n    //显示通知 service Worker 监听push事件，显示通知\n\n    self.addEventListener('push', function (e) {\n        if (e.data) {\n            var promiseChain = Promise.resolve(e.data.json())\n                .then(data => self.registration.showNotification(data.title, {}));\n            e.waitUntil(promiseChain);\n        }\n    });\n    //至此，整个推送流程就结束了\n}","source":"sw2.js","raw":"/**\n * Created by yu on 2017/7/21.\n */\n\nvar webPush = {\n    init: function () {\n\n\n    },\n    aksPermission: function () {\n        return new Promise(function (resolve, reject) {\n            var permissionResult = Notification.requestPermission(function (result) {\n                //旧版本\n                //Notification 界面的requestPermission()方法请求用户当前来源的权限已显示通知。\n                resolve(result);\n            });\n            if (permissionResult) {\n                //新版本\n                permissionResult.then(resolve, reject);\n            }\n        })\n            .then(function (permissionResult) {\n                if (permissionResult !== 'granted') {\n                    //用户未授权\n                }\n            });\n    },\n    urlBase64ToUint8Array: function (base64String) {//将base64的applicationServerKey转换成UInt8Array\n        var padding = '='.repeat((4 - base64String.length % 4) % 4);\n        var base64 = (base64String + padding)\n            .replace(/\\-/g, '+')\n            .replace(/_/g, '/');\n        var rawData = window.atob(base64);\n        var outputArray = new Uint8Array(rawData.length);\n        for (let i = 0, max = rawData.length; i < max; ++i) {\n            outputArray[i] = rawData.charCodeAt(i);\n        }\n        return outputArray;\n    },\n    subscribe: function (serviceWorkerReg) {\n        serviceWorkerReg.pushManager.subscribe({ //2.订阅\n            userVisibleOnly: true,\n            applicationServerKey: urlBase64ToUint8Array('<applicationServerKey>')\n        })\n            .then(function (subscription) {\n                //3.发送推送订阅对象到服务器，具体实现中发送请求到后端api\n                sendEndpointInSubscription(subscription);\n            })\n            .catch(function () {\n                if (Notification.permission === 'denied') {\n                    //用户拒绝订阅请求\n                    console.log(\"用户拒绝请求\");\n                }\n            });\n    }\n};\n\n//取消订阅。在默写情况下，例如服务器请求推送服务，返回了推送服务时效错误，此时需要取消订阅。\nnavigator.serviceWorker.ready.then(function (reg) {\n    reg.pushManager.getSubscription()\n        .then(function (subscription) {\n            subscription.unsubscribe()\n                .then(function (successful) {\n                    console.log(\"成功退订\");\n                })\n                .catch(function () {\n                    console.log(\"退订失败\");\n                });\n        });\n});\n\nfunction webPush() { //使用web-push 发送消息\n    var webpush = require('web-push');\n    var vapidKeys = webpush.generateVAPIDKeys();//1.生成公钥\n    webpush.setVapidDetails(//2.设置公私钥\n        'mailto:sender@example.com',\n        vapidKeys.publicKey,\n        vapidKeys.privateKey\n    );\n    //3.从数据库中拿出之前保存的pushSubscription,具体实现省略\n    //4.向推送服务发起调用请求\n\n    webpush.sendNotification(pushSubscription, '推送消息内容')\n        .catch(function (err) {\n            if (err.statusCode === 410) {\n                console.log(\"从数据库中删除推送订阅对象\");\n            }\n        });\n\n    //显示通知 service Worker 监听push事件，显示通知\n\n    self.addEventListener('push', function (e) {\n        if (e.data) {\n            var promiseChain = Promise.resolve(e.data.json())\n                .then(data => self.registration.showNotification(data.title, {}));\n            e.waitUntil(promiseChain);\n        }\n    });\n    //至此，整个推送流程就结束了\n}","date":"2017-07-26T05:24:23.829Z","updated":"2017-07-26T05:24:23.829Z","path":"sw2.js","layout":"false","title":"","comments":1,"_id":"cj9ffr3p200026cvrgf9pi94z","content":"/**\n * Created by yu on 2017/7/21.\n */\n\nvar webPush = {\n    init: function () {\n\n\n    },\n    aksPermission: function () {\n        return new Promise(function (resolve, reject) {\n            var permissionResult = Notification.requestPermission(function (result) {\n                //旧版本\n                //Notification 界面的requestPermission()方法请求用户当前来源的权限已显示通知。\n                resolve(result);\n            });\n            if (permissionResult) {\n                //新版本\n                permissionResult.then(resolve, reject);\n            }\n        })\n            .then(function (permissionResult) {\n                if (permissionResult !== 'granted') {\n                    //用户未授权\n                }\n            });\n    },\n    urlBase64ToUint8Array: function (base64String) {//将base64的applicationServerKey转换成UInt8Array\n        var padding = '='.repeat((4 - base64String.length % 4) % 4);\n        var base64 = (base64String + padding)\n            .replace(/\\-/g, '+')\n            .replace(/_/g, '/');\n        var rawData = window.atob(base64);\n        var outputArray = new Uint8Array(rawData.length);\n        for (let i = 0, max = rawData.length; i < max; ++i) {\n            outputArray[i] = rawData.charCodeAt(i);\n        }\n        return outputArray;\n    },\n    subscribe: function (serviceWorkerReg) {\n        serviceWorkerReg.pushManager.subscribe({ //2.订阅\n            userVisibleOnly: true,\n            applicationServerKey: urlBase64ToUint8Array('<applicationserverkey>')\n        })\n            .then(function (subscription) {\n                //3.发送推送订阅对象到服务器，具体实现中发送请求到后端api\n                sendEndpointInSubscription(subscription);\n            })\n            .catch(function () {\n                if (Notification.permission === 'denied') {\n                    //用户拒绝订阅请求\n                    console.log(\"用户拒绝请求\");\n                }\n            });\n    }\n};\n\n//取消订阅。在默写情况下，例如服务器请求推送服务，返回了推送服务时效错误，此时需要取消订阅。\nnavigator.serviceWorker.ready.then(function (reg) {\n    reg.pushManager.getSubscription()\n        .then(function (subscription) {\n            subscription.unsubscribe()\n                .then(function (successful) {\n                    console.log(\"成功退订\");\n                })\n                .catch(function () {\n                    console.log(\"退订失败\");\n                });\n        });\n});\n\nfunction webPush() { //使用web-push 发送消息\n    var webpush = require('web-push');\n    var vapidKeys = webpush.generateVAPIDKeys();//1.生成公钥\n    webpush.setVapidDetails(//2.设置公私钥\n        'mailto:sender@example.com',\n        vapidKeys.publicKey,\n        vapidKeys.privateKey\n    );\n    //3.从数据库中拿出之前保存的pushSubscription,具体实现省略\n    //4.向推送服务发起调用请求\n\n    webpush.sendNotification(pushSubscription, '推送消息内容')\n        .catch(function (err) {\n            if (err.statusCode === 410) {\n                console.log(\"从数据库中删除推送订阅对象\");\n            }\n        });\n\n    //显示通知 service Worker 监听push事件，显示通知\n\n    self.addEventListener('push', function (e) {\n        if (e.data) {\n            var promiseChain = Promise.resolve(e.data.json())\n                .then(data => self.registration.showNotification(data.title, {}));\n            e.waitUntil(promiseChain);\n        }\n    });\n    //至此，整个推送流程就结束了\n}</applicationserverkey>","site":{"data":{}},"excerpt":"","more":"/**\n * Created by yu on 2017/7/21.\n */\n\nvar webPush = {\n    init: function () {\n\n\n    },\n    aksPermission: function () {\n        return new Promise(function (resolve, reject) {\n            var permissionResult = Notification.requestPermission(function (result) {\n                //旧版本\n                //Notification 界面的requestPermission()方法请求用户当前来源的权限已显示通知。\n                resolve(result);\n            });\n            if (permissionResult) {\n                //新版本\n                permissionResult.then(resolve, reject);\n            }\n        })\n            .then(function (permissionResult) {\n                if (permissionResult !== 'granted') {\n                    //用户未授权\n                }\n            });\n    },\n    urlBase64ToUint8Array: function (base64String) {//将base64的applicationServerKey转换成UInt8Array\n        var padding = '='.repeat((4 - base64String.length % 4) % 4);\n        var base64 = (base64String + padding)\n            .replace(/\\-/g, '+')\n            .replace(/_/g, '/');\n        var rawData = window.atob(base64);\n        var outputArray = new Uint8Array(rawData.length);\n        for (let i = 0, max = rawData.length; i < max; ++i) {\n            outputArray[i] = rawData.charCodeAt(i);\n        }\n        return outputArray;\n    },\n    subscribe: function (serviceWorkerReg) {\n        serviceWorkerReg.pushManager.subscribe({ //2.订阅\n            userVisibleOnly: true,\n            applicationServerKey: urlBase64ToUint8Array('<applicationserverkey>')\n        })\n            .then(function (subscription) {\n                //3.发送推送订阅对象到服务器，具体实现中发送请求到后端api\n                sendEndpointInSubscription(subscription);\n            })\n            .catch(function () {\n                if (Notification.permission === 'denied') {\n                    //用户拒绝订阅请求\n                    console.log(\"用户拒绝请求\");\n                }\n            });\n    }\n};\n\n//取消订阅。在默写情况下，例如服务器请求推送服务，返回了推送服务时效错误，此时需要取消订阅。\nnavigator.serviceWorker.ready.then(function (reg) {\n    reg.pushManager.getSubscription()\n        .then(function (subscription) {\n            subscription.unsubscribe()\n                .then(function (successful) {\n                    console.log(\"成功退订\");\n                })\n                .catch(function () {\n                    console.log(\"退订失败\");\n                });\n        });\n});\n\nfunction webPush() { //使用web-push 发送消息\n    var webpush = require('web-push');\n    var vapidKeys = webpush.generateVAPIDKeys();//1.生成公钥\n    webpush.setVapidDetails(//2.设置公私钥\n        'mailto:sender@example.com',\n        vapidKeys.publicKey,\n        vapidKeys.privateKey\n    );\n    //3.从数据库中拿出之前保存的pushSubscription,具体实现省略\n    //4.向推送服务发起调用请求\n\n    webpush.sendNotification(pushSubscription, '推送消息内容')\n        .catch(function (err) {\n            if (err.statusCode === 410) {\n                console.log(\"从数据库中删除推送订阅对象\");\n            }\n        });\n\n    //显示通知 service Worker 监听push事件，显示通知\n\n    self.addEventListener('push', function (e) {\n        if (e.data) {\n            var promiseChain = Promise.resolve(e.data.json())\n                .then(data => self.registration.showNotification(data.title, {}));\n            e.waitUntil(promiseChain);\n        }\n    });\n    //至此，整个推送流程就结束了\n}</applicationserverkey>"}],"Post":[{"title":"HTTPS","comments":1,"_content":" https 可以理解为HTTP+TLS，TLS是传输层加密协议，是HTTPS安全的核心，其前身是SSL。TLS主要有五部分:应用数据层协议，握手协议，报警协议，加密消息确认协议，心跳协议。TLS协议本身又是由record协议传输的。\n\n### 为什么要实现HTTPS？\n为保护用户隐私和网络安全。通过数据加密、校验数据完整性和身份认证三种机制来保障安全。\n\n<!--more-->\n\n### 全站HTTPS 必须解决的问题\n---\n**性能**\n\n* HTTPS需要多次握手，因此网络耗时变长，用户从HTTP跳转到HTTPS需要一些时间。但是如果使用SPDY，HTTPS的速度甚至比HTTP快。HTTPS对速度的影响主要来自两方面:\n    1. 协议交换所增加的网络RTT。\n    2. 加解密相关的计算耗时。\n* HTTPS要做RSA校验，这会影响到设备性能。\n* 所有CDN节点要支持HTTPS，而且需要有极其复杂的解决方案来面对DDoS的挑战。\n** 其次，兼容性及周边:**\n* 页面中所有嵌入的资源（图片、附件、js、视频等）都要改为HTTPS的，否者就会报警。\n\n\n### 基于协议和配置的优化\n\n1.HTTPS 访问速度优化\n2.Tcp fast open\n\n#### HTTPS:\n网站通常的做法是对HTTP的访问服务器端做302 跳转，跳转到HTTPS。但是这个302跳转存在两个问题:\n1.使用不安全的HTTP协议进行通信。\n2.增加一个Round-Trip Time。\n\n而HSTS 是HTTP Strict Transport Security 的缩写，作用是强制客户端（如浏览器）使用HTTPS与服务器创建链接。其实HSTS的最大作用是防止302HTTP劫持（中间人）HSTS的缺点是浏览器支持率不高，另外配置HTST后HTTPS很难实时降级为HTTP。\n\n采用HSTS协议的网站将保证浏览器始终连接到该网站的HTTPS加密版本，不需要用户手动在URL地址栏中输入加密地址。该协议将帮助网站采用全局加密，用户看到的是该网站的安全版本。\n\n在https://xxx 的响应头中含有Strict-Transport-Security:max-age=31536000;includeSubDomains这就意味着两点：\n   1. 在一年的时间里（31536000秒）中，浏览器只要向XXX或者其子域名发送HTTP请求时，必须采用HTTPS来发起连接。比如用户在地址栏输入http://xxx 或者点击超链接，浏览器应当自动将http转写成https,然后直接向https://xxx/ 发起请求。\n   2. 在接下来的一年中，如果xxx服务器发送的TLS证书无效，用户不能忽略浏览器警告继续访问网站。\n\n##### 作用\nHTST 可以用来抵御SSL剥离攻击。攻击者在用户访问HTTP页面时替换所有https开头的连接为http。达到阻止HTTPS的目的。但是如果使用了HTST，一旦服务器发送了HSTS字段，用户将不再允许忽略警告。\n\n##### 不足\n用户首次访问网站是不受HSTS保护的。这是因为首次访问时，浏览器还未收到HSTS，所以仍有可能明文HTTP访问。HTST会在一段时间后失效（由max-age指定)。所以浏览器是否强制 HSTS取决于当前系统时间。部分操作系统经常通过网络时间协议更新系统时间。\n\n一旦浏览器接受到HSTS Header(假如有效期是1年），但是网站的证书出现问题，那么在有效都无法访问网站。\n\n#### Session resume 复用session\n1. 减少 CPU 消耗，因为不需要非对称秘钥交换的计算。\n2. 提升访问速度，不需要进行完全握手阶段二，节省了一个 RTT 和计算耗时。\n\n##### Session cache\nSession cache 的原理是使用 client hello 中的 session id 查询服务端的 session cache, 如果服务端有对应的缓存，则直接使用已有的 session 信息提前完成握手，称为简化握手。\n\nSession cache 有两个缺点：\n\n1.    需要消耗服务端内存来存储 session 内容。\n\n2.    目前的开源软件包括 nginx,apache 只支持单机多进程间共享缓存，不支持多机间分布式缓存，对于百度或者其他大型互联网公司而言，单机 session cache 几乎没有作用。\n\nSession cache 也有一个非常大的优点：\n\n1.   session id 是 TLS 协议的标准字段，市面上的浏览器全部都支持 session cache。\n\n百度通过对 TLS 握手协议及服务器端实现的优化，已经支持全局的 session cache，能够明显提升用户的访问速度，节省服务器计算资源。\n\n####  使用 SPDY 或者 HTTP2\n\nSPDY 是 google 推出的优化 HTTP 传输效率的协议（https://www.chromium.org/spdy） 它基本上沿用了 HTTP 协议的语义, 但是通过使用帧控制实现了多个特性，显著提升了 HTTP 协议的传输效率。SPDY 最大的特性就是多路复用，能将多个 HTTP 请求在同一个连接上一起发出去，不像目前的 HTTP 协议一样，只能串行地逐个发送请求。Pipeline 虽然支持多个请求一起发送，但是接收时依然得按照顺序接收，本质上无法解决并发的问题。\n\nHTTP2 是 IETF 2015 年 2 月份通过的 HTTP 下一代协议，它以 SPDY 为原型，经过两年多的讨论和完善最终确定。\n\n需要说明两点:\n\n1.    SPDY 和 HTTP2 目前的实现默认使用 HTTPS 协议。\n\n2.    SPDY 和 HTTP2 都支持现有的 HTTP 语义和 API，对 WEB 应用几乎是透明的。\n\nGoogle 宣布 chrome 浏览器 2016 年将放弃 SPDY 协议，全面支持 HTTP2，但是目前国内部分浏览器厂商进度非常慢，不仅不支持 HTTP2，连 SPDY 都没有支持过。\n\n百度服务端和百度手机浏览器现在都已经支持 SPDY3.1 协议。\n\n\n","source":"_posts/HTTPS.md","raw":"---\ntitle: HTTPS\ncomments: true\n---\n https 可以理解为HTTP+TLS，TLS是传输层加密协议，是HTTPS安全的核心，其前身是SSL。TLS主要有五部分:应用数据层协议，握手协议，报警协议，加密消息确认协议，心跳协议。TLS协议本身又是由record协议传输的。\n\n### 为什么要实现HTTPS？\n为保护用户隐私和网络安全。通过数据加密、校验数据完整性和身份认证三种机制来保障安全。\n\n<!--more-->\n\n### 全站HTTPS 必须解决的问题\n---\n**性能**\n\n* HTTPS需要多次握手，因此网络耗时变长，用户从HTTP跳转到HTTPS需要一些时间。但是如果使用SPDY，HTTPS的速度甚至比HTTP快。HTTPS对速度的影响主要来自两方面:\n    1. 协议交换所增加的网络RTT。\n    2. 加解密相关的计算耗时。\n* HTTPS要做RSA校验，这会影响到设备性能。\n* 所有CDN节点要支持HTTPS，而且需要有极其复杂的解决方案来面对DDoS的挑战。\n** 其次，兼容性及周边:**\n* 页面中所有嵌入的资源（图片、附件、js、视频等）都要改为HTTPS的，否者就会报警。\n\n\n### 基于协议和配置的优化\n\n1.HTTPS 访问速度优化\n2.Tcp fast open\n\n#### HTTPS:\n网站通常的做法是对HTTP的访问服务器端做302 跳转，跳转到HTTPS。但是这个302跳转存在两个问题:\n1.使用不安全的HTTP协议进行通信。\n2.增加一个Round-Trip Time。\n\n而HSTS 是HTTP Strict Transport Security 的缩写，作用是强制客户端（如浏览器）使用HTTPS与服务器创建链接。其实HSTS的最大作用是防止302HTTP劫持（中间人）HSTS的缺点是浏览器支持率不高，另外配置HTST后HTTPS很难实时降级为HTTP。\n\n采用HSTS协议的网站将保证浏览器始终连接到该网站的HTTPS加密版本，不需要用户手动在URL地址栏中输入加密地址。该协议将帮助网站采用全局加密，用户看到的是该网站的安全版本。\n\n在https://xxx 的响应头中含有Strict-Transport-Security:max-age=31536000;includeSubDomains这就意味着两点：\n   1. 在一年的时间里（31536000秒）中，浏览器只要向XXX或者其子域名发送HTTP请求时，必须采用HTTPS来发起连接。比如用户在地址栏输入http://xxx 或者点击超链接，浏览器应当自动将http转写成https,然后直接向https://xxx/ 发起请求。\n   2. 在接下来的一年中，如果xxx服务器发送的TLS证书无效，用户不能忽略浏览器警告继续访问网站。\n\n##### 作用\nHTST 可以用来抵御SSL剥离攻击。攻击者在用户访问HTTP页面时替换所有https开头的连接为http。达到阻止HTTPS的目的。但是如果使用了HTST，一旦服务器发送了HSTS字段，用户将不再允许忽略警告。\n\n##### 不足\n用户首次访问网站是不受HSTS保护的。这是因为首次访问时，浏览器还未收到HSTS，所以仍有可能明文HTTP访问。HTST会在一段时间后失效（由max-age指定)。所以浏览器是否强制 HSTS取决于当前系统时间。部分操作系统经常通过网络时间协议更新系统时间。\n\n一旦浏览器接受到HSTS Header(假如有效期是1年），但是网站的证书出现问题，那么在有效都无法访问网站。\n\n#### Session resume 复用session\n1. 减少 CPU 消耗，因为不需要非对称秘钥交换的计算。\n2. 提升访问速度，不需要进行完全握手阶段二，节省了一个 RTT 和计算耗时。\n\n##### Session cache\nSession cache 的原理是使用 client hello 中的 session id 查询服务端的 session cache, 如果服务端有对应的缓存，则直接使用已有的 session 信息提前完成握手，称为简化握手。\n\nSession cache 有两个缺点：\n\n1.    需要消耗服务端内存来存储 session 内容。\n\n2.    目前的开源软件包括 nginx,apache 只支持单机多进程间共享缓存，不支持多机间分布式缓存，对于百度或者其他大型互联网公司而言，单机 session cache 几乎没有作用。\n\nSession cache 也有一个非常大的优点：\n\n1.   session id 是 TLS 协议的标准字段，市面上的浏览器全部都支持 session cache。\n\n百度通过对 TLS 握手协议及服务器端实现的优化，已经支持全局的 session cache，能够明显提升用户的访问速度，节省服务器计算资源。\n\n####  使用 SPDY 或者 HTTP2\n\nSPDY 是 google 推出的优化 HTTP 传输效率的协议（https://www.chromium.org/spdy） 它基本上沿用了 HTTP 协议的语义, 但是通过使用帧控制实现了多个特性，显著提升了 HTTP 协议的传输效率。SPDY 最大的特性就是多路复用，能将多个 HTTP 请求在同一个连接上一起发出去，不像目前的 HTTP 协议一样，只能串行地逐个发送请求。Pipeline 虽然支持多个请求一起发送，但是接收时依然得按照顺序接收，本质上无法解决并发的问题。\n\nHTTP2 是 IETF 2015 年 2 月份通过的 HTTP 下一代协议，它以 SPDY 为原型，经过两年多的讨论和完善最终确定。\n\n需要说明两点:\n\n1.    SPDY 和 HTTP2 目前的实现默认使用 HTTPS 协议。\n\n2.    SPDY 和 HTTP2 都支持现有的 HTTP 语义和 API，对 WEB 应用几乎是透明的。\n\nGoogle 宣布 chrome 浏览器 2016 年将放弃 SPDY 协议，全面支持 HTTP2，但是目前国内部分浏览器厂商进度非常慢，不仅不支持 HTTP2，连 SPDY 都没有支持过。\n\n百度服务端和百度手机浏览器现在都已经支持 SPDY3.1 协议。\n\n\n","slug":"HTTPS","published":1,"date":"2017-07-12T07:32:19.985Z","updated":"2017-07-26T02:56:47.347Z","layout":"post","photos":[],"link":"","_id":"cj9ffr3pq00036cvrcbg1e852","content":"<p> https 可以理解为HTTP+TLS，TLS是传输层加密协议，是HTTPS安全的核心，其前身是SSL。TLS主要有五部分:应用数据层协议，握手协议，报警协议，加密消息确认协议，心跳协议。TLS协议本身又是由record协议传输的。</p>\n<h3 id=\"为什么要实现HTTPS？\"><a href=\"#为什么要实现HTTPS？\" class=\"headerlink\" title=\"为什么要实现HTTPS？\"></a>为什么要实现HTTPS？</h3><p>为保护用户隐私和网络安全。通过数据加密、校验数据完整性和身份认证三种机制来保障安全。</p>\n<a id=\"more\"></a>\n<h3 id=\"全站HTTPS-必须解决的问题\"><a href=\"#全站HTTPS-必须解决的问题\" class=\"headerlink\" title=\"全站HTTPS 必须解决的问题\"></a>全站HTTPS 必须解决的问题</h3><hr>\n<p><strong>性能</strong></p>\n<ul>\n<li>HTTPS需要多次握手，因此网络耗时变长，用户从HTTP跳转到HTTPS需要一些时间。但是如果使用SPDY，HTTPS的速度甚至比HTTP快。HTTPS对速度的影响主要来自两方面:<ol>\n<li>协议交换所增加的网络RTT。</li>\n<li>加解密相关的计算耗时。</li>\n</ol>\n</li>\n<li>HTTPS要做RSA校验，这会影响到设备性能。</li>\n<li>所有CDN节点要支持HTTPS，而且需要有极其复杂的解决方案来面对DDoS的挑战。<br><strong> 其次，兼容性及周边:</strong></li>\n<li>页面中所有嵌入的资源（图片、附件、js、视频等）都要改为HTTPS的，否者就会报警。</li>\n</ul>\n<h3 id=\"基于协议和配置的优化\"><a href=\"#基于协议和配置的优化\" class=\"headerlink\" title=\"基于协议和配置的优化\"></a>基于协议和配置的优化</h3><p>1.HTTPS 访问速度优化<br>2.Tcp fast open</p>\n<h4 id=\"HTTPS\"><a href=\"#HTTPS\" class=\"headerlink\" title=\"HTTPS:\"></a>HTTPS:</h4><p>网站通常的做法是对HTTP的访问服务器端做302 跳转，跳转到HTTPS。但是这个302跳转存在两个问题:<br>1.使用不安全的HTTP协议进行通信。<br>2.增加一个Round-Trip Time。</p>\n<p>而HSTS 是HTTP Strict Transport Security 的缩写，作用是强制客户端（如浏览器）使用HTTPS与服务器创建链接。其实HSTS的最大作用是防止302HTTP劫持（中间人）HSTS的缺点是浏览器支持率不高，另外配置HTST后HTTPS很难实时降级为HTTP。</p>\n<p>采用HSTS协议的网站将保证浏览器始终连接到该网站的HTTPS加密版本，不需要用户手动在URL地址栏中输入加密地址。该协议将帮助网站采用全局加密，用户看到的是该网站的安全版本。</p>\n<p>在<a href=\"https://xxx\" target=\"_blank\" rel=\"external\">https://xxx</a> 的响应头中含有Strict-Transport-Security:max-age=31536000;includeSubDomains这就意味着两点：</p>\n<ol>\n<li>在一年的时间里（31536000秒）中，浏览器只要向XXX或者其子域名发送HTTP请求时，必须采用HTTPS来发起连接。比如用户在地址栏输入<a href=\"http://xxx\" target=\"_blank\" rel=\"external\">http://xxx</a> 或者点击超链接，浏览器应当自动将http转写成https,然后直接向<a href=\"https://xxx/\" target=\"_blank\" rel=\"external\">https://xxx/</a> 发起请求。</li>\n<li>在接下来的一年中，如果xxx服务器发送的TLS证书无效，用户不能忽略浏览器警告继续访问网站。</li>\n</ol>\n<h5 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h5><p>HTST 可以用来抵御SSL剥离攻击。攻击者在用户访问HTTP页面时替换所有https开头的连接为http。达到阻止HTTPS的目的。但是如果使用了HTST，一旦服务器发送了HSTS字段，用户将不再允许忽略警告。</p>\n<h5 id=\"不足\"><a href=\"#不足\" class=\"headerlink\" title=\"不足\"></a>不足</h5><p>用户首次访问网站是不受HSTS保护的。这是因为首次访问时，浏览器还未收到HSTS，所以仍有可能明文HTTP访问。HTST会在一段时间后失效（由max-age指定)。所以浏览器是否强制 HSTS取决于当前系统时间。部分操作系统经常通过网络时间协议更新系统时间。</p>\n<p>一旦浏览器接受到HSTS Header(假如有效期是1年），但是网站的证书出现问题，那么在有效都无法访问网站。</p>\n<h4 id=\"Session-resume-复用session\"><a href=\"#Session-resume-复用session\" class=\"headerlink\" title=\"Session resume 复用session\"></a>Session resume 复用session</h4><ol>\n<li>减少 CPU 消耗，因为不需要非对称秘钥交换的计算。</li>\n<li>提升访问速度，不需要进行完全握手阶段二，节省了一个 RTT 和计算耗时。</li>\n</ol>\n<h5 id=\"Session-cache\"><a href=\"#Session-cache\" class=\"headerlink\" title=\"Session cache\"></a>Session cache</h5><p>Session cache 的原理是使用 client hello 中的 session id 查询服务端的 session cache, 如果服务端有对应的缓存，则直接使用已有的 session 信息提前完成握手，称为简化握手。</p>\n<p>Session cache 有两个缺点：</p>\n<ol>\n<li><p>需要消耗服务端内存来存储 session 内容。</p>\n</li>\n<li><p>目前的开源软件包括 nginx,apache 只支持单机多进程间共享缓存，不支持多机间分布式缓存，对于百度或者其他大型互联网公司而言，单机 session cache 几乎没有作用。</p>\n</li>\n</ol>\n<p>Session cache 也有一个非常大的优点：</p>\n<ol>\n<li>session id 是 TLS 协议的标准字段，市面上的浏览器全部都支持 session cache。</li>\n</ol>\n<p>百度通过对 TLS 握手协议及服务器端实现的优化，已经支持全局的 session cache，能够明显提升用户的访问速度，节省服务器计算资源。</p>\n<h4 id=\"使用-SPDY-或者-HTTP2\"><a href=\"#使用-SPDY-或者-HTTP2\" class=\"headerlink\" title=\"使用 SPDY 或者 HTTP2\"></a>使用 SPDY 或者 HTTP2</h4><p>SPDY 是 google 推出的优化 HTTP 传输效率的协议（<a href=\"https://www.chromium.org/spdy）\" target=\"_blank\" rel=\"external\">https://www.chromium.org/spdy）</a> 它基本上沿用了 HTTP 协议的语义, 但是通过使用帧控制实现了多个特性，显著提升了 HTTP 协议的传输效率。SPDY 最大的特性就是多路复用，能将多个 HTTP 请求在同一个连接上一起发出去，不像目前的 HTTP 协议一样，只能串行地逐个发送请求。Pipeline 虽然支持多个请求一起发送，但是接收时依然得按照顺序接收，本质上无法解决并发的问题。</p>\n<p>HTTP2 是 IETF 2015 年 2 月份通过的 HTTP 下一代协议，它以 SPDY 为原型，经过两年多的讨论和完善最终确定。</p>\n<p>需要说明两点:</p>\n<ol>\n<li><p>SPDY 和 HTTP2 目前的实现默认使用 HTTPS 协议。</p>\n</li>\n<li><p>SPDY 和 HTTP2 都支持现有的 HTTP 语义和 API，对 WEB 应用几乎是透明的。</p>\n</li>\n</ol>\n<p>Google 宣布 chrome 浏览器 2016 年将放弃 SPDY 协议，全面支持 HTTP2，但是目前国内部分浏览器厂商进度非常慢，不仅不支持 HTTP2，连 SPDY 都没有支持过。</p>\n<p>百度服务端和百度手机浏览器现在都已经支持 SPDY3.1 协议。</p>\n","site":{"data":{}},"excerpt":"<p> https 可以理解为HTTP+TLS，TLS是传输层加密协议，是HTTPS安全的核心，其前身是SSL。TLS主要有五部分:应用数据层协议，握手协议，报警协议，加密消息确认协议，心跳协议。TLS协议本身又是由record协议传输的。</p>\n<h3 id=\"为什么要实现HTTPS？\"><a href=\"#为什么要实现HTTPS？\" class=\"headerlink\" title=\"为什么要实现HTTPS？\"></a>为什么要实现HTTPS？</h3><p>为保护用户隐私和网络安全。通过数据加密、校验数据完整性和身份认证三种机制来保障安全。</p>","more":"<h3 id=\"全站HTTPS-必须解决的问题\"><a href=\"#全站HTTPS-必须解决的问题\" class=\"headerlink\" title=\"全站HTTPS 必须解决的问题\"></a>全站HTTPS 必须解决的问题</h3><hr>\n<p><strong>性能</strong></p>\n<ul>\n<li>HTTPS需要多次握手，因此网络耗时变长，用户从HTTP跳转到HTTPS需要一些时间。但是如果使用SPDY，HTTPS的速度甚至比HTTP快。HTTPS对速度的影响主要来自两方面:<ol>\n<li>协议交换所增加的网络RTT。</li>\n<li>加解密相关的计算耗时。</li>\n</ol>\n</li>\n<li>HTTPS要做RSA校验，这会影响到设备性能。</li>\n<li>所有CDN节点要支持HTTPS，而且需要有极其复杂的解决方案来面对DDoS的挑战。<br><strong> 其次，兼容性及周边:</strong></li>\n<li>页面中所有嵌入的资源（图片、附件、js、视频等）都要改为HTTPS的，否者就会报警。</li>\n</ul>\n<h3 id=\"基于协议和配置的优化\"><a href=\"#基于协议和配置的优化\" class=\"headerlink\" title=\"基于协议和配置的优化\"></a>基于协议和配置的优化</h3><p>1.HTTPS 访问速度优化<br>2.Tcp fast open</p>\n<h4 id=\"HTTPS\"><a href=\"#HTTPS\" class=\"headerlink\" title=\"HTTPS:\"></a>HTTPS:</h4><p>网站通常的做法是对HTTP的访问服务器端做302 跳转，跳转到HTTPS。但是这个302跳转存在两个问题:<br>1.使用不安全的HTTP协议进行通信。<br>2.增加一个Round-Trip Time。</p>\n<p>而HSTS 是HTTP Strict Transport Security 的缩写，作用是强制客户端（如浏览器）使用HTTPS与服务器创建链接。其实HSTS的最大作用是防止302HTTP劫持（中间人）HSTS的缺点是浏览器支持率不高，另外配置HTST后HTTPS很难实时降级为HTTP。</p>\n<p>采用HSTS协议的网站将保证浏览器始终连接到该网站的HTTPS加密版本，不需要用户手动在URL地址栏中输入加密地址。该协议将帮助网站采用全局加密，用户看到的是该网站的安全版本。</p>\n<p>在<a href=\"https://xxx\" target=\"_blank\" rel=\"external\">https://xxx</a> 的响应头中含有Strict-Transport-Security:max-age=31536000;includeSubDomains这就意味着两点：</p>\n<ol>\n<li>在一年的时间里（31536000秒）中，浏览器只要向XXX或者其子域名发送HTTP请求时，必须采用HTTPS来发起连接。比如用户在地址栏输入<a href=\"http://xxx\" target=\"_blank\" rel=\"external\">http://xxx</a> 或者点击超链接，浏览器应当自动将http转写成https,然后直接向<a href=\"https://xxx/\" target=\"_blank\" rel=\"external\">https://xxx/</a> 发起请求。</li>\n<li>在接下来的一年中，如果xxx服务器发送的TLS证书无效，用户不能忽略浏览器警告继续访问网站。</li>\n</ol>\n<h5 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h5><p>HTST 可以用来抵御SSL剥离攻击。攻击者在用户访问HTTP页面时替换所有https开头的连接为http。达到阻止HTTPS的目的。但是如果使用了HTST，一旦服务器发送了HSTS字段，用户将不再允许忽略警告。</p>\n<h5 id=\"不足\"><a href=\"#不足\" class=\"headerlink\" title=\"不足\"></a>不足</h5><p>用户首次访问网站是不受HSTS保护的。这是因为首次访问时，浏览器还未收到HSTS，所以仍有可能明文HTTP访问。HTST会在一段时间后失效（由max-age指定)。所以浏览器是否强制 HSTS取决于当前系统时间。部分操作系统经常通过网络时间协议更新系统时间。</p>\n<p>一旦浏览器接受到HSTS Header(假如有效期是1年），但是网站的证书出现问题，那么在有效都无法访问网站。</p>\n<h4 id=\"Session-resume-复用session\"><a href=\"#Session-resume-复用session\" class=\"headerlink\" title=\"Session resume 复用session\"></a>Session resume 复用session</h4><ol>\n<li>减少 CPU 消耗，因为不需要非对称秘钥交换的计算。</li>\n<li>提升访问速度，不需要进行完全握手阶段二，节省了一个 RTT 和计算耗时。</li>\n</ol>\n<h5 id=\"Session-cache\"><a href=\"#Session-cache\" class=\"headerlink\" title=\"Session cache\"></a>Session cache</h5><p>Session cache 的原理是使用 client hello 中的 session id 查询服务端的 session cache, 如果服务端有对应的缓存，则直接使用已有的 session 信息提前完成握手，称为简化握手。</p>\n<p>Session cache 有两个缺点：</p>\n<ol>\n<li><p>需要消耗服务端内存来存储 session 内容。</p>\n</li>\n<li><p>目前的开源软件包括 nginx,apache 只支持单机多进程间共享缓存，不支持多机间分布式缓存，对于百度或者其他大型互联网公司而言，单机 session cache 几乎没有作用。</p>\n</li>\n</ol>\n<p>Session cache 也有一个非常大的优点：</p>\n<ol>\n<li>session id 是 TLS 协议的标准字段，市面上的浏览器全部都支持 session cache。</li>\n</ol>\n<p>百度通过对 TLS 握手协议及服务器端实现的优化，已经支持全局的 session cache，能够明显提升用户的访问速度，节省服务器计算资源。</p>\n<h4 id=\"使用-SPDY-或者-HTTP2\"><a href=\"#使用-SPDY-或者-HTTP2\" class=\"headerlink\" title=\"使用 SPDY 或者 HTTP2\"></a>使用 SPDY 或者 HTTP2</h4><p>SPDY 是 google 推出的优化 HTTP 传输效率的协议（<a href=\"https://www.chromium.org/spdy）\" target=\"_blank\" rel=\"external\">https://www.chromium.org/spdy）</a> 它基本上沿用了 HTTP 协议的语义, 但是通过使用帧控制实现了多个特性，显著提升了 HTTP 协议的传输效率。SPDY 最大的特性就是多路复用，能将多个 HTTP 请求在同一个连接上一起发出去，不像目前的 HTTP 协议一样，只能串行地逐个发送请求。Pipeline 虽然支持多个请求一起发送，但是接收时依然得按照顺序接收，本质上无法解决并发的问题。</p>\n<p>HTTP2 是 IETF 2015 年 2 月份通过的 HTTP 下一代协议，它以 SPDY 为原型，经过两年多的讨论和完善最终确定。</p>\n<p>需要说明两点:</p>\n<ol>\n<li><p>SPDY 和 HTTP2 目前的实现默认使用 HTTPS 协议。</p>\n</li>\n<li><p>SPDY 和 HTTP2 都支持现有的 HTTP 语义和 API，对 WEB 应用几乎是透明的。</p>\n</li>\n</ol>\n<p>Google 宣布 chrome 浏览器 2016 年将放弃 SPDY 协议，全面支持 HTTP2，但是目前国内部分浏览器厂商进度非常慢，不仅不支持 HTTP2，连 SPDY 都没有支持过。</p>\n<p>百度服务端和百度手机浏览器现在都已经支持 SPDY3.1 协议。</p>"},{"title":"Observable","_content":"Observable只是一个普通函数，要想让他有所作为，就需要跟observer一起使用；而这个observer（后面我们会介绍）只是一个带有 next、error、complete 的简单对象而已。最后，还需要通过 subscribe 订阅来\n**启动** Observable；否则它是不会有任何反应；而订阅也会返回一个可用于取消操作（在RxJS里叫 unsubscribe）。\n\n- Observer Pattern - (观察者模式/发布订阅模式)\n- Iterator Pattern - (迭代器模式)\n\n这两种模式是Observable的基础。\n\n<!--more-->\n\n## 观察者模式\n一个目标对象管理所有相依于它的观察者对象，并且在它本身的状态改变时主动发出通知。它定义了一种一对多的关系，让多个观察者对象同时监听某一个主题对象，这个主题对象的状态发生变化时就会通知所有的观察者对象，使得它们能够自动更新自己。\n\nObservables 与 Observer 之间的订阅发布关系(观察者模式) 如下：\n\n- 订阅：Observer 通过 Observable 提供的 subscribe() 方法订阅 Observable。\n- 发布：Observable 通过回调 next 方法向 Observer 发布事件。\n\n\n当Observable设置观察者后，而连接并获取原始数据的这个过程叫生产者，可能是DOM中的 click 事件、input 事件、或者更加复杂的HTTP通信。\n\n```javascript\nimport { Component } from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-home',\n  template: `<input type=\"text\"> `\n})\nexport class HomeComponent {\n  ngOnInit() {\n    const node = document.querySelector('input[type=text]');\n\n    // 第二个参数 input 是事件名，对于input元素有一个 oninput 事件用于接受用户输入\n    const input$ = Observable.fromEvent(node, 'input');\n    input$.subscribe({\n      next: (event: any) => console.log(`You just typed ${event.target.value}!`),\n      error: (err) => console.log(`Oops... ${err}`),\n      complete: () => console.log(`Complete!`)\n    });\n  }\n}\n```\n**Observable.fromEvent() 会返回一个Observable，并且监听 input 事件，当事件被触发后会发送一个 Event 给对应的observer观察者。**\n\n## 一、observer\n\n**subscribe订阅就是接收一个observer 方法。**\n\n```javascript\n    input$.subscribe((event: any) => {\n    });\n```\n\n从语法角度来讲和 subscribe({ next, error, complete }) 是一样的。当Observable产生一个新值时，会通知 observer 的 next()，而当捕获失败可以调用 error()。\n\n当Observable被订阅后，除非调用observer的 complete() 或 unsubscribe() 取消订阅两情况以外；会一直将值传递给 observer。\n\nObservable的生产的值允许经过一序列格式化或操作，最终得到一个有价值的数据给观察者，而这一切是由一序列链式operator来完成的，每一个operator都会产生一个新的Observable。而我们也称这一序列过程为：**流**。\n\n--------------------------------\n## 二、operator\nObservable可以链式写法，这意味着我们可以这样：\n\n```javascript\n    Observable.fromEvent(node, 'input')\n    .map((event: any) => event.target.value)\n    .filter(value => value.length >= 2)\n    .subscribe(value => { console.log(value); });\n```\n下面是顺序步骤：\n- 假设用户输入：a\n- Observable对触发 oninput 事件作出反应，将值以参数的形式传递给observer的 next()。\n- map() 根据 event.target.value 的内容返回一个新的 Observable，并调用 next() 传递给下一个observer。\n- filter() 如果值长度 >=2 的话，则返回一个新的 Observable，并调用 next() 传递给下一个observer。\n- 最后，将结果传递给 subscribe 订阅块。\n\n#### 取消订阅 \n\nObservable 当有数据产生时才会推送给订阅者，所以它可能会无限次向订阅者推送数据。正因为如此，在Angular里面创建组件的时候务必要取消订阅操作，以避免内存泄漏，要知道在SPA世界里懂得擦屁股是一件必须的事。\n\n##### unsubscribe\n前面示例讲过，调用 subscribe() 后，会返回一个 Subscription 可用于取消操作 unsubscribe()。最合理的方式在 ngOnDestroy 调用它。\n\n```javascript\n    ngOnDestroy() {\n        this.inputSubscription.unsubscribe();\n    }\n```\n\n##### takeWhile\n\n如果组件有很多订阅者的话，则需要将这些订阅者存储在数组中，并组件被销毁时再逐个取消订阅。但，我们有更好的办法：\n\n使用 takeWhile() operator，它会在你传递一个布尔值是调用 next() 还是 complete()。\n\n```javascript\nprivate alive: boolean = true;\nngOnInit() {\n  const node = document.querySelector('input[type=text]');\n\n  this.s = Observable.fromEvent(node, 'input')\n    .takeWhile(() => this.alive)\n    .map((event: any) => event.target.value)\n    .filter(value => value.length >= 2)\n    .subscribe(value => { console.log(value) });\n}\n\nngOnDestroy() {\n  this.alive = false;\n}\n```\n\n## Subject\n\n我们在写一个Service用于数据传递时，总是使用 new Subject。\n```javascript\n@Injectable()\nexport class MessageService {\n    private subject = new Subject<any>();\n\n    send(message: any) {\n        this.subject.next(message);\n    }\n\n    get(): Observable<any> {\n        return this.subject.asObservable();\n    }\n}\n```\n当F组件需要向M组件传递数据时，我们可以在F组件中使用send()。\n\n```javascript\n\n    constructor(public srv: MessageService) { }\n\n    ngOnInit() {\n        this.srv.send('w s k f m?')\n    }\n```\n\n而M组件只需要订阅内容就行：\n\n```javascript\n    constructor(private srv: MessageService) {}\n\n    message: any;\n    ngOnInit() {\n        this.srv.get().subscribe((result) => {\n            this.message = result;\n        })\n    }\n```\n\n## EventEmitter\n\n其实EventEmitter跟RxJS没有直接关系，因为他是Angular的产物，而非RxJS的东西。或者我们压根没必要去谈，因为EventEmitter就是Subject。\n\n**EventEmitter的作用是使指令或组件能自定义事件。**\n\n```javascript\n@Output() changed = new EventEmitter<string>();\n\nclick() {\n    this.changed.emit('hi~');\n}\n```\n\n```javascript\n@Component({\n  template: `<comp (changed)=\"subscribe($event)\"></comp>`\n})\nexport class HomeComponent {\n  subscribe(message: string) {\n     // 接收：hi~\n  }\n}\n```\n\n上面示例其实和上一个示例中 MessageService 如出一辙，只不过是将 next() 换成 emit() 仅此而已。\n\n## 结论\n\n#### 创建数据流：\n\n- 单值：of, empty, never\n- 多值：from\n- 定时：interval, timer\n- 从事件创建：fromEvent\n- 从Promise创建：fromPromise\n- 自定义创建：create\n\n#### 转换操作：\n\n- 改变数据形态：map, mapTo, pluck\n- 过滤一些值：filter, skip, first, last, take\n- 时间轴上的操作：delay, timeout, throttle, debounce, audit, bufferTime\n- 累加：reduce, scan\n- 异常处理：throw, catch, retry, finally\n- 条件执行：takeUntil, delayWhen, retryWhen, subscribeOn, ObserveOn\n- 转接：switch\n\n#### 组合数据流：\n\n- concat，保持原来的序列顺序连接两个数据流\n- merge，合并序列\n- race，预设条件为其中一个数据流完成\n- forkJoin，预设条件为所有数据流都完成\n- zip，取各来源数据流最后一个值合并为对象\n- combineLatest，取各来源数据流最后一个值合并为数组\n另，最好使用 $ 结尾的命名方式来表示Observable，例：input$。","source":"_posts/Observable.md","raw":"---\ntitle: Observable\n---\nObservable只是一个普通函数，要想让他有所作为，就需要跟observer一起使用；而这个observer（后面我们会介绍）只是一个带有 next、error、complete 的简单对象而已。最后，还需要通过 subscribe 订阅来\n**启动** Observable；否则它是不会有任何反应；而订阅也会返回一个可用于取消操作（在RxJS里叫 unsubscribe）。\n\n- Observer Pattern - (观察者模式/发布订阅模式)\n- Iterator Pattern - (迭代器模式)\n\n这两种模式是Observable的基础。\n\n<!--more-->\n\n## 观察者模式\n一个目标对象管理所有相依于它的观察者对象，并且在它本身的状态改变时主动发出通知。它定义了一种一对多的关系，让多个观察者对象同时监听某一个主题对象，这个主题对象的状态发生变化时就会通知所有的观察者对象，使得它们能够自动更新自己。\n\nObservables 与 Observer 之间的订阅发布关系(观察者模式) 如下：\n\n- 订阅：Observer 通过 Observable 提供的 subscribe() 方法订阅 Observable。\n- 发布：Observable 通过回调 next 方法向 Observer 发布事件。\n\n\n当Observable设置观察者后，而连接并获取原始数据的这个过程叫生产者，可能是DOM中的 click 事件、input 事件、或者更加复杂的HTTP通信。\n\n```javascript\nimport { Component } from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-home',\n  template: `<input type=\"text\"> `\n})\nexport class HomeComponent {\n  ngOnInit() {\n    const node = document.querySelector('input[type=text]');\n\n    // 第二个参数 input 是事件名，对于input元素有一个 oninput 事件用于接受用户输入\n    const input$ = Observable.fromEvent(node, 'input');\n    input$.subscribe({\n      next: (event: any) => console.log(`You just typed ${event.target.value}!`),\n      error: (err) => console.log(`Oops... ${err}`),\n      complete: () => console.log(`Complete!`)\n    });\n  }\n}\n```\n**Observable.fromEvent() 会返回一个Observable，并且监听 input 事件，当事件被触发后会发送一个 Event 给对应的observer观察者。**\n\n## 一、observer\n\n**subscribe订阅就是接收一个observer 方法。**\n\n```javascript\n    input$.subscribe((event: any) => {\n    });\n```\n\n从语法角度来讲和 subscribe({ next, error, complete }) 是一样的。当Observable产生一个新值时，会通知 observer 的 next()，而当捕获失败可以调用 error()。\n\n当Observable被订阅后，除非调用observer的 complete() 或 unsubscribe() 取消订阅两情况以外；会一直将值传递给 observer。\n\nObservable的生产的值允许经过一序列格式化或操作，最终得到一个有价值的数据给观察者，而这一切是由一序列链式operator来完成的，每一个operator都会产生一个新的Observable。而我们也称这一序列过程为：**流**。\n\n--------------------------------\n## 二、operator\nObservable可以链式写法，这意味着我们可以这样：\n\n```javascript\n    Observable.fromEvent(node, 'input')\n    .map((event: any) => event.target.value)\n    .filter(value => value.length >= 2)\n    .subscribe(value => { console.log(value); });\n```\n下面是顺序步骤：\n- 假设用户输入：a\n- Observable对触发 oninput 事件作出反应，将值以参数的形式传递给observer的 next()。\n- map() 根据 event.target.value 的内容返回一个新的 Observable，并调用 next() 传递给下一个observer。\n- filter() 如果值长度 >=2 的话，则返回一个新的 Observable，并调用 next() 传递给下一个observer。\n- 最后，将结果传递给 subscribe 订阅块。\n\n#### 取消订阅 \n\nObservable 当有数据产生时才会推送给订阅者，所以它可能会无限次向订阅者推送数据。正因为如此，在Angular里面创建组件的时候务必要取消订阅操作，以避免内存泄漏，要知道在SPA世界里懂得擦屁股是一件必须的事。\n\n##### unsubscribe\n前面示例讲过，调用 subscribe() 后，会返回一个 Subscription 可用于取消操作 unsubscribe()。最合理的方式在 ngOnDestroy 调用它。\n\n```javascript\n    ngOnDestroy() {\n        this.inputSubscription.unsubscribe();\n    }\n```\n\n##### takeWhile\n\n如果组件有很多订阅者的话，则需要将这些订阅者存储在数组中，并组件被销毁时再逐个取消订阅。但，我们有更好的办法：\n\n使用 takeWhile() operator，它会在你传递一个布尔值是调用 next() 还是 complete()。\n\n```javascript\nprivate alive: boolean = true;\nngOnInit() {\n  const node = document.querySelector('input[type=text]');\n\n  this.s = Observable.fromEvent(node, 'input')\n    .takeWhile(() => this.alive)\n    .map((event: any) => event.target.value)\n    .filter(value => value.length >= 2)\n    .subscribe(value => { console.log(value) });\n}\n\nngOnDestroy() {\n  this.alive = false;\n}\n```\n\n## Subject\n\n我们在写一个Service用于数据传递时，总是使用 new Subject。\n```javascript\n@Injectable()\nexport class MessageService {\n    private subject = new Subject<any>();\n\n    send(message: any) {\n        this.subject.next(message);\n    }\n\n    get(): Observable<any> {\n        return this.subject.asObservable();\n    }\n}\n```\n当F组件需要向M组件传递数据时，我们可以在F组件中使用send()。\n\n```javascript\n\n    constructor(public srv: MessageService) { }\n\n    ngOnInit() {\n        this.srv.send('w s k f m?')\n    }\n```\n\n而M组件只需要订阅内容就行：\n\n```javascript\n    constructor(private srv: MessageService) {}\n\n    message: any;\n    ngOnInit() {\n        this.srv.get().subscribe((result) => {\n            this.message = result;\n        })\n    }\n```\n\n## EventEmitter\n\n其实EventEmitter跟RxJS没有直接关系，因为他是Angular的产物，而非RxJS的东西。或者我们压根没必要去谈，因为EventEmitter就是Subject。\n\n**EventEmitter的作用是使指令或组件能自定义事件。**\n\n```javascript\n@Output() changed = new EventEmitter<string>();\n\nclick() {\n    this.changed.emit('hi~');\n}\n```\n\n```javascript\n@Component({\n  template: `<comp (changed)=\"subscribe($event)\"></comp>`\n})\nexport class HomeComponent {\n  subscribe(message: string) {\n     // 接收：hi~\n  }\n}\n```\n\n上面示例其实和上一个示例中 MessageService 如出一辙，只不过是将 next() 换成 emit() 仅此而已。\n\n## 结论\n\n#### 创建数据流：\n\n- 单值：of, empty, never\n- 多值：from\n- 定时：interval, timer\n- 从事件创建：fromEvent\n- 从Promise创建：fromPromise\n- 自定义创建：create\n\n#### 转换操作：\n\n- 改变数据形态：map, mapTo, pluck\n- 过滤一些值：filter, skip, first, last, take\n- 时间轴上的操作：delay, timeout, throttle, debounce, audit, bufferTime\n- 累加：reduce, scan\n- 异常处理：throw, catch, retry, finally\n- 条件执行：takeUntil, delayWhen, retryWhen, subscribeOn, ObserveOn\n- 转接：switch\n\n#### 组合数据流：\n\n- concat，保持原来的序列顺序连接两个数据流\n- merge，合并序列\n- race，预设条件为其中一个数据流完成\n- forkJoin，预设条件为所有数据流都完成\n- zip，取各来源数据流最后一个值合并为对象\n- combineLatest，取各来源数据流最后一个值合并为数组\n另，最好使用 $ 结尾的命名方式来表示Observable，例：input$。","slug":"Observable","published":1,"date":"2017-09-26T02:51:04.681Z","updated":"2017-09-26T02:51:04.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9ffr3pu00046cvr0zlitin9","content":"<p>Observable只是一个普通函数，要想让他有所作为，就需要跟observer一起使用；而这个observer（后面我们会介绍）只是一个带有 next、error、complete 的简单对象而已。最后，还需要通过 subscribe 订阅来<br><strong>启动</strong> Observable；否则它是不会有任何反应；而订阅也会返回一个可用于取消操作（在RxJS里叫 unsubscribe）。</p>\n<ul>\n<li>Observer Pattern - (观察者模式/发布订阅模式)</li>\n<li>Iterator Pattern - (迭代器模式)</li>\n</ul>\n<p>这两种模式是Observable的基础。</p>\n<a id=\"more\"></a>\n<h2 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h2><p>一个目标对象管理所有相依于它的观察者对象，并且在它本身的状态改变时主动发出通知。它定义了一种一对多的关系，让多个观察者对象同时监听某一个主题对象，这个主题对象的状态发生变化时就会通知所有的观察者对象，使得它们能够自动更新自己。</p>\n<p>Observables 与 Observer 之间的订阅发布关系(观察者模式) 如下：</p>\n<ul>\n<li>订阅：Observer 通过 Observable 提供的 subscribe() 方法订阅 Observable。</li>\n<li>发布：Observable 通过回调 next 方法向 Observer 发布事件。</li>\n</ul>\n<p>当Observable设置观察者后，而连接并获取原始数据的这个过程叫生产者，可能是DOM中的 click 事件、input 事件、或者更加复杂的HTTP通信。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Observable, Subscription &#125; <span class=\"keyword\">from</span> <span class=\"string\">'rxjs'</span>;</div><div class=\"line\"></div><div class=\"line\">@Component(&#123;</div><div class=\"line\">  selector: <span class=\"string\">'app-home'</span>,</div><div class=\"line\">  template: <span class=\"string\">`&lt;input type=\"text\"&gt; `</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeComponent</span> </span>&#123;</div><div class=\"line\">  ngOnInit() &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> node = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'input[type=text]'</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 第二个参数 input 是事件名，对于input元素有一个 oninput 事件用于接受用户输入</span></div><div class=\"line\">    <span class=\"keyword\">const</span> input$ = Observable.fromEvent(node, <span class=\"string\">'input'</span>);</div><div class=\"line\">    input$.subscribe(&#123;</div><div class=\"line\">      next: <span class=\"function\">(<span class=\"params\">event: any</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">`You just typed <span class=\"subst\">$&#123;event.target.value&#125;</span>!`</span>),</div><div class=\"line\">      error: <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">`Oops... <span class=\"subst\">$&#123;err&#125;</span>`</span>),</div><div class=\"line\">      complete: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">`Complete!`</span>)</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Observable.fromEvent() 会返回一个Observable，并且监听 input 事件，当事件被触发后会发送一个 Event 给对应的observer观察者。</strong></p>\n<h2 id=\"一、observer\"><a href=\"#一、observer\" class=\"headerlink\" title=\"一、observer\"></a>一、observer</h2><p><strong>subscribe订阅就是接收一个observer 方法。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">input$.subscribe(<span class=\"function\">(<span class=\"params\">event: any</span>) =&gt;</span> &#123;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>从语法角度来讲和 subscribe({ next, error, complete }) 是一样的。当Observable产生一个新值时，会通知 observer 的 next()，而当捕获失败可以调用 error()。</p>\n<p>当Observable被订阅后，除非调用observer的 complete() 或 unsubscribe() 取消订阅两情况以外；会一直将值传递给 observer。</p>\n<p>Observable的生产的值允许经过一序列格式化或操作，最终得到一个有价值的数据给观察者，而这一切是由一序列链式operator来完成的，每一个operator都会产生一个新的Observable。而我们也称这一序列过程为：<strong>流</strong>。</p>\n<hr>\n<h2 id=\"二、operator\"><a href=\"#二、operator\" class=\"headerlink\" title=\"二、operator\"></a>二、operator</h2><p>Observable可以链式写法，这意味着我们可以这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable.fromEvent(node, <span class=\"string\">'input'</span>)</div><div class=\"line\">.map(<span class=\"function\">(<span class=\"params\">event: any</span>) =&gt;</span> event.target.value)</div><div class=\"line\">.filter(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value.length &gt;= <span class=\"number\">2</span>)</div><div class=\"line\">.subscribe(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123; <span class=\"built_in\">console</span>.log(value); &#125;);</div></pre></td></tr></table></figure>\n<p>下面是顺序步骤：</p>\n<ul>\n<li>假设用户输入：a</li>\n<li>Observable对触发 oninput 事件作出反应，将值以参数的形式传递给observer的 next()。</li>\n<li>map() 根据 event.target.value 的内容返回一个新的 Observable，并调用 next() 传递给下一个observer。</li>\n<li>filter() 如果值长度 &gt;=2 的话，则返回一个新的 Observable，并调用 next() 传递给下一个observer。</li>\n<li>最后，将结果传递给 subscribe 订阅块。</li>\n</ul>\n<h4 id=\"取消订阅\"><a href=\"#取消订阅\" class=\"headerlink\" title=\"取消订阅\"></a>取消订阅</h4><p>Observable 当有数据产生时才会推送给订阅者，所以它可能会无限次向订阅者推送数据。正因为如此，在Angular里面创建组件的时候务必要取消订阅操作，以避免内存泄漏，要知道在SPA世界里懂得擦屁股是一件必须的事。</p>\n<h5 id=\"unsubscribe\"><a href=\"#unsubscribe\" class=\"headerlink\" title=\"unsubscribe\"></a>unsubscribe</h5><p>前面示例讲过，调用 subscribe() 后，会返回一个 Subscription 可用于取消操作 unsubscribe()。最合理的方式在 ngOnDestroy 调用它。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ngOnDestroy() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.inputSubscription.unsubscribe();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"takeWhile\"><a href=\"#takeWhile\" class=\"headerlink\" title=\"takeWhile\"></a>takeWhile</h5><p>如果组件有很多订阅者的话，则需要将这些订阅者存储在数组中，并组件被销毁时再逐个取消订阅。但，我们有更好的办法：</p>\n<p>使用 takeWhile() operator，它会在你传递一个布尔值是调用 next() 还是 complete()。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">private alive: boolean = <span class=\"literal\">true</span>;</div><div class=\"line\">ngOnInit() &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> node = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'input[type=text]'</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.s = Observable.fromEvent(node, <span class=\"string\">'input'</span>)</div><div class=\"line\">    .takeWhile(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.alive)</div><div class=\"line\">    .map(<span class=\"function\">(<span class=\"params\">event: any</span>) =&gt;</span> event.target.value)</div><div class=\"line\">    .filter(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value.length &gt;= <span class=\"number\">2</span>)</div><div class=\"line\">    .subscribe(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123; <span class=\"built_in\">console</span>.log(value) &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">ngOnDestroy() &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.alive = <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Subject\"><a href=\"#Subject\" class=\"headerlink\" title=\"Subject\"></a>Subject</h2><p>我们在写一个Service用于数据传递时，总是使用 new Subject。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Injectable()</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageService</span> </span>&#123;</div><div class=\"line\">    private subject = <span class=\"keyword\">new</span> Subject&lt;any&gt;();</div><div class=\"line\"></div><div class=\"line\">    send(message: any) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.subject.next(message);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    get(): Observable&lt;any&gt; &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.subject.asObservable();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>当F组件需要向M组件传递数据时，我们可以在F组件中使用send()。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">constructor</span>(public srv: MessageService) &#123; &#125;</div><div class=\"line\"></div><div class=\"line\">ngOnInit() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.srv.send(<span class=\"string\">'w s k f m?'</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>而M组件只需要订阅内容就行：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">constructor</span>(private srv: MessageService) &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">message: any;</div><div class=\"line\">ngOnInit() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.srv.get().subscribe(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.message = result;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"EventEmitter\"><a href=\"#EventEmitter\" class=\"headerlink\" title=\"EventEmitter\"></a>EventEmitter</h2><p>其实EventEmitter跟RxJS没有直接关系，因为他是Angular的产物，而非RxJS的东西。或者我们压根没必要去谈，因为EventEmitter就是Subject。</p>\n<p><strong>EventEmitter的作用是使指令或组件能自定义事件。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Output() changed = <span class=\"keyword\">new</span> EventEmitter&lt;string&gt;();</div><div class=\"line\"></div><div class=\"line\">click() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.changed.emit(<span class=\"string\">'hi~'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Component(&#123;</div><div class=\"line\">  template: <span class=\"string\">`&lt;comp (changed)=\"subscribe($event)\"&gt;&lt;/comp&gt;`</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeComponent</span> </span>&#123;</div><div class=\"line\">  subscribe(message: string) &#123;</div><div class=\"line\">     <span class=\"comment\">// 接收：hi~</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面示例其实和上一个示例中 MessageService 如出一辙，只不过是将 next() 换成 emit() 仅此而已。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><h4 id=\"创建数据流：\"><a href=\"#创建数据流：\" class=\"headerlink\" title=\"创建数据流：\"></a>创建数据流：</h4><ul>\n<li>单值：of, empty, never</li>\n<li>多值：from</li>\n<li>定时：interval, timer</li>\n<li>从事件创建：fromEvent</li>\n<li>从Promise创建：fromPromise</li>\n<li>自定义创建：create</li>\n</ul>\n<h4 id=\"转换操作：\"><a href=\"#转换操作：\" class=\"headerlink\" title=\"转换操作：\"></a>转换操作：</h4><ul>\n<li>改变数据形态：map, mapTo, pluck</li>\n<li>过滤一些值：filter, skip, first, last, take</li>\n<li>时间轴上的操作：delay, timeout, throttle, debounce, audit, bufferTime</li>\n<li>累加：reduce, scan</li>\n<li>异常处理：throw, catch, retry, finally</li>\n<li>条件执行：takeUntil, delayWhen, retryWhen, subscribeOn, ObserveOn</li>\n<li>转接：switch</li>\n</ul>\n<h4 id=\"组合数据流：\"><a href=\"#组合数据流：\" class=\"headerlink\" title=\"组合数据流：\"></a>组合数据流：</h4><ul>\n<li>concat，保持原来的序列顺序连接两个数据流</li>\n<li>merge，合并序列</li>\n<li>race，预设条件为其中一个数据流完成</li>\n<li>forkJoin，预设条件为所有数据流都完成</li>\n<li>zip，取各来源数据流最后一个值合并为对象</li>\n<li>combineLatest，取各来源数据流最后一个值合并为数组<br>另，最好使用 $ 结尾的命名方式来表示Observable，例：input$。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>Observable只是一个普通函数，要想让他有所作为，就需要跟observer一起使用；而这个observer（后面我们会介绍）只是一个带有 next、error、complete 的简单对象而已。最后，还需要通过 subscribe 订阅来<br><strong>启动</strong> Observable；否则它是不会有任何反应；而订阅也会返回一个可用于取消操作（在RxJS里叫 unsubscribe）。</p>\n<ul>\n<li>Observer Pattern - (观察者模式/发布订阅模式)</li>\n<li>Iterator Pattern - (迭代器模式)</li>\n</ul>\n<p>这两种模式是Observable的基础。</p>","more":"<h2 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h2><p>一个目标对象管理所有相依于它的观察者对象，并且在它本身的状态改变时主动发出通知。它定义了一种一对多的关系，让多个观察者对象同时监听某一个主题对象，这个主题对象的状态发生变化时就会通知所有的观察者对象，使得它们能够自动更新自己。</p>\n<p>Observables 与 Observer 之间的订阅发布关系(观察者模式) 如下：</p>\n<ul>\n<li>订阅：Observer 通过 Observable 提供的 subscribe() 方法订阅 Observable。</li>\n<li>发布：Observable 通过回调 next 方法向 Observer 发布事件。</li>\n</ul>\n<p>当Observable设置观察者后，而连接并获取原始数据的这个过程叫生产者，可能是DOM中的 click 事件、input 事件、或者更加复杂的HTTP通信。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Observable, Subscription &#125; <span class=\"keyword\">from</span> <span class=\"string\">'rxjs'</span>;</div><div class=\"line\"></div><div class=\"line\">@Component(&#123;</div><div class=\"line\">  selector: <span class=\"string\">'app-home'</span>,</div><div class=\"line\">  template: <span class=\"string\">`&lt;input type=\"text\"&gt; `</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeComponent</span> </span>&#123;</div><div class=\"line\">  ngOnInit() &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> node = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'input[type=text]'</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 第二个参数 input 是事件名，对于input元素有一个 oninput 事件用于接受用户输入</span></div><div class=\"line\">    <span class=\"keyword\">const</span> input$ = Observable.fromEvent(node, <span class=\"string\">'input'</span>);</div><div class=\"line\">    input$.subscribe(&#123;</div><div class=\"line\">      next: <span class=\"function\">(<span class=\"params\">event: any</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">`You just typed <span class=\"subst\">$&#123;event.target.value&#125;</span>!`</span>),</div><div class=\"line\">      error: <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">`Oops... <span class=\"subst\">$&#123;err&#125;</span>`</span>),</div><div class=\"line\">      complete: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">`Complete!`</span>)</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Observable.fromEvent() 会返回一个Observable，并且监听 input 事件，当事件被触发后会发送一个 Event 给对应的observer观察者。</strong></p>\n<h2 id=\"一、observer\"><a href=\"#一、observer\" class=\"headerlink\" title=\"一、observer\"></a>一、observer</h2><p><strong>subscribe订阅就是接收一个observer 方法。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">input$.subscribe(<span class=\"function\">(<span class=\"params\">event: any</span>) =&gt;</span> &#123;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>从语法角度来讲和 subscribe({ next, error, complete }) 是一样的。当Observable产生一个新值时，会通知 observer 的 next()，而当捕获失败可以调用 error()。</p>\n<p>当Observable被订阅后，除非调用observer的 complete() 或 unsubscribe() 取消订阅两情况以外；会一直将值传递给 observer。</p>\n<p>Observable的生产的值允许经过一序列格式化或操作，最终得到一个有价值的数据给观察者，而这一切是由一序列链式operator来完成的，每一个operator都会产生一个新的Observable。而我们也称这一序列过程为：<strong>流</strong>。</p>\n<hr>\n<h2 id=\"二、operator\"><a href=\"#二、operator\" class=\"headerlink\" title=\"二、operator\"></a>二、operator</h2><p>Observable可以链式写法，这意味着我们可以这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable.fromEvent(node, <span class=\"string\">'input'</span>)</div><div class=\"line\">.map(<span class=\"function\">(<span class=\"params\">event: any</span>) =&gt;</span> event.target.value)</div><div class=\"line\">.filter(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value.length &gt;= <span class=\"number\">2</span>)</div><div class=\"line\">.subscribe(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123; <span class=\"built_in\">console</span>.log(value); &#125;);</div></pre></td></tr></table></figure>\n<p>下面是顺序步骤：</p>\n<ul>\n<li>假设用户输入：a</li>\n<li>Observable对触发 oninput 事件作出反应，将值以参数的形式传递给observer的 next()。</li>\n<li>map() 根据 event.target.value 的内容返回一个新的 Observable，并调用 next() 传递给下一个observer。</li>\n<li>filter() 如果值长度 &gt;=2 的话，则返回一个新的 Observable，并调用 next() 传递给下一个observer。</li>\n<li>最后，将结果传递给 subscribe 订阅块。</li>\n</ul>\n<h4 id=\"取消订阅\"><a href=\"#取消订阅\" class=\"headerlink\" title=\"取消订阅\"></a>取消订阅</h4><p>Observable 当有数据产生时才会推送给订阅者，所以它可能会无限次向订阅者推送数据。正因为如此，在Angular里面创建组件的时候务必要取消订阅操作，以避免内存泄漏，要知道在SPA世界里懂得擦屁股是一件必须的事。</p>\n<h5 id=\"unsubscribe\"><a href=\"#unsubscribe\" class=\"headerlink\" title=\"unsubscribe\"></a>unsubscribe</h5><p>前面示例讲过，调用 subscribe() 后，会返回一个 Subscription 可用于取消操作 unsubscribe()。最合理的方式在 ngOnDestroy 调用它。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ngOnDestroy() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.inputSubscription.unsubscribe();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"takeWhile\"><a href=\"#takeWhile\" class=\"headerlink\" title=\"takeWhile\"></a>takeWhile</h5><p>如果组件有很多订阅者的话，则需要将这些订阅者存储在数组中，并组件被销毁时再逐个取消订阅。但，我们有更好的办法：</p>\n<p>使用 takeWhile() operator，它会在你传递一个布尔值是调用 next() 还是 complete()。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">private alive: boolean = <span class=\"literal\">true</span>;</div><div class=\"line\">ngOnInit() &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> node = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'input[type=text]'</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.s = Observable.fromEvent(node, <span class=\"string\">'input'</span>)</div><div class=\"line\">    .takeWhile(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.alive)</div><div class=\"line\">    .map(<span class=\"function\">(<span class=\"params\">event: any</span>) =&gt;</span> event.target.value)</div><div class=\"line\">    .filter(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value.length &gt;= <span class=\"number\">2</span>)</div><div class=\"line\">    .subscribe(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123; <span class=\"built_in\">console</span>.log(value) &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">ngOnDestroy() &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.alive = <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Subject\"><a href=\"#Subject\" class=\"headerlink\" title=\"Subject\"></a>Subject</h2><p>我们在写一个Service用于数据传递时，总是使用 new Subject。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Injectable()</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageService</span> </span>&#123;</div><div class=\"line\">    private subject = <span class=\"keyword\">new</span> Subject&lt;any&gt;();</div><div class=\"line\"></div><div class=\"line\">    send(message: any) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.subject.next(message);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    get(): Observable&lt;any&gt; &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.subject.asObservable();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>当F组件需要向M组件传递数据时，我们可以在F组件中使用send()。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">constructor</span>(public srv: MessageService) &#123; &#125;</div><div class=\"line\"></div><div class=\"line\">ngOnInit() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.srv.send(<span class=\"string\">'w s k f m?'</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>而M组件只需要订阅内容就行：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">constructor</span>(private srv: MessageService) &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">message: any;</div><div class=\"line\">ngOnInit() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.srv.get().subscribe(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.message = result;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"EventEmitter\"><a href=\"#EventEmitter\" class=\"headerlink\" title=\"EventEmitter\"></a>EventEmitter</h2><p>其实EventEmitter跟RxJS没有直接关系，因为他是Angular的产物，而非RxJS的东西。或者我们压根没必要去谈，因为EventEmitter就是Subject。</p>\n<p><strong>EventEmitter的作用是使指令或组件能自定义事件。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Output() changed = <span class=\"keyword\">new</span> EventEmitter&lt;string&gt;();</div><div class=\"line\"></div><div class=\"line\">click() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.changed.emit(<span class=\"string\">'hi~'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Component(&#123;</div><div class=\"line\">  template: <span class=\"string\">`&lt;comp (changed)=\"subscribe($event)\"&gt;&lt;/comp&gt;`</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeComponent</span> </span>&#123;</div><div class=\"line\">  subscribe(message: string) &#123;</div><div class=\"line\">     <span class=\"comment\">// 接收：hi~</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面示例其实和上一个示例中 MessageService 如出一辙，只不过是将 next() 换成 emit() 仅此而已。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><h4 id=\"创建数据流：\"><a href=\"#创建数据流：\" class=\"headerlink\" title=\"创建数据流：\"></a>创建数据流：</h4><ul>\n<li>单值：of, empty, never</li>\n<li>多值：from</li>\n<li>定时：interval, timer</li>\n<li>从事件创建：fromEvent</li>\n<li>从Promise创建：fromPromise</li>\n<li>自定义创建：create</li>\n</ul>\n<h4 id=\"转换操作：\"><a href=\"#转换操作：\" class=\"headerlink\" title=\"转换操作：\"></a>转换操作：</h4><ul>\n<li>改变数据形态：map, mapTo, pluck</li>\n<li>过滤一些值：filter, skip, first, last, take</li>\n<li>时间轴上的操作：delay, timeout, throttle, debounce, audit, bufferTime</li>\n<li>累加：reduce, scan</li>\n<li>异常处理：throw, catch, retry, finally</li>\n<li>条件执行：takeUntil, delayWhen, retryWhen, subscribeOn, ObserveOn</li>\n<li>转接：switch</li>\n</ul>\n<h4 id=\"组合数据流：\"><a href=\"#组合数据流：\" class=\"headerlink\" title=\"组合数据流：\"></a>组合数据流：</h4><ul>\n<li>concat，保持原来的序列顺序连接两个数据流</li>\n<li>merge，合并序列</li>\n<li>race，预设条件为其中一个数据流完成</li>\n<li>forkJoin，预设条件为所有数据流都完成</li>\n<li>zip，取各来源数据流最后一个值合并为对象</li>\n<li>combineLatest，取各来源数据流最后一个值合并为数组<br>另，最好使用 $ 结尾的命名方式来表示Observable，例：input$。</li>\n</ul>"},{"title":"angular form 表单","comments":1,"_content":"## checkbox\n\nmodule：import &#123;CheckboxControlValueAccessor &#125; from '@abgular/forms';\n\n- input[type=checkbox][formCtontrolName]\n- input[type=checkbox][formControl]\n- input[type=checkbox][ngModel]\n\n用于写入值并在复选框输入元素上监听更改的访问器\n\n```html\n<input type=\"checkbox\" name = \"rememberLogin\" ngModel>\n```\n<!--more-->\n### 数据驱动\n响应式表单：原理是一开始就构建整个表单，表单的值通过特殊指令formControlName \n\n- formGroup :用来追踪表单控件有效状态及值，可以理解为获取且可以操作整个表单的数据\n- formBuilder :表单数据构建工具[构建初始表单]\n- formContlName :同步与formGrop 构建表单内相同字段的值\n\n### 响应式表单验证\n响应式表单与模板驱动表单不同的是，响应式表单在组件类中创建表单控制模型，可在组件中随意控制校验规则。\n响应式表单使用ReactiveFormsModule,而非普通的formModule,需要在app.module。ts里导入。\n\nreactiveFormsModule 包含formControlDirective、formGroupDirective、formControlName、formArrayName和\ninternalFormSharedModule模板里的指令。\n- formControlDirective 描述表单的一个字段\n- formGroupDirective 描述表单分组\n- formControlName 描述变淡字段名\n- formArrayaName 描述同类型的一组数据的名称，与表单分组无关","source":"_posts/angular-form.md","raw":"---\ntitle: angular form 表单\ncomments: true\n---\n## checkbox\n\nmodule：import &#123;CheckboxControlValueAccessor &#125; from '@abgular/forms';\n\n- input[type=checkbox][formCtontrolName]\n- input[type=checkbox][formControl]\n- input[type=checkbox][ngModel]\n\n用于写入值并在复选框输入元素上监听更改的访问器\n\n```html\n<input type=\"checkbox\" name = \"rememberLogin\" ngModel>\n```\n<!--more-->\n### 数据驱动\n响应式表单：原理是一开始就构建整个表单，表单的值通过特殊指令formControlName \n\n- formGroup :用来追踪表单控件有效状态及值，可以理解为获取且可以操作整个表单的数据\n- formBuilder :表单数据构建工具[构建初始表单]\n- formContlName :同步与formGrop 构建表单内相同字段的值\n\n### 响应式表单验证\n响应式表单与模板驱动表单不同的是，响应式表单在组件类中创建表单控制模型，可在组件中随意控制校验规则。\n响应式表单使用ReactiveFormsModule,而非普通的formModule,需要在app.module。ts里导入。\n\nreactiveFormsModule 包含formControlDirective、formGroupDirective、formControlName、formArrayName和\ninternalFormSharedModule模板里的指令。\n- formControlDirective 描述表单的一个字段\n- formGroupDirective 描述表单分组\n- formControlName 描述变淡字段名\n- formArrayaName 描述同类型的一组数据的名称，与表单分组无关","slug":"angular-form","published":1,"date":"2017-09-18T08:00:14.789Z","updated":"2017-10-31T02:44:42.564Z","layout":"post","photos":[],"link":"","_id":"cj9ffr3px00056cvr3jgte9ya","content":"<h2 id=\"checkbox\"><a href=\"#checkbox\" class=\"headerlink\" title=\"checkbox\"></a>checkbox</h2><p>module：import &#123;CheckboxControlValueAccessor &#125; from ‘@abgular/forms’;</p>\n<ul>\n<li>input[type=checkbox][formCtontrolName]</li>\n<li>input[type=checkbox][formControl]</li>\n<li>input[type=checkbox][ngModel]</li>\n</ul>\n<p>用于写入值并在复选框输入元素上监听更改的访问器</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">name</span> = <span class=\"string\">\"rememberLogin\"</span> <span class=\"attr\">ngModel</span>&gt;</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"数据驱动\"><a href=\"#数据驱动\" class=\"headerlink\" title=\"数据驱动\"></a>数据驱动</h3><p>响应式表单：原理是一开始就构建整个表单，表单的值通过特殊指令formControlName </p>\n<ul>\n<li>formGroup :用来追踪表单控件有效状态及值，可以理解为获取且可以操作整个表单的数据</li>\n<li>formBuilder :表单数据构建工具[构建初始表单]</li>\n<li>formContlName :同步与formGrop 构建表单内相同字段的值</li>\n</ul>\n<h3 id=\"响应式表单验证\"><a href=\"#响应式表单验证\" class=\"headerlink\" title=\"响应式表单验证\"></a>响应式表单验证</h3><p>响应式表单与模板驱动表单不同的是，响应式表单在组件类中创建表单控制模型，可在组件中随意控制校验规则。<br>响应式表单使用ReactiveFormsModule,而非普通的formModule,需要在app.module。ts里导入。</p>\n<p>reactiveFormsModule 包含formControlDirective、formGroupDirective、formControlName、formArrayName和<br>internalFormSharedModule模板里的指令。</p>\n<ul>\n<li>formControlDirective 描述表单的一个字段</li>\n<li>formGroupDirective 描述表单分组</li>\n<li>formControlName 描述变淡字段名</li>\n<li>formArrayaName 描述同类型的一组数据的名称，与表单分组无关</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"checkbox\"><a href=\"#checkbox\" class=\"headerlink\" title=\"checkbox\"></a>checkbox</h2><p>module：import &#123;CheckboxControlValueAccessor &#125; from ‘@abgular/forms’;</p>\n<ul>\n<li>input[type=checkbox][formCtontrolName]</li>\n<li>input[type=checkbox][formControl]</li>\n<li>input[type=checkbox][ngModel]</li>\n</ul>\n<p>用于写入值并在复选框输入元素上监听更改的访问器</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">name</span> = <span class=\"string\">\"rememberLogin\"</span> <span class=\"attr\">ngModel</span>&gt;</span></div></pre></td></tr></table></figure>","more":"<h3 id=\"数据驱动\"><a href=\"#数据驱动\" class=\"headerlink\" title=\"数据驱动\"></a>数据驱动</h3><p>响应式表单：原理是一开始就构建整个表单，表单的值通过特殊指令formControlName </p>\n<ul>\n<li>formGroup :用来追踪表单控件有效状态及值，可以理解为获取且可以操作整个表单的数据</li>\n<li>formBuilder :表单数据构建工具[构建初始表单]</li>\n<li>formContlName :同步与formGrop 构建表单内相同字段的值</li>\n</ul>\n<h3 id=\"响应式表单验证\"><a href=\"#响应式表单验证\" class=\"headerlink\" title=\"响应式表单验证\"></a>响应式表单验证</h3><p>响应式表单与模板驱动表单不同的是，响应式表单在组件类中创建表单控制模型，可在组件中随意控制校验规则。<br>响应式表单使用ReactiveFormsModule,而非普通的formModule,需要在app.module。ts里导入。</p>\n<p>reactiveFormsModule 包含formControlDirective、formGroupDirective、formControlName、formArrayName和<br>internalFormSharedModule模板里的指令。</p>\n<ul>\n<li>formControlDirective 描述表单的一个字段</li>\n<li>formGroupDirective 描述表单分组</li>\n<li>formControlName 描述变淡字段名</li>\n<li>formArrayaName 描述同类型的一组数据的名称，与表单分组无关</li>\n</ul>"},{"title":"PWA 离线缓存","_content":"## PWA (Progressive Web App) 特点\n1. installability(可安装性)，可被添加自主屏与全屏运行。\n2. app shell:第一次渲染个壳，等异步数据来了在填充。\n3. offline(离线能力)：离线和弱网环境也能秒开，server worker给了web一个可以跑后台的线程，它可以搭配非常靠谱的cache Api做缓存、可以拦截所有Http请求并使用Fetch API进行response ，一个非常完备哦的proxy就这么诞生了\n4. re-engageable：推送通知的能力，依赖service Worker 与http push，不过默认支持的可是GCM\n5. 推送是指服务器向服务工作线程提供信息的操作\n6. 通知是指服务工作线程或网页脚本向用户信息的操作。\n\n<!--more-->\n\n## service Worker 有以下功能和特性\n- 一个独立的 worker 线程，独立于当前网页进程，有自己独立的 worker context。\n- 一旦被 install，就永远存在，除非被 uninstall\n- 需要的时候可以直接唤醒，不需要的时候自动睡眠（有效利用资源，此处有坑）\n- 可编程拦截代理请求和返回，缓存文件，缓存的文件可以被网页进程取到（包括网络离线状态）\n- 离线内容开发者可控\n- 能向客户端推送消息\n- 不能直接操作 DOM\n- 出于安全的考虑，必须在 HTTPS 环境下才能工作\n- 异步实现，内部大都是通过 Promise 实现\n\n#### service Worker前提条件\n\n- 要求HTTPS的环境\n- 缓存机制是依赖cache API 实现的\n- 依赖HTML5 fetchAPI\n- 依赖Promise\n\n#### 注册\n```javascript\n      if ('serviceWorker' in navigator) {\n            navigator.serviceWorker\n                .register('./pwa/sw.js', {scope: '/pwa'})\n                /* 每次页面加载成功后，就会调用register()方法。浏览器会判断service Worker线程是否\n                 已注册，并作出相应的处理*/\n                /* scope 方法是可选的，用于指定你想让service worker 控制内容的子目录。service worker 线程将接受\n                 scope指定网域目录上所有事项的fetch事件。\n                 scope的意义在于如果sw.js在/a/b/sw.js下，那么scope默认是/a/b,那么service worker 线程只能\n                 捕捉到path为/a/b开头的（/a/b/page1,/a/b/page2,..)下的fetch事件*/\n                .then(function (registration) {\n                    console.log('Service Worker 注册成功，域名: ', registration.scope);\n                })\n                .catch(function (err) {\n                    console.log('Service Worker 注册失败: ', err);\n                });\n\n        }\n        ```\n\n#### 安装\n\ninstall事件我们会绑定在service worker 文件中，在service worker 安装成功后，install事件被触发。**install事件一般是被用来填充你的浏览器的离线缓存能力。**为了达到这个目的，我们使用了service worker 新的标志性的存储**cache API** ——一个service worker上的全局对象，**它使我们可以存储网络响应发来的资源，并且根据他们的请求来生成key。**这个 API 和浏览器的标准的缓存工作原理很相似，但是是只对应你的站点的域的。它会一直持久存在，直到你告诉它不再存储，你拥有全部的控制权。\n\n```javascript\n    self.addEventListener('install', function (e) {\n        console.log('[ServiceWorker] Install');\n        /*ExtendableEvent.waitUntil():\n         延长了时间的生命周期。在服务工作中，延长事件的生命周期阻止浏览器在事件中的一部操作完成之前终止service worker。\n         当在与安装事件相关联的EventHandler中调用时，它会延时将已安装的工作程序视为安装，\n         直到传递的promise成功解析为止。这主要用于确保service worker在其依赖的所有核心高速缓存填充之前不会被考虑安装*/\n        e.waitUntil(\n            caches.open(chache_name).then(function (cache) {\n                console.log('[ServiceWorker] Caching app shell');\n                console.log(cache);\n                return cache.addAll(filesToCache);\n            })\n        );\n    });\n    /*这里我们新增了install 事件监听器，接着在事件上接了一个ExtendableEvent.waitUntil()方法\n      这会确保service worker不会在waitUntil()里面的代码执行完毕之前安装完成*/\n    /*我们使用caches.open()方法创建了一个yu的新缓存，将会是我们站点资源的缓存的第一个版本。它返回了一个创建缓存的promise,\n      当它resolved 的时候，我们接着会调用在创建的缓存上的一个方法addALL()，这个方法的参数是一个由一组相对于origin的URL组成的数组，\n      这个数组就是你想缓存的资源的列表*/\n      ```\n\n#### 自定义请求响应\n``` javascript\n    self.addEventListener('fetch', function (e) {\n     console.log('[service worker] fetch',e.request.url);\n    /*respondWith()方法旨在包裹代码，这些代码为来自受控页面的request生成的自定义的response。用来劫持我们的http响应*/\n        e.resondWith(\n            caches.match(e.request).then(function () {\n                //如果sw有自己的返回，就直接返回，减少一次http请求。\n               if (response) {\n                   return response;\n               }\n\n               //如果没有返回，就直接请求真实远程服务\n                var request = e.request.clone(); //拷贝原始请求\n                //clone()允许多次请求body()对象。\n                return fetch(request).then(function (httpRes) {\n                   //http请求的返回已经抓到，可以进行设置\n\n                    //请求失败，直接返回失败的结果\n                    if(!httpRes||httpRes.status!==200){\n                        return httpRes;\n                    }\n                    //  请求成功，将请求缓存\n                    var responseClone = httpRes.clone();\n                    caches.open(cache_name).then(function (cache) {\n                        cache.put(e.request,responseClone);\n                    });\n                    return httpRes;\n                });\n\n            })\n        );\n\n    });\n    /*每次任何被service worker 控制的资源被请求到时，都会触发fetch事件，这些资源包括了指定的scope内的\n      html 文档，和这些html文档内引用的其他任何资源（比如index.html发起了一个跨域的请求来嵌入一张图片，这个也会通过service worker*/\n      ```\n\n我们可以在install 的时候进行静态资源缓存。也可以通过fetch事件回调来代理页面请求从而实现动态资源缓存:\n\n- on install 的优点是第二次访问就可以离线访问，缺点是需要缓存的URL在编译时插入到脚本中，增加代码量和降低可维护性。\n- on fetch 的优点是无需变更编译过程，也不会产生额外的流量，缺点是需要多一次访问才能离线访问。\n\n#### Service Worker 生命周期 （也许翻译的不好，尽量去看原文）\n\n- installing: 这一阶段标志着开始注册。它想要允许设置worker-specific 的资源,例如离线模式的caches.\n    - 用 **event.waitUntil()** 通过一个promise 去延长安装service worker阶段直到e.waitUntil()里的代码执行完毕。如果所有资源安装成功缓存则安装成功，否则安装失败，则无法激活service worker。\n    - 用 **self.skipWaiting()** self 是当前context 的 global 变量。强制当前处于waiting 状态的脚本进入activate状态。\n- installed:service worker 已经完成了它的安装，在等待其他service Workers 线程被关闭。\n- activating: 这时没有被其他workers 控制的客户端。这个阶段允许workers 去完成安装并且清理其他 worker以及关联缓存的就缓存资源，等待新的service worker线程被激活。\n- activated:现在可以处理方法事件。\n- message: service worker 运行于独立context 中，无法直接访问当前页面主线程的DOM信息，但是通过postMessageAPI ,可以实现他们之间的消息传递，这样主线程就可以接受service worker 的指令操作DOM。\n\n## manifest.json\npwa 添加至桌面的功能实现依赖于manifest.json。\n\n#### 基本功能\n- name:{string} 应用名称，用于安装横幅、启动画面显示\n- short_name:{string} 应用短名称，用于主屏幕显示\n- icon:img 应用图标列表，其中包括:\n    - src:{string}  图标URL\n    - type:图标的mime 类型\n    - size:图标尺寸。当PWA添加到主屏幕时，浏览器会根据有效图标的size 字段进行选择，如果匹配到的图标路径错误，将会显示浏览器默认icon。\n- start_url:{string=} 应用启动地址\n- background_color:{color} css色值\n- display: {string} 显示类型\n    - fullScreen: 应用的显示界面将占满整个屏幕\n    - standalone: 浏览器相关UI（导航栏、工具栏等）将会被隐藏\n    - minimal-ui: 显示形式与standalone类似，浏览器相关UI会最小化为一个按钮，不同浏览器在实现上略有不同\n    - browser: 浏览器模式，与普通网页在浏览器中打开的显示一致\n- orientation: string 应用显示方向\n- theme_color: 主题颜色\n\n#### 设置作用域\n\n- 如果没有在manifest中设置scope，则默认的作用域为manifest.json所在的文件夹；\n- **start_url 必须在作用域范围之内**;\n- 如果start_url 为相对地址，其根路径收scope所影响;\n- 如果start_url 为绝对地址（以/开头）,则该地址将永远以/作为跟地址；\n\n#### 添加启动动画\n\n当PWA添加到主屏幕点击打开时，幕后执行了若干操作：\n1. 启动浏览器\n2. 启动显示页面的渲染器\n3. 加载资源\n\n在这个过程中，由于页面未加载完毕，因此屏幕将显示空白并且看似停滞。如果是从网络加载的页面资源，白屏过程将会变得更加明显。因此 PWA 提供了启动画面功能，用标题、颜色和图像组成的画面来替代白屏，提升用户体验。\n\n目前，如果修改了manifest.json 的应用的名称，已经添加到主屏幕的名称并不会改变，只有当用户重新添加到桌面时，更改后的名称才会显示出来。但是未来版本的chrome 支持自动更新。\n\n\n\n\n\n","source":"_posts/PWA-offline.md","raw":"---\ntitle: PWA 离线缓存\n---\n## PWA (Progressive Web App) 特点\n1. installability(可安装性)，可被添加自主屏与全屏运行。\n2. app shell:第一次渲染个壳，等异步数据来了在填充。\n3. offline(离线能力)：离线和弱网环境也能秒开，server worker给了web一个可以跑后台的线程，它可以搭配非常靠谱的cache Api做缓存、可以拦截所有Http请求并使用Fetch API进行response ，一个非常完备哦的proxy就这么诞生了\n4. re-engageable：推送通知的能力，依赖service Worker 与http push，不过默认支持的可是GCM\n5. 推送是指服务器向服务工作线程提供信息的操作\n6. 通知是指服务工作线程或网页脚本向用户信息的操作。\n\n<!--more-->\n\n## service Worker 有以下功能和特性\n- 一个独立的 worker 线程，独立于当前网页进程，有自己独立的 worker context。\n- 一旦被 install，就永远存在，除非被 uninstall\n- 需要的时候可以直接唤醒，不需要的时候自动睡眠（有效利用资源，此处有坑）\n- 可编程拦截代理请求和返回，缓存文件，缓存的文件可以被网页进程取到（包括网络离线状态）\n- 离线内容开发者可控\n- 能向客户端推送消息\n- 不能直接操作 DOM\n- 出于安全的考虑，必须在 HTTPS 环境下才能工作\n- 异步实现，内部大都是通过 Promise 实现\n\n#### service Worker前提条件\n\n- 要求HTTPS的环境\n- 缓存机制是依赖cache API 实现的\n- 依赖HTML5 fetchAPI\n- 依赖Promise\n\n#### 注册\n```javascript\n      if ('serviceWorker' in navigator) {\n            navigator.serviceWorker\n                .register('./pwa/sw.js', {scope: '/pwa'})\n                /* 每次页面加载成功后，就会调用register()方法。浏览器会判断service Worker线程是否\n                 已注册，并作出相应的处理*/\n                /* scope 方法是可选的，用于指定你想让service worker 控制内容的子目录。service worker 线程将接受\n                 scope指定网域目录上所有事项的fetch事件。\n                 scope的意义在于如果sw.js在/a/b/sw.js下，那么scope默认是/a/b,那么service worker 线程只能\n                 捕捉到path为/a/b开头的（/a/b/page1,/a/b/page2,..)下的fetch事件*/\n                .then(function (registration) {\n                    console.log('Service Worker 注册成功，域名: ', registration.scope);\n                })\n                .catch(function (err) {\n                    console.log('Service Worker 注册失败: ', err);\n                });\n\n        }\n        ```\n\n#### 安装\n\ninstall事件我们会绑定在service worker 文件中，在service worker 安装成功后，install事件被触发。**install事件一般是被用来填充你的浏览器的离线缓存能力。**为了达到这个目的，我们使用了service worker 新的标志性的存储**cache API** ——一个service worker上的全局对象，**它使我们可以存储网络响应发来的资源，并且根据他们的请求来生成key。**这个 API 和浏览器的标准的缓存工作原理很相似，但是是只对应你的站点的域的。它会一直持久存在，直到你告诉它不再存储，你拥有全部的控制权。\n\n```javascript\n    self.addEventListener('install', function (e) {\n        console.log('[ServiceWorker] Install');\n        /*ExtendableEvent.waitUntil():\n         延长了时间的生命周期。在服务工作中，延长事件的生命周期阻止浏览器在事件中的一部操作完成之前终止service worker。\n         当在与安装事件相关联的EventHandler中调用时，它会延时将已安装的工作程序视为安装，\n         直到传递的promise成功解析为止。这主要用于确保service worker在其依赖的所有核心高速缓存填充之前不会被考虑安装*/\n        e.waitUntil(\n            caches.open(chache_name).then(function (cache) {\n                console.log('[ServiceWorker] Caching app shell');\n                console.log(cache);\n                return cache.addAll(filesToCache);\n            })\n        );\n    });\n    /*这里我们新增了install 事件监听器，接着在事件上接了一个ExtendableEvent.waitUntil()方法\n      这会确保service worker不会在waitUntil()里面的代码执行完毕之前安装完成*/\n    /*我们使用caches.open()方法创建了一个yu的新缓存，将会是我们站点资源的缓存的第一个版本。它返回了一个创建缓存的promise,\n      当它resolved 的时候，我们接着会调用在创建的缓存上的一个方法addALL()，这个方法的参数是一个由一组相对于origin的URL组成的数组，\n      这个数组就是你想缓存的资源的列表*/\n      ```\n\n#### 自定义请求响应\n``` javascript\n    self.addEventListener('fetch', function (e) {\n     console.log('[service worker] fetch',e.request.url);\n    /*respondWith()方法旨在包裹代码，这些代码为来自受控页面的request生成的自定义的response。用来劫持我们的http响应*/\n        e.resondWith(\n            caches.match(e.request).then(function () {\n                //如果sw有自己的返回，就直接返回，减少一次http请求。\n               if (response) {\n                   return response;\n               }\n\n               //如果没有返回，就直接请求真实远程服务\n                var request = e.request.clone(); //拷贝原始请求\n                //clone()允许多次请求body()对象。\n                return fetch(request).then(function (httpRes) {\n                   //http请求的返回已经抓到，可以进行设置\n\n                    //请求失败，直接返回失败的结果\n                    if(!httpRes||httpRes.status!==200){\n                        return httpRes;\n                    }\n                    //  请求成功，将请求缓存\n                    var responseClone = httpRes.clone();\n                    caches.open(cache_name).then(function (cache) {\n                        cache.put(e.request,responseClone);\n                    });\n                    return httpRes;\n                });\n\n            })\n        );\n\n    });\n    /*每次任何被service worker 控制的资源被请求到时，都会触发fetch事件，这些资源包括了指定的scope内的\n      html 文档，和这些html文档内引用的其他任何资源（比如index.html发起了一个跨域的请求来嵌入一张图片，这个也会通过service worker*/\n      ```\n\n我们可以在install 的时候进行静态资源缓存。也可以通过fetch事件回调来代理页面请求从而实现动态资源缓存:\n\n- on install 的优点是第二次访问就可以离线访问，缺点是需要缓存的URL在编译时插入到脚本中，增加代码量和降低可维护性。\n- on fetch 的优点是无需变更编译过程，也不会产生额外的流量，缺点是需要多一次访问才能离线访问。\n\n#### Service Worker 生命周期 （也许翻译的不好，尽量去看原文）\n\n- installing: 这一阶段标志着开始注册。它想要允许设置worker-specific 的资源,例如离线模式的caches.\n    - 用 **event.waitUntil()** 通过一个promise 去延长安装service worker阶段直到e.waitUntil()里的代码执行完毕。如果所有资源安装成功缓存则安装成功，否则安装失败，则无法激活service worker。\n    - 用 **self.skipWaiting()** self 是当前context 的 global 变量。强制当前处于waiting 状态的脚本进入activate状态。\n- installed:service worker 已经完成了它的安装，在等待其他service Workers 线程被关闭。\n- activating: 这时没有被其他workers 控制的客户端。这个阶段允许workers 去完成安装并且清理其他 worker以及关联缓存的就缓存资源，等待新的service worker线程被激活。\n- activated:现在可以处理方法事件。\n- message: service worker 运行于独立context 中，无法直接访问当前页面主线程的DOM信息，但是通过postMessageAPI ,可以实现他们之间的消息传递，这样主线程就可以接受service worker 的指令操作DOM。\n\n## manifest.json\npwa 添加至桌面的功能实现依赖于manifest.json。\n\n#### 基本功能\n- name:{string} 应用名称，用于安装横幅、启动画面显示\n- short_name:{string} 应用短名称，用于主屏幕显示\n- icon:img 应用图标列表，其中包括:\n    - src:{string}  图标URL\n    - type:图标的mime 类型\n    - size:图标尺寸。当PWA添加到主屏幕时，浏览器会根据有效图标的size 字段进行选择，如果匹配到的图标路径错误，将会显示浏览器默认icon。\n- start_url:{string=} 应用启动地址\n- background_color:{color} css色值\n- display: {string} 显示类型\n    - fullScreen: 应用的显示界面将占满整个屏幕\n    - standalone: 浏览器相关UI（导航栏、工具栏等）将会被隐藏\n    - minimal-ui: 显示形式与standalone类似，浏览器相关UI会最小化为一个按钮，不同浏览器在实现上略有不同\n    - browser: 浏览器模式，与普通网页在浏览器中打开的显示一致\n- orientation: string 应用显示方向\n- theme_color: 主题颜色\n\n#### 设置作用域\n\n- 如果没有在manifest中设置scope，则默认的作用域为manifest.json所在的文件夹；\n- **start_url 必须在作用域范围之内**;\n- 如果start_url 为相对地址，其根路径收scope所影响;\n- 如果start_url 为绝对地址（以/开头）,则该地址将永远以/作为跟地址；\n\n#### 添加启动动画\n\n当PWA添加到主屏幕点击打开时，幕后执行了若干操作：\n1. 启动浏览器\n2. 启动显示页面的渲染器\n3. 加载资源\n\n在这个过程中，由于页面未加载完毕，因此屏幕将显示空白并且看似停滞。如果是从网络加载的页面资源，白屏过程将会变得更加明显。因此 PWA 提供了启动画面功能，用标题、颜色和图像组成的画面来替代白屏，提升用户体验。\n\n目前，如果修改了manifest.json 的应用的名称，已经添加到主屏幕的名称并不会改变，只有当用户重新添加到桌面时，更改后的名称才会显示出来。但是未来版本的chrome 支持自动更新。\n\n\n\n\n\n","slug":"PWA-offline","published":1,"date":"2017-09-26T02:51:04.689Z","updated":"2017-09-26T02:51:04.697Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9ffr3py00066cvryjmxymwm","content":"<h2 id=\"PWA-Progressive-Web-App-特点\"><a href=\"#PWA-Progressive-Web-App-特点\" class=\"headerlink\" title=\"PWA (Progressive Web App) 特点\"></a>PWA (Progressive Web App) 特点</h2><ol>\n<li>installability(可安装性)，可被添加自主屏与全屏运行。</li>\n<li>app shell:第一次渲染个壳，等异步数据来了在填充。</li>\n<li>offline(离线能力)：离线和弱网环境也能秒开，server worker给了web一个可以跑后台的线程，它可以搭配非常靠谱的cache Api做缓存、可以拦截所有Http请求并使用Fetch API进行response ，一个非常完备哦的proxy就这么诞生了</li>\n<li>re-engageable：推送通知的能力，依赖service Worker 与http push，不过默认支持的可是GCM</li>\n<li>推送是指服务器向服务工作线程提供信息的操作</li>\n<li>通知是指服务工作线程或网页脚本向用户信息的操作。</li>\n</ol>\n<a id=\"more\"></a>\n<h2 id=\"service-Worker-有以下功能和特性\"><a href=\"#service-Worker-有以下功能和特性\" class=\"headerlink\" title=\"service Worker 有以下功能和特性\"></a>service Worker 有以下功能和特性</h2><ul>\n<li>一个独立的 worker 线程，独立于当前网页进程，有自己独立的 worker context。</li>\n<li>一旦被 install，就永远存在，除非被 uninstall</li>\n<li>需要的时候可以直接唤醒，不需要的时候自动睡眠（有效利用资源，此处有坑）</li>\n<li>可编程拦截代理请求和返回，缓存文件，缓存的文件可以被网页进程取到（包括网络离线状态）</li>\n<li>离线内容开发者可控</li>\n<li>能向客户端推送消息</li>\n<li>不能直接操作 DOM</li>\n<li>出于安全的考虑，必须在 HTTPS 环境下才能工作</li>\n<li>异步实现，内部大都是通过 Promise 实现</li>\n</ul>\n<h4 id=\"service-Worker前提条件\"><a href=\"#service-Worker前提条件\" class=\"headerlink\" title=\"service Worker前提条件\"></a>service Worker前提条件</h4><ul>\n<li>要求HTTPS的环境</li>\n<li>缓存机制是依赖cache API 实现的</li>\n<li>依赖HTML5 fetchAPI</li>\n<li>依赖Promise</li>\n</ul>\n<h4 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">'serviceWorker'</span> <span class=\"keyword\">in</span> navigator) &#123;</div><div class=\"line\">      navigator.serviceWorker</div><div class=\"line\">          .register(<span class=\"string\">'./pwa/sw.js'</span>, &#123;<span class=\"attr\">scope</span>: <span class=\"string\">'/pwa'</span>&#125;)</div><div class=\"line\">          <span class=\"comment\">/* 每次页面加载成功后，就会调用register()方法。浏览器会判断service Worker线程是否</span></div><div class=\"line\"><span class=\"comment\">           已注册，并作出相应的处理*/</span></div><div class=\"line\">          <span class=\"comment\">/* scope 方法是可选的，用于指定你想让service worker 控制内容的子目录。service worker 线程将接受</span></div><div class=\"line\"><span class=\"comment\">           scope指定网域目录上所有事项的fetch事件。</span></div><div class=\"line\"><span class=\"comment\">           scope的意义在于如果sw.js在/a/b/sw.js下，那么scope默认是/a/b,那么service worker 线程只能</span></div><div class=\"line\"><span class=\"comment\">           捕捉到path为/a/b开头的（/a/b/page1,/a/b/page2,..)下的fetch事件*/</span></div><div class=\"line\">          .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">registration</span>) </span>&#123;</div><div class=\"line\">              <span class=\"built_in\">console</span>.log(<span class=\"string\">'Service Worker 注册成功，域名: '</span>, registration.scope);</div><div class=\"line\">          &#125;)</div><div class=\"line\">          .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">              <span class=\"built_in\">console</span>.log(<span class=\"string\">'Service Worker 注册失败: '</span>, err);</div><div class=\"line\">          &#125;);</div><div class=\"line\"></div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>install事件我们会绑定在service worker 文件中，在service worker 安装成功后，install事件被触发。<strong>install事件一般是被用来填充你的浏览器的离线缓存能力。</strong>为了达到这个目的，我们使用了service worker 新的标志性的存储<strong>cache API</strong> ——一个service worker上的全局对象，<strong>它使我们可以存储网络响应发来的资源，并且根据他们的请求来生成key。</strong>这个 API 和浏览器的标准的缓存工作原理很相似，但是是只对应你的站点的域的。它会一直持久存在，直到你告诉它不再存储，你拥有全部的控制权。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">self.addEventListener(<span class=\"string\">'install'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'[ServiceWorker] Install'</span>);</div><div class=\"line\">    <span class=\"comment\">/*ExtendableEvent.waitUntil():</span></div><div class=\"line\"><span class=\"comment\">     延长了时间的生命周期。在服务工作中，延长事件的生命周期阻止浏览器在事件中的一部操作完成之前终止service worker。</span></div><div class=\"line\"><span class=\"comment\">     当在与安装事件相关联的EventHandler中调用时，它会延时将已安装的工作程序视为安装，</span></div><div class=\"line\"><span class=\"comment\">     直到传递的promise成功解析为止。这主要用于确保service worker在其依赖的所有核心高速缓存填充之前不会被考虑安装*/</span></div><div class=\"line\">    e.waitUntil(</div><div class=\"line\">        caches.open(chache_name).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">cache</span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'[ServiceWorker] Caching app shell'</span>);</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(cache);</div><div class=\"line\">            <span class=\"keyword\">return</span> cache.addAll(filesToCache);</div><div class=\"line\">        &#125;)</div><div class=\"line\">    );</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">/*这里我们新增了install 事件监听器，接着在事件上接了一个ExtendableEvent.waitUntil()方法</span></div><div class=\"line\"><span class=\"comment\">  这会确保service worker不会在waitUntil()里面的代码执行完毕之前安装完成*/</span></div><div class=\"line\"><span class=\"comment\">/*我们使用caches.open()方法创建了一个yu的新缓存，将会是我们站点资源的缓存的第一个版本。它返回了一个创建缓存的promise,</span></div><div class=\"line\"><span class=\"comment\">  当它resolved 的时候，我们接着会调用在创建的缓存上的一个方法addALL()，这个方法的参数是一个由一组相对于origin的URL组成的数组，</span></div><div class=\"line\"><span class=\"comment\">  这个数组就是你想缓存的资源的列表*/</span></div></pre></td></tr></table></figure>\n<h4 id=\"自定义请求响应\"><a href=\"#自定义请求响应\" class=\"headerlink\" title=\"自定义请求响应\"></a>自定义请求响应</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">self.addEventListener(<span class=\"string\">'fetch'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">'[service worker] fetch'</span>,e.request.url);</div><div class=\"line\"><span class=\"comment\">/*respondWith()方法旨在包裹代码，这些代码为来自受控页面的request生成的自定义的response。用来劫持我们的http响应*/</span></div><div class=\"line\">    e.resondWith(</div><div class=\"line\">        caches.match(e.request).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">//如果sw有自己的返回，就直接返回，减少一次http请求。</span></div><div class=\"line\">           <span class=\"keyword\">if</span> (response) &#123;</div><div class=\"line\">               <span class=\"keyword\">return</span> response;</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"comment\">//如果没有返回，就直接请求真实远程服务</span></div><div class=\"line\">            <span class=\"keyword\">var</span> request = e.request.clone(); <span class=\"comment\">//拷贝原始请求</span></div><div class=\"line\">            <span class=\"comment\">//clone()允许多次请求body()对象。</span></div><div class=\"line\">            <span class=\"keyword\">return</span> fetch(request).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">httpRes</span>) </span>&#123;</div><div class=\"line\">               <span class=\"comment\">//http请求的返回已经抓到，可以进行设置</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">//请求失败，直接返回失败的结果</span></div><div class=\"line\">                <span class=\"keyword\">if</span>(!httpRes||httpRes.status!==<span class=\"number\">200</span>)&#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> httpRes;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"comment\">//  请求成功，将请求缓存</span></div><div class=\"line\">                <span class=\"keyword\">var</span> responseClone = httpRes.clone();</div><div class=\"line\">                caches.open(cache_name).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">cache</span>) </span>&#123;</div><div class=\"line\">                    cache.put(e.request,responseClone);</div><div class=\"line\">                &#125;);</div><div class=\"line\">                <span class=\"keyword\">return</span> httpRes;</div><div class=\"line\">            &#125;);</div><div class=\"line\"></div><div class=\"line\">        &#125;)</div><div class=\"line\">    );</div><div class=\"line\"></div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">/*每次任何被service worker 控制的资源被请求到时，都会触发fetch事件，这些资源包括了指定的scope内的</span></div><div class=\"line\"><span class=\"comment\">  html 文档，和这些html文档内引用的其他任何资源（比如index.html发起了一个跨域的请求来嵌入一张图片，这个也会通过service worker*/</span></div></pre></td></tr></table></figure>\n<p>我们可以在install 的时候进行静态资源缓存。也可以通过fetch事件回调来代理页面请求从而实现动态资源缓存:</p>\n<ul>\n<li>on install 的优点是第二次访问就可以离线访问，缺点是需要缓存的URL在编译时插入到脚本中，增加代码量和降低可维护性。</li>\n<li>on fetch 的优点是无需变更编译过程，也不会产生额外的流量，缺点是需要多一次访问才能离线访问。</li>\n</ul>\n<h4 id=\"Service-Worker-生命周期-（也许翻译的不好，尽量去看原文）\"><a href=\"#Service-Worker-生命周期-（也许翻译的不好，尽量去看原文）\" class=\"headerlink\" title=\"Service Worker 生命周期 （也许翻译的不好，尽量去看原文）\"></a>Service Worker 生命周期 （也许翻译的不好，尽量去看原文）</h4><ul>\n<li>installing: 这一阶段标志着开始注册。它想要允许设置worker-specific 的资源,例如离线模式的caches.<ul>\n<li>用 <strong>event.waitUntil()</strong> 通过一个promise 去延长安装service worker阶段直到e.waitUntil()里的代码执行完毕。如果所有资源安装成功缓存则安装成功，否则安装失败，则无法激活service worker。</li>\n<li>用 <strong>self.skipWaiting()</strong> self 是当前context 的 global 变量。强制当前处于waiting 状态的脚本进入activate状态。</li>\n</ul>\n</li>\n<li>installed:service worker 已经完成了它的安装，在等待其他service Workers 线程被关闭。</li>\n<li>activating: 这时没有被其他workers 控制的客户端。这个阶段允许workers 去完成安装并且清理其他 worker以及关联缓存的就缓存资源，等待新的service worker线程被激活。</li>\n<li>activated:现在可以处理方法事件。</li>\n<li>message: service worker 运行于独立context 中，无法直接访问当前页面主线程的DOM信息，但是通过postMessageAPI ,可以实现他们之间的消息传递，这样主线程就可以接受service worker 的指令操作DOM。</li>\n</ul>\n<h2 id=\"manifest-json\"><a href=\"#manifest-json\" class=\"headerlink\" title=\"manifest.json\"></a>manifest.json</h2><p>pwa 添加至桌面的功能实现依赖于manifest.json。</p>\n<h4 id=\"基本功能\"><a href=\"#基本功能\" class=\"headerlink\" title=\"基本功能\"></a>基本功能</h4><ul>\n<li>name:{string} 应用名称，用于安装横幅、启动画面显示</li>\n<li>short_name:{string} 应用短名称，用于主屏幕显示</li>\n<li>icon:img 应用图标列表，其中包括:<ul>\n<li>src:{string}  图标URL</li>\n<li>type:图标的mime 类型</li>\n<li>size:图标尺寸。当PWA添加到主屏幕时，浏览器会根据有效图标的size 字段进行选择，如果匹配到的图标路径错误，将会显示浏览器默认icon。</li>\n</ul>\n</li>\n<li>start_url:{string=} 应用启动地址</li>\n<li>background_color:{color} css色值</li>\n<li>display: {string} 显示类型<ul>\n<li>fullScreen: 应用的显示界面将占满整个屏幕</li>\n<li>standalone: 浏览器相关UI（导航栏、工具栏等）将会被隐藏</li>\n<li>minimal-ui: 显示形式与standalone类似，浏览器相关UI会最小化为一个按钮，不同浏览器在实现上略有不同</li>\n<li>browser: 浏览器模式，与普通网页在浏览器中打开的显示一致</li>\n</ul>\n</li>\n<li>orientation: string 应用显示方向</li>\n<li>theme_color: 主题颜色</li>\n</ul>\n<h4 id=\"设置作用域\"><a href=\"#设置作用域\" class=\"headerlink\" title=\"设置作用域\"></a>设置作用域</h4><ul>\n<li>如果没有在manifest中设置scope，则默认的作用域为manifest.json所在的文件夹；</li>\n<li><strong>start_url 必须在作用域范围之内</strong>;</li>\n<li>如果start_url 为相对地址，其根路径收scope所影响;</li>\n<li>如果start_url 为绝对地址（以/开头）,则该地址将永远以/作为跟地址；</li>\n</ul>\n<h4 id=\"添加启动动画\"><a href=\"#添加启动动画\" class=\"headerlink\" title=\"添加启动动画\"></a>添加启动动画</h4><p>当PWA添加到主屏幕点击打开时，幕后执行了若干操作：</p>\n<ol>\n<li>启动浏览器</li>\n<li>启动显示页面的渲染器</li>\n<li>加载资源</li>\n</ol>\n<p>在这个过程中，由于页面未加载完毕，因此屏幕将显示空白并且看似停滞。如果是从网络加载的页面资源，白屏过程将会变得更加明显。因此 PWA 提供了启动画面功能，用标题、颜色和图像组成的画面来替代白屏，提升用户体验。</p>\n<p>目前，如果修改了manifest.json 的应用的名称，已经添加到主屏幕的名称并不会改变，只有当用户重新添加到桌面时，更改后的名称才会显示出来。但是未来版本的chrome 支持自动更新。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"PWA-Progressive-Web-App-特点\"><a href=\"#PWA-Progressive-Web-App-特点\" class=\"headerlink\" title=\"PWA (Progressive Web App) 特点\"></a>PWA (Progressive Web App) 特点</h2><ol>\n<li>installability(可安装性)，可被添加自主屏与全屏运行。</li>\n<li>app shell:第一次渲染个壳，等异步数据来了在填充。</li>\n<li>offline(离线能力)：离线和弱网环境也能秒开，server worker给了web一个可以跑后台的线程，它可以搭配非常靠谱的cache Api做缓存、可以拦截所有Http请求并使用Fetch API进行response ，一个非常完备哦的proxy就这么诞生了</li>\n<li>re-engageable：推送通知的能力，依赖service Worker 与http push，不过默认支持的可是GCM</li>\n<li>推送是指服务器向服务工作线程提供信息的操作</li>\n<li>通知是指服务工作线程或网页脚本向用户信息的操作。</li>\n</ol>","more":"<h2 id=\"service-Worker-有以下功能和特性\"><a href=\"#service-Worker-有以下功能和特性\" class=\"headerlink\" title=\"service Worker 有以下功能和特性\"></a>service Worker 有以下功能和特性</h2><ul>\n<li>一个独立的 worker 线程，独立于当前网页进程，有自己独立的 worker context。</li>\n<li>一旦被 install，就永远存在，除非被 uninstall</li>\n<li>需要的时候可以直接唤醒，不需要的时候自动睡眠（有效利用资源，此处有坑）</li>\n<li>可编程拦截代理请求和返回，缓存文件，缓存的文件可以被网页进程取到（包括网络离线状态）</li>\n<li>离线内容开发者可控</li>\n<li>能向客户端推送消息</li>\n<li>不能直接操作 DOM</li>\n<li>出于安全的考虑，必须在 HTTPS 环境下才能工作</li>\n<li>异步实现，内部大都是通过 Promise 实现</li>\n</ul>\n<h4 id=\"service-Worker前提条件\"><a href=\"#service-Worker前提条件\" class=\"headerlink\" title=\"service Worker前提条件\"></a>service Worker前提条件</h4><ul>\n<li>要求HTTPS的环境</li>\n<li>缓存机制是依赖cache API 实现的</li>\n<li>依赖HTML5 fetchAPI</li>\n<li>依赖Promise</li>\n</ul>\n<h4 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">'serviceWorker'</span> <span class=\"keyword\">in</span> navigator) &#123;</div><div class=\"line\">      navigator.serviceWorker</div><div class=\"line\">          .register(<span class=\"string\">'./pwa/sw.js'</span>, &#123;<span class=\"attr\">scope</span>: <span class=\"string\">'/pwa'</span>&#125;)</div><div class=\"line\">          <span class=\"comment\">/* 每次页面加载成功后，就会调用register()方法。浏览器会判断service Worker线程是否</span></div><div class=\"line\"><span class=\"comment\">           已注册，并作出相应的处理*/</span></div><div class=\"line\">          <span class=\"comment\">/* scope 方法是可选的，用于指定你想让service worker 控制内容的子目录。service worker 线程将接受</span></div><div class=\"line\"><span class=\"comment\">           scope指定网域目录上所有事项的fetch事件。</span></div><div class=\"line\"><span class=\"comment\">           scope的意义在于如果sw.js在/a/b/sw.js下，那么scope默认是/a/b,那么service worker 线程只能</span></div><div class=\"line\"><span class=\"comment\">           捕捉到path为/a/b开头的（/a/b/page1,/a/b/page2,..)下的fetch事件*/</span></div><div class=\"line\">          .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">registration</span>) </span>&#123;</div><div class=\"line\">              <span class=\"built_in\">console</span>.log(<span class=\"string\">'Service Worker 注册成功，域名: '</span>, registration.scope);</div><div class=\"line\">          &#125;)</div><div class=\"line\">          .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">              <span class=\"built_in\">console</span>.log(<span class=\"string\">'Service Worker 注册失败: '</span>, err);</div><div class=\"line\">          &#125;);</div><div class=\"line\"></div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>install事件我们会绑定在service worker 文件中，在service worker 安装成功后，install事件被触发。<strong>install事件一般是被用来填充你的浏览器的离线缓存能力。</strong>为了达到这个目的，我们使用了service worker 新的标志性的存储<strong>cache API</strong> ——一个service worker上的全局对象，<strong>它使我们可以存储网络响应发来的资源，并且根据他们的请求来生成key。</strong>这个 API 和浏览器的标准的缓存工作原理很相似，但是是只对应你的站点的域的。它会一直持久存在，直到你告诉它不再存储，你拥有全部的控制权。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">self.addEventListener(<span class=\"string\">'install'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'[ServiceWorker] Install'</span>);</div><div class=\"line\">    <span class=\"comment\">/*ExtendableEvent.waitUntil():</span></div><div class=\"line\"><span class=\"comment\">     延长了时间的生命周期。在服务工作中，延长事件的生命周期阻止浏览器在事件中的一部操作完成之前终止service worker。</span></div><div class=\"line\"><span class=\"comment\">     当在与安装事件相关联的EventHandler中调用时，它会延时将已安装的工作程序视为安装，</span></div><div class=\"line\"><span class=\"comment\">     直到传递的promise成功解析为止。这主要用于确保service worker在其依赖的所有核心高速缓存填充之前不会被考虑安装*/</span></div><div class=\"line\">    e.waitUntil(</div><div class=\"line\">        caches.open(chache_name).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">cache</span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'[ServiceWorker] Caching app shell'</span>);</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(cache);</div><div class=\"line\">            <span class=\"keyword\">return</span> cache.addAll(filesToCache);</div><div class=\"line\">        &#125;)</div><div class=\"line\">    );</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">/*这里我们新增了install 事件监听器，接着在事件上接了一个ExtendableEvent.waitUntil()方法</span></div><div class=\"line\"><span class=\"comment\">  这会确保service worker不会在waitUntil()里面的代码执行完毕之前安装完成*/</span></div><div class=\"line\"><span class=\"comment\">/*我们使用caches.open()方法创建了一个yu的新缓存，将会是我们站点资源的缓存的第一个版本。它返回了一个创建缓存的promise,</span></div><div class=\"line\"><span class=\"comment\">  当它resolved 的时候，我们接着会调用在创建的缓存上的一个方法addALL()，这个方法的参数是一个由一组相对于origin的URL组成的数组，</span></div><div class=\"line\"><span class=\"comment\">  这个数组就是你想缓存的资源的列表*/</span></div></pre></td></tr></table></figure>\n<h4 id=\"自定义请求响应\"><a href=\"#自定义请求响应\" class=\"headerlink\" title=\"自定义请求响应\"></a>自定义请求响应</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">self.addEventListener(<span class=\"string\">'fetch'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">'[service worker] fetch'</span>,e.request.url);</div><div class=\"line\"><span class=\"comment\">/*respondWith()方法旨在包裹代码，这些代码为来自受控页面的request生成的自定义的response。用来劫持我们的http响应*/</span></div><div class=\"line\">    e.resondWith(</div><div class=\"line\">        caches.match(e.request).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">//如果sw有自己的返回，就直接返回，减少一次http请求。</span></div><div class=\"line\">           <span class=\"keyword\">if</span> (response) &#123;</div><div class=\"line\">               <span class=\"keyword\">return</span> response;</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"comment\">//如果没有返回，就直接请求真实远程服务</span></div><div class=\"line\">            <span class=\"keyword\">var</span> request = e.request.clone(); <span class=\"comment\">//拷贝原始请求</span></div><div class=\"line\">            <span class=\"comment\">//clone()允许多次请求body()对象。</span></div><div class=\"line\">            <span class=\"keyword\">return</span> fetch(request).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">httpRes</span>) </span>&#123;</div><div class=\"line\">               <span class=\"comment\">//http请求的返回已经抓到，可以进行设置</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">//请求失败，直接返回失败的结果</span></div><div class=\"line\">                <span class=\"keyword\">if</span>(!httpRes||httpRes.status!==<span class=\"number\">200</span>)&#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> httpRes;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"comment\">//  请求成功，将请求缓存</span></div><div class=\"line\">                <span class=\"keyword\">var</span> responseClone = httpRes.clone();</div><div class=\"line\">                caches.open(cache_name).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">cache</span>) </span>&#123;</div><div class=\"line\">                    cache.put(e.request,responseClone);</div><div class=\"line\">                &#125;);</div><div class=\"line\">                <span class=\"keyword\">return</span> httpRes;</div><div class=\"line\">            &#125;);</div><div class=\"line\"></div><div class=\"line\">        &#125;)</div><div class=\"line\">    );</div><div class=\"line\"></div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">/*每次任何被service worker 控制的资源被请求到时，都会触发fetch事件，这些资源包括了指定的scope内的</span></div><div class=\"line\"><span class=\"comment\">  html 文档，和这些html文档内引用的其他任何资源（比如index.html发起了一个跨域的请求来嵌入一张图片，这个也会通过service worker*/</span></div></pre></td></tr></table></figure>\n<p>我们可以在install 的时候进行静态资源缓存。也可以通过fetch事件回调来代理页面请求从而实现动态资源缓存:</p>\n<ul>\n<li>on install 的优点是第二次访问就可以离线访问，缺点是需要缓存的URL在编译时插入到脚本中，增加代码量和降低可维护性。</li>\n<li>on fetch 的优点是无需变更编译过程，也不会产生额外的流量，缺点是需要多一次访问才能离线访问。</li>\n</ul>\n<h4 id=\"Service-Worker-生命周期-（也许翻译的不好，尽量去看原文）\"><a href=\"#Service-Worker-生命周期-（也许翻译的不好，尽量去看原文）\" class=\"headerlink\" title=\"Service Worker 生命周期 （也许翻译的不好，尽量去看原文）\"></a>Service Worker 生命周期 （也许翻译的不好，尽量去看原文）</h4><ul>\n<li>installing: 这一阶段标志着开始注册。它想要允许设置worker-specific 的资源,例如离线模式的caches.<ul>\n<li>用 <strong>event.waitUntil()</strong> 通过一个promise 去延长安装service worker阶段直到e.waitUntil()里的代码执行完毕。如果所有资源安装成功缓存则安装成功，否则安装失败，则无法激活service worker。</li>\n<li>用 <strong>self.skipWaiting()</strong> self 是当前context 的 global 变量。强制当前处于waiting 状态的脚本进入activate状态。</li>\n</ul>\n</li>\n<li>installed:service worker 已经完成了它的安装，在等待其他service Workers 线程被关闭。</li>\n<li>activating: 这时没有被其他workers 控制的客户端。这个阶段允许workers 去完成安装并且清理其他 worker以及关联缓存的就缓存资源，等待新的service worker线程被激活。</li>\n<li>activated:现在可以处理方法事件。</li>\n<li>message: service worker 运行于独立context 中，无法直接访问当前页面主线程的DOM信息，但是通过postMessageAPI ,可以实现他们之间的消息传递，这样主线程就可以接受service worker 的指令操作DOM。</li>\n</ul>\n<h2 id=\"manifest-json\"><a href=\"#manifest-json\" class=\"headerlink\" title=\"manifest.json\"></a>manifest.json</h2><p>pwa 添加至桌面的功能实现依赖于manifest.json。</p>\n<h4 id=\"基本功能\"><a href=\"#基本功能\" class=\"headerlink\" title=\"基本功能\"></a>基本功能</h4><ul>\n<li>name:{string} 应用名称，用于安装横幅、启动画面显示</li>\n<li>short_name:{string} 应用短名称，用于主屏幕显示</li>\n<li>icon:img 应用图标列表，其中包括:<ul>\n<li>src:{string}  图标URL</li>\n<li>type:图标的mime 类型</li>\n<li>size:图标尺寸。当PWA添加到主屏幕时，浏览器会根据有效图标的size 字段进行选择，如果匹配到的图标路径错误，将会显示浏览器默认icon。</li>\n</ul>\n</li>\n<li>start_url:{string=} 应用启动地址</li>\n<li>background_color:{color} css色值</li>\n<li>display: {string} 显示类型<ul>\n<li>fullScreen: 应用的显示界面将占满整个屏幕</li>\n<li>standalone: 浏览器相关UI（导航栏、工具栏等）将会被隐藏</li>\n<li>minimal-ui: 显示形式与standalone类似，浏览器相关UI会最小化为一个按钮，不同浏览器在实现上略有不同</li>\n<li>browser: 浏览器模式，与普通网页在浏览器中打开的显示一致</li>\n</ul>\n</li>\n<li>orientation: string 应用显示方向</li>\n<li>theme_color: 主题颜色</li>\n</ul>\n<h4 id=\"设置作用域\"><a href=\"#设置作用域\" class=\"headerlink\" title=\"设置作用域\"></a>设置作用域</h4><ul>\n<li>如果没有在manifest中设置scope，则默认的作用域为manifest.json所在的文件夹；</li>\n<li><strong>start_url 必须在作用域范围之内</strong>;</li>\n<li>如果start_url 为相对地址，其根路径收scope所影响;</li>\n<li>如果start_url 为绝对地址（以/开头）,则该地址将永远以/作为跟地址；</li>\n</ul>\n<h4 id=\"添加启动动画\"><a href=\"#添加启动动画\" class=\"headerlink\" title=\"添加启动动画\"></a>添加启动动画</h4><p>当PWA添加到主屏幕点击打开时，幕后执行了若干操作：</p>\n<ol>\n<li>启动浏览器</li>\n<li>启动显示页面的渲染器</li>\n<li>加载资源</li>\n</ol>\n<p>在这个过程中，由于页面未加载完毕，因此屏幕将显示空白并且看似停滞。如果是从网络加载的页面资源，白屏过程将会变得更加明显。因此 PWA 提供了启动画面功能，用标题、颜色和图像组成的画面来替代白屏，提升用户体验。</p>\n<p>目前，如果修改了manifest.json 的应用的名称，已经添加到主屏幕的名称并不会改变，只有当用户重新添加到桌面时，更改后的名称才会显示出来。但是未来版本的chrome 支持自动更新。</p>"},{"title":"PWA-pushMessage","comments":1,"_content":"## 消息推送介绍\n消息推送通知目前整体支持度并不高，在手机端更只有安卓chrome57支持。在订阅消息之前，浏览器主要得到用户授权，同意后才能使用消息推送服务。\n\n<!--more-->\n\n## 获取授权\n- 在订阅之前先获取用户授权，** 使用Notification.requestPermission。当用户允许或者拒绝授权之后，后续都不会重复询问。\n- 如果不选择1，在正式订阅时，浏览器也会自动弹出。对于开发者而言不需要显示调用。\n- <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/notification\">Notifications API</a> 的通知接口用于向用户配置和显示桌面通知。\n- <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Push_API\">push API</a> 允许web 应用程序接受从服务器推送到它们的消息的能力，无论WEB 应用程序是否在用户代理的前台，或者甚至当前加载。这样。开发人员就可以向选择启用的用户投放异步通知和更新，从而更及时的吸引新内容。\n\n## 订阅消息的具体实现\n- 在订阅之前先获取用户授权\n- 使用pushManager 添加订阅，浏览器向推送服务发送请求，轻重传递参数对象包含两个属性。\n    - userVisibleOnly,不允许静默的推出，所有推出都对用户可见，所以值为true\n    - applicationServerKey,服务器生成的公钥\n- 得到推送服务成功响应后，浏览器将推送服务返回的endpoint加入推送订阅对象，向服务器发送这个对象供其存储。\n\n消息推送的安全性:\n- 推送服务确保调用来自可靠的服务端。\n- 推送消息内容只有浏览器能够解密，就算是推送服务也不行\n\n## 使用web-push 发送信息\n服务器端请求推送服务器，需要涉及加密，设置请求头等复杂操作。使用web-push可以解决大部分问题。\n- 使用web-push 生成一对公私钥，还记得 pushManager 订阅时需要用到的applicationServerKey吗，我们需要公钥publicKey传递到订阅脚本所在的页面中。。\n- 调用 setVapidDetails 为web-push设置生成的公私钥。\n- 之前订阅时浏览器已经将推送订阅对象发送到了服务端，此时从数据库中取出。\n- 调用sendNotification向推送服务发起调用请求，如果返回错误状态码，从数据库中删除保存的推送订阅对象。\n- 所有推送服务都遵循同意的调用标准，**所有推送服务都遵循统一的调用标准，推送服务如果接到了服务器的调用请求，向设备推送消息，如果处于离线状态，消息将进入待发送队列，过期后队列清空，消息将被丢弃。**\n\n## 推送服务的响应\n- 429 too many requests\n- 400 invalid request\n- 404 not found 订阅过期，需要在服务端删除保存的推送订阅对象。\n- 410 Gone 订阅失效，需要在服务端删除保存的推送订阅对象，并调用推送订阅对象的unsubscribe()方法\n- 413 Payload size too large\n\n","source":"_posts/PWA-pushMessage.md","raw":"---\ntitle: PWA-pushMessage\ncategories: PWA\ncomments: true\n---\n## 消息推送介绍\n消息推送通知目前整体支持度并不高，在手机端更只有安卓chrome57支持。在订阅消息之前，浏览器主要得到用户授权，同意后才能使用消息推送服务。\n\n<!--more-->\n\n## 获取授权\n- 在订阅之前先获取用户授权，** 使用Notification.requestPermission。当用户允许或者拒绝授权之后，后续都不会重复询问。\n- 如果不选择1，在正式订阅时，浏览器也会自动弹出。对于开发者而言不需要显示调用。\n- <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/notification\">Notifications API</a> 的通知接口用于向用户配置和显示桌面通知。\n- <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Push_API\">push API</a> 允许web 应用程序接受从服务器推送到它们的消息的能力，无论WEB 应用程序是否在用户代理的前台，或者甚至当前加载。这样。开发人员就可以向选择启用的用户投放异步通知和更新，从而更及时的吸引新内容。\n\n## 订阅消息的具体实现\n- 在订阅之前先获取用户授权\n- 使用pushManager 添加订阅，浏览器向推送服务发送请求，轻重传递参数对象包含两个属性。\n    - userVisibleOnly,不允许静默的推出，所有推出都对用户可见，所以值为true\n    - applicationServerKey,服务器生成的公钥\n- 得到推送服务成功响应后，浏览器将推送服务返回的endpoint加入推送订阅对象，向服务器发送这个对象供其存储。\n\n消息推送的安全性:\n- 推送服务确保调用来自可靠的服务端。\n- 推送消息内容只有浏览器能够解密，就算是推送服务也不行\n\n## 使用web-push 发送信息\n服务器端请求推送服务器，需要涉及加密，设置请求头等复杂操作。使用web-push可以解决大部分问题。\n- 使用web-push 生成一对公私钥，还记得 pushManager 订阅时需要用到的applicationServerKey吗，我们需要公钥publicKey传递到订阅脚本所在的页面中。。\n- 调用 setVapidDetails 为web-push设置生成的公私钥。\n- 之前订阅时浏览器已经将推送订阅对象发送到了服务端，此时从数据库中取出。\n- 调用sendNotification向推送服务发起调用请求，如果返回错误状态码，从数据库中删除保存的推送订阅对象。\n- 所有推送服务都遵循同意的调用标准，**所有推送服务都遵循统一的调用标准，推送服务如果接到了服务器的调用请求，向设备推送消息，如果处于离线状态，消息将进入待发送队列，过期后队列清空，消息将被丢弃。**\n\n## 推送服务的响应\n- 429 too many requests\n- 400 invalid request\n- 404 not found 订阅过期，需要在服务端删除保存的推送订阅对象。\n- 410 Gone 订阅失效，需要在服务端删除保存的推送订阅对象，并调用推送订阅对象的unsubscribe()方法\n- 413 Payload size too large\n\n","slug":"PWA-pushMessage","published":1,"date":"2017-09-18T08:09:57.161Z","updated":"2017-10-31T09:34:01.385Z","layout":"post","photos":[],"link":"","_id":"cj9ffr3pz00076cvr1bje1ew1","content":"<h2 id=\"消息推送介绍\"><a href=\"#消息推送介绍\" class=\"headerlink\" title=\"消息推送介绍\"></a>消息推送介绍</h2><p>消息推送通知目前整体支持度并不高，在手机端更只有安卓chrome57支持。在订阅消息之前，浏览器主要得到用户授权，同意后才能使用消息推送服务。</p>\n<a id=\"more\"></a>\n<h2 id=\"获取授权\"><a href=\"#获取授权\" class=\"headerlink\" title=\"获取授权\"></a>获取授权</h2><ul>\n<li>在订阅之前先获取用户授权，** 使用Notification.requestPermission。当用户允许或者拒绝授权之后，后续都不会重复询问。</li>\n<li>如果不选择1，在正式订阅时，浏览器也会自动弹出。对于开发者而言不需要显示调用。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/notification\" target=\"_blank\" rel=\"external\">Notifications API</a> 的通知接口用于向用户配置和显示桌面通知。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Push_API\" target=\"_blank\" rel=\"external\">push API</a> 允许web 应用程序接受从服务器推送到它们的消息的能力，无论WEB 应用程序是否在用户代理的前台，或者甚至当前加载。这样。开发人员就可以向选择启用的用户投放异步通知和更新，从而更及时的吸引新内容。</li>\n</ul>\n<h2 id=\"订阅消息的具体实现\"><a href=\"#订阅消息的具体实现\" class=\"headerlink\" title=\"订阅消息的具体实现\"></a>订阅消息的具体实现</h2><ul>\n<li>在订阅之前先获取用户授权</li>\n<li>使用pushManager 添加订阅，浏览器向推送服务发送请求，轻重传递参数对象包含两个属性。<ul>\n<li>userVisibleOnly,不允许静默的推出，所有推出都对用户可见，所以值为true</li>\n<li>applicationServerKey,服务器生成的公钥</li>\n</ul>\n</li>\n<li>得到推送服务成功响应后，浏览器将推送服务返回的endpoint加入推送订阅对象，向服务器发送这个对象供其存储。</li>\n</ul>\n<p>消息推送的安全性:</p>\n<ul>\n<li>推送服务确保调用来自可靠的服务端。</li>\n<li>推送消息内容只有浏览器能够解密，就算是推送服务也不行</li>\n</ul>\n<h2 id=\"使用web-push-发送信息\"><a href=\"#使用web-push-发送信息\" class=\"headerlink\" title=\"使用web-push 发送信息\"></a>使用web-push 发送信息</h2><p>服务器端请求推送服务器，需要涉及加密，设置请求头等复杂操作。使用web-push可以解决大部分问题。</p>\n<ul>\n<li>使用web-push 生成一对公私钥，还记得 pushManager 订阅时需要用到的applicationServerKey吗，我们需要公钥publicKey传递到订阅脚本所在的页面中。。</li>\n<li>调用 setVapidDetails 为web-push设置生成的公私钥。</li>\n<li>之前订阅时浏览器已经将推送订阅对象发送到了服务端，此时从数据库中取出。</li>\n<li>调用sendNotification向推送服务发起调用请求，如果返回错误状态码，从数据库中删除保存的推送订阅对象。</li>\n<li>所有推送服务都遵循同意的调用标准，<strong>所有推送服务都遵循统一的调用标准，推送服务如果接到了服务器的调用请求，向设备推送消息，如果处于离线状态，消息将进入待发送队列，过期后队列清空，消息将被丢弃。</strong></li>\n</ul>\n<h2 id=\"推送服务的响应\"><a href=\"#推送服务的响应\" class=\"headerlink\" title=\"推送服务的响应\"></a>推送服务的响应</h2><ul>\n<li>429 too many requests</li>\n<li>400 invalid request</li>\n<li>404 not found 订阅过期，需要在服务端删除保存的推送订阅对象。</li>\n<li>410 Gone 订阅失效，需要在服务端删除保存的推送订阅对象，并调用推送订阅对象的unsubscribe()方法</li>\n<li>413 Payload size too large</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"消息推送介绍\"><a href=\"#消息推送介绍\" class=\"headerlink\" title=\"消息推送介绍\"></a>消息推送介绍</h2><p>消息推送通知目前整体支持度并不高，在手机端更只有安卓chrome57支持。在订阅消息之前，浏览器主要得到用户授权，同意后才能使用消息推送服务。</p>","more":"<h2 id=\"获取授权\"><a href=\"#获取授权\" class=\"headerlink\" title=\"获取授权\"></a>获取授权</h2><ul>\n<li>在订阅之前先获取用户授权，** 使用Notification.requestPermission。当用户允许或者拒绝授权之后，后续都不会重复询问。</li>\n<li>如果不选择1，在正式订阅时，浏览器也会自动弹出。对于开发者而言不需要显示调用。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/notification\" target=\"_blank\" rel=\"external\">Notifications API</a> 的通知接口用于向用户配置和显示桌面通知。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Push_API\" target=\"_blank\" rel=\"external\">push API</a> 允许web 应用程序接受从服务器推送到它们的消息的能力，无论WEB 应用程序是否在用户代理的前台，或者甚至当前加载。这样。开发人员就可以向选择启用的用户投放异步通知和更新，从而更及时的吸引新内容。</li>\n</ul>\n<h2 id=\"订阅消息的具体实现\"><a href=\"#订阅消息的具体实现\" class=\"headerlink\" title=\"订阅消息的具体实现\"></a>订阅消息的具体实现</h2><ul>\n<li>在订阅之前先获取用户授权</li>\n<li>使用pushManager 添加订阅，浏览器向推送服务发送请求，轻重传递参数对象包含两个属性。<ul>\n<li>userVisibleOnly,不允许静默的推出，所有推出都对用户可见，所以值为true</li>\n<li>applicationServerKey,服务器生成的公钥</li>\n</ul>\n</li>\n<li>得到推送服务成功响应后，浏览器将推送服务返回的endpoint加入推送订阅对象，向服务器发送这个对象供其存储。</li>\n</ul>\n<p>消息推送的安全性:</p>\n<ul>\n<li>推送服务确保调用来自可靠的服务端。</li>\n<li>推送消息内容只有浏览器能够解密，就算是推送服务也不行</li>\n</ul>\n<h2 id=\"使用web-push-发送信息\"><a href=\"#使用web-push-发送信息\" class=\"headerlink\" title=\"使用web-push 发送信息\"></a>使用web-push 发送信息</h2><p>服务器端请求推送服务器，需要涉及加密，设置请求头等复杂操作。使用web-push可以解决大部分问题。</p>\n<ul>\n<li>使用web-push 生成一对公私钥，还记得 pushManager 订阅时需要用到的applicationServerKey吗，我们需要公钥publicKey传递到订阅脚本所在的页面中。。</li>\n<li>调用 setVapidDetails 为web-push设置生成的公私钥。</li>\n<li>之前订阅时浏览器已经将推送订阅对象发送到了服务端，此时从数据库中取出。</li>\n<li>调用sendNotification向推送服务发起调用请求，如果返回错误状态码，从数据库中删除保存的推送订阅对象。</li>\n<li>所有推送服务都遵循同意的调用标准，<strong>所有推送服务都遵循统一的调用标准，推送服务如果接到了服务器的调用请求，向设备推送消息，如果处于离线状态，消息将进入待发送队列，过期后队列清空，消息将被丢弃。</strong></li>\n</ul>\n<h2 id=\"推送服务的响应\"><a href=\"#推送服务的响应\" class=\"headerlink\" title=\"推送服务的响应\"></a>推送服务的响应</h2><ul>\n<li>429 too many requests</li>\n<li>400 invalid request</li>\n<li>404 not found 订阅过期，需要在服务端删除保存的推送订阅对象。</li>\n<li>410 Gone 订阅失效，需要在服务端删除保存的推送订阅对象，并调用推送订阅对象的unsubscribe()方法</li>\n<li>413 Payload size too large</li>\n</ul>"},{"title":"angular 基础","comments":1,"_content":"## angular 与 vue 的区别\n- angular2全部采用TypeScript编写，TypeScript（编译工具），它为JS带来了类似于Java 和C# 的静态类型，\n- vue 的双向绑定基于ES5 的getter/setter 来实现的，而angular是由自己实现一套模板编译规则们需要进行“脏”检查，而vue不需要，因此vue在性能上更高效。\n- angular 中，当watcher 越来越多时会越来越慢，因为作用域的每一次变化\n\n<!--more-->\n\n## angular \n- 组件化，数据的单向中心。es6的语法。\n##  react \n- 速度很快：来源于虚拟DOM，只有在调用get 和 set 的时候才会更新DOM，而且是先更新虚拟DOM再更新实际的DOM，由此更新DOM 的次数少内容也会少很多。\n- FLUX 架构，react 更关注UI 的组件化和数据的单向更新。可以直接有es6的一些语法。\n- 服务器端渲染，单页应用的缺陷是对于搜索引擎有很大的限制。react 的解决的方案是在服务器上预渲染应用然后发送到服务端，但是爬虫是依赖的服务端的响应而不是web的执行。\n- 目标是UI。\n- 本身是一个MVC 中的V。\n----------------------------\n## Angular 为表单内置了4种css样式\n\n- ng-valid 校验合法状态\n- ng-invalid 校验非法状态\n- ng-pristine 如果要使用原生的form，需要设置这个值\n- ng-dirty 表单处于脏数据状态\n-----------------------------\n## @Component\n- @Component 是Angular 提供的装饰函数，用来描述Component的元数据\n- selector 指这个组件在HTML模板中的标签是什么\n- template是嵌入（inline）的HTML模板，如果使用单独文件可用templateUrl。\n- styles是嵌入（inline）的CSS样式，如果使用单独文件可用styleUrls。\n- providers 列出会在此模块中“注入”的服务(service)-依赖注入\n- bootstrap指明哪个组件为引导组件(比如AppComponent),当angular引导应用时，它会在Dom中渲染这个引导性组件，并把结果放进index.html的该组件的标签中。\n\n## @NgModule\n@NgModule装饰器用来为模块定义元数据。declarations列出了应用中的顶层组件，在module里面声明的组件在module范围内都可以直接使用，也就是说在同一module里面的任何Component都可以在其模板文件中直接使用声明的组件，就想我们在AppComponent的模板末尾加上 <app-login></app-login> 一样。\n\n```javascript\nimport { HttpModule } from '@angular/http';\n\nimport { AppComponent } from './app.component';\nimport { LoginComponent } from './login/login.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\nNgModule装饰器用来为模块定义元数据。\n- declarations列出了应用中的顶层组件。\n- BrowerModule 提供了运行在浏览器中的应用所需要的关键服务(service)和指令(Directive),这个模块所在需要在浏览器中跑的应用都应用引用。\n- FormsModule 提供了表单处理和双向绑定等服务和指令。\n- HttpModule 提供Htpp请求和响应的服务。\n- providers 列出会在此模版中“注入”的服务（service）。\n- bootstrap 指明哪个组件为引导性组件，并把结果放到index.html 的该组件的元素标签中。\n-  静态引导AppModuleNgFactory platformBrowser().bootstrapModuleFactory(AppModuleNgFactory);\n-------------------------------------\n\n## 依赖注入\n如果不使用依赖注入，则需要\n    //声明成员变量，其类型为service 里面自定义的方法\n\n    ```javascript\n    //第一种：\n    service:AuthService;\n\n    constructor(){\n        this.service = new AuthService();//在构造中初始化service\n    }\n    //第二种：\n\n    providers: [\n    {provide: 'auth',  useClass: AuthService}\n    ]\n    ```\n\n- 第一种：由于实例化是在组件中进行的，意味着我们如果更改service的构造函数的话，组件也需要更改。如果使用依赖注入的话，就不需要显示声明成员变量service。当import 相关的服务后，这是import将类型引入进来，而provider 里面会配置这个类型的实例。\n- provider 是一个数组，这里配置将要注入到其他组件中的服务配置。provide定义了这个服务的名称，有需要注入这个服务的就引用这个名称就好。useClass 指明这个名称对应的服务是一个类。这样定义之后就能在任意组件中注入这个依赖了。\n ```javascript\n        onstructor(@Inject('auth') private service) {\n    }\n ```\n\n- @inject('auth'),这个修饰符的意思是请到系统配置中找到名称为auth 的那个依赖注入到我修饰的变量中。\n\n## 双向数据绑定\n- [(ngModel)]=\"username\" ,[]的作用是将等号后面当成表达式来解析而不是当成字符串，如果去掉[]就是将ngModel赋值成username这个字符串。[] 的含义是单向绑定，就是将组件中给model 赋的值会设置到HTML的input控件中。[()]是双向绑定。ngModel 是FormModule中提供的指令，它负责从Domain Model中创建一个FormControl的实例，并将这个实例和表单控件绑定.\n- @Input()是输入型绑定的修饰符，用于从数据从父组件传到子组件。\n\n---------------------------------------------\n\n## 表单验证\n```html\n    <div>\n        <input required type=\"text\"\n            [(ngModel)]=\"username\"\n            #usernameRef=\"ngModel\"\n            />\n            {{usernameRef.valid}}\n        <input required type=\"password\"\n            [(ngModel)]=\"password\"\n            #passwordRef=\"ngModel\"\n            />\n            {{passwordRef.valid}}\n        <button (click)=\"onClick()\">Login</button>\n        </div>\n        <div>\n        <input #usernameRef type=\"text\">\n        <button (click)=\"onClick(usernameRef.value)\">Login</button>\n        </div>\n```\n\n1. 通过#usernameRef = 'ngModel'重新加入了引用，这个引用指向了ngModel,这个引用是要在模板中使用的所以加入这个引用。\n2. 在输入框中加入#usernameRef，这个叫引用，引用的是input对象，如果想要传递input 的值，可以用usernameRef.value.\n```html\n    <div>\n        <input type=\"text\"\n            [(ngModel)]=\"username\"\n            #usernameRef=\"ngModel\"\n            required\n            minlength=\"3\"\n            />\n            {{ usernameRef.errors | json }}\n            <div *ngIf=\"usernameRef.errors?.required\">this is required</div>\n            <div *ngIf=\"usernameRef.errors?.minlength\">should be at least 3 charactors</div>\n        <input required type=\"password\"\n            [(ngModel)]=\"password\"\n            #passwordRef=\"ngModel\"\n            />\n            <div *ngIf=\"passwordRef.errors?.required\">this is required</div>\n        <button (click)=\"onClick()\">Login</button>\n    </div>\n```\n*ngIf = \"usernameRef.error?.required\" 的意思是当usernameRef.error.required 为true 的时候显示div 标签\n```html\n    <div>\n        <form #formRef=\"ngForm\" (ngSubmit)=\"onSubmit(formRef.value)\"> \n        <fieldset ngModelGroup=\"login\">\n            <input type=\"text\"\n            name=\"username\"\n            [(ngModel)]=\"username\"\n            #usernameRef=\"ngModel\"\n            required\n            minlength=\"3\"\n            />\n            <div *ngIf=\"usernameRef.errors?.required\">this is required</div>\n            <div *ngIf=\"usernameRef.errors?.minlength\">should be at least 3 charactors</div>\n            <input type=\"password\"\n            name=\"password\"\n            [(ngModel)]=\"password\"\n            #passwordRef=\"ngModel\"\n            required\n            />\n            <div *ngIf=\"passwordRef.errors?.required\">this is required</div>\n            <button (click)=\"onClick()\">Login</button>\n            <button type=\"submit\">Submit</button>\n            </fieldset>\n        </form>\n        </div>\n```\n- ngModel 会注册成Form 的子控件，注册控件需要name ，这个要求我们显示的指定对应控件的name ，因此需要为input 增加name属性，在formREF.value中包含了表单所有填写项的值\n\n- 有时在表单相中表单项过多时，就使用HTML中的fieldset标签用来处理。<fieldset ngModelGroup=\"login\"> 意味着我们对于 fieldset 之内的数据都分组到了 login 对象中。\n\n------------------------------------------------\n\n## 路由\n路径配置的顺序是非常重要的，angular2使用“先匹配优先”的原则。\n- redirectTo 重定向\n## service \n\n```javascript\n    //post /todos\n    addTodo(desc:string):Promise<Todo>{\n        let todo={\n            id:UUID.UUID(),\n            desc:desc,\n            completed:false\n        };\n        return this.http\n            .post(this.api_url,JSON.stringfy(todo),{header:this.headers})\n            .toPromise()\n            .then(res=>res.json().data as Todo)\n            .catch(this.handleError);\n    }\n\n```\n----------------------------------------\n\n```javascript\n    inputValue: string = '';\n    @Input() placeholder: string = 'What needs to be done?';\n    @Input() delay: number = 300;\n\n    //detect the input value and output this to parent\n    @Output() textChanges = new EventEmitter<string>();\n    //detect the enter keyup event and output this to parent\n    @Output() onEnterUp = new EventEmitter<boolean>();\n    ```\n- placeholder和delay作为2个输入型变量，这样在引入标签中就可以设置这两个属性了。\n- 由@Output修饰的onTextChanges 和 onEnterUp，这两个变量都定义了EventEmitter(事件发射器)。\n- export const routing = RouterModule.forChild(routes);，用的是forChild而不是forRoot,因为forRoot只能用于根目录，所有非跟模块的其他模块都只能用forChild.\n\n\n--------------------------\n## 验证用户帐户的流程\n- UserService:用于通过用户名查找用户并返回用户\n- AuthService:用于认证用户，其中需要利用UserService 的方法。\n- AuthGuard:路由拦截器，用于拦截到路由后通过Authservice来知道此用户是否有权限访问路由。根据结果导航到不同路径。\n- @SkipSelf装饰器意味着在当前注入器的所有祖先注入器中寻找，如果注入器找不到想要的提供商时就会抛出一个错误。但是@Optional装饰器表示找不到该服务则会返回null,\nparentModule参数也就被赋值为空。\n\n----------------\n## 路由守卫\n应用场景如下:\n该用户可能无权导航到目标组件。导航前需要用户先登录。\n\n路由器支持多种守卫：\n\n- 用CanActivate来处理导航到某路由的情况。\n- 用CanActivateChild处理导航到子路由的情况。\n- 用CanDeactivate来处理从当前路由离开的情况。\n- 用Resolve在路由激活之前获取路由数据。\n- 用CanLoad来处理异步导航到某特性模块的情况。\n\n----------------------\n## 模块优化\n 各个模块定义，发现我们不断地重复引入了CommonModule、FormsModule、MdlModule,这些组件常用，就可以建立一个ShareModule(src\\app\\shared\\shared.module.ts)\n\n```javascript\n    import { NgModule } from '@angular/core';\n    import { CommonModule } from '@angular/common';\n    import { FormsModule } from '@angular/forms';\n    import { MdlModule } from 'angular2-mdl';\n\n    @NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        MdlModule\n    ],\n    exports: [\n        CommonModule,\n        FormsModule,\n        MdlModule\n    ]\n    })\n    export class SharedModule { }\n```\n这个模块的作用是将常用的模块打包起来，将常用的模块导入又导出，这样在其他模块中值需引入这个模块即可\n\n\n","source":"_posts/angular基础.md","raw":"---\ntitle: angular 基础\ncomments: true\n---\n## angular 与 vue 的区别\n- angular2全部采用TypeScript编写，TypeScript（编译工具），它为JS带来了类似于Java 和C# 的静态类型，\n- vue 的双向绑定基于ES5 的getter/setter 来实现的，而angular是由自己实现一套模板编译规则们需要进行“脏”检查，而vue不需要，因此vue在性能上更高效。\n- angular 中，当watcher 越来越多时会越来越慢，因为作用域的每一次变化\n\n<!--more-->\n\n## angular \n- 组件化，数据的单向中心。es6的语法。\n##  react \n- 速度很快：来源于虚拟DOM，只有在调用get 和 set 的时候才会更新DOM，而且是先更新虚拟DOM再更新实际的DOM，由此更新DOM 的次数少内容也会少很多。\n- FLUX 架构，react 更关注UI 的组件化和数据的单向更新。可以直接有es6的一些语法。\n- 服务器端渲染，单页应用的缺陷是对于搜索引擎有很大的限制。react 的解决的方案是在服务器上预渲染应用然后发送到服务端，但是爬虫是依赖的服务端的响应而不是web的执行。\n- 目标是UI。\n- 本身是一个MVC 中的V。\n----------------------------\n## Angular 为表单内置了4种css样式\n\n- ng-valid 校验合法状态\n- ng-invalid 校验非法状态\n- ng-pristine 如果要使用原生的form，需要设置这个值\n- ng-dirty 表单处于脏数据状态\n-----------------------------\n## @Component\n- @Component 是Angular 提供的装饰函数，用来描述Component的元数据\n- selector 指这个组件在HTML模板中的标签是什么\n- template是嵌入（inline）的HTML模板，如果使用单独文件可用templateUrl。\n- styles是嵌入（inline）的CSS样式，如果使用单独文件可用styleUrls。\n- providers 列出会在此模块中“注入”的服务(service)-依赖注入\n- bootstrap指明哪个组件为引导组件(比如AppComponent),当angular引导应用时，它会在Dom中渲染这个引导性组件，并把结果放进index.html的该组件的标签中。\n\n## @NgModule\n@NgModule装饰器用来为模块定义元数据。declarations列出了应用中的顶层组件，在module里面声明的组件在module范围内都可以直接使用，也就是说在同一module里面的任何Component都可以在其模板文件中直接使用声明的组件，就想我们在AppComponent的模板末尾加上 <app-login></app-login> 一样。\n\n```javascript\nimport { HttpModule } from '@angular/http';\n\nimport { AppComponent } from './app.component';\nimport { LoginComponent } from './login/login.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\nNgModule装饰器用来为模块定义元数据。\n- declarations列出了应用中的顶层组件。\n- BrowerModule 提供了运行在浏览器中的应用所需要的关键服务(service)和指令(Directive),这个模块所在需要在浏览器中跑的应用都应用引用。\n- FormsModule 提供了表单处理和双向绑定等服务和指令。\n- HttpModule 提供Htpp请求和响应的服务。\n- providers 列出会在此模版中“注入”的服务（service）。\n- bootstrap 指明哪个组件为引导性组件，并把结果放到index.html 的该组件的元素标签中。\n-  静态引导AppModuleNgFactory platformBrowser().bootstrapModuleFactory(AppModuleNgFactory);\n-------------------------------------\n\n## 依赖注入\n如果不使用依赖注入，则需要\n    //声明成员变量，其类型为service 里面自定义的方法\n\n    ```javascript\n    //第一种：\n    service:AuthService;\n\n    constructor(){\n        this.service = new AuthService();//在构造中初始化service\n    }\n    //第二种：\n\n    providers: [\n    {provide: 'auth',  useClass: AuthService}\n    ]\n    ```\n\n- 第一种：由于实例化是在组件中进行的，意味着我们如果更改service的构造函数的话，组件也需要更改。如果使用依赖注入的话，就不需要显示声明成员变量service。当import 相关的服务后，这是import将类型引入进来，而provider 里面会配置这个类型的实例。\n- provider 是一个数组，这里配置将要注入到其他组件中的服务配置。provide定义了这个服务的名称，有需要注入这个服务的就引用这个名称就好。useClass 指明这个名称对应的服务是一个类。这样定义之后就能在任意组件中注入这个依赖了。\n ```javascript\n        onstructor(@Inject('auth') private service) {\n    }\n ```\n\n- @inject('auth'),这个修饰符的意思是请到系统配置中找到名称为auth 的那个依赖注入到我修饰的变量中。\n\n## 双向数据绑定\n- [(ngModel)]=\"username\" ,[]的作用是将等号后面当成表达式来解析而不是当成字符串，如果去掉[]就是将ngModel赋值成username这个字符串。[] 的含义是单向绑定，就是将组件中给model 赋的值会设置到HTML的input控件中。[()]是双向绑定。ngModel 是FormModule中提供的指令，它负责从Domain Model中创建一个FormControl的实例，并将这个实例和表单控件绑定.\n- @Input()是输入型绑定的修饰符，用于从数据从父组件传到子组件。\n\n---------------------------------------------\n\n## 表单验证\n```html\n    <div>\n        <input required type=\"text\"\n            [(ngModel)]=\"username\"\n            #usernameRef=\"ngModel\"\n            />\n            {{usernameRef.valid}}\n        <input required type=\"password\"\n            [(ngModel)]=\"password\"\n            #passwordRef=\"ngModel\"\n            />\n            {{passwordRef.valid}}\n        <button (click)=\"onClick()\">Login</button>\n        </div>\n        <div>\n        <input #usernameRef type=\"text\">\n        <button (click)=\"onClick(usernameRef.value)\">Login</button>\n        </div>\n```\n\n1. 通过#usernameRef = 'ngModel'重新加入了引用，这个引用指向了ngModel,这个引用是要在模板中使用的所以加入这个引用。\n2. 在输入框中加入#usernameRef，这个叫引用，引用的是input对象，如果想要传递input 的值，可以用usernameRef.value.\n```html\n    <div>\n        <input type=\"text\"\n            [(ngModel)]=\"username\"\n            #usernameRef=\"ngModel\"\n            required\n            minlength=\"3\"\n            />\n            {{ usernameRef.errors | json }}\n            <div *ngIf=\"usernameRef.errors?.required\">this is required</div>\n            <div *ngIf=\"usernameRef.errors?.minlength\">should be at least 3 charactors</div>\n        <input required type=\"password\"\n            [(ngModel)]=\"password\"\n            #passwordRef=\"ngModel\"\n            />\n            <div *ngIf=\"passwordRef.errors?.required\">this is required</div>\n        <button (click)=\"onClick()\">Login</button>\n    </div>\n```\n*ngIf = \"usernameRef.error?.required\" 的意思是当usernameRef.error.required 为true 的时候显示div 标签\n```html\n    <div>\n        <form #formRef=\"ngForm\" (ngSubmit)=\"onSubmit(formRef.value)\"> \n        <fieldset ngModelGroup=\"login\">\n            <input type=\"text\"\n            name=\"username\"\n            [(ngModel)]=\"username\"\n            #usernameRef=\"ngModel\"\n            required\n            minlength=\"3\"\n            />\n            <div *ngIf=\"usernameRef.errors?.required\">this is required</div>\n            <div *ngIf=\"usernameRef.errors?.minlength\">should be at least 3 charactors</div>\n            <input type=\"password\"\n            name=\"password\"\n            [(ngModel)]=\"password\"\n            #passwordRef=\"ngModel\"\n            required\n            />\n            <div *ngIf=\"passwordRef.errors?.required\">this is required</div>\n            <button (click)=\"onClick()\">Login</button>\n            <button type=\"submit\">Submit</button>\n            </fieldset>\n        </form>\n        </div>\n```\n- ngModel 会注册成Form 的子控件，注册控件需要name ，这个要求我们显示的指定对应控件的name ，因此需要为input 增加name属性，在formREF.value中包含了表单所有填写项的值\n\n- 有时在表单相中表单项过多时，就使用HTML中的fieldset标签用来处理。<fieldset ngModelGroup=\"login\"> 意味着我们对于 fieldset 之内的数据都分组到了 login 对象中。\n\n------------------------------------------------\n\n## 路由\n路径配置的顺序是非常重要的，angular2使用“先匹配优先”的原则。\n- redirectTo 重定向\n## service \n\n```javascript\n    //post /todos\n    addTodo(desc:string):Promise<Todo>{\n        let todo={\n            id:UUID.UUID(),\n            desc:desc,\n            completed:false\n        };\n        return this.http\n            .post(this.api_url,JSON.stringfy(todo),{header:this.headers})\n            .toPromise()\n            .then(res=>res.json().data as Todo)\n            .catch(this.handleError);\n    }\n\n```\n----------------------------------------\n\n```javascript\n    inputValue: string = '';\n    @Input() placeholder: string = 'What needs to be done?';\n    @Input() delay: number = 300;\n\n    //detect the input value and output this to parent\n    @Output() textChanges = new EventEmitter<string>();\n    //detect the enter keyup event and output this to parent\n    @Output() onEnterUp = new EventEmitter<boolean>();\n    ```\n- placeholder和delay作为2个输入型变量，这样在引入标签中就可以设置这两个属性了。\n- 由@Output修饰的onTextChanges 和 onEnterUp，这两个变量都定义了EventEmitter(事件发射器)。\n- export const routing = RouterModule.forChild(routes);，用的是forChild而不是forRoot,因为forRoot只能用于根目录，所有非跟模块的其他模块都只能用forChild.\n\n\n--------------------------\n## 验证用户帐户的流程\n- UserService:用于通过用户名查找用户并返回用户\n- AuthService:用于认证用户，其中需要利用UserService 的方法。\n- AuthGuard:路由拦截器，用于拦截到路由后通过Authservice来知道此用户是否有权限访问路由。根据结果导航到不同路径。\n- @SkipSelf装饰器意味着在当前注入器的所有祖先注入器中寻找，如果注入器找不到想要的提供商时就会抛出一个错误。但是@Optional装饰器表示找不到该服务则会返回null,\nparentModule参数也就被赋值为空。\n\n----------------\n## 路由守卫\n应用场景如下:\n该用户可能无权导航到目标组件。导航前需要用户先登录。\n\n路由器支持多种守卫：\n\n- 用CanActivate来处理导航到某路由的情况。\n- 用CanActivateChild处理导航到子路由的情况。\n- 用CanDeactivate来处理从当前路由离开的情况。\n- 用Resolve在路由激活之前获取路由数据。\n- 用CanLoad来处理异步导航到某特性模块的情况。\n\n----------------------\n## 模块优化\n 各个模块定义，发现我们不断地重复引入了CommonModule、FormsModule、MdlModule,这些组件常用，就可以建立一个ShareModule(src\\app\\shared\\shared.module.ts)\n\n```javascript\n    import { NgModule } from '@angular/core';\n    import { CommonModule } from '@angular/common';\n    import { FormsModule } from '@angular/forms';\n    import { MdlModule } from 'angular2-mdl';\n\n    @NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        MdlModule\n    ],\n    exports: [\n        CommonModule,\n        FormsModule,\n        MdlModule\n    ]\n    })\n    export class SharedModule { }\n```\n这个模块的作用是将常用的模块打包起来，将常用的模块导入又导出，这样在其他模块中值需引入这个模块即可\n\n\n","slug":"angular基础","published":1,"date":"2017-09-26T02:51:04.708Z","updated":"2017-10-31T02:09:50.139Z","layout":"post","photos":[],"link":"","_id":"cj9ffr3q200086cvr5kc8mfgl","content":"<h2 id=\"angular-与-vue-的区别\"><a href=\"#angular-与-vue-的区别\" class=\"headerlink\" title=\"angular 与 vue 的区别\"></a>angular 与 vue 的区别</h2><ul>\n<li>angular2全部采用TypeScript编写，TypeScript（编译工具），它为JS带来了类似于Java 和C# 的静态类型，</li>\n<li>vue 的双向绑定基于ES5 的getter/setter 来实现的，而angular是由自己实现一套模板编译规则们需要进行“脏”检查，而vue不需要，因此vue在性能上更高效。</li>\n<li>angular 中，当watcher 越来越多时会越来越慢，因为作用域的每一次变化</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"angular\"><a href=\"#angular\" class=\"headerlink\" title=\"angular\"></a>angular</h2><ul>\n<li>组件化，数据的单向中心。es6的语法。<h2 id=\"react\"><a href=\"#react\" class=\"headerlink\" title=\"react\"></a>react</h2></li>\n<li>速度很快：来源于虚拟DOM，只有在调用get 和 set 的时候才会更新DOM，而且是先更新虚拟DOM再更新实际的DOM，由此更新DOM 的次数少内容也会少很多。</li>\n<li>FLUX 架构，react 更关注UI 的组件化和数据的单向更新。可以直接有es6的一些语法。</li>\n<li>服务器端渲染，单页应用的缺陷是对于搜索引擎有很大的限制。react 的解决的方案是在服务器上预渲染应用然后发送到服务端，但是爬虫是依赖的服务端的响应而不是web的执行。</li>\n<li>目标是UI。</li>\n<li>本身是一个MVC 中的V。</li>\n</ul>\n<hr>\n<h2 id=\"Angular-为表单内置了4种css样式\"><a href=\"#Angular-为表单内置了4种css样式\" class=\"headerlink\" title=\"Angular 为表单内置了4种css样式\"></a>Angular 为表单内置了4种css样式</h2><ul>\n<li>ng-valid 校验合法状态</li>\n<li>ng-invalid 校验非法状态</li>\n<li>ng-pristine 如果要使用原生的form，需要设置这个值</li>\n<li>ng-dirty 表单处于脏数据状态</li>\n</ul>\n<hr>\n<h2 id=\"Component\"><a href=\"#Component\" class=\"headerlink\" title=\"@Component\"></a>@Component</h2><ul>\n<li>@Component 是Angular 提供的装饰函数，用来描述Component的元数据</li>\n<li>selector 指这个组件在HTML模板中的标签是什么</li>\n<li>template是嵌入（inline）的HTML模板，如果使用单独文件可用templateUrl。</li>\n<li>styles是嵌入（inline）的CSS样式，如果使用单独文件可用styleUrls。</li>\n<li>providers 列出会在此模块中“注入”的服务(service)-依赖注入</li>\n<li>bootstrap指明哪个组件为引导组件(比如AppComponent),当angular引导应用时，它会在Dom中渲染这个引导性组件，并把结果放进index.html的该组件的标签中。</li>\n</ul>\n<h2 id=\"NgModule\"><a href=\"#NgModule\" class=\"headerlink\" title=\"@NgModule\"></a>@NgModule</h2><p>@NgModule装饰器用来为模块定义元数据。declarations列出了应用中的顶层组件，在module里面声明的组件在module范围内都可以直接使用，也就是说在同一module里面的任何Component都可以在其模板文件中直接使用声明的组件，就想我们在AppComponent的模板末尾加上 <app-login></app-login> 一样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; HttpModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/http'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; AppComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app.component'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; LoginComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./login/login.component'</span>;</div><div class=\"line\"></div><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">  declarations: [</div><div class=\"line\">    AppComponent,</div><div class=\"line\">    LoginComponent</div><div class=\"line\">  ],</div><div class=\"line\">  imports: [</div><div class=\"line\">    BrowserModule,</div><div class=\"line\">    FormsModule,</div><div class=\"line\">    HttpModule</div><div class=\"line\">  ],</div><div class=\"line\">  providers: [],</div><div class=\"line\">  bootstrap: [AppComponent]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppModule</span> </span>&#123; &#125;</div></pre></td></tr></table></figure>\n<p>NgModule装饰器用来为模块定义元数据。</p>\n<ul>\n<li>declarations列出了应用中的顶层组件。</li>\n<li>BrowerModule 提供了运行在浏览器中的应用所需要的关键服务(service)和指令(Directive),这个模块所在需要在浏览器中跑的应用都应用引用。</li>\n<li>FormsModule 提供了表单处理和双向绑定等服务和指令。</li>\n<li>HttpModule 提供Htpp请求和响应的服务。</li>\n<li>providers 列出会在此模版中“注入”的服务（service）。</li>\n<li>bootstrap 指明哪个组件为引导性组件，并把结果放到index.html 的该组件的元素标签中。</li>\n<li>静态引导AppModuleNgFactory platformBrowser().bootstrapModuleFactory(AppModuleNgFactory);</li>\n</ul>\n<hr>\n<h2 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a>依赖注入</h2><p>如果不使用依赖注入，则需要<br>    //声明成员变量，其类型为service 里面自定义的方法</p>\n<pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//第一种：</span></div><div class=\"line\">service:AuthService;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">constructor</span>()&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.service = <span class=\"keyword\">new</span> AuthService();<span class=\"comment\">//在构造中初始化service</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//第二种：</span></div><div class=\"line\"></div><div class=\"line\">providers: [</div><div class=\"line\">&#123;<span class=\"attr\">provide</span>: <span class=\"string\">'auth'</span>,  <span class=\"attr\">useClass</span>: AuthService&#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>第一种：由于实例化是在组件中进行的，意味着我们如果更改service的构造函数的话，组件也需要更改。如果使用依赖注入的话，就不需要显示声明成员变量service。当import 相关的服务后，这是import将类型引入进来，而provider 里面会配置这个类型的实例。</li>\n<li><p>provider 是一个数组，这里配置将要注入到其他组件中的服务配置。provide定义了这个服务的名称，有需要注入这个服务的就引用这个名称就好。useClass 指明这个名称对应的服务是一个类。这样定义之后就能在任意组件中注入这个依赖了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">    onstructor(@Inject(<span class=\"string\">'auth'</span>) private service) &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>@inject(‘auth’),这个修饰符的意思是请到系统配置中找到名称为auth 的那个依赖注入到我修饰的变量中。</p>\n</li>\n</ul>\n<h2 id=\"双向数据绑定\"><a href=\"#双向数据绑定\" class=\"headerlink\" title=\"双向数据绑定\"></a>双向数据绑定</h2><ul>\n<li>[(ngModel)]=”username” ,[]的作用是将等号后面当成表达式来解析而不是当成字符串，如果去掉[]就是将ngModel赋值成username这个字符串。[] 的含义是单向绑定，就是将组件中给model 赋的值会设置到HTML的input控件中。[()]是双向绑定。ngModel 是FormModule中提供的指令，它负责从Domain Model中创建一个FormControl的实例，并将这个实例和表单控件绑定.</li>\n<li>@Input()是输入型绑定的修饰符，用于从数据从父组件传到子组件。</li>\n</ul>\n<hr>\n<h2 id=\"表单验证\"><a href=\"#表单验证\" class=\"headerlink\" title=\"表单验证\"></a>表单验证</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">required</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span></span></div><div class=\"line\"><span class=\"tag\">        [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"username\"</span></span></div><div class=\"line\"><span class=\"tag\">        #<span class=\"attr\">usernameRef</span>=<span class=\"string\">\"ngModel\"</span></span></div><div class=\"line\"><span class=\"tag\">        /&gt;</span></div><div class=\"line\">        &#123;&#123;usernameRef.valid&#125;&#125;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">required</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span></span></div><div class=\"line\"><span class=\"tag\">        [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"password\"</span></span></div><div class=\"line\"><span class=\"tag\">        #<span class=\"attr\">passwordRef</span>=<span class=\"string\">\"ngModel\"</span></span></div><div class=\"line\"><span class=\"tag\">        /&gt;</span></div><div class=\"line\">        &#123;&#123;passwordRef.valid&#125;&#125;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"onClick()\"</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> #<span class=\"attr\">usernameRef</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"onClick(usernameRef.value)\"</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<ol>\n<li>通过#usernameRef = ‘ngModel’重新加入了引用，这个引用指向了ngModel,这个引用是要在模板中使用的所以加入这个引用。</li>\n<li>在输入框中加入#usernameRef，这个叫引用，引用的是input对象，如果想要传递input 的值，可以用usernameRef.value.<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span></span></div><div class=\"line\"><span class=\"tag\">        [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"username\"</span></span></div><div class=\"line\"><span class=\"tag\">        #<span class=\"attr\">usernameRef</span>=<span class=\"string\">\"ngModel\"</span></span></div><div class=\"line\"><span class=\"tag\">        <span class=\"attr\">required</span></span></div><div class=\"line\"><span class=\"tag\">        <span class=\"attr\">minlength</span>=<span class=\"string\">\"3\"</span></span></div><div class=\"line\"><span class=\"tag\">        /&gt;</span></div><div class=\"line\">        &#123;&#123; usernameRef.errors | json &#125;&#125;</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"usernameRef.errors?.required\"</span>&gt;</span>this is required<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"usernameRef.errors?.minlength\"</span>&gt;</span>should be at least 3 charactors<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">required</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span></span></div><div class=\"line\"><span class=\"tag\">        [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"password\"</span></span></div><div class=\"line\"><span class=\"tag\">        #<span class=\"attr\">passwordRef</span>=<span class=\"string\">\"ngModel\"</span></span></div><div class=\"line\"><span class=\"tag\">        /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"passwordRef.errors?.required\"</span>&gt;</span>this is required<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"onClick()\"</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>*ngIf = “usernameRef.error?.required” 的意思是当usernameRef.error.required 为true 的时候显示div 标签<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> #<span class=\"attr\">formRef</span>=<span class=\"string\">\"ngForm\"</span> (<span class=\"attr\">ngSubmit</span>)=<span class=\"string\">\"onSubmit(formRef.value)\"</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fieldset</span> <span class=\"attr\">ngModelGroup</span>=<span class=\"string\">\"login\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span></span></div><div class=\"line\"><span class=\"tag\">        <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span></span></div><div class=\"line\"><span class=\"tag\">        [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"username\"</span></span></div><div class=\"line\"><span class=\"tag\">        #<span class=\"attr\">usernameRef</span>=<span class=\"string\">\"ngModel\"</span></span></div><div class=\"line\"><span class=\"tag\">        <span class=\"attr\">required</span></span></div><div class=\"line\"><span class=\"tag\">        <span class=\"attr\">minlength</span>=<span class=\"string\">\"3\"</span></span></div><div class=\"line\"><span class=\"tag\">        /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"usernameRef.errors?.required\"</span>&gt;</span>this is required<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"usernameRef.errors?.minlength\"</span>&gt;</span>should be at least 3 charactors<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span></span></div><div class=\"line\"><span class=\"tag\">        <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span></span></div><div class=\"line\"><span class=\"tag\">        [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"password\"</span></span></div><div class=\"line\"><span class=\"tag\">        #<span class=\"attr\">passwordRef</span>=<span class=\"string\">\"ngModel\"</span></span></div><div class=\"line\"><span class=\"tag\">        <span class=\"attr\">required</span></span></div><div class=\"line\"><span class=\"tag\">        /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"passwordRef.errors?.required\"</span>&gt;</span>this is required<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"onClick()\"</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">fieldset</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<ul>\n<li><p>ngModel 会注册成Form 的子控件，注册控件需要name ，这个要求我们显示的指定对应控件的name ，因此需要为input 增加name属性，在formREF.value中包含了表单所有填写项的值</p>\n</li>\n<li><p>有时在表单相中表单项过多时，就使用HTML中的fieldset标签用来处理。<fieldset ngmodelgroup=\"login\"> 意味着我们对于 fieldset 之内的数据都分组到了 login 对象中。</fieldset></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><p>路径配置的顺序是非常重要的，angular2使用“先匹配优先”的原则。</p>\n<ul>\n<li>redirectTo 重定向<h2 id=\"service\"><a href=\"#service\" class=\"headerlink\" title=\"service\"></a>service</h2></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//post /todos</span></div><div class=\"line\">addTodo(desc:string):<span class=\"built_in\">Promise</span>&lt;Todo&gt;&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> todo=&#123;</div><div class=\"line\">        id:UUID.UUID(),</div><div class=\"line\">        desc:desc,</div><div class=\"line\">        completed:<span class=\"literal\">false</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.http</div><div class=\"line\">        .post(<span class=\"keyword\">this</span>.api_url,<span class=\"built_in\">JSON</span>.stringfy(todo),&#123;<span class=\"attr\">header</span>:<span class=\"keyword\">this</span>.headers&#125;)</div><div class=\"line\">        .toPromise()</div><div class=\"line\">        .then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json().data <span class=\"keyword\">as</span> Todo)</div><div class=\"line\">        .catch(<span class=\"keyword\">this</span>.handleError);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">inputValue: string = <span class=\"string\">''</span>;</div><div class=\"line\">@Input() placeholder: string = <span class=\"string\">'What needs to be done?'</span>;</div><div class=\"line\">@Input() delay: number = <span class=\"number\">300</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//detect the input value and output this to parent</span></div><div class=\"line\">@Output() textChanges = <span class=\"keyword\">new</span> EventEmitter&lt;string&gt;();</div><div class=\"line\"><span class=\"comment\">//detect the enter keyup event and output this to parent</span></div><div class=\"line\">@Output() onEnterUp = <span class=\"keyword\">new</span> EventEmitter&lt;boolean&gt;();</div></pre></td></tr></table></figure>\n<ul>\n<li>placeholder和delay作为2个输入型变量，这样在引入标签中就可以设置这两个属性了。</li>\n<li>由@Output修饰的onTextChanges 和 onEnterUp，这两个变量都定义了EventEmitter(事件发射器)。</li>\n<li>export const routing = RouterModule.forChild(routes);，用的是forChild而不是forRoot,因为forRoot只能用于根目录，所有非跟模块的其他模块都只能用forChild.</li>\n</ul>\n<hr>\n<h2 id=\"验证用户帐户的流程\"><a href=\"#验证用户帐户的流程\" class=\"headerlink\" title=\"验证用户帐户的流程\"></a>验证用户帐户的流程</h2><ul>\n<li>UserService:用于通过用户名查找用户并返回用户</li>\n<li>AuthService:用于认证用户，其中需要利用UserService 的方法。</li>\n<li>AuthGuard:路由拦截器，用于拦截到路由后通过Authservice来知道此用户是否有权限访问路由。根据结果导航到不同路径。</li>\n<li>@SkipSelf装饰器意味着在当前注入器的所有祖先注入器中寻找，如果注入器找不到想要的提供商时就会抛出一个错误。但是@Optional装饰器表示找不到该服务则会返回null,<br>parentModule参数也就被赋值为空。</li>\n</ul>\n<hr>\n<h2 id=\"路由守卫\"><a href=\"#路由守卫\" class=\"headerlink\" title=\"路由守卫\"></a>路由守卫</h2><p>应用场景如下:<br>该用户可能无权导航到目标组件。导航前需要用户先登录。</p>\n<p>路由器支持多种守卫：</p>\n<ul>\n<li>用CanActivate来处理导航到某路由的情况。</li>\n<li>用CanActivateChild处理导航到子路由的情况。</li>\n<li>用CanDeactivate来处理从当前路由离开的情况。</li>\n<li>用Resolve在路由激活之前获取路由数据。</li>\n<li>用CanLoad来处理异步导航到某特性模块的情况。</li>\n</ul>\n<hr>\n<h2 id=\"模块优化\"><a href=\"#模块优化\" class=\"headerlink\" title=\"模块优化\"></a>模块优化</h2><p> 各个模块定义，发现我们不断地重复引入了CommonModule、FormsModule、MdlModule,这些组件常用，就可以建立一个ShareModule(src\\app\\shared\\shared.module.ts)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; CommonModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; FormsModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/forms'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; MdlModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'angular2-mdl'</span>;</div><div class=\"line\"></div><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">imports: [</div><div class=\"line\">    CommonModule,</div><div class=\"line\">    FormsModule,</div><div class=\"line\">    MdlModule</div><div class=\"line\">],</div><div class=\"line\">exports: [</div><div class=\"line\">    CommonModule,</div><div class=\"line\">    FormsModule,</div><div class=\"line\">    MdlModule</div><div class=\"line\">]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SharedModule</span> </span>&#123; &#125;</div></pre></td></tr></table></figure>\n<p>这个模块的作用是将常用的模块打包起来，将常用的模块导入又导出，这样在其他模块中值需引入这个模块即可</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"angular-与-vue-的区别\"><a href=\"#angular-与-vue-的区别\" class=\"headerlink\" title=\"angular 与 vue 的区别\"></a>angular 与 vue 的区别</h2><ul>\n<li>angular2全部采用TypeScript编写，TypeScript（编译工具），它为JS带来了类似于Java 和C# 的静态类型，</li>\n<li>vue 的双向绑定基于ES5 的getter/setter 来实现的，而angular是由自己实现一套模板编译规则们需要进行“脏”检查，而vue不需要，因此vue在性能上更高效。</li>\n<li>angular 中，当watcher 越来越多时会越来越慢，因为作用域的每一次变化</li>\n</ul>","more":"<h2 id=\"angular\"><a href=\"#angular\" class=\"headerlink\" title=\"angular\"></a>angular</h2><ul>\n<li>组件化，数据的单向中心。es6的语法。<h2 id=\"react\"><a href=\"#react\" class=\"headerlink\" title=\"react\"></a>react</h2></li>\n<li>速度很快：来源于虚拟DOM，只有在调用get 和 set 的时候才会更新DOM，而且是先更新虚拟DOM再更新实际的DOM，由此更新DOM 的次数少内容也会少很多。</li>\n<li>FLUX 架构，react 更关注UI 的组件化和数据的单向更新。可以直接有es6的一些语法。</li>\n<li>服务器端渲染，单页应用的缺陷是对于搜索引擎有很大的限制。react 的解决的方案是在服务器上预渲染应用然后发送到服务端，但是爬虫是依赖的服务端的响应而不是web的执行。</li>\n<li>目标是UI。</li>\n<li>本身是一个MVC 中的V。</li>\n</ul>\n<hr>\n<h2 id=\"Angular-为表单内置了4种css样式\"><a href=\"#Angular-为表单内置了4种css样式\" class=\"headerlink\" title=\"Angular 为表单内置了4种css样式\"></a>Angular 为表单内置了4种css样式</h2><ul>\n<li>ng-valid 校验合法状态</li>\n<li>ng-invalid 校验非法状态</li>\n<li>ng-pristine 如果要使用原生的form，需要设置这个值</li>\n<li>ng-dirty 表单处于脏数据状态</li>\n</ul>\n<hr>\n<h2 id=\"Component\"><a href=\"#Component\" class=\"headerlink\" title=\"@Component\"></a>@Component</h2><ul>\n<li>@Component 是Angular 提供的装饰函数，用来描述Component的元数据</li>\n<li>selector 指这个组件在HTML模板中的标签是什么</li>\n<li>template是嵌入（inline）的HTML模板，如果使用单独文件可用templateUrl。</li>\n<li>styles是嵌入（inline）的CSS样式，如果使用单独文件可用styleUrls。</li>\n<li>providers 列出会在此模块中“注入”的服务(service)-依赖注入</li>\n<li>bootstrap指明哪个组件为引导组件(比如AppComponent),当angular引导应用时，它会在Dom中渲染这个引导性组件，并把结果放进index.html的该组件的标签中。</li>\n</ul>\n<h2 id=\"NgModule\"><a href=\"#NgModule\" class=\"headerlink\" title=\"@NgModule\"></a>@NgModule</h2><p>@NgModule装饰器用来为模块定义元数据。declarations列出了应用中的顶层组件，在module里面声明的组件在module范围内都可以直接使用，也就是说在同一module里面的任何Component都可以在其模板文件中直接使用声明的组件，就想我们在AppComponent的模板末尾加上 <app-login></app-login> 一样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; HttpModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/http'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; AppComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app.component'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; LoginComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./login/login.component'</span>;</div><div class=\"line\"></div><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">  declarations: [</div><div class=\"line\">    AppComponent,</div><div class=\"line\">    LoginComponent</div><div class=\"line\">  ],</div><div class=\"line\">  imports: [</div><div class=\"line\">    BrowserModule,</div><div class=\"line\">    FormsModule,</div><div class=\"line\">    HttpModule</div><div class=\"line\">  ],</div><div class=\"line\">  providers: [],</div><div class=\"line\">  bootstrap: [AppComponent]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppModule</span> </span>&#123; &#125;</div></pre></td></tr></table></figure>\n<p>NgModule装饰器用来为模块定义元数据。</p>\n<ul>\n<li>declarations列出了应用中的顶层组件。</li>\n<li>BrowerModule 提供了运行在浏览器中的应用所需要的关键服务(service)和指令(Directive),这个模块所在需要在浏览器中跑的应用都应用引用。</li>\n<li>FormsModule 提供了表单处理和双向绑定等服务和指令。</li>\n<li>HttpModule 提供Htpp请求和响应的服务。</li>\n<li>providers 列出会在此模版中“注入”的服务（service）。</li>\n<li>bootstrap 指明哪个组件为引导性组件，并把结果放到index.html 的该组件的元素标签中。</li>\n<li>静态引导AppModuleNgFactory platformBrowser().bootstrapModuleFactory(AppModuleNgFactory);</li>\n</ul>\n<hr>\n<h2 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a>依赖注入</h2><p>如果不使用依赖注入，则需要<br>    //声明成员变量，其类型为service 里面自定义的方法</p>\n<pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//第一种：</span></div><div class=\"line\">service:AuthService;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">constructor</span>()&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.service = <span class=\"keyword\">new</span> AuthService();<span class=\"comment\">//在构造中初始化service</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//第二种：</span></div><div class=\"line\"></div><div class=\"line\">providers: [</div><div class=\"line\">&#123;<span class=\"attr\">provide</span>: <span class=\"string\">'auth'</span>,  <span class=\"attr\">useClass</span>: AuthService&#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>第一种：由于实例化是在组件中进行的，意味着我们如果更改service的构造函数的话，组件也需要更改。如果使用依赖注入的话，就不需要显示声明成员变量service。当import 相关的服务后，这是import将类型引入进来，而provider 里面会配置这个类型的实例。</li>\n<li><p>provider 是一个数组，这里配置将要注入到其他组件中的服务配置。provide定义了这个服务的名称，有需要注入这个服务的就引用这个名称就好。useClass 指明这个名称对应的服务是一个类。这样定义之后就能在任意组件中注入这个依赖了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">    onstructor(@Inject(<span class=\"string\">'auth'</span>) private service) &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>@inject(‘auth’),这个修饰符的意思是请到系统配置中找到名称为auth 的那个依赖注入到我修饰的变量中。</p>\n</li>\n</ul>\n<h2 id=\"双向数据绑定\"><a href=\"#双向数据绑定\" class=\"headerlink\" title=\"双向数据绑定\"></a>双向数据绑定</h2><ul>\n<li>[(ngModel)]=”username” ,[]的作用是将等号后面当成表达式来解析而不是当成字符串，如果去掉[]就是将ngModel赋值成username这个字符串。[] 的含义是单向绑定，就是将组件中给model 赋的值会设置到HTML的input控件中。[()]是双向绑定。ngModel 是FormModule中提供的指令，它负责从Domain Model中创建一个FormControl的实例，并将这个实例和表单控件绑定.</li>\n<li>@Input()是输入型绑定的修饰符，用于从数据从父组件传到子组件。</li>\n</ul>\n<hr>\n<h2 id=\"表单验证\"><a href=\"#表单验证\" class=\"headerlink\" title=\"表单验证\"></a>表单验证</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">required</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span></span></div><div class=\"line\"><span class=\"tag\">        [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"username\"</span></span></div><div class=\"line\"><span class=\"tag\">        #<span class=\"attr\">usernameRef</span>=<span class=\"string\">\"ngModel\"</span></span></div><div class=\"line\"><span class=\"tag\">        /&gt;</span></div><div class=\"line\">        &#123;&#123;usernameRef.valid&#125;&#125;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">required</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span></span></div><div class=\"line\"><span class=\"tag\">        [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"password\"</span></span></div><div class=\"line\"><span class=\"tag\">        #<span class=\"attr\">passwordRef</span>=<span class=\"string\">\"ngModel\"</span></span></div><div class=\"line\"><span class=\"tag\">        /&gt;</span></div><div class=\"line\">        &#123;&#123;passwordRef.valid&#125;&#125;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"onClick()\"</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> #<span class=\"attr\">usernameRef</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"onClick(usernameRef.value)\"</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<ol>\n<li>通过#usernameRef = ‘ngModel’重新加入了引用，这个引用指向了ngModel,这个引用是要在模板中使用的所以加入这个引用。</li>\n<li>在输入框中加入#usernameRef，这个叫引用，引用的是input对象，如果想要传递input 的值，可以用usernameRef.value.<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span></span></div><div class=\"line\"><span class=\"tag\">        [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"username\"</span></span></div><div class=\"line\"><span class=\"tag\">        #<span class=\"attr\">usernameRef</span>=<span class=\"string\">\"ngModel\"</span></span></div><div class=\"line\"><span class=\"tag\">        <span class=\"attr\">required</span></span></div><div class=\"line\"><span class=\"tag\">        <span class=\"attr\">minlength</span>=<span class=\"string\">\"3\"</span></span></div><div class=\"line\"><span class=\"tag\">        /&gt;</span></div><div class=\"line\">        &#123;&#123; usernameRef.errors | json &#125;&#125;</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"usernameRef.errors?.required\"</span>&gt;</span>this is required<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"usernameRef.errors?.minlength\"</span>&gt;</span>should be at least 3 charactors<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">required</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span></span></div><div class=\"line\"><span class=\"tag\">        [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"password\"</span></span></div><div class=\"line\"><span class=\"tag\">        #<span class=\"attr\">passwordRef</span>=<span class=\"string\">\"ngModel\"</span></span></div><div class=\"line\"><span class=\"tag\">        /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"passwordRef.errors?.required\"</span>&gt;</span>this is required<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"onClick()\"</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>*ngIf = “usernameRef.error?.required” 的意思是当usernameRef.error.required 为true 的时候显示div 标签<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> #<span class=\"attr\">formRef</span>=<span class=\"string\">\"ngForm\"</span> (<span class=\"attr\">ngSubmit</span>)=<span class=\"string\">\"onSubmit(formRef.value)\"</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fieldset</span> <span class=\"attr\">ngModelGroup</span>=<span class=\"string\">\"login\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span></span></div><div class=\"line\"><span class=\"tag\">        <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span></span></div><div class=\"line\"><span class=\"tag\">        [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"username\"</span></span></div><div class=\"line\"><span class=\"tag\">        #<span class=\"attr\">usernameRef</span>=<span class=\"string\">\"ngModel\"</span></span></div><div class=\"line\"><span class=\"tag\">        <span class=\"attr\">required</span></span></div><div class=\"line\"><span class=\"tag\">        <span class=\"attr\">minlength</span>=<span class=\"string\">\"3\"</span></span></div><div class=\"line\"><span class=\"tag\">        /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"usernameRef.errors?.required\"</span>&gt;</span>this is required<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"usernameRef.errors?.minlength\"</span>&gt;</span>should be at least 3 charactors<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span></span></div><div class=\"line\"><span class=\"tag\">        <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span></span></div><div class=\"line\"><span class=\"tag\">        [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"password\"</span></span></div><div class=\"line\"><span class=\"tag\">        #<span class=\"attr\">passwordRef</span>=<span class=\"string\">\"ngModel\"</span></span></div><div class=\"line\"><span class=\"tag\">        <span class=\"attr\">required</span></span></div><div class=\"line\"><span class=\"tag\">        /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"passwordRef.errors?.required\"</span>&gt;</span>this is required<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"onClick()\"</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">fieldset</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<ul>\n<li><p>ngModel 会注册成Form 的子控件，注册控件需要name ，这个要求我们显示的指定对应控件的name ，因此需要为input 增加name属性，在formREF.value中包含了表单所有填写项的值</p>\n</li>\n<li><p>有时在表单相中表单项过多时，就使用HTML中的fieldset标签用来处理。<fieldset ngmodelgroup=\"login\"> 意味着我们对于 fieldset 之内的数据都分组到了 login 对象中。</fieldset></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><p>路径配置的顺序是非常重要的，angular2使用“先匹配优先”的原则。</p>\n<ul>\n<li>redirectTo 重定向<h2 id=\"service\"><a href=\"#service\" class=\"headerlink\" title=\"service\"></a>service</h2></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//post /todos</span></div><div class=\"line\">addTodo(desc:string):<span class=\"built_in\">Promise</span>&lt;Todo&gt;&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> todo=&#123;</div><div class=\"line\">        id:UUID.UUID(),</div><div class=\"line\">        desc:desc,</div><div class=\"line\">        completed:<span class=\"literal\">false</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.http</div><div class=\"line\">        .post(<span class=\"keyword\">this</span>.api_url,<span class=\"built_in\">JSON</span>.stringfy(todo),&#123;<span class=\"attr\">header</span>:<span class=\"keyword\">this</span>.headers&#125;)</div><div class=\"line\">        .toPromise()</div><div class=\"line\">        .then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json().data <span class=\"keyword\">as</span> Todo)</div><div class=\"line\">        .catch(<span class=\"keyword\">this</span>.handleError);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">inputValue: string = <span class=\"string\">''</span>;</div><div class=\"line\">@Input() placeholder: string = <span class=\"string\">'What needs to be done?'</span>;</div><div class=\"line\">@Input() delay: number = <span class=\"number\">300</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//detect the input value and output this to parent</span></div><div class=\"line\">@Output() textChanges = <span class=\"keyword\">new</span> EventEmitter&lt;string&gt;();</div><div class=\"line\"><span class=\"comment\">//detect the enter keyup event and output this to parent</span></div><div class=\"line\">@Output() onEnterUp = <span class=\"keyword\">new</span> EventEmitter&lt;boolean&gt;();</div></pre></td></tr></table></figure>\n<ul>\n<li>placeholder和delay作为2个输入型变量，这样在引入标签中就可以设置这两个属性了。</li>\n<li>由@Output修饰的onTextChanges 和 onEnterUp，这两个变量都定义了EventEmitter(事件发射器)。</li>\n<li>export const routing = RouterModule.forChild(routes);，用的是forChild而不是forRoot,因为forRoot只能用于根目录，所有非跟模块的其他模块都只能用forChild.</li>\n</ul>\n<hr>\n<h2 id=\"验证用户帐户的流程\"><a href=\"#验证用户帐户的流程\" class=\"headerlink\" title=\"验证用户帐户的流程\"></a>验证用户帐户的流程</h2><ul>\n<li>UserService:用于通过用户名查找用户并返回用户</li>\n<li>AuthService:用于认证用户，其中需要利用UserService 的方法。</li>\n<li>AuthGuard:路由拦截器，用于拦截到路由后通过Authservice来知道此用户是否有权限访问路由。根据结果导航到不同路径。</li>\n<li>@SkipSelf装饰器意味着在当前注入器的所有祖先注入器中寻找，如果注入器找不到想要的提供商时就会抛出一个错误。但是@Optional装饰器表示找不到该服务则会返回null,<br>parentModule参数也就被赋值为空。</li>\n</ul>\n<hr>\n<h2 id=\"路由守卫\"><a href=\"#路由守卫\" class=\"headerlink\" title=\"路由守卫\"></a>路由守卫</h2><p>应用场景如下:<br>该用户可能无权导航到目标组件。导航前需要用户先登录。</p>\n<p>路由器支持多种守卫：</p>\n<ul>\n<li>用CanActivate来处理导航到某路由的情况。</li>\n<li>用CanActivateChild处理导航到子路由的情况。</li>\n<li>用CanDeactivate来处理从当前路由离开的情况。</li>\n<li>用Resolve在路由激活之前获取路由数据。</li>\n<li>用CanLoad来处理异步导航到某特性模块的情况。</li>\n</ul>\n<hr>\n<h2 id=\"模块优化\"><a href=\"#模块优化\" class=\"headerlink\" title=\"模块优化\"></a>模块优化</h2><p> 各个模块定义，发现我们不断地重复引入了CommonModule、FormsModule、MdlModule,这些组件常用，就可以建立一个ShareModule(src\\app\\shared\\shared.module.ts)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; CommonModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; FormsModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/forms'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; MdlModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'angular2-mdl'</span>;</div><div class=\"line\"></div><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">imports: [</div><div class=\"line\">    CommonModule,</div><div class=\"line\">    FormsModule,</div><div class=\"line\">    MdlModule</div><div class=\"line\">],</div><div class=\"line\">exports: [</div><div class=\"line\">    CommonModule,</div><div class=\"line\">    FormsModule,</div><div class=\"line\">    MdlModule</div><div class=\"line\">]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SharedModule</span> </span>&#123; &#125;</div></pre></td></tr></table></figure>\n<p>这个模块的作用是将常用的模块打包起来，将常用的模块导入又导出，这样在其他模块中值需引入这个模块即可</p>"},{"title":"angular 数据绑定详解","comments":1,"_content":"## 绑定\n1. 绑定表达式的指令ngBind\n```html\n    <div ng-Bind = \"vm.info\"></div>\n\n```\n这样就把控制器中额vm.info的值绑定在div标签中，这样页面在网速不好的时候就不会出现angular 中&#123;&#123;&#125;&#125;的解析符，它隐藏了angular解析表达式的过程\n2. ngBindTemplate\nngBindTemplate 这个指令与上一个指令的不同之处在于它可以绑定多个表达式\n        ``` html\n        <div ng-bind-template=\"{{vm.info}}{{vm.msg}}\"></div>\n        ```\n\n<!--more-->\n—------------------------\n\n## 数据绑定\n 数据绑定可以分为3种：\n 1. 属性绑定和插值表达式 组件类 -> 模板\n 2. 事件绑定：模板 -> 组件类\n 3. 双向绑定： 模板 <-> 组件类\n\n#### 事件绑定\n```html\n    <a (click)=\"test()\"></a>\n     (click) 表示要进行的操作，当用户点击时就会执行组件类中的test()方法\n````\n#### 属性绑定和插值表达式\n属性绑定和插值表达式是同一种东西，因为在解析代码的时候，插值表达式会转换为属性绑定,例如下面的两种写法是一样的\n\n    ```javascript\n    <img src=\"{{ingURL}}\" />\n    <img [src]=\"imgUrl\">\n    ```\n\n属性绑定又分为HTML属性绑定和DOM绑定， 例如：\n\n   ``` javascript\n   <input type =\"text\" value = \"hello\" (input) = \"doInput($event)\" >\n    doInput(event:any){\n        console.log(event.target.value);\n        console.log(event.target.getAttribute('value'));\n    }\n\n```\n其中event.target.value 是获取的DOM 属性，是可变的，表示当前元素的状态。\n而 event.target.getAttribute(\"value\")获取的是HTML属性，是不可变的。只负责初始化HTML元素，不可改变。\n\n<strong>注意：</strong>\n1. 有的DOM属性没有映射的HTML属性，同样有些HTML属性也没有映射的DOM属性。\n2. 模板绑定的是DOM属性。\n\n##### HTML属性绑定\n1. 基本HTML属性绑定\n\n```javascript\n    <td [attr.colspan]=\"表达式\"></td>\n```\n\n2. css绑定\n\n```html\n    <div class =\"a\" [class]=\"b\"></div> //b会完全替代a\n    <div [class.a]=\"fn()\"></div>//fn()返回true、false,如果true则添加.a\n    <div [ngClass]=\"{a:isA,b:isB}\"></div>// b会完全替代a\n```\n\n3. 样式绑定\n\n    ```javascript\n        <button [style.color]=\"a?red:green\">button</button>\n        <button [ngStyle] = \"{'font-style':a?'red':'green'}\">button</button>\n    ```\n4. 双向绑定\n双向绑定可以从组件类->模板，也可以模板->组件类，利用[(ngModel)]可以实现双向数据绑定","source":"_posts/angular-数据绑定.md","raw":"---\ntitle: angular 数据绑定详解\ncomments: true\n---\n## 绑定\n1. 绑定表达式的指令ngBind\n```html\n    <div ng-Bind = \"vm.info\"></div>\n\n```\n这样就把控制器中额vm.info的值绑定在div标签中，这样页面在网速不好的时候就不会出现angular 中&#123;&#123;&#125;&#125;的解析符，它隐藏了angular解析表达式的过程\n2. ngBindTemplate\nngBindTemplate 这个指令与上一个指令的不同之处在于它可以绑定多个表达式\n        ``` html\n        <div ng-bind-template=\"{{vm.info}}{{vm.msg}}\"></div>\n        ```\n\n<!--more-->\n—------------------------\n\n## 数据绑定\n 数据绑定可以分为3种：\n 1. 属性绑定和插值表达式 组件类 -> 模板\n 2. 事件绑定：模板 -> 组件类\n 3. 双向绑定： 模板 <-> 组件类\n\n#### 事件绑定\n```html\n    <a (click)=\"test()\"></a>\n     (click) 表示要进行的操作，当用户点击时就会执行组件类中的test()方法\n````\n#### 属性绑定和插值表达式\n属性绑定和插值表达式是同一种东西，因为在解析代码的时候，插值表达式会转换为属性绑定,例如下面的两种写法是一样的\n\n    ```javascript\n    <img src=\"{{ingURL}}\" />\n    <img [src]=\"imgUrl\">\n    ```\n\n属性绑定又分为HTML属性绑定和DOM绑定， 例如：\n\n   ``` javascript\n   <input type =\"text\" value = \"hello\" (input) = \"doInput($event)\" >\n    doInput(event:any){\n        console.log(event.target.value);\n        console.log(event.target.getAttribute('value'));\n    }\n\n```\n其中event.target.value 是获取的DOM 属性，是可变的，表示当前元素的状态。\n而 event.target.getAttribute(\"value\")获取的是HTML属性，是不可变的。只负责初始化HTML元素，不可改变。\n\n<strong>注意：</strong>\n1. 有的DOM属性没有映射的HTML属性，同样有些HTML属性也没有映射的DOM属性。\n2. 模板绑定的是DOM属性。\n\n##### HTML属性绑定\n1. 基本HTML属性绑定\n\n```javascript\n    <td [attr.colspan]=\"表达式\"></td>\n```\n\n2. css绑定\n\n```html\n    <div class =\"a\" [class]=\"b\"></div> //b会完全替代a\n    <div [class.a]=\"fn()\"></div>//fn()返回true、false,如果true则添加.a\n    <div [ngClass]=\"{a:isA,b:isB}\"></div>// b会完全替代a\n```\n\n3. 样式绑定\n\n    ```javascript\n        <button [style.color]=\"a?red:green\">button</button>\n        <button [ngStyle] = \"{'font-style':a?'red':'green'}\">button</button>\n    ```\n4. 双向绑定\n双向绑定可以从组件类->模板，也可以模板->组件类，利用[(ngModel)]可以实现双向数据绑定","slug":"angular-数据绑定","published":1,"date":"2017-09-18T07:59:42.659Z","updated":"2017-10-31T02:44:57.376Z","layout":"post","photos":[],"link":"","_id":"cj9ffr3q6000a6cvry15ypwqv","content":"<h2 id=\"绑定\"><a href=\"#绑定\" class=\"headerlink\" title=\"绑定\"></a>绑定</h2><ol>\n<li>绑定表达式的指令ngBind<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-Bind</span> = <span class=\"string\">\"vm.info\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这样就把控制器中额vm.info的值绑定在div标签中，这样页面在网速不好的时候就不会出现angular 中&#123;&#123;&#125;&#125;的解析符，它隐藏了angular解析表达式的过程</p>\n<ol>\n<li>ngBindTemplate<br>ngBindTemplate 这个指令与上一个指令的不同之处在于它可以绑定多个表达式<pre><code><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-bind-template</span>=<span class=\"string\">\"&#123;&#123;vm.info&#125;&#125;&#123;&#123;vm.msg&#125;&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n</code></pre></li>\n</ol>\n<a id=\"more\"></a>\n<p>—————————</p>\n<h2 id=\"数据绑定\"><a href=\"#数据绑定\" class=\"headerlink\" title=\"数据绑定\"></a>数据绑定</h2><p> 数据绑定可以分为3种：</p>\n<ol>\n<li>属性绑定和插值表达式 组件类 -&gt; 模板</li>\n<li>事件绑定：模板 -&gt; 组件类</li>\n<li>双向绑定： 模板 &lt;-&gt; 组件类</li>\n</ol>\n<h4 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"test()\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">     (click) 表示要进行的操作，当用户点击时就会执行组件类中的test()方法</div><div class=\"line\">`</div></pre></td></tr></table></figure>\n<h4 id=\"属性绑定和插值表达式\"><a href=\"#属性绑定和插值表达式\" class=\"headerlink\" title=\"属性绑定和插值表达式\"></a>属性绑定和插值表达式</h4><p>属性绑定和插值表达式是同一种东西，因为在解析代码的时候，插值表达式会转换为属性绑定,例如下面的两种写法是一样的</p>\n<pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;img src=<span class=\"string\">\"&#123;&#123;ingURL&#125;&#125;\"</span> /&gt;</div><div class=\"line\">&lt;img [src]=<span class=\"string\">\"imgUrl\"</span>&gt;</div></pre></td></tr></table></figure>\n</code></pre><p>属性绑定又分为HTML属性绑定和DOM绑定， 例如：</p>\n   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type =<span class=\"string\">\"text\"</span> value = <span class=\"string\">\"hello\"</span> (input) = <span class=\"string\">\"doInput($event)\"</span> &gt;</div><div class=\"line\"> doInput(event:any)&#123;</div><div class=\"line\">     <span class=\"built_in\">console</span>.log(event.target.value);</div><div class=\"line\">     <span class=\"built_in\">console</span>.log(event.target.getAttribute(<span class=\"string\">'value'</span>));</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>其中event.target.value 是获取的DOM 属性，是可变的，表示当前元素的状态。<br>而 event.target.getAttribute(“value”)获取的是HTML属性，是不可变的。只负责初始化HTML元素，不可改变。</p>\n<p><strong>注意：</strong></p>\n<ol>\n<li>有的DOM属性没有映射的HTML属性，同样有些HTML属性也没有映射的DOM属性。</li>\n<li>模板绑定的是DOM属性。</li>\n</ol>\n<h5 id=\"HTML属性绑定\"><a href=\"#HTML属性绑定\" class=\"headerlink\" title=\"HTML属性绑定\"></a>HTML属性绑定</h5><ol>\n<li>基本HTML属性绑定</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;td [attr.colspan]=<span class=\"string\">\"表达式\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<ol>\n<li>css绑定</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span> =<span class=\"string\">\"a\"</span> [<span class=\"attr\">class</span>]=<span class=\"string\">\"b\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> //b会完全替代a</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">class.a</span>]=<span class=\"string\">\"fn()\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>//fn()返回true、false,如果true则添加.a</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">ngClass</span>]=<span class=\"string\">\"&#123;a:isA,b:isB&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>// b会完全替代a</div></pre></td></tr></table></figure>\n<ol>\n<li><p>样式绑定</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;button [style.color]=<span class=\"string\">\"a?red:green\"</span>&gt;button&lt;<span class=\"regexp\">/button&gt;</span></div><div class=\"line\"><span class=\"regexp\">&lt;button [ngStyle] = \"&#123;'font-style':a?'red':'green'&#125;\"&gt;button&lt;/</span>button&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>双向绑定<br>双向绑定可以从组件类-&gt;模板，也可以模板-&gt;组件类，利用[(ngModel)]可以实现双向数据绑定</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"绑定\"><a href=\"#绑定\" class=\"headerlink\" title=\"绑定\"></a>绑定</h2><ol>\n<li>绑定表达式的指令ngBind<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-Bind</span> = <span class=\"string\">\"vm.info\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这样就把控制器中额vm.info的值绑定在div标签中，这样页面在网速不好的时候就不会出现angular 中&#123;&#123;&#125;&#125;的解析符，它隐藏了angular解析表达式的过程</p>\n<ol>\n<li>ngBindTemplate<br>ngBindTemplate 这个指令与上一个指令的不同之处在于它可以绑定多个表达式<pre><code><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-bind-template</span>=<span class=\"string\">\"&#123;&#123;vm.info&#125;&#125;&#123;&#123;vm.msg&#125;&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n</code></pre></li>\n</ol>","more":"<p>—————————</p>\n<h2 id=\"数据绑定\"><a href=\"#数据绑定\" class=\"headerlink\" title=\"数据绑定\"></a>数据绑定</h2><p> 数据绑定可以分为3种：</p>\n<ol>\n<li>属性绑定和插值表达式 组件类 -&gt; 模板</li>\n<li>事件绑定：模板 -&gt; 组件类</li>\n<li>双向绑定： 模板 &lt;-&gt; 组件类</li>\n</ol>\n<h4 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"test()\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">     (click) 表示要进行的操作，当用户点击时就会执行组件类中的test()方法</div><div class=\"line\">`</div></pre></td></tr></table></figure>\n<h4 id=\"属性绑定和插值表达式\"><a href=\"#属性绑定和插值表达式\" class=\"headerlink\" title=\"属性绑定和插值表达式\"></a>属性绑定和插值表达式</h4><p>属性绑定和插值表达式是同一种东西，因为在解析代码的时候，插值表达式会转换为属性绑定,例如下面的两种写法是一样的</p>\n<pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;img src=<span class=\"string\">\"&#123;&#123;ingURL&#125;&#125;\"</span> /&gt;</div><div class=\"line\">&lt;img [src]=<span class=\"string\">\"imgUrl\"</span>&gt;</div></pre></td></tr></table></figure>\n</code></pre><p>属性绑定又分为HTML属性绑定和DOM绑定， 例如：</p>\n   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type =<span class=\"string\">\"text\"</span> value = <span class=\"string\">\"hello\"</span> (input) = <span class=\"string\">\"doInput($event)\"</span> &gt;</div><div class=\"line\"> doInput(event:any)&#123;</div><div class=\"line\">     <span class=\"built_in\">console</span>.log(event.target.value);</div><div class=\"line\">     <span class=\"built_in\">console</span>.log(event.target.getAttribute(<span class=\"string\">'value'</span>));</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>其中event.target.value 是获取的DOM 属性，是可变的，表示当前元素的状态。<br>而 event.target.getAttribute(“value”)获取的是HTML属性，是不可变的。只负责初始化HTML元素，不可改变。</p>\n<p><strong>注意：</strong></p>\n<ol>\n<li>有的DOM属性没有映射的HTML属性，同样有些HTML属性也没有映射的DOM属性。</li>\n<li>模板绑定的是DOM属性。</li>\n</ol>\n<h5 id=\"HTML属性绑定\"><a href=\"#HTML属性绑定\" class=\"headerlink\" title=\"HTML属性绑定\"></a>HTML属性绑定</h5><ol>\n<li>基本HTML属性绑定</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;td [attr.colspan]=<span class=\"string\">\"表达式\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<ol>\n<li>css绑定</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span> =<span class=\"string\">\"a\"</span> [<span class=\"attr\">class</span>]=<span class=\"string\">\"b\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> //b会完全替代a</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">class.a</span>]=<span class=\"string\">\"fn()\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>//fn()返回true、false,如果true则添加.a</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">ngClass</span>]=<span class=\"string\">\"&#123;a:isA,b:isB&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>// b会完全替代a</div></pre></td></tr></table></figure>\n<ol>\n<li><p>样式绑定</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;button [style.color]=<span class=\"string\">\"a?red:green\"</span>&gt;button&lt;<span class=\"regexp\">/button&gt;</span></div><div class=\"line\"><span class=\"regexp\">&lt;button [ngStyle] = \"&#123;'font-style':a?'red':'green'&#125;\"&gt;button&lt;/</span>button&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>双向绑定<br>双向绑定可以从组件类-&gt;模板，也可以模板-&gt;组件类，利用[(ngModel)]可以实现双向数据绑定</p>\n</li>\n</ol>"},{"title":"css 小技巧","_content":"css 在开发中的填坑总结\n\n<!--more-->\n\n## 一、利用css 的content属性attr 抓取资料\n想要获取伪元素，可以用以下写法：\n\n```html\n<div data-msg=\"open\"></div>\ndiv:hover:after{\n    content:attr(data-mag);\n}\n```\n\n## 二、利用：valid 和：invalid来做表单即使校验\n- :required 伪类指定具有required 属性的表单元素\n- :valid 伪类指定一个通过匹配正确的所要求的表单元素\n- :invalid 伪类指定一个不匹配指定要求的表单元素\n\n## 三、writing-mode\n使用writing-mode 这个 CSS 属性实现容器的文字从上往下排列。 writing-mode: vertical-rl;\n\n## 四、实现鼠标悬浮内容自动撑开的过渡动画\n需要为一个列表添加个动画，容器的高度是不确定的，也就是高度为 auto，悬浮时候撑开内容有个过渡动画。而用 CSS3 实现的话，由于高度的不确定，而 transtion 是需要具体的数值，所以设置 height:auto 是无法实现效果的，可以通过 max-height 这个属性间接的实现这么个效果，css 样式是这样的：\n\n```html\n<ul>\n  <li>\n    <div class=\"hd\"> 列表1 </div>\n    <div class=\"bd\">列表内容<br>内容列表内容<br>内容列表内容<br>内容</div>\n  </li>\n  <li>\n    <div class=\"hd\"> 列表1 </div>\n    <div class=\"bd\">列表内容<br>内容列表内容<br>内容列表内容<br>内容</div>\n  </li>\n  <li>\n    <div class=\"hd\"> 列表1 </div>\n    <div class=\"bd\">列表内容<br>内容列表内容<br>内容列表内容<br>内容</div>\n  </li>\n</ul>\n.bd {\n  max-height:0;\n  overflow:hidden;\n  transition: all 1s ease-out;\n}\nli:hover .bd {\n  max-height: 600px;\n  transition-timing-function: ease-in;\n}\n```\n\n## 五、移动端web页面支持弹性滚动\n-webkit-overflow-scrolling: touch;\n\n\n## 六、美化浏览器自带的 radio ，checkbox 属性\n```html\n<div class=\"radio-beauty-container\">\n    <label>\n        <span class=\"radio-name\">前端工程师</span>\n        <input type=\"radio\" name=\"radioName\" id=\"radioName1\" hidden/>\n        <label for=\"radioName1\" class=\"radio-beauty\"></label>\n    </label>\n    <label>\n        <span class=\"radio-name\">后端工程师</span>\n        <input type=\"radio\" name=\"radioName\" id=\"radioName2\" hidden/>\n        <label for=\"radioName2\" class=\"radio-beauty\"></label>\n    </label>\n    <label>\n        <span class=\"radio-name\">全栈工程师</span>\n        <input type=\"radio\" name=\"radioName\" id=\"radioName3\" hidden/>\n        <label for=\"radioName3\" class=\"radio-beauty\"></label>\n    </label>\n</div>\n.radio-beauty-container {\n    font-size: 0;\n    $bgc: green;\n    %common {\n        padding: 2px;\n        background-color: $bgc;\n        background-clip: content-box;\n    }\n    .radio-name {\n        vertical-align: middle;\n        font-size: 16px;\n    }\n    .radio-beauty {\n        width: 18px;\n        height: 18px;\n        box-sizing: border-box;\n        display: inline-block;\n        border: 1px solid $bgc;\n        vertical-align: middle;\n        margin: 0 15px 0 3px;\n        border-radius: 50%;\n        &:hover {\n            box-shadow: 0 0 7px $bgc;\n            @extend %common;\n        }\n    }\n    input[type=\"radio\"]:checked+.radio-beauty {\n        @extend %common;\n    }\n}\n```\n\n## 七、改变 input 焦点光标的颜色\n```html\n<input value=\"This field uses a default caret.\" />\n<input class=\"custom\" value=\"I have a custom caret color!\" />\ninput {\n  caret-color: auto;\n  display: block;\n  margin-bottom: .5em;\n}\n\ninput.custom {\n  caret-color: red;\n}\n```\n\n## 八、rem 布局不再使用 JavaScript 设置\n现在移动端 css3 单位 vw ,wh 兼容性已经很不错了，在不需要兼容太低版本的安卓机情况下可以这样来：\n```html\nhtml{\nfont-size: 100vw / 750\n}\n```\n## 切角兄效果实现\n切角效果是时下非常流行的一种设计风格，并广泛运用于平面设计中，它最常见的形态就是把元素的一个或多个切成45°的切口，尤其是在最近几年，扁平化设计盖过拟物化设计后，这种切脚设计更为流行，例如下图就是通过切角实现的一个导航栏，在后面将详细论述起实现。\n\n![](https://camo.githubusercontent.com/b07ae76cf4ce21d62ef2a4ce97932d831e723c50/687474703a2f2f636f6e74656e742d6d616e6167656d656e742e62302e7570616979756e2e636f6d2f313437323739393439333539332e706e67)","source":"_posts/css-小技巧.md","raw":"---\ntitle: css 小技巧\n---\ncss 在开发中的填坑总结\n\n<!--more-->\n\n## 一、利用css 的content属性attr 抓取资料\n想要获取伪元素，可以用以下写法：\n\n```html\n<div data-msg=\"open\"></div>\ndiv:hover:after{\n    content:attr(data-mag);\n}\n```\n\n## 二、利用：valid 和：invalid来做表单即使校验\n- :required 伪类指定具有required 属性的表单元素\n- :valid 伪类指定一个通过匹配正确的所要求的表单元素\n- :invalid 伪类指定一个不匹配指定要求的表单元素\n\n## 三、writing-mode\n使用writing-mode 这个 CSS 属性实现容器的文字从上往下排列。 writing-mode: vertical-rl;\n\n## 四、实现鼠标悬浮内容自动撑开的过渡动画\n需要为一个列表添加个动画，容器的高度是不确定的，也就是高度为 auto，悬浮时候撑开内容有个过渡动画。而用 CSS3 实现的话，由于高度的不确定，而 transtion 是需要具体的数值，所以设置 height:auto 是无法实现效果的，可以通过 max-height 这个属性间接的实现这么个效果，css 样式是这样的：\n\n```html\n<ul>\n  <li>\n    <div class=\"hd\"> 列表1 </div>\n    <div class=\"bd\">列表内容<br>内容列表内容<br>内容列表内容<br>内容</div>\n  </li>\n  <li>\n    <div class=\"hd\"> 列表1 </div>\n    <div class=\"bd\">列表内容<br>内容列表内容<br>内容列表内容<br>内容</div>\n  </li>\n  <li>\n    <div class=\"hd\"> 列表1 </div>\n    <div class=\"bd\">列表内容<br>内容列表内容<br>内容列表内容<br>内容</div>\n  </li>\n</ul>\n.bd {\n  max-height:0;\n  overflow:hidden;\n  transition: all 1s ease-out;\n}\nli:hover .bd {\n  max-height: 600px;\n  transition-timing-function: ease-in;\n}\n```\n\n## 五、移动端web页面支持弹性滚动\n-webkit-overflow-scrolling: touch;\n\n\n## 六、美化浏览器自带的 radio ，checkbox 属性\n```html\n<div class=\"radio-beauty-container\">\n    <label>\n        <span class=\"radio-name\">前端工程师</span>\n        <input type=\"radio\" name=\"radioName\" id=\"radioName1\" hidden/>\n        <label for=\"radioName1\" class=\"radio-beauty\"></label>\n    </label>\n    <label>\n        <span class=\"radio-name\">后端工程师</span>\n        <input type=\"radio\" name=\"radioName\" id=\"radioName2\" hidden/>\n        <label for=\"radioName2\" class=\"radio-beauty\"></label>\n    </label>\n    <label>\n        <span class=\"radio-name\">全栈工程师</span>\n        <input type=\"radio\" name=\"radioName\" id=\"radioName3\" hidden/>\n        <label for=\"radioName3\" class=\"radio-beauty\"></label>\n    </label>\n</div>\n.radio-beauty-container {\n    font-size: 0;\n    $bgc: green;\n    %common {\n        padding: 2px;\n        background-color: $bgc;\n        background-clip: content-box;\n    }\n    .radio-name {\n        vertical-align: middle;\n        font-size: 16px;\n    }\n    .radio-beauty {\n        width: 18px;\n        height: 18px;\n        box-sizing: border-box;\n        display: inline-block;\n        border: 1px solid $bgc;\n        vertical-align: middle;\n        margin: 0 15px 0 3px;\n        border-radius: 50%;\n        &:hover {\n            box-shadow: 0 0 7px $bgc;\n            @extend %common;\n        }\n    }\n    input[type=\"radio\"]:checked+.radio-beauty {\n        @extend %common;\n    }\n}\n```\n\n## 七、改变 input 焦点光标的颜色\n```html\n<input value=\"This field uses a default caret.\" />\n<input class=\"custom\" value=\"I have a custom caret color!\" />\ninput {\n  caret-color: auto;\n  display: block;\n  margin-bottom: .5em;\n}\n\ninput.custom {\n  caret-color: red;\n}\n```\n\n## 八、rem 布局不再使用 JavaScript 设置\n现在移动端 css3 单位 vw ,wh 兼容性已经很不错了，在不需要兼容太低版本的安卓机情况下可以这样来：\n```html\nhtml{\nfont-size: 100vw / 750\n}\n```\n## 切角兄效果实现\n切角效果是时下非常流行的一种设计风格，并广泛运用于平面设计中，它最常见的形态就是把元素的一个或多个切成45°的切口，尤其是在最近几年，扁平化设计盖过拟物化设计后，这种切脚设计更为流行，例如下图就是通过切角实现的一个导航栏，在后面将详细论述起实现。\n\n![](https://camo.githubusercontent.com/b07ae76cf4ce21d62ef2a4ce97932d831e723c50/687474703a2f2f636f6e74656e742d6d616e6167656d656e742e62302e7570616979756e2e636f6d2f313437323739393439333539332e706e67)","slug":"css-小技巧","published":1,"date":"2017-09-26T03:14:44.931Z","updated":"2017-10-31T08:18:38.630Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9ffr3q7000b6cvr6qw9dizt","content":"<p>css 在开发中的填坑总结</p>\n<a id=\"more\"></a>\n<h2 id=\"一、利用css-的content属性attr-抓取资料\"><a href=\"#一、利用css-的content属性attr-抓取资料\" class=\"headerlink\" title=\"一、利用css 的content属性attr 抓取资料\"></a>一、利用css 的content属性attr 抓取资料</h2><p>想要获取伪元素，可以用以下写法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-msg</span>=<span class=\"string\">\"open\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">div:hover:after&#123;</div><div class=\"line\">    content:attr(data-mag);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"二、利用：valid-和：invalid来做表单即使校验\"><a href=\"#二、利用：valid-和：invalid来做表单即使校验\" class=\"headerlink\" title=\"二、利用：valid 和：invalid来做表单即使校验\"></a>二、利用：valid 和：invalid来做表单即使校验</h2><ul>\n<li>:required 伪类指定具有required 属性的表单元素</li>\n<li>:valid 伪类指定一个通过匹配正确的所要求的表单元素</li>\n<li>:invalid 伪类指定一个不匹配指定要求的表单元素</li>\n</ul>\n<h2 id=\"三、writing-mode\"><a href=\"#三、writing-mode\" class=\"headerlink\" title=\"三、writing-mode\"></a>三、writing-mode</h2><p>使用writing-mode 这个 CSS 属性实现容器的文字从上往下排列。 writing-mode: vertical-rl;</p>\n<h2 id=\"四、实现鼠标悬浮内容自动撑开的过渡动画\"><a href=\"#四、实现鼠标悬浮内容自动撑开的过渡动画\" class=\"headerlink\" title=\"四、实现鼠标悬浮内容自动撑开的过渡动画\"></a>四、实现鼠标悬浮内容自动撑开的过渡动画</h2><p>需要为一个列表添加个动画，容器的高度是不确定的，也就是高度为 auto，悬浮时候撑开内容有个过渡动画。而用 CSS3 实现的话，由于高度的不确定，而 transtion 是需要具体的数值，所以设置 height:auto 是无法实现效果的，可以通过 max-height 这个属性间接的实现这么个效果，css 样式是这样的：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"hd\"</span>&gt;</span> 列表1 <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bd\"</span>&gt;</span>列表内容<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>内容列表内容<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>内容列表内容<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>内容<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"hd\"</span>&gt;</span> 列表1 <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bd\"</span>&gt;</span>列表内容<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>内容列表内容<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>内容列表内容<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>内容<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"hd\"</span>&gt;</span> 列表1 <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bd\"</span>&gt;</span>列表内容<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>内容列表内容<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>内容列表内容<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>内容<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">.bd &#123;</div><div class=\"line\">  max-height:0;</div><div class=\"line\">  overflow:hidden;</div><div class=\"line\">  transition: all 1s ease-out;</div><div class=\"line\">&#125;</div><div class=\"line\">li:hover .bd &#123;</div><div class=\"line\">  max-height: 600px;</div><div class=\"line\">  transition-timing-function: ease-in;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"五、移动端web页面支持弹性滚动\"><a href=\"#五、移动端web页面支持弹性滚动\" class=\"headerlink\" title=\"五、移动端web页面支持弹性滚动\"></a>五、移动端web页面支持弹性滚动</h2><p>-webkit-overflow-scrolling: touch;</p>\n<h2 id=\"六、美化浏览器自带的-radio-，checkbox-属性\"><a href=\"#六、美化浏览器自带的-radio-，checkbox-属性\" class=\"headerlink\" title=\"六、美化浏览器自带的 radio ，checkbox 属性\"></a>六、美化浏览器自带的 radio ，checkbox 属性</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"radio-beauty-container\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"radio-name\"</span>&gt;</span>前端工程师<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"radioName\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"radioName1\"</span> <span class=\"attr\">hidden</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"radioName1\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"radio-beauty\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"radio-name\"</span>&gt;</span>后端工程师<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"radioName\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"radioName2\"</span> <span class=\"attr\">hidden</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"radioName2\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"radio-beauty\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"radio-name\"</span>&gt;</span>全栈工程师<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"radioName\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"radioName3\"</span> <span class=\"attr\">hidden</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"radioName3\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"radio-beauty\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">.radio-beauty-container &#123;</div><div class=\"line\">    font-size: 0;</div><div class=\"line\">    $bgc: green;</div><div class=\"line\">    %common &#123;</div><div class=\"line\">        padding: 2px;</div><div class=\"line\">        background-color: $bgc;</div><div class=\"line\">        background-clip: content-box;</div><div class=\"line\">    &#125;</div><div class=\"line\">    .radio-name &#123;</div><div class=\"line\">        vertical-align: middle;</div><div class=\"line\">        font-size: 16px;</div><div class=\"line\">    &#125;</div><div class=\"line\">    .radio-beauty &#123;</div><div class=\"line\">        width: 18px;</div><div class=\"line\">        height: 18px;</div><div class=\"line\">        box-sizing: border-box;</div><div class=\"line\">        display: inline-block;</div><div class=\"line\">        border: 1px solid $bgc;</div><div class=\"line\">        vertical-align: middle;</div><div class=\"line\">        margin: 0 15px 0 3px;</div><div class=\"line\">        border-radius: 50%;</div><div class=\"line\">        &amp;:hover &#123;</div><div class=\"line\">            box-shadow: 0 0 7px $bgc;</div><div class=\"line\">            @extend %common;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    input[type=\"radio\"]:checked+.radio-beauty &#123;</div><div class=\"line\">        @extend %common;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"七、改变-input-焦点光标的颜色\"><a href=\"#七、改变-input-焦点光标的颜色\" class=\"headerlink\" title=\"七、改变 input 焦点光标的颜色\"></a>七、改变 input 焦点光标的颜色</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">\"This field uses a default caret.\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"custom\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"I have a custom caret color!\"</span> /&gt;</span></div><div class=\"line\">input &#123;</div><div class=\"line\">  caret-color: auto;</div><div class=\"line\">  display: block;</div><div class=\"line\">  margin-bottom: .5em;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">input.custom &#123;</div><div class=\"line\">  caret-color: red;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"八、rem-布局不再使用-JavaScript-设置\"><a href=\"#八、rem-布局不再使用-JavaScript-设置\" class=\"headerlink\" title=\"八、rem 布局不再使用 JavaScript 设置\"></a>八、rem 布局不再使用 JavaScript 设置</h2><p>现在移动端 css3 单位 vw ,wh 兼容性已经很不错了，在不需要兼容太低版本的安卓机情况下可以这样来：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">html&#123;</div><div class=\"line\">font-size: 100vw / 750</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"切角兄效果实现\"><a href=\"#切角兄效果实现\" class=\"headerlink\" title=\"切角兄效果实现\"></a>切角兄效果实现</h2><p>切角效果是时下非常流行的一种设计风格，并广泛运用于平面设计中，它最常见的形态就是把元素的一个或多个切成45°的切口，尤其是在最近几年，扁平化设计盖过拟物化设计后，这种切脚设计更为流行，例如下图就是通过切角实现的一个导航栏，在后面将详细论述起实现。</p>\n<p><img src=\"https://camo.githubusercontent.com/b07ae76cf4ce21d62ef2a4ce97932d831e723c50/687474703a2f2f636f6e74656e742d6d616e6167656d656e742e62302e7570616979756e2e636f6d2f313437323739393439333539332e706e67\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>css 在开发中的填坑总结</p>","more":"<h2 id=\"一、利用css-的content属性attr-抓取资料\"><a href=\"#一、利用css-的content属性attr-抓取资料\" class=\"headerlink\" title=\"一、利用css 的content属性attr 抓取资料\"></a>一、利用css 的content属性attr 抓取资料</h2><p>想要获取伪元素，可以用以下写法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-msg</span>=<span class=\"string\">\"open\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">div:hover:after&#123;</div><div class=\"line\">    content:attr(data-mag);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"二、利用：valid-和：invalid来做表单即使校验\"><a href=\"#二、利用：valid-和：invalid来做表单即使校验\" class=\"headerlink\" title=\"二、利用：valid 和：invalid来做表单即使校验\"></a>二、利用：valid 和：invalid来做表单即使校验</h2><ul>\n<li>:required 伪类指定具有required 属性的表单元素</li>\n<li>:valid 伪类指定一个通过匹配正确的所要求的表单元素</li>\n<li>:invalid 伪类指定一个不匹配指定要求的表单元素</li>\n</ul>\n<h2 id=\"三、writing-mode\"><a href=\"#三、writing-mode\" class=\"headerlink\" title=\"三、writing-mode\"></a>三、writing-mode</h2><p>使用writing-mode 这个 CSS 属性实现容器的文字从上往下排列。 writing-mode: vertical-rl;</p>\n<h2 id=\"四、实现鼠标悬浮内容自动撑开的过渡动画\"><a href=\"#四、实现鼠标悬浮内容自动撑开的过渡动画\" class=\"headerlink\" title=\"四、实现鼠标悬浮内容自动撑开的过渡动画\"></a>四、实现鼠标悬浮内容自动撑开的过渡动画</h2><p>需要为一个列表添加个动画，容器的高度是不确定的，也就是高度为 auto，悬浮时候撑开内容有个过渡动画。而用 CSS3 实现的话，由于高度的不确定，而 transtion 是需要具体的数值，所以设置 height:auto 是无法实现效果的，可以通过 max-height 这个属性间接的实现这么个效果，css 样式是这样的：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"hd\"</span>&gt;</span> 列表1 <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bd\"</span>&gt;</span>列表内容<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>内容列表内容<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>内容列表内容<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>内容<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"hd\"</span>&gt;</span> 列表1 <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bd\"</span>&gt;</span>列表内容<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>内容列表内容<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>内容列表内容<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>内容<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"hd\"</span>&gt;</span> 列表1 <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bd\"</span>&gt;</span>列表内容<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>内容列表内容<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>内容列表内容<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>内容<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">.bd &#123;</div><div class=\"line\">  max-height:0;</div><div class=\"line\">  overflow:hidden;</div><div class=\"line\">  transition: all 1s ease-out;</div><div class=\"line\">&#125;</div><div class=\"line\">li:hover .bd &#123;</div><div class=\"line\">  max-height: 600px;</div><div class=\"line\">  transition-timing-function: ease-in;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"五、移动端web页面支持弹性滚动\"><a href=\"#五、移动端web页面支持弹性滚动\" class=\"headerlink\" title=\"五、移动端web页面支持弹性滚动\"></a>五、移动端web页面支持弹性滚动</h2><p>-webkit-overflow-scrolling: touch;</p>\n<h2 id=\"六、美化浏览器自带的-radio-，checkbox-属性\"><a href=\"#六、美化浏览器自带的-radio-，checkbox-属性\" class=\"headerlink\" title=\"六、美化浏览器自带的 radio ，checkbox 属性\"></a>六、美化浏览器自带的 radio ，checkbox 属性</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"radio-beauty-container\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"radio-name\"</span>&gt;</span>前端工程师<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"radioName\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"radioName1\"</span> <span class=\"attr\">hidden</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"radioName1\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"radio-beauty\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"radio-name\"</span>&gt;</span>后端工程师<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"radioName\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"radioName2\"</span> <span class=\"attr\">hidden</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"radioName2\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"radio-beauty\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"radio-name\"</span>&gt;</span>全栈工程师<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"radioName\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"radioName3\"</span> <span class=\"attr\">hidden</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"radioName3\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"radio-beauty\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">.radio-beauty-container &#123;</div><div class=\"line\">    font-size: 0;</div><div class=\"line\">    $bgc: green;</div><div class=\"line\">    %common &#123;</div><div class=\"line\">        padding: 2px;</div><div class=\"line\">        background-color: $bgc;</div><div class=\"line\">        background-clip: content-box;</div><div class=\"line\">    &#125;</div><div class=\"line\">    .radio-name &#123;</div><div class=\"line\">        vertical-align: middle;</div><div class=\"line\">        font-size: 16px;</div><div class=\"line\">    &#125;</div><div class=\"line\">    .radio-beauty &#123;</div><div class=\"line\">        width: 18px;</div><div class=\"line\">        height: 18px;</div><div class=\"line\">        box-sizing: border-box;</div><div class=\"line\">        display: inline-block;</div><div class=\"line\">        border: 1px solid $bgc;</div><div class=\"line\">        vertical-align: middle;</div><div class=\"line\">        margin: 0 15px 0 3px;</div><div class=\"line\">        border-radius: 50%;</div><div class=\"line\">        &amp;:hover &#123;</div><div class=\"line\">            box-shadow: 0 0 7px $bgc;</div><div class=\"line\">            @extend %common;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    input[type=\"radio\"]:checked+.radio-beauty &#123;</div><div class=\"line\">        @extend %common;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"七、改变-input-焦点光标的颜色\"><a href=\"#七、改变-input-焦点光标的颜色\" class=\"headerlink\" title=\"七、改变 input 焦点光标的颜色\"></a>七、改变 input 焦点光标的颜色</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">\"This field uses a default caret.\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"custom\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"I have a custom caret color!\"</span> /&gt;</span></div><div class=\"line\">input &#123;</div><div class=\"line\">  caret-color: auto;</div><div class=\"line\">  display: block;</div><div class=\"line\">  margin-bottom: .5em;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">input.custom &#123;</div><div class=\"line\">  caret-color: red;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"八、rem-布局不再使用-JavaScript-设置\"><a href=\"#八、rem-布局不再使用-JavaScript-设置\" class=\"headerlink\" title=\"八、rem 布局不再使用 JavaScript 设置\"></a>八、rem 布局不再使用 JavaScript 设置</h2><p>现在移动端 css3 单位 vw ,wh 兼容性已经很不错了，在不需要兼容太低版本的安卓机情况下可以这样来：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">html&#123;</div><div class=\"line\">font-size: 100vw / 750</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"切角兄效果实现\"><a href=\"#切角兄效果实现\" class=\"headerlink\" title=\"切角兄效果实现\"></a>切角兄效果实现</h2><p>切角效果是时下非常流行的一种设计风格，并广泛运用于平面设计中，它最常见的形态就是把元素的一个或多个切成45°的切口，尤其是在最近几年，扁平化设计盖过拟物化设计后，这种切脚设计更为流行，例如下图就是通过切角实现的一个导航栏，在后面将详细论述起实现。</p>\n<p><img src=\"https://camo.githubusercontent.com/b07ae76cf4ce21d62ef2a4ce97932d831e723c50/687474703a2f2f636f6e74656e742d6d616e6167656d656e742e62302e7570616979756e2e636f6d2f313437323739393439333539332e706e67\" alt=\"\"></p>"},{"title":"localstorage","_content":"HTML5中 Web Storage 的出现，主要是为了弥补使用 Cookie 作为本地存储的不足。**Cookie 存储的数据量非常小，而且数据会自动携带到请求头里，但服务器端可能并不关心这些数据，所以会造成带宽的浪费**。\n\nweb storage 提供了两个存储对象：localStorage和sessionStorage。\n<!--more-->\n\n## localStorage和sessionStorage\n\nsessionStorage存储的数据仅在本次会话有用，会话结束之后会自动失效，而且数据仅在当前窗口有效，同一源下新窗口也访问不到其他窗口基于sessionStorage存储的数据。也是由这些特性导致sessionStorage的使用场景较少。\n\nlocalStorage可以永久存储，而且同源下数据多窗口可以共享。\n\n## localStorage的基本使用\n有两点需要注意一下。在 setItem 时，可能会达到大小限制，最好加上错误捕捉 ：\n\n```javascript\ntry {  \n  localStorage.setItem(key, value);\n} catch(e) {\n  if (isQuotaExceeded(e)) {\n    // Storage full, maybe notify user or do some clean-up\n  }\n}\n\nfunction isQuotaExceeded(e) {  \n  var quotaExceeded = false;\n  if (e) {\n    if (e.code) {\n      switch (e.code) {\n        case 22:\n          quotaExceeded = true;\n          break;\n        case 1014:\n          // Firefox\n          if (e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {\n            quotaExceeded = true;\n          }\n          break;\n      }\n    } else if (e.number === -2147024882) {\n      // Internet Explorer 8\n      quotaExceeded = true;\n    }\n  }\n  return quotaExceeded;\n\n  ```\n  另外在存储容量快满时，会造成 getItem 性能急剧下降\n\n  \n","source":"_posts/localstorage.md","raw":"---\ntitle: localstorage\n---\nHTML5中 Web Storage 的出现，主要是为了弥补使用 Cookie 作为本地存储的不足。**Cookie 存储的数据量非常小，而且数据会自动携带到请求头里，但服务器端可能并不关心这些数据，所以会造成带宽的浪费**。\n\nweb storage 提供了两个存储对象：localStorage和sessionStorage。\n<!--more-->\n\n## localStorage和sessionStorage\n\nsessionStorage存储的数据仅在本次会话有用，会话结束之后会自动失效，而且数据仅在当前窗口有效，同一源下新窗口也访问不到其他窗口基于sessionStorage存储的数据。也是由这些特性导致sessionStorage的使用场景较少。\n\nlocalStorage可以永久存储，而且同源下数据多窗口可以共享。\n\n## localStorage的基本使用\n有两点需要注意一下。在 setItem 时，可能会达到大小限制，最好加上错误捕捉 ：\n\n```javascript\ntry {  \n  localStorage.setItem(key, value);\n} catch(e) {\n  if (isQuotaExceeded(e)) {\n    // Storage full, maybe notify user or do some clean-up\n  }\n}\n\nfunction isQuotaExceeded(e) {  \n  var quotaExceeded = false;\n  if (e) {\n    if (e.code) {\n      switch (e.code) {\n        case 22:\n          quotaExceeded = true;\n          break;\n        case 1014:\n          // Firefox\n          if (e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {\n            quotaExceeded = true;\n          }\n          break;\n      }\n    } else if (e.number === -2147024882) {\n      // Internet Explorer 8\n      quotaExceeded = true;\n    }\n  }\n  return quotaExceeded;\n\n  ```\n  另外在存储容量快满时，会造成 getItem 性能急剧下降\n\n  \n","slug":"localstorage","published":1,"date":"2017-10-10T02:26:31.952Z","updated":"2017-10-31T02:11:40.188Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9ffr3w0000d6cvrltjz7rlw","content":"<p>HTML5中 Web Storage 的出现，主要是为了弥补使用 Cookie 作为本地存储的不足。<strong>Cookie 存储的数据量非常小，而且数据会自动携带到请求头里，但服务器端可能并不关心这些数据，所以会造成带宽的浪费</strong>。</p>\n<p>web storage 提供了两个存储对象：localStorage和sessionStorage。<br><a id=\"more\"></a></p>\n<h2 id=\"localStorage和sessionStorage\"><a href=\"#localStorage和sessionStorage\" class=\"headerlink\" title=\"localStorage和sessionStorage\"></a>localStorage和sessionStorage</h2><p>sessionStorage存储的数据仅在本次会话有用，会话结束之后会自动失效，而且数据仅在当前窗口有效，同一源下新窗口也访问不到其他窗口基于sessionStorage存储的数据。也是由这些特性导致sessionStorage的使用场景较少。</p>\n<p>localStorage可以永久存储，而且同源下数据多窗口可以共享。</p>\n<h2 id=\"localStorage的基本使用\"><a href=\"#localStorage的基本使用\" class=\"headerlink\" title=\"localStorage的基本使用\"></a>localStorage的基本使用</h2><p>有两点需要注意一下。在 setItem 时，可能会达到大小限制，最好加上错误捕捉 ：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">  localStorage.setItem(key, value);</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span>(e) &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (isQuotaExceeded(e)) &#123;</div><div class=\"line\">    <span class=\"comment\">// Storage full, maybe notify user or do some clean-up</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isQuotaExceeded</span>(<span class=\"params\">e</span>) </span>&#123;  </div><div class=\"line\">  <span class=\"keyword\">var</span> quotaExceeded = <span class=\"literal\">false</span>;</div><div class=\"line\">  <span class=\"keyword\">if</span> (e) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (e.code) &#123;</div><div class=\"line\">      <span class=\"keyword\">switch</span> (e.code) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">22</span>:</div><div class=\"line\">          quotaExceeded = <span class=\"literal\">true</span>;</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1014</span>:</div><div class=\"line\">          <span class=\"comment\">// Firefox</span></div><div class=\"line\">          <span class=\"keyword\">if</span> (e.name === <span class=\"string\">'NS_ERROR_DOM_QUOTA_REACHED'</span>) &#123;</div><div class=\"line\">            quotaExceeded = <span class=\"literal\">true</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e.number === <span class=\"number\">-2147024882</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">// Internet Explorer 8</span></div><div class=\"line\">      quotaExceeded = <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> quotaExceeded;</div></pre></td></tr></table></figure>\n<p>  另外在存储容量快满时，会造成 getItem 性能急剧下降</p>\n","site":{"data":{}},"excerpt":"<p>HTML5中 Web Storage 的出现，主要是为了弥补使用 Cookie 作为本地存储的不足。<strong>Cookie 存储的数据量非常小，而且数据会自动携带到请求头里，但服务器端可能并不关心这些数据，所以会造成带宽的浪费</strong>。</p>\n<p>web storage 提供了两个存储对象：localStorage和sessionStorage。<br>","more":"</p>\n<h2 id=\"localStorage和sessionStorage\"><a href=\"#localStorage和sessionStorage\" class=\"headerlink\" title=\"localStorage和sessionStorage\"></a>localStorage和sessionStorage</h2><p>sessionStorage存储的数据仅在本次会话有用，会话结束之后会自动失效，而且数据仅在当前窗口有效，同一源下新窗口也访问不到其他窗口基于sessionStorage存储的数据。也是由这些特性导致sessionStorage的使用场景较少。</p>\n<p>localStorage可以永久存储，而且同源下数据多窗口可以共享。</p>\n<h2 id=\"localStorage的基本使用\"><a href=\"#localStorage的基本使用\" class=\"headerlink\" title=\"localStorage的基本使用\"></a>localStorage的基本使用</h2><p>有两点需要注意一下。在 setItem 时，可能会达到大小限制，最好加上错误捕捉 ：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">  localStorage.setItem(key, value);</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span>(e) &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (isQuotaExceeded(e)) &#123;</div><div class=\"line\">    <span class=\"comment\">// Storage full, maybe notify user or do some clean-up</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isQuotaExceeded</span>(<span class=\"params\">e</span>) </span>&#123;  </div><div class=\"line\">  <span class=\"keyword\">var</span> quotaExceeded = <span class=\"literal\">false</span>;</div><div class=\"line\">  <span class=\"keyword\">if</span> (e) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (e.code) &#123;</div><div class=\"line\">      <span class=\"keyword\">switch</span> (e.code) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">22</span>:</div><div class=\"line\">          quotaExceeded = <span class=\"literal\">true</span>;</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1014</span>:</div><div class=\"line\">          <span class=\"comment\">// Firefox</span></div><div class=\"line\">          <span class=\"keyword\">if</span> (e.name === <span class=\"string\">'NS_ERROR_DOM_QUOTA_REACHED'</span>) &#123;</div><div class=\"line\">            quotaExceeded = <span class=\"literal\">true</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e.number === <span class=\"number\">-2147024882</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">// Internet Explorer 8</span></div><div class=\"line\">      quotaExceeded = <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> quotaExceeded;</div></pre></td></tr></table></figure>\n<p>  另外在存储容量快满时，会造成 getItem 性能急剧下降</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj9ffr3pz00076cvr1bje1ew1","category_id":"cj9ffr3q400096cvr30aiyt7l","_id":"cj9ffr3q8000c6cvrpvcuhe88"}],"PostTag":[],"Tag":[]}}